{"version":3,"sources":["editor/monteux/monteux.js","editor/utilities/iframe-resizer.js","chartwrapper/chart-utilities.js","chartwrapper/chartside-utilities/text-wrapping.js","chartwrapper/background/background.js","chartwrapper/background/numberbox.js","chartwrapper/background/panels.js","chartwrapper/background/panel-utilities.js","chartwrapper/legend/legendset.js","chartwrapper/legend/legends.js","chartwrapper/legend/legend-utilities.js","chartwrapper/axes/axis-utilities.js","chartwrapper/scatterchart/scatterzkey.js","chartwrapper/axes/broken-scale.js","chartwrapper/axes/configuration/xaxis-linear-config.js","chartwrapper/axes/configuration/yaxis-ordinal-config.js","chartwrapper/axes/xaxis-header.js","chartwrapper/axes/live/xaxis-linear.js","chartwrapper/axes/tests/xaxis-linear-test.js","chartwrapper/axes/live/yaxis-ordinal.js","chartwrapper/axes/tests/yaxis-ordinal-test.js","chartwrapper/barchart/barseries.js","chartwrapper/blobs/blob-utilities.js","chartwrapper/blobs/yaxis-blobs.js","chartwrapper/barchart/barchart.js","chartwrapper/axes/granularity.js","chartwrapper/chartside-utilities/fix-year.js","chartwrapper/axes/xaxis-filters.js","chartwrapper/axes/configuration/xaxis-ordinal-config.js","chartwrapper/axes/configuration/yaxis-linear-config.js","chartwrapper/axes/live/xaxis-ordinal.js","chartwrapper/axes/tests/xaxis-ordinal-test.js","chartwrapper/axes/live/yaxis-linear.js","chartwrapper/axes/tests/yaxis-linear-test.js","chartwrapper/columnchart/columnseries.js","chartwrapper/blobs/xaxis-blobs.js","chartwrapper/columnchart/columnchart.js","chartwrapper/thermochart/thermo-utilities.js","chartwrapper/thermochart/thermoverticalseries.js","chartwrapper/thermochart/thermoverticalchart.js","chartwrapper/thermochart/thermohorizontalseries.js","chartwrapper/thermochart/thermohorizontalchart.js","chartwrapper/linechart/lineseries.js","chartwrapper/linechart/linechart.js","chartwrapper/mixedchart/mixedchart.js","chartwrapper/scatterchart/scattertrendline.js","chartwrapper/scatterchart/scatterseries.js","chartwrapper/scatterchart/scatterchart.js","chartwrapper/piechart/pieseries.js","chartwrapper/piechart/piechart.js","chartwrapper/table/tabletext.js","chartwrapper/table/tablerules.js","chartwrapper/table/tablefills.js","chartwrapper/table/table.js","chartwrapper/index.js","chartwrapper/font/econsans-reg.js","chartwrapper/font/econsans-bol.js","chartwrapper/font/econsans-lig.js","chartwrapper/font/econsans-bol-ita.js","chartwrapper/font/econsanscnd-lig.js","chartwrapper/font/econsanscnd-lig-ita.js","chartwrapper/font/econsanscnd-reg.js","chartwrapper/font/econsanscnd-reg-ita.js","chartwrapper/font/econsanscnd-med.js","chartwrapper/font/econsanscnd-med-ita.js","chartwrapper/font/milo-primary-bd.js","chartwrapper/font/milo-primary-md.js","chartwrapper/font/milo-primary-rg-it.js","chartwrapper/font/milo-primary-rg.js","editor/assets/globalAssets.js","editor/utilities/editor-utilities.js","editor/utilities/other-utilities.js","editor/utilities/factor-utilities.js","editor/utilities/advanced-fold-utilities.js","editor/utilities/scale-callback-utilities.js","editor/utilities/editor-config-default-utilities.js","editor/utilities/log-utilities.js","editor/utilities/editor-minmax-utilities.js","editor/utilities/filename.js","editor/utilities/series-preferences.js","editor/utilities/party-utilities.js","editor/utilities/editor-config-utilities.js","editor/utilities/scale-config-utilities.js","editor/monteux/monteux-export.js","editor/icons/expand-more.js","editor/size-and-preset/preset.js","editor/size-and-preset/size.js","editor/size-and-preset/size-and-preset.js","editor/panels/panels.js","editor/panels/alerts.js","editor/icons/economist-icon.js","editor/icons/eiu-icon.js","editor/icons/refinitiv-icon.js","editor/strings/strings.js","editor/icons/chart-column.js","editor/icons/chart-bar.js","editor/icons/chart-line.js","editor/icons/chart-table.js","editor/icons/chart-pointline.js","editor/icons/chart-stepline.js","editor/icons/chart-thermo-horizontal.js","editor/icons/chart-thermo-vertical.js","editor/icons/chart-scatter.js","editor/icons/chart-sized-scatter.js","editor/icons/chart-pie.js","editor/icons/chart-half-pie.js","editor/folds/bodyparts/chart-type.js","editor/folds/bodyparts/blobs.js","editor/folds/bodyparts/legend.js","editor/folds/design-fold-body.js","editor/folds/bodyparts/scale.js","editor/folds/bodyparts/invert.js","editor/folds/bodyparts/double-scale.js","editor/folds/bodyparts/indexed.js","editor/folds/bodyparts/log.js","editor/folds/bodyparts/share-scale.js","editor/folds/scales-fold-body.js","editor/utilities/payload-utilities/datecheck-utilities.js","editor/utilities/payload-utilities/duplicate-utilities.js","editor/utilities/payload-utilities/category-utilities.js","editor/utilities/payload-utilities/rawdata-utilities.js","editor/folds/bodyparts/data-temp.js","editor/folds/bodyparts/axis-headers.js","editor/folds/bodyparts/numberbox-editor.js","editor/folds/advanced-fold-body.js","editor/folds/folds-wrapper.js","editor/icons/baseline-photo-icon.js","editor/icons/baseline-camera-icon.js","editor/icons/insert-chart-icon.js","export/export.js","editor/editor.js","editor/footer/footer.js","editor/monteux/monteux-import.js","editor/utilities/payload-utilities/presets-utilities.js","App.js","serviceWorker.js","index.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","define","undefined","postMessage","message","parent","from","payload","listenForMessages","cb","keyword","eventMethod","window","addEventListener","eventer","messageEvent","e","key","data","apply","exports","module","econOnResize","className","margin","height","getComputedStyle","contentElement","document","querySelector","setTimeout","parseInt","getPropertyValue","split","getBoundingClientRect","type","origin","location","href","getColourMap","headers","colours","d3","ordinal","domain","range","getTextID","id","fill","justification","leading","idStr","concat","replace","getColour","ddd","isFill","colName","stroke","colDef","colVal","getKeysAndIds","cIndex","mainGroupKey","xAxisKey","yAxisKey","blobsKey","barSeriesKey","colummnSeriesKey","thermoSpindlesId","thermoSeriesKey","lineSeriesKey","scatterSeriesKey","pieSeriesKey","zeroId","contentId","mapSeriesData","config","isPie","colourMap","colourLookup","pieColours","catsColourMap","chartData","factor","catStr","catHead","map","header","iii","objA","val","Number","lookUp","category","fillName","strokeName","seriesNo","jjj","length","accum","splice","getSeriesBaseVals","pointCount","baseVals","aPt","push","negBase","posBase","makeBarColSeriesGroupBinding","mainSeriesGroup","mappedData","duration","chartType","groupBinding","selectAll","enter","append","attr","exit","transition","delay","remove","addSteplineSpur","line","spur","elem","getElementById","pathStr","getAttribute","pathArray","paLen","ultPt","penUltPt","join","setAttribute","getSeriesClusterWidthAndPadding","isBars","lookup","series","column","bound","innerBox","width","bar","pCountMinusOne","Math","max","defaultPadding","gap","clusterWidth","absoluteMinWidth","minWidth","maxWidth","narrowGap","padding","wrapAllTextElements","textElementArray","textWrapConfig","globalThis","afterTextWrap","debugFlag","lineCountArray","each","textElement","wrapWidth","wWidth","forceTurn","forcePx","wordArray","myArray","result","threeNbSpaces","nbsp","String","fromCharCode","makeThreeNbSpaces","word","includes","splitWord","wLen","wNo","el","trim","splitArrayAtReturnTags","text","lineArray","lineCount","forEach","lineSoFar","tNode","node","originalContent","innerHTML","testContent","turnLine","getBBox","lineBreaks","shift","joinedArray","tSpanReadyArray","spannedArray","tagRx","iOn","lineNo","thisLine","match","content","italics","newline","unpickTaggedLine","makeTspanReadyArray","call","tSpanify","wrapOneTextElement","this","teX","fontFamily","style","x","xPos","font-family","fam","teY","y","yPos","len","matches","Array","matchAll","posA","myMatch","posB","index","substring","getTextAndTspansMove","d3El","arguments","tweak","moveTextAndTspans","tElement","moveBy","thisSpan","spanY","SilverBackground","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","innerBoxBounds","stringClasses","title","class","subtitle","subsubtitle","source","footnote","drawBackground","updateBackground","updateBackgroundStrings","callNumberBox","nextProps","nbSpaces","repeat","fSymbols","sNo","sym","symPos","indexOf","newLine","slice","thisSep","strings","strList","keys","str","sName","assign","footer","insertFootnoteSpaces","filter","strOK","display","backArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","background","shapes","Symbol","iterator","next","done","shape","value","err","return","chartHeight","outerbox","dimensions","chartWidth","metadata","boundShape","other","adjustable","percent","parseFloat","ChartUtils","anchor","_this2","stringArray","restateStrings","wrappingWidth","margins","left","right","boundText","getTextAnchor","letter-spacing","spacing","font-size","text-anchor","TextWrapping","adjustBackgroundStringPositions","topMargin","turnExtra","titleClass","titleString","tLeading","subtitleClass","subtitleString","empty","stLeading","stExtra","bottomMargin","sstClass","sstString","sstLeading","sstExtra","aboveSource","adjustSourceAndFootnoteStacked","adjustSourceAndFootnoteLevel","bGrd","mLeft","mRight","globalInnerBox","onGetGlobalInnerBox","sourceString","sourceExists","footnoteString","footnoteExists","sourceMove","footnoteMove","footnoteYPos","sourceYPos","keepBottomMargin","keepBottomMarginOffset","bottomMove","basesaligned","wrapoptions","basealigned","moveSourceAndFootnote","min","baselineYPos","sourceGap","yMove","moveY","myX","bgName","backgroundGroup","select","nbData","nbVal","numberBox","valIsGood","toString","isNaN","nbGroup","nbRect","nbNumber","nbProps","rectfill","rectwidth","rectheight","updateRect","emVal","textfill","font","fontsize","updateNumber","NumberBox","react_default","a","createElement","Component","SilverPanels","panelArray","drawPanels","updatePanels","innerbox","pTotal","topPadding","belowTitleClusterBaseline","toPanelFlash","opX","colLen","paddingX","pGapX","narrow","narrowThreshold","wideTwo","wideMoreThanTwo","pWidth","pGap","pHeight","rowLen","pConfig","panels","total","rows","originalPadding","panelAttributes","getHorizontalPanelGap","between","pGapY","rectProps","rect","getPanelWidth","pHeadAttribs","panelheader","pCount","rNo","cNo","pObj","rectX","rectY","rectID","pStr","textX","textY","hBaseline","pGrpBinding","rHeight","pHeadText","headProps","panelsGroup","panelGroupEnter","iBox","bindAndAppend","onGetInnerBoxes","dealWithNoPanels","adjustGlobalInnerBoxForBelowTitlePadding","getPanelHeight","buildInitialPanelArray","buildInnerBoxArray","panelGroupBinding","wtConfig","panelHeaderText","updateText","afterPanelHeaderWrap","adjustInnerBoxAndReturn","pProps","innerBoxes","JSON","parse","stringify","pLinesArray","thisCount","alignChartsInPanels","iBoxes","maxArray","ibCount","ibx","thisBox","PanelUtils","lineCountFlatArray","oneRowArray","rowMax","toConsumableArray","lTweak","SilverLegendSet","handleLegendSet","hasLegend","updateLegendHeader","updateLegend","clearOutLegendSet","obj","onGetInnerBox","headGroup","keyGroup","hString","mainHeader","headArray","lPrefs","prefs","columns","betweenKeys","belowHeader","boundHead","headerPrefs","tID","size","legendGrp","thisLegend","keyStyle","r","isY2","ypos","verticalBase","hasHeader","textHeight","keyHeight","keyWidth","drawLeftToRight","floor","colTotal","colMax","isX2","colWidth","seriesBinding","lineConfig","x1","getLineXpos","x2","y1","getLineYpos","y2","colour","stroke-width","def","styles","sWid","rectConfig","rID","dotConfig","_this3","colCount","cy","cx","textPrefs","textConfig","_this4","tPrefs","textFill","textGap","col","afterLegendWrap","lSetCount","rowCount","ceil","rowColArray","rowNumber","rowMaxes","rCount","chunkSize","panelNumber","keyType","inArray","rowTotal","outArray","lArray","colNo","setNo","lSetClassRoot","lSetTotal","lSetWidths","lSetNo","lSetClassName","thisSet","bbWidth","colWidths","chunkLegendsByRows","getArrayChunks","flatWidths","cumulativeWidth","thisCol","betweenColumns","simpleArray","simplifyColArray","columniseOrigins","flat","unshift","pop","cArray","counter","columnCount","rowMaxesArray","yTweakArray","rowNo","start","end","rowCounter","lSetText","lSetKey","textCoords","keyCoords","keyId","tSpans","tSpanCounter","yAttr","tspanY","_this5","lName","rowTweaks","getLegendSetClassRoot","absoluteLeft","colOrigins","getColumnOrigins","getYtweaksByRows","getYtweaksByColumns","_loop","keyOriginalX","keyX","lSetLineKey","lSetRectKey","lSetDotKey","vLineTweak","moveLegendSet","moveLegendSetsTimeout","getRowMaxesArray","tweakLegendSets","tweakLegendSetsTimeout","returnAdjustedInnerBox","lData","legendOutside","legendSetConfig","isMixed","keyStyleArray","setOverallKeyWidthAndHeight","rowLineCountArray","styleArray","thisStyle","setConfig","makeLegendSetConfig","seriesLegendEnter","seriesBindingEnter","appendKey","updateLine","updateDot","appendText","keyStyles","updateAnyLegendType","lNo","outerName","headName","keyName","SilverLegends","state","legendSets","handleLegendSetInnerBoxBounds","bind","assertThisInitialized","drawLegends","ibDefs","innerboxes","drawn","assembleLegendSets","setState","paddings","panelConfig","legendWithin","seriesCount","blobs","blobState","seriesThreshold","scales","isDouble","overallChartType","legend","hasBlobs","paddingBelowLegends","toBlobTop","toTopOfChart","double","default","ibObj","thisIB","drawnCount","rowedArray","LegendUtils","aRow","tuneTweak","adjustment","splitAt","splitDataAtCol","side","enableScale","loopCount","keyProps","getKeyStyleProps","stacked","thermoDots","legendCounter","legendPaddings","belowLegendBaseline","ibIndex","thisData","getPaddingForInnerBox","cluster","typeString","isScatter","isTable","blobAdjust","lSetObj","sourceArray","startFrom","categories","getKeyStyleArray","usePartyColours","ukParties","usParties","headerText","keySizePrefs","jsxArray","childI","lSet","lSetJSX","legendset","wah","linestacked","thermodot","thermo","scatter","barcolumn","pie","actualSets","i","legendSetsJsx","scaleNumberFormat","scaleIncr","numArray","snForm","getSide","getHalfClusterWidthForAxis","bounds","isCol","thermometer","getBarThermoGap","thermohorizontal","checkPropertiesForAdditionalBaseline","scaleDef","baseFlag","minMaxObj","scale","appendTestText","contextId","primaryOnly","hasSecondaryAxis","primaryIfSecondary","fillValue","appendInFrontTick","isHorizontal","points","zPrefs","tickPrefs","zero","scaleVal","zColVal","simpleValue","zColName","simple","mixedVals","mixedValue","mixed","zClass","zId","zThickness","zeroGrp","chartIndex","zBinding","parentNode","childElementCount","fixNegativeLabels","axisGroup","thisLab","xVal","originalVal","widA","getComputedTextLength","halfMinus","getAxisLabelWidth","testObj","tVal","isFirst","textTurns","valArray","labelWidth","vNo","thisVal","minusAdj","tWidth","abs","getLinearAxisTickFormat","fStr","myFormatter","addZKey","outerGroup","keyLocation","originalBounds","outerWidth","getKeyLocation","kPrefs","seriesPrefs","zkey","dotRad","dotRadius","dotStrokeWidth","dotStrokeName","dotStroke","dotFill","dotX","dotY","appendDot","hStr","zAxisHeader","rad","halfTextHeight","fontSize","fillVals","headText","move","myHead","childCount","children","child","cPos","tweakTspans","getSizedDotScale","dotRange","zAxisBounds","dotDomain","maxZval","sqrt","getYaxisBrokenScalePadding","brokenScalePadding","yAxis","thermoHorizontal","makeBreakScaleObj","bss","brokenScaleSymbol","scatterYaxisBreaks","yAxisBreaks","scaleMin","isLog","log","doesYaxisBreakOnScatter","bsSizeFactor","brokenScaleFactors","onePt","factorBssPoints","bsWidthFactor","strokewidth","break","linejoin","noSymbol","horizontalPaddingToXaxisLabel","strokeValue","checkForBrokenScaleSymbol","breakObj","drawSymbol","noSymbArray","xaxis_linear_config","chartConfig","testFlag","xAxis","AxisUtilities","mmO","breakScaleObj","BrokenScale","textFormat","increment","ticks","barPrefs","additionalBaseline","scatterDotProps","axisHeaders","xaxis","xMin","actual","zScaleProps","z","zScale","ScatterZKey","actualMax","dotProps","myData","hNo","rowsWithMinXval","pNo","thisPoint","xMinArray","head","thisHead","rowMin","zMaxes","aPoint","thisRow","xHead","zHead","dots","fixedRadius","minVal","tickDensity","tickValues","xAxisConfig","actualMaxVal","maxVal","orient","zeroPrefs","linear","yaxis_ordinal_config","tickCount","tickPadding","ordinalInnerMargin","breakScale","yAxisConfig","categoryType","originalX","originalInnerBox","yDomain","tickOffset","dot","radius","rangePoints","updateXaxisHeader","headId","headString","hPrefs","yPadding","axisAtBottom","brokenScatter","granularity","rx","catArray","cat","matchArray","adjustHeadYposForTurnedLabels","primary","showLabel","rowheight","getXaxisHeaderMargin","SilverXaxisLinear","setXaxisConfig","updateXaxis","drawBreakSymbol","XaxisHeader","axis","isTop","xScale","projection","axisAtTop","tlPrefs","lengths","tickLength","across","tickSize","tickFormat","AxisUtils","grpId","grpNames","outerId","bsGroup","firstLabel","labelHeight","lineData","lineFunction","interpolate","ticksId","axisMove","getAxisGroupTransformation","transform","isBar","tickProjection","highlightZero","differentBaselineWidth","baseline","sCol","thisLabel","labID","bBox","tickID","gClass","outerClass","tickId","labId","labelsId","headerId","gStyle","SilverXaxisLinearTest","doStringTests","dotProj","barProj","scaleMax","bWidth","dotProjection","getDotProjection","barProjection","getBarProjection","labelProjection","tHeight","headerMargin","groupNames","groupId","adjustBoundsWidth","adjustBoundsHeight","onReturnRevisedInnerBox","groupClass","SilverYaxisOrdinal","setYaxisConfig","updateYaxis","yScale","getAxisGroupTransformString","labX","fFam","fFill","fSize","labY","boundAxis","axisText","axisTicks","dy","catMargin","afterYaxisOrdinalStringWrap","span0","span1","label","pLen","lab","labMove","getLabelLineCount","originalThis","axisGrpName","fixEmptyTspans","getLabelMove","SilverYaxisOrdinalTest","catStrings","mapTestCats","boundCats","findTestTextContext","waitForCategoryWidths","getCategoryWidths","cats","thisWidth","halfWidth","grpClass","SilverSeriesBar","firstRender","updateBars","barData","clickObj","onPassBarClick","yMainScale","yClusterScale","ChartUtilities","rectBinding","rangeBand","on","barClick","breakPadding","wid","hgt","barGroup","zColour","zWidth","proj","updateBlobHeader","blobMeta","headerProps","rectSizeProps","bhObj","rectHeight","testText","textWidth","horizontal","getBlobHeadRectSize","top","boundHeadGroup","bhgEnter","opacity","bID","bFill","bStr","bWid","configXBlobs","postYaxisBounds","blobData","groupName","indexed","indexDot","actualHeaders","seriesHeads","xDomain","cwp","halfClusterWidth","xMainScale","rangeBands","formatBlobVal","valAsArray","format","SilverYaxisBlobs","doBlobTests","updateBlobs","BlobUtils","bMargin","getBlobMargin","myWidth","myMargin","getBlobHeightFromChartHeight","isRect","valsArray","blobWidth","blobHeight","contextGroup","transBy","getBlobHeight","textXpos","textVtweak","tempO","rangeMax","blobDomain","blobCircleScale","isThermo","blobGroupBinding","oneBlobGroupEnter","yVal","rememberedID","bId","fName","setTextWidthAttribute","binding","nameA","nameB","SilverBarChart","yaxisTest","blobsTest","xaxisTest","handleYaxisInnerBoxBounds","handleBlobsInnerBoxBounds","handleXaxisInnerBoxBounds","handleBarClick","newProps","mainDthreeGroupTransition","event","info","console","bLeft","bTop","transStr","mainGroupClass","getMainGroupClass","prefixDot","addGeneralClass","generalClass","isXaxis","ConfigXaxisLinear","ConfigYaxisOrdinal","projectionBounds","colourSet","hLen","blobheads","hhh","yMainDomain","kids","yaxisJSX","blobsJSX","xaxisJSX","barseriesJSX","getAxisConfig","yaxis_ordinal_test","blobsConfig","configBlobs","yaxis_blobs","xaxis_linear_test","seriesConfig","configSeriesBars","xaxis_linear","yaxis_ordinal","barseries","makeGranularityObjectForTimeAxis","gObj","minGapBetweenLabels","granPrefs","minutes","NOTE","testVal","interval","displayInterval","firstLetterOnly","secondary","ticksOn","tickLevel","unlabelledMinutes","hours","unlabelledHours","days","unlabelledDays","weeks","months","yyyyOn","yyyyThreshold","shortMonths","unlabelledMonths","quarters","years","years2","years5","years10","years50","years100","rawInterval","timeFormats","rawTickLevel","dataPointWidth","notReady","primaryFilter","wFactor","textWidthSizeTestFactor","thisGran","labelFits","testWidth","lastInterval","pointWidth","cData","firstD","lastD","dKey","dateA","dateZ","monthA","Date","getMonth","monthZ","yearA","getFullYear","yearZ","secondaryAxisNeedsLongFormat","longFormat","switchToLongFormat","fix_year","date","forceFirstAndLastYears","fArray","tickLengths","tick","forceDateToYear","yDate","getYearsAxisFilter","isPrimary","filterArray","duplicate","getDefaultFilterArray","yMod","getYearMod","getTickLengths","thisYear","long","fillAllYears","fillAlternateYears","mainMod","minorMod","getMinorMod","thisCat","fillModYears","yearCount","getCatArrayForNonYearsAxisFilter","yearsAdjustedBy","addYearAdjustment","getDateProps","dateB","firstDate","lastDate","checkTimeChange","forceTick","tickInterval","longLength","defaultLength","yearB","monthB","dayA","getDate","dayB","hourA","getHours","hourB","minuteA","getMinutes","minuteB","tickLen","isBoundary","getNonYearsAxisFilter","granularityTimeFormats","originalInterval","yearMod","catLen","virtualDates","endDate","precedingDate","succeedingDate","afterSucceedingDate","getVirtualDates","clusterCounter","crossedBoundary","pointLabelled","filterIndex","catNo","filterItem","thisDate","lastPoint","boundaryObj","stepBack","labelPoint","dupBoundaryObj","lastEl","aLen","oddMod","altMod","firstYear","FixYearInDate","checkAlternateYearMod","modCheckA","modCheckB","killYears","fixYearMods","backEl","lastCat","getYearCount","short","xaxis_ordinal_config","isIndexed","indexFlag","invert","breaks","getBreakScaleObj","styleName","styleSpecificPrefs","granularityObject","getDataPointWidth","Granularity","thermoMargin","thermovertical","secondFormat","primaryAxisFilter","secondaryAxisFilter","XaxisFilters","dataItem","hasColumns","halfMarker","xShift","halfDataPointWidth","scaleType","yaxis_linear_config","leftType","rightType","dPrefs","doubleScale","leftLine","rightLine","leftVal","linealone","linealoneVal","columnalone","columnaloneVal","rightVal","yaxisleft","yaxisright","drawTicks","addBaseline","otherSideName","enabled","innerMargin","linearInnerMargin","noScaleInnerMargin","domainArray","SilverXaxisOrdinal","primaryXaxis","setPrimaryXaxisConfig","updatePrimaryXaxis","secondaryXaxis","setSecondaryXaxisConfig","updateSecondaryXaxis","checkBreakScale","appendBrokenScaleBaseline","breakLeft","breakRight","halfTick","startPoint","endPoint","d","tFormats","yFormat","year","substr","mmm","primaryAxis","getTickFormat","secondaryAxis","textShift","tickShift","lText","lastTick","duplicateTick","labels","filterProps","labShift","xAxisOrdinalLabelTweak","lNode","span","newY","theTick","myNode","lastNode","insertBefore","cloneNode","nextSibling","tickNo","secondXaxis","secondaryId","yShift","secId","groupJSX","idTweak","idPos","leftTweak","rightTweak","valA","valZ","timeFormat","formattedPrimaryValA","formattedPrimaryValZ","sWidthA","sWidthZ","formattedSecValA","formattedSecValZ","leftTickFirstElement","rightTickLastElement","myFilter","gaps","leftPts","rightPts","tickWidth","strW","calcTestForOnTicks","getFirstAndLastTickGaps","strArray","extra","tweaks","tickW","calcTestForBetweenTicks","halfCluster","getExtraLineCount","labelLineCount","SilverYaxisLinear","updateYaxisHeader","stroke-linejoin","name","afterLinearYaxisHeaderWrap","hPos","allHeaders","leftName","rightName","getActualDoubleScaleHeadersExtraLeading","tweakDoubleScaleYaxisHeaders","tweakScatterYaxisHeader","baseNumber","allTicks","SilverYaxisLinearTest","doNothing","maxStr","minStr","getDsHeadLeadingFromHardReturns","values","thisLeading","SilverSeriesColumn","updateColumns","colData","onPassColumnClick","columnClick","bothCols","xClusterScale","isLeft","colBinding","enterColBinding","updateColBinding","exitColBinding","SilverXaxisBlobs","hBlobVals","hBlobTweaks","maxCircleSize","vMargin","getVblobMargin","iTweak","getIndexBlobTweak","iProps","indexPoint","iRadius","myBounds","postYBounds","getBlobWidth","halfBlobWidth","leftCatProjection","rightCatProjection","gaplessWidth","minBlobWidth","minRectWidth","maxBlobWidth","maxRectWidth","circleMax","vertical","rBand","belowBlobs","rpFlag","textYpos","cxVal","yResult","SilverColumnChart","yaxisTestLeft","yaxisTestRight","handleYaxisInnerBoxBoundsLeft","handleYaxisInnerBoxBoundsRight","handleColumnClick","ConfigXaxisOrdinal","ConfigYaxisLinear","BlobUtilities","xMainDomain","exists","axisConfig","getYaxisConfig","callbackHandler","yaxis_linear_test","yaxis_linear","getXaxisConfig","xaxis_ordinal_test","xaxis_ordinal","isTest","getBlobsConfig","jsxTemplate","xaxis_blobs","jsx","yLeft","yRight","yaxisJSXLeft","yaxisJSXRight","columnseriesJSX","getYaxisJsx","getXaxisJsx","getBlobsJsx","configSeriesColumns","columnseries","getPointMaxMin","dObj","excludeA","excludeB","isMax","pointVals","point","mapSpindleData","sData","blobHead","blobHeader","spindVal","SilverThermoVerticalSeries","updateThermos","onPassThermoClick","spindleBinding","spindle","markerBinding","thermoClick","strokeWidth","spindleData","ThermoUtilities","spindleGroupClass","spindlesId","enterSpindles","updateSpindles","exitSpindles","dotFlag","enterDotMarkers","updateDotMarkers","exitDotMarkers","enterLineMarkers","updateLineMarkers","exitLineMarkers","SilverThermoVerticalChart","handleThermoClick","thermoData","mmw","getMinMaxWidth","thermoseriesJSX","configSeriesThermos","thermoverticalseries","seriesKeyey","sCount","chartComponentsJSX","SilverThermoHorizontalSeries","SilverThermoHorizontalChart","thermohorizontalseries","seriesKey","SilverSeriesLine","lineFcn","elementNames","seriesGroup","pointsGroup","topLine","updateLines","updateIndexDot","dId","indexCat","asBinding","pg","updateCircles","pGroup","pointRadius","dotName","outerWrapper","sgClass","sgID","hasHoles","isStepline","newItem","nextJ","fBinding","lBinding","topLineIndex","pos","neg","topcolour","defaultcolour","stk","stw","topwidth","stroke-linecap","linecap","stroke-miterlimit","miterlimit","mappedLineData","baseArray","some","allSeriesBinding","scaleZero","fillPath","firstPt","lastPt","lineName","seriesGrp","asb","myPath","topLineName","sIndex","dupNode","oldId","splitId","newId","kidsCount","appendChild","childNodes","getSum","oneVal","topLineObj","posVal","negVal","serNo","serTotal","ser","reduce","gID","mixedID","isPointline","mapLineSeriesData","accumulateData","getTopLineIndex","enterAllSeriesBinding","appendFill","updateFill","appendLine","updateLinePoints","steplineSpur","addAllSteplineSpurs","tweakLayerCake","invertLayerCake","extendAllLayerFills","moveTopLineToFront","eNames","outerGroupClass","outerGroupId","makeSeriesJSX","SilverLineChart","handleLineClick","pointline","idFactor","indexDotFactor","lineseriesJSX","configSeriesLines","lineseries","onPassLineClick","SilverMixedChart","seriesType","groupID","isLine","dArray","reverse","splitHeaders","splitColours","clusterPadding","getMinWidth","getChartType","getAccum","getInvert","search","getSeriesType","initialiseBasicConfigSeriesMixed","getGroupID","appendConfigClassNames","setDomainArray","splitHeadColObj","getsplitHeadColObj","getClusterPadding","backConfig","frontConfig","isBack","keyPrefix","SeriesComponent","columnSeriesKey","backseriesJSX","frontseriesJSX","seriesConfigLeft","configSeriesMixed","seriesConfigRight","seriesConfigBack","seriesConfigFront","linesOnlyBack","columnsStackedFront","getBackOrFrontSeriesJsx","zeroStackPos","backType","zeroGrpJSX","extraItems","getTrendData","tHeaders","xFactor","yFactor","yHead","sort","b","leastSquaresCoeff","vals","sumUp","xSq","pow","xy","current","slope","intercept","leastSquares","lscLen","controlTrendlines","parentGroup","grpIndex","trendlineGroup","tDataArray","clusterNo","trendHeadArray","getHeadersArray","tHeads","tNo","tColour","tData","tlProps","trendline","stroke-dasharray","dash","updateTrendlines","appendAllTrendlines","SilverScatterSeries","updateScatter","dotData","onPassDotClick","outerBinding","seriesGroups","forceLabel","labelMarker","endsWith","pointGroups","links","labelFilter","valX","valY","dotCircleScale","isSized","opac","fixedOpacity","sizedOpacity","dotClick","getOuterGroup","headerArray","seriesCounter","xHeader","yHeader","xPoint","yPoint","valOk","leftLog","rightLog","pointObj","zPoint","makeOuterBinding","bindSeriesGroups","bindPointGroups","populatePoints","ScatterTrendline","SilverScatterChart","yAxisSide","scatterLabels","scatterTrendline","mmoX","mmoY","mmoZ","maxXval","minXval","maxYval","minYval","minZval","actualMin","zaxis","clusterHeaders","xDomainArray","yDomainArray","getSeriesConfig","scatterseries","handleDotClick","scatterSeriesJSX","getScatterSeriesJsx","SilverPieSeries","arcFcn","arc","outerRadius","innerRadius","keyFcn","halfpie","startAngle","PI","endAngle","updatePies","piePrefs","hSize","hLeading","hCount","isHalfPie","tSpan","parentGrp","pbArray","pieBoundsArray","pieGrps","wedgeProps","pieFcn","pwPrefs","wedges","innerRad","outerRad","hID","hWidth","thisPieGrp","pieHeadText","afterPieHeaderWrap","outerMargin","bindPieGroups","makeWedgeProps","drawPieWedges","appendPieHeaders","SilverPieChart","handleWedgeClick","wedgeData","cols","pieArray","boundsRatio","threshold","buildPbArray","getPieBoundsArray","configSeriesPies","pieSeriesJsx","pieseries","TableText","tableText","rowContent","isHeader","contentPrefs","tableProperties","paragraph","headPrefs","contentArray","cLen","rowText","appendRow","idName","textGrp","textProps","tableArray","oneElement","thisKey","arrayifyContent","makeInitialTextElement","addTableContent","TableRules","updateRules","rProps","rGrp","rPrefs","rules","belowText","drawRule","bottom","getContentHeight","rulesGrp","prepareTopRule","prepareBottomRule","TableFills","updateFills","fGrp","fProps","fillsGrp","topY","tint","drawFills","SilverTable","textId","rulesId","fillsId","tableTextJsx","tabletext","tableRulesJsx","tablerules","tableFillsJsx","tablefills","SilverChartWrapper","renderPanels","renderLegends","handleBackgroundInnerBoxBounds","handlePanelInnerBoxBounds","handleLegendInnerBoxBounds","chartJsxLookup","stepline","sizedscatter","table","pLookup","toLegendBaseline","getOnePaddingValue","belowPanelHeaderBaseline","pArray","chartPadding","below","tcPadding","getPaddingBelowTitleCluster","bPadding","getPaddingBelowChart","paddingArray","getPaddingBelowPanelHeaderBaselines","myIB","cdArray","oneChart","typeJSX","ChartType","chartTypeDef","drawChart","chartTypeComponentCanRender","defs","dangerouslySetInnerHTML","__html","backgroundJSX","panelJSX","background_panels","legendJSX","legends","chartJSX","getChartJsxArray","divStyle","wStyle","pRows","pCols","pCounter","overallWidthExtra","pRowNo","legendExtra","blobExtra","ssKeyExtra","pColNo","pDef","whatsRendered","globalAssets","DefaultChartConfig","DefaultPreferences","PresetPreferences","ColourLookup","edConfig","getScaleProps","mmi","edConfigSide","aMin","aMax","splitScatterDataArray","dataArray","isSimple","seriesCols","leftArray","rightArray","zArray","getXvals","getYvals","getZvals","row","splitDataArray","tempArray","getChartScaleDefaultObject","defaults","base","getNamedColourVals","colNode","black100","dScale","tList","tickNode","baseNode","zeroNode","deepMerge","target","prop","hasOwnProperty","targetObj","sourceObj","getNewChartObject","newPayload","presetsConfig","dps","newChart","idealMargin","minimumBounds","blobHeaders","rawData","iPrefs","brokenScale","specificPresetProps","psSource","userPresets","presetName","subpresetName","defaultAxes","axes","mergedXaxis","mergedYaxis","mergedZaxis","zAxis","axesSource","xAxisSource","yAxisSource","zAxisSource","ppBSF","mergedBlobs","ppBlobs","getSpecificPresetProps","belowBlobBottom","getActivePanel","editorConfig","global","smartenQuotes","smart","smartenArrayOfQuotes","qArray","smartenedArray","item","trimDecimals","valAsString","dStr","zerosPos","ninesPos","toFixed","round","setChartWrapperScaleClass","_scWrapper$classList","scaleClass","chartScaleClass","scWrapper","getElementsByClassName","classExists","classList","test","add","factoriseString","oldFactor","newFactor","factors","user","oldFactorDef","find","oldSuffix","string","osLen","newFactorDef","reflectFactorInSubtitle","edConfigGlobal","subTitle","reflectFactorInPanelHeader","activePanel","panelHeader","reflectFactorInAxisHeader","heads","cType","factorName","factorMmiVals","sideScale","refactorBy","OtherUtils","makeAdvancedFoldConfig","textFieldConfig","timeformats","dayInMilliSeconds","makeTextFieldConfig","axisHeadersConfig","axHeaders","setAxisHeaderContent","ahObj","setAxisHeaderEnablement","makeAxisHeadersConfig","numberBoxConfig","updateDefaultAxisHeadersInEdConfig","doubleChange","dataHeaders","setContent","enableScaleSides","enableSide","eObj","setSharedIndexedStatus","targetPanel","EditorConfigDefaultUtils","handleValuesFromFactorComponent","activeSide","factorSide","targetScale","FactorUtils","_edConfig$global","isPanels","handleValuesFromScalesFold","subComponent","component","callSibyl","updateChart","newVals","scaleSide","densityOK","updateEdConFromScaleComponent","oldScale","newScale","scaleChanged","scaleChangeSingleMixedDouble","oldCT","newCT","oldStack","scaleChangeStacking","oldSplit","scaleChangeSplit","AdvancedFoldUtils","handleValuesFromDoubleScaleComponent","iFlag","handleValuesFromIndexedComponent","EditorUtils","handleValuesFromLogComponent","activeScales","activeChartType","actualMinLeft","actualMaxLeft","actualMinRight","actualMaxRight","handleValuesFromShareScaleComponent","getCycleStartOrEnd","isStart","appendLogTickVals","logVals","factoredBy","isInteger","incrCode","incrA","incrB","cycleEnd","tickVals","getRecommendedMinMaxIncr","aProps","mmObj","plausibleIncrs","plausibleIncrements","piLen","turns","plausVal","getRowMinMaxOrTotal","rowArray","filtArray","newMinMaxFcn","blobCol","minMax","setDefaultMinMax","mmRow","getSideRecommendedMinMax","isStacked","actualMinMax","LogUtils","general","setScaleSideMinMax","incomingFactor","resetFactor","_editorConfig$global","getEdConfigDefaultSize","defaultRecommendedHeight","pngWidth","getEdConfigDefaultPanelVals","active","getEdConfigDefaultChartType","getEdConfigDefaultBlobs","getEdConfigDefaultLegend","getEdConfigDefaultScales","mixedScale","getEdConfigDefaultBackgroundStrings","getEdConfigDefaultEnableScale","ScaleCallbackUtils","isRowIndexable","rowFlag","getIndexedPoint","iObj","sharingScale","canIndex","pointNo","iCat","revertPanelDefaultVals","edConfigPanel","myPanel","indexAllowed","runIndexedCheck","splitArray","MinMaxUtils","minSizedRadius","maxSizedRadius","legendCols","lCols","leftInverts","rightInverts","resetScaleInversion","padNumber","number","padStart","getFileNameDate","fnObj","dates","fnDate","datesYmd","dateIndex","getFilenameSectionId","updateFileName","sectionId","fileName","fNum","mark","isolateFileNumber","getBarProps","barProps","getStackedBarProps","sProps","stackedbar","getColumnProps","colProps","getStackedColumnProps","getThermometerProps","tProps","getLineProps","lineProps","blobGap","getLayerCakeProps","lcProps","getStepLineProps","stepProps","getPointLineProps","pointProps","getScatterProps","scatterProps","getPieProps","pieProps","getMixedProps","specifySeriesPrefs","seriesDefaults","completeSeriesCount","maxSeries","tableProps","typeCheck","stackedcolumn","layercake","steplayercake","ssPrefs","addExtraColourNames","checkForParties","isUK","myHeaders","toLowerCase","testArray","partyTest","regex","RegExp","findPartyInHeader","partyList","pName","applyPartyColours","getEcoDatesObject","pDay","oneDay","toNextWeek","pubDate","aDate","setDate","getDay","getPubDate","timeNow","dayNow","hourNow","initialDate","datesMd","aWeek","mList","www","dNo","month","day","getEdConfigDefaultDates","dInMs","datesObject","monthNo","yearNo","endYear","m","getEiuDatesObject","getEdConfigFilenameProperties","fNumber","sections","defaultPrefs","subPresetName","pps","preset","subPreset","lookUpSections","list","findIndex","code","getEdConfigDefaultSections","publicationDay","Filename","newEdConfigPanelElement","validityMsg","radicalDataChange","panelSize","initiateNewEdConfig","fileNumber","fileNameObj","presets","monteux","sheetId","globalId","metadataId","dataId","panelVals","setIllustratorColourSpace","payloadToEdConfigRawData","edConfigChartData","payloadRawDataVals","dataRow","smartenedRow","isValid","transferOneMetadataSet","loadVals","topic","nestedObj","tArray","sourceNode","transferAllMetadataSets","doubleSplit","scales_double_splitDataAtCol","mixedSplit","scales_mixed_splitDataAtCol","isDoubleMixedSplitValid","doInferentialFixesForOldDataFiles","payloadToEdConfigPanel","payloadP","existingChart","metaData","overwriteDefaultPanelMetadata","tVals","scales_left_tickValues","scales_right_tickValues","leftStacked","rightStacked","leftEnabled","splitCol","getSplitDataColNumber","leftActualMinMax","rightActualMinMax","splitData","resetActualScaleValuesFromNewPayload","otherSide","activeType","dataColCount","doScatterInsurance","ocType","_pConfig$scales$doubl","setAxisHeadersFromSeriesHeaders","recommendedMinMax","setLegendColumnDefault","payloadToEditorConfigGlobalProps","payloadGVals","verifiedPresets","pVals","verifyPayloadPreset","subSubtitle","chartNumber","sectionName","getEdConfigCurrentSections","updateEdConfigWithNewPayload","newEdConfig","globalTabId","payloadPanels","oneP","dataTabId","metadataTabId","payloadToEdConfigMonteuxProps","actualPanelTotal","recordedPanelTotal","panelTotal","panelRows","payloadToEdConfigMaster","goodPayload","findNodeDownChain","topNode","chain","link","findPreferencesNode","defaultNode","returnNode","presetNode","specificNode","setBackgroundProperties","startUp","shapeKeys","shapeArray","oneShape","stringKeys","stringObj","oneString","pAtts","willDataLayerCake","chartDataObj","canLayer","posCount","negCount","canLayerCake","countOccurrences","arr","v","vLen","holeCount","checkForHoles","reconcileEdConfigPanelDataToConfig","configPanel","dataObject","allData","dataObjArray","catHeader","rLen","tempChartObj","defineProperty","reconcileEdConfigPanelBlobsToConfig","myBlobs","bCol","blobValues","bArray","getSpecificChartType","specific","reconcileEdConfigPanelSeriesToConfig","colourCount","configSeries","seriesLeft","seriesRight","PartyUtils","defaultSeries","subpreset","presetSeries","sideTypes","getChartSideTypes","doubleColourSets","doubleColours","colourSets","decideDoubleColourSets","SeriesPreferences","reconcileEditorToChartPanelConfig","configScales","checkScale","reconcileEdConfigPanelScalesToConfig","typeStr","edConfigLegend","injectTablePropsIntoConfig","scatterYaxisSide","getRandomColour","random","updateMetadataColourDefinitions","pColourNames","metaColours","thisName","newColour","getColoursForOverallChartType","pSeries","altOcTypes","colourSpace","newColourSpace","getIllustratorColourSpace","makeScalesComponentConfig","maximumIncrements","canShare","scalesConfig","canShareScale","mmiArray","edConfigScales","leftMmi","rightMmi","xMmi","yMmi","zMmi","singleMmi","buildMmiArray","misMatch","tickCountsMisMatch","getFactorConfigBySide","maxLen","minLen","enable","makeFactorComponentConfig","factorsArray","makeInvertComponentConfig","leftCanInvert","rightCanInvert","scaleLogProperties","sideEnabled","canLog","toUpperCase","getLogLabel","makeLogComponentConfig","makeDoubleScaleComponentConfig","doubleableStyles","disableDouble","notLogged","stackedLineLeft","stackedLineRight","getDoubleScaleHeaders","splitAndType","scaleStr","getDoubleScaleSplitAndType","getTimeStamp","tStr","getSeconds","makeGlobalObject","lastUpdate","removeRogueProperties","appendPanelMetadataProperties","targetKey","metadataObj","oKeys","kNo","metaVal","isArray","getMetadataForOnePanel","thisPanelSource","mVals","xaxisHeader","axisHeaders_xaxis","tvObj","ExpandMoreIcon","_ref","flip","xmlns","viewBox","fillRule","Preset","_getPrototypeOf2","_len","args","_key","isMenuOpen","handleClick","handleClickMenu","handleClickPreset","removeEventListener","contains","button","onValuesToSizeAndPreset","presetDefinitions","displaySetting","presetArray","Fragment","onClick","ref","expand_more","c","Size","debounceSizeChange","evt","targ","targetId","newVal","updateState","persist","debouncedFn","debounce","handleSizeChange","updateEditor","minHeight","func","timeout","clearTimeout","tar","maxChartWidth","maximumChartWidth","prevState","heightError","widthError","_this$state","setClass","onKeyDown","handleKeyDown","onChange","required","htmlFor","step","sizeJsx","makeSizeJsx","SizeAndPreset","handleValuesFromSize","handleValuesFromPreset","onValuesToEditor","size_and_preset_size","size_and_preset_preset","presetJsx","makePresetJsx","sizeAndPresetJsx","Panels","handlePanelChange","inPanels","valid","oldVal","validatePanelValues","rowVal","makePanelControls","Alerts","alertString","classString","showAlert","EconomistIcon","EiuIcon","RefinitivIcon","Strings","activeFootnotes","focusFootnote","handleStringBlur","handleAddFootnote","handleEcoString","handleEiuString","handleRefinitivString","ecoStrPlain","ecoStrItal","ecoStrAfterSemicolon","ecoStrAfterColon","eiuStr","eiuStrAfterSemicolon","eiuStrAfterColon","refStr","refStrAfterSemicolon","refStrAfterColon","semicolon","semicolonSpace","colon","colonSpace","br","spaceBr","footnoteSymbols","fillFields","symbolList","symbolCount","symbol","thisInput","fContent","symbols","fCount","input","newDiv","showClass","focus","allFootnotes","fNo","fDiv","forceNewFootnoteDiv","fillFootnoteFields","fString","propList","footnoteStringToArray","footnoteStringsToObjects","thisFoot","parentDiv","parentElement","char","charSpace","sColon","scSpace","cSpace","enforceCharSpaceInSource","oneSource","italiciseOneEconomist","italiciseTheEconomist","checkSourcePunctuation","noSpaceBeforeBr","fullStopForEiuSource","filterSource","getFootnotes","footnoteCount","hasChanged","checkValChanged","crudeArray","goodArray","fNote","fObj","listA","listB","itemA","itemB","fIndex","fNoteInputKey","onBlur","fList","footnoteArraysDiffer","footnoteElementArray","mapFootnoteElements","_this6","placeholder","autoComplete","titleDiv","makeOneTopDivJsx","panelHeaderDiv","subtitleDiv","subsubtitleDiv","hasEiu","hasEco","ecoRx","ecoMatch","ecoCount","_this7","hasEconomist","sourceIncludesJustEconomist","hasRef","economist_icon","eiu_icon","refinitiv_icon","topJsx","makeTopJsx","sourcesJsx","makeSourcesJsx","footnotesJsx","makeFootnotesJsx","stringsJsx","ChartColumn","data-name","ChartBar","ChartLine","strokeLinejoin","ChartTable","ChartPointline","ChartStepline","strokeMiterlimit","ChartThermoHorizontal","ChartThermoVertical","ChartScatter","ChartSizedScatter","ChartPie","ChartHalfPie","typeVals","handleTypeClick","handleStackClick","handleThermoDotClick","handleScatterOptionClick","typeDefs","group","specificClass","cbString","canStack","orientation","icon","chart_column","chart_bar","chart_line","chart_table","chart_pointline","chart_stepline","chart_thermo_horizontal","chart_thermo_vertical","chart_scatter","chart_sized_scatter","chart_pie","chart_half_pie","stackDefs","stackableTypes","unLoggableTypes","workingTypes","oldConfig","newConfig","stack","whatChanged","onValuesToDesignBody","oldOrientation","displayed","currentTarget","dataset","chart","newTypeDef","cbOrientation","sameOrientation","checked","_ref2","labelsChanged","keyVal","isDisabled","element","keyStr","cName","data-chart","modVal","cbClass","divClass","ticked","isLabels","canLabel","labClass","optionStr","scattersCanLabel","labelTicked","trendTicked","elementA","makeOneScatterOptsCheckbox","elementB","allOff","typeDisabled","disableStacked","elementArray","tDef","tDisabled","dataCantBeScatterChart","noPie","thisEl","getElementJsx","componentClass","makeThermoDotCheckbox","makeScatterOptionsCheckboxes","chartTypeJsx","Blobs","handleBlobHeaderChange","handleBlobShapeChange","blobResult","disabled","options","opt","blockClass","bubbleClass","blobsJsx","Legend","handleColumnsChange","handleHeaderChange","handleHeaderBlur","legendResult","_ref3","legendJsx","DesignFoldBody","handleChartTypeChange","handleBlobChange","handleLegendChange","onValuesToFoldsWrapper","_this$props$config","chart_type","bodyparts_legend","bodyparts_blobs","designBodyJsx","ScaleSet","handleMmiChange","onValuesToScalesBody","valsWork","logMmi","logArray","mmiValsWork","incr","steps","myDensity","otherDensity","otherTickDensity","isIncrement","isZ","isOK","dpTrails","charAt","idResult","rawVal","getIdRoot","checkRawValIsOK","checkTrailingDp","unpickedVals","unpickLogMmiVals","unpickZMmiVals","unpickRegularMmiVals","sideDensitiesMatch","passValsUp","valHead","setMax","setMin","userInputClassName","tickClass","setIncrement","buildLogIncrDropdown","incrRow","makeLogIncrRow","makeNonLogIncrRow","configMmi","formatDecimal","topRow","makeTopRow","highRow","makeHighRow","lowRow","makeLowRow","makeIncrRow","scaleValsJsx","InvertScale","handleInvertChangeLeft","handleInvertChangeRight","invertObj","onInvertToScalesBody","sendValues","cNameLeft","cNameRight","invertLeft","invertRight","invertJsx","DoubleScale","handleSplitAfterChange","handleLeftTypeChange","handleRightTypeChange","handleDoubleOrMixed","chartTypes","invertedChartTypes","typeIndex","typeObj","alignSides","unpickChartType","uppedVal","alignScaleProps","scaleProps","leftTypes","rightTypes","singleClass","doubleClass","mixedClass","afterSeriesClass","rowClass","leftClass","rightClass","leftStr","rightStr","doubleJsx","Indexed","handleIndexedChange","disable","indexedJsx","Log","handleLogChangeLeft","handleLogChangeRight","logObj","logLeft","logRight","labelLeft","labelRight","logJsx","ShareScale","handleButtonClick","shareScale","isButtonDisabled","shareScaleJsx","ScalesFoldBody","handleValuesFromScalesForm","handleInvertValues","handleDoubleChange","handleLogChange","handleShareScale","scalesLabelDefs","newSide","newT","oldSide","scaleResult","iResult","dResult","labelsArray","labelDefs","getOneLabelJsx","scNo","scaleConfig","ScaleComponent","scaleJsx","fConfig","bodyparts_invert","doubleConfig","double_scale","indexedConfig","bodyparts_indexed","logConfig","share_scale","scaleJsxArray","makeScaleComponentsJsxArray","makeIndexedJsx","makeInvertJsx","makeLogJsx","doubleScaleJsx","makeDoubleScaleJsx","makeShareScaleJsx","makeScalesJsx","getMonthList","mArray","monthValsAreQuarters","valB","valC","doFirstUsUkTest","qFormat","doInitialQuartersTest","doInitialDmyMdyTest","dateIsYmd","getBasicCategoryType","dateSeps","catIsQuarter","hyphenSplit","spaceSplit","catIsFromTo","unseparatedCat","splitDate","isSpelledDMYFormat","isSpelledMYFormat","quarterToDate","qqq","convertQuarters","addCentury","myD","isQ","convertToUnambiguousFormat","dType","dPos","mPos","mNo","isShort","timeEls","formattedStr","dateIsDmyOrMdy","testDmy","gNo","pad","theDate","googleNumberToDate","mPlace","mVal","mStr","shortM","getMonthNumber","getYearsAdjustment","firstCat","dupsInArray","hArray","originalLen","dups","Set","acc","currentValue","array","triageCategories","dayInMs","validatedCategoryObj","catType","validityObj","vObj","hasDups","arrayOfDups","DupUtils","dupString","dupIndex","findDuplicateCats","DateCheckUtils","areCatsStrings","allCatsAreIntegers","prevCat","catsAreSequential","yAdjust","areCatsTimeOrString","dSeps","errorLocation","thisD","dateArray","val1","getInitialDateFormat","yearPos","yEl","getYyDatePosition","addCenturies","validateCategories","triagedObj","catError","aDay","dFirst","dLast","lastYear","dayCount","tObj","closeEnough","myVal","toVal","lowVal","highVal","tForm","myForm","getTimeObj","validateDataArray","dataObj","isProblematic","enoughRowsAndColumns","badValObj","badVal","headCount","oneRow","noCommaVal","checkAllValsAreNumbers","every","unpickData","dataPrefs","tsv","convertTsvToArray","arrayifyData","CategoryUtils","triagedCatObj","oneCat","DataTemp","handleTextAreaTabEvent","handleTextAreaBlurEvent","handleTextAreaPasteEvent","commaSubstitute","monteuxlikeObject","RawDataUtils","requiredDataPrefs","onValuesToAdvancedBody","thisMatch","fixMatch","firstArray","unComma","secondArray","subRegExp","oneLine","lineCsvToTsv","clipboardData","getData","textIsTsv","textIsCsv","csvToTsv","keyCode","preventDefault","selectionStart","selectionEnd","textBefore","textAfter","newData","processNewData","disableDataField","wrap","handleTextAreaChangeEvent","onPaste","rawDataTextArea","makeRawDataTextArea","foldBodyJsx","AxisHeaders","handleAxisHeaderBlur","xaxisheader","headerDivClass","labelClass","inputClass","refName","xAxisJsx","makeAxisHeaderJsx","makeAxisHeadersJsx","NumberBoxEditor","handleNumberBoxBlur","fillField","numberboxinput","makeNumberBoxJsx","AdvancedFoldBody","handleDataChange","dataConfig","doesDataFieldDisable","data_temp","axis_headers","numberbox_editor","dataTempJsx","makeDataTempJsx","axisHeadersJsx","numberBoxJsx","advancedBodyJsx","FoldWrapper","foldsList","handleFoldHeaderClick","handleDesignFoldCallback","handleScalesFoldCallback","handleAdvancedFoldCallback","foldVals","fold","newTab","previousState","foldDefs","open","handleHeightChange","designConfig","scalesFoldConfig","advancedFoldConfig","advancedConfig","design","advanced","bodies","design_fold_body","scales_fold_body","advanced_fold_body","makeFoldsJsx","BaselinePhotoIcon","BaselineCameraIcon","InsertChartIcon","downsizeSvg","downloadGif","svgString","blobA","Blob","url","URL","createObjectURL","img","body","onload","canv","getContext","drawImage","canvasUrl","toDataURL","imgTwo","src","fetch","then","response","blob","workerUrl","ctx","pasteCanvas","gif","GIF","workers","workerScript","quality","canvas","addFrame","copy","aElement","download","click","removeChild","revokeObjectURL","render","makeGif","processExport","isPng","isSvg","svgConfig","svgAsXml","svgArray","svgStr","XMLSerializer","serializeToString","svgLen","getLongestSvgString","encodeURIComponent","downloadSvg","mySvgStr","svg","tag","openTag","myTag","transformRgb","transformCmyk","completeSvg","downloadPng","export_export","argObj","FooterWrapper","handleSvgExportClick","handlePngExportClick","handleGifExportClick","handleDateChange","handleSectionChange","exProps","SvgConfig","Export","scaleBy","imgDims","exportCallback","ecArgs","moveFactor","translateX","translateY","pngFactor","pngDims","ecArguments","upsizeSvg","gifFactor","section","sectionIndex","ymd","mmmDd","sectionLen","defaultSection","currentSection","fileDate","newMdDate","getMdDateFromYyyyMmDd","dateVal","dateOptions","sectionOptions","sectionVal","insert_chart_icon","baseline_photo_icon","baseline_camera_icon","makeFooterJsx","MonteuxImport","payloadHandler","Monteux","rawPanelObj","unpickedPanel","filterMonteuxValues","unpickRawData","rawLoad","triagedLoad","rawPanelArray","onePanel","unpickOnePanel","triagedPayload","triagePayload","SilverEditor","loadingAssets","updateMonteux","headersChanged","handleValuesFromSizeAndPreset","handleValuesFromPanels","handleValuesFromStrings","handleValuesFromFooter","handleValuesFromFoldsWrapper","handleMonteuxImportValues","folds","iden","errorMsg","assetsFolder","assetFiles","assetFile","Promise","all","responses","json","JSONs","getPresetsObjectByUser","makeNewChartConfig","EditorConfigUtils","editorMount","isDataError","dataErrorString","catch","error","reconcileEditorToChartConfig","panelSourceArray","MonteuxExport","useGlobal","ppObj","dpMetaDef","defaultConfig","emptyConfig","getDefaultChartConfigProperties","defaultSource","mySource","editorConfigGlobal","platform","subplatform","coDims","edConfigStrings","allConfig","coBackStrings","wrapwidth","hasfootnote","reconcileEdConfigBackgroundStringsToConfig","configPanelArray","onePanelConfig","panel","onPassUpdatedConfig","pNode","spNode","myPresets","mySize","existingPreset","existingSubPreset","newPreset","userPPs","subpresetNode","presetSize","forceHeight","forceWidth","presetObj","sectionID","getSectionIdForNewPreset","mySections","setPresetSourceString","newType","disableSide","oldType","getDefaultSide","wasScatter","majorChange","handleNewScatterFromChartTypeComponent","handleOldScatterFromChartTypeComponent","oldStacked","newStacked","newRdv","myLegend","noData","handleValuesFromChartTypeComponent","handleValuesFromBlobComponent","handleValuesFromLegendComponent","handleValuesFromAxisHeadersComponent","handleValuesFromNumberBoxComponent","fieldValuesFromScalesFold","_updateOnlineSubPrese","_subPreset","conversionTable","wide","espresso","instagram-story","daily-chart-desktop","daily-chart-mobile","films","has","hasBeenUpdated","updateOnlineSubPreset","economist","online","dataReport","mData","goodData","problematicData","dataMsg","myVals","doMsg","edConfigObj","myStrings","vStrings","tempObj","childKey","childO","presetDef","makePresetConfigArray","sizeDefs","eStatus","errorStatus","isError","status","pConfigObj","isTableData","maxScatterLabels","onlyTableEnabled","oneSeries","blobsDisabled","setDisabledStatusByChartType","legendDisabled","_DefaultPreferences$o","sizeAndPresetConfig","makeSizeAndPresetConfig","size_and_preset","panelsConfig","makePanelsConfig","panels_panels","alertsConfig","makeAlertsConfig","alerts","stringsConfig","makeStringsConfig","strings_strings","makeDesignFoldConfig","disableFold","myScales","ScaleConfigUtils","foldsConfig","folds_wrapper","footerConfig","makeFooterConfig","defaultChartType","monteuxConfig","makeMonteuxImportConfig","monteux_import","makeSizeAndPresetJsx","makePanelsJsx","makeAlertsJsx","makeStringsJsx","makeMonteuxImportJsx","App","canDoFirstChartRender","handleConfigFromEditor","handleErrorReport","_ref$margin","throttle","iframeResizer","errorObj","editor_editor","cJsx","chartwrapper","editor","buildEditor","chartWrapper","buildChartWrapper","Boolean","hostname","ReactDOM","src_App_0","process","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48b27571.chunk.js","sourcesContent":["// Rob's Monteux component. Kill all linting.\n/* eslint-disable */\n// UMD monteux lib\n// put in dist folder and use from there then update docs\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.monteux = factory();\n  }\n})(this, function() {\n  const postMessage = function(message) {\n    parent.postMessage(\n      {\n        from: 'monteux-renderer',\n        payload: message,\n      },\n      '*',\n    );\n  };\n\n  const listenForMessages = function(cb, keyword) {\n    const eventMethod = window.addEventListener\n      ? 'addEventListener'\n      : 'attachEvent';\n    const eventer = window[eventMethod];\n    const messageEvent = eventMethod == 'attachEvent' ? 'onmessage' : 'message';\n\n    eventer(\n      messageEvent,\n      function(e) {\n        var key = e.message ? 'message' : 'data';\n        var data = e[key];\n        if (data.from === keyword) {\n          cb(data.payload);\n        }\n      },\n      false,\n    );\n  };\n\n  return {\n    postMessage,\n    listenForMessages,\n  };\n});\n","import throttle from 'lodash/throttle';\n\nfunction econOnResize(className, margin) {\n  // console.log('resizing thingy');\n  let height;\n  if (typeof window.getComputedStyle !== 'undefined') {\n    const contentElement = document.querySelector(className);\n    if (!contentElement) {\n      setTimeout(econOnResize, 0);\n      return;\n    }\n    height = parseInt(\n      window\n        .getComputedStyle(contentElement, null)\n        .getPropertyValue('height')\n        .split('.')[0],\n      10,\n    );\n  } else {\n    const contentElement = document.querySelector(className);\n\n    // const html = document.documentElement;\n    if (!contentElement) {\n      setTimeout(econOnResize, 0);\n      return;\n    }\n    height = contentElement.getBoundingClientRect().height;\n  }\n\n  // const targetOrigin =\n  //   window.location !== window.parent.location\n  //     ? document.referrer\n  //     : document.location;\n\n  window.parent.postMessage(\n    {\n      type: 'RESIZE',\n      payload: {\n        height: height + margin + 5,\n        origin: document.location.href,\n      },\n    },\n    '*',\n  );\n}\n\nconst iframeResizer = ({ className, margin = 0 }) => {\n  econOnResize(className, margin);\n\n  window.addEventListener(\n    'resize',\n    throttle(() => econOnResize(className, margin), 200),\n  );\n\n  // safeguard\n  setTimeout(() => econOnResize(className, margin), 500);\n};\n\nexport { iframeResizer, econOnResize };\n","// Allow 'document'\n/* global document: false */\n\nimport * as d3 from 'd3'\n\n// GET MONTH LENGTH\n// Called from getSecondaryAxisFilter. Returns number of days in month...\nexport function getMonthLength(date) {\n  // This works by going to the start of the month *after* the target,\n  // then falling back to the previous day, which is, of course,\n  // the last day of the target month...\n  // (Conveniently, if datePlusOne is 11:December, incrementing by 1\n  // jumps to Jan of next year!)\n  const datePlusOne = date.getMonth() + 1\n  return new Date(date.getFullYear(), datePlusOne, 1, -1).getDate()\n}\n// GET MONTH LENGTH ends\n\n// GET COLOUR MAP\n// Map colours by series\nexport function getColourMap(headers, colours) {\n  // Args are series-headers (cat header has been removed) and colours\n  // Both arrays\n  const colourMap = d3.scale\n    .ordinal()\n    .domain(headers)\n    .range(colours)\n  return colourMap\n}\n// GET COLOUR MAP ends\n\n// GET TEXT ID\n// Called from various d3 updates. Puts together an ID to pass\n// colour and text-alignment metadata to Illustrator. Note that\n// this doesn't include width, which is calculated by Joxer\nexport function getTextID(id, fill, justification, leading) {\n  // I think the assumption is that there's ALWAYS metadata for text...\n  let idStr = `${id}~~~`\n  if (typeof fill !== 'undefined') {\n    idStr = `${idStr}fill:${fill},`\n  }\n  if (typeof justification !== 'undefined') {\n    idStr = `${idStr}justification:${justification},`\n  }\n  if (typeof leading !== 'undefined') {\n    idStr = `${idStr}leading:${leading},`\n  }\n  // Strip trailing comma\n  return idStr.replace(/,$/, '')\n}\n// GET TEXT ID ends\n\n// GET COLOUR\n// Called from various d3 updates. Passed the element data and\n// the colours lookup, converts colour name to value for browser\nexport function getColour(ddd, colours, isFill) {\n  // Stroke or fill?\n  let colName = ddd.stroke\n  if (isFill) {\n    colName = ddd.fill\n  }\n  const colDef = colours[colName]\n  // For argument's sake:\n  let colVal = '#ccc'\n  if (typeof colDef !== 'undefined') {\n    colVal = colDef\n  }\n  return colVal\n}\n// GET COLOUR ends\n\n// GET SILVER CHART WRAPPER STYLE\n// Sets outerbox dimensions from config; and extends the 'window'\n// width to include any external legends, blob headers or sized-scatter keys...\nexport function getSilverChartwrapperStyle(config) {\n  // Start from existing dimensions\n  const outerWidth = config.background.outerbox.dimensions.width\n  const wStyle = {\n    height: config.background.outerbox.dimensions.height,\n    width: outerWidth,\n  }\n  // We're going to loop by rows of panels\n  const panels = config.metadata.panels\n  const pRows = panels.rows\n  const pCols = panels.total / pRows\n  let pCounter = 0\n  let overallWidthExtra = 0\n  for (let pRowNo = 0; pRowNo < pRows; pRowNo++) {\n    // Set row defaults of tweaks for legends or blobs\n    let legendExtra = 0\n    let blobExtra = 0\n    let ssKeyExtra = 0\n    for (let pColNo = 0; pColNo < pCols; pColNo++) {\n      const pDef = config.panelArray[pCounter]\n      // I need to know if it has external legend\n      if (pDef.legend.value === 0) {\n        legendExtra += outerWidth\n      }\n      // Blobs\n      if (pDef.blobs.blobState.column > 0) {\n        blobExtra += 100\n      }\n      // Key for sized scatter\n      // NOTE: let's try to get overallChartType working, huh?\n      // if (pDef.overallChartType === 'sizedscatter') {\n      if (pDef.scales.right.type === 'sizedscatter') {\n        ssKeyExtra += 100\n      }\n      pCounter++\n    }\n    overallWidthExtra = Math.max(\n      overallWidthExtra,\n      legendExtra,\n      blobExtra,\n      ssKeyExtra\n    )\n  }\n  wStyle.width += overallWidthExtra\n  return wStyle\n}\n// GET SILVER CHART WRAPPER STYLE ends\n\n// GET CHART KEYS\n// Called from all chart type renders. Returns an object\n// with all necessary element key strings\nexport function getKeysAndIds(cIndex) {\n  return {\n    mainGroupKey: `main-group-key-${cIndex}`,\n    xAxisKey: `xaxis-${cIndex}`,\n    yAxisKey: `yaxis-${cIndex}`,\n    blobsKey: `blobs-key-${cIndex}`,\n    barSeriesKey: `bar-series-${cIndex}`,\n    colummnSeriesKey: `column-series-key-${cIndex}`,\n    thermoSpindlesId: `thermo-spindles-group-${cIndex}`,\n    thermoSeriesKey: `thermo-series-key-${cIndex}`,\n    lineSeriesKey: `line-series-key-${cIndex}`,\n    scatterSeriesKey: `scatter-series-key-${cIndex}`,\n    pieSeriesKey: `pie-series-key-${cIndex}`,\n    zeroId: `zeroline-group-${cIndex}`,\n    contentId: `content-group-${cIndex}`,\n  }\n}\n// GET CHART KEYS ends\n\n// MAP SERIES DATA\n// Called from bar/column-seres.updateBars/Columns\n// NOTE: why not for for lines and other types...?\n// For pies, colours mapped on categories,not headers\n// But in either case, we map on *series*\nexport function mapSeriesData(config, isPie) {\n  const colours = config.colourMap\n  let colourLookup = colours\n  // But pies set colours by category\n  if (isPie) {\n    const pieColours = config.catsColourMap\n    colourLookup = pieColours\n  }\n  const chartData = config.chartData\n  const factor = config.factor\n  // First header string is key to category strings\n  const catStr = config.catHead\n  // iii is series index\n  const mappedData = colours.domain().map((header, iii) => {\n    const objA = chartData.map((ddd) => {\n      let val = ddd[header]\n      // Val may be an empty string. Number() would\n      // turn it into zero, so...\n      if (val !== '') {\n        val = Number(val) / factor\n      }\n      //\n      let lookUp = header\n      if (isPie) {\n        lookUp = ddd[catStr]\n      }\n      const objB = {\n        // val is the x-val for columns, y-val for bars\n        val,\n        category: ddd[catStr],\n        // Used for thermos as well as bars/cols, so fill and stroke\n        // Pies colour by category; others by series\n        fillName: colourLookup(lookUp),\n        fill: config.colourLookup[colourLookup(lookUp)],\n        strokeName: colourLookup(lookUp),\n        stroke: config.colourLookup[colourLookup(lookUp)],\n        header,\n        seriesNo: iii,\n      }\n      return objB\n    })\n    // No don't: if stacked, substitute zeroes for\n    // missing values; otherwise delete\n    const dataLen = objA.length - 1\n    for (let jjj = dataLen; jjj >= 0; jjj--) {\n      if (objA[jjj].val === '') {\n        if (config.accum) {\n          objA[jjj].val = 0\n        } else {\n          objA.splice(jjj, 1)\n        }\n      } else {\n        // Survivors convert to number,\n        objA[jjj].val = Number(objA[jjj].val)\n      }\n    }\n    return objA\n  })\n  return mappedData\n}\n// MAP SERIES DATA ends\n\n// MAP SCATTER SERIES DATA\n// Using simple loops, for sanity's sake\nexport function mapScatterSeriesData(config) {\n  const colours = config.colourMap\n  const chartData = config.chartData\n  // Factors for x and y vals\n  const xFactor = config.xFactor\n  const yFactor = config.yFactor\n  const clusterNo = config.clusterNo\n  // NOTE: is next safe?\n  const rowTotal = chartData.length\n  const colTotal = Object.keys(chartData[0]).length - 1\n  const mappedData = []\n  for (let colNo = 0; colNo < colTotal; colNo += clusterNo) {\n    mappedData.push([])\n  }\n  // I need to loop by columns, starting from first data column...\n  const headerArray = config.headers\n  // Outer loop is by rows. Each row is an object with properties\n  // named to headers\n  for (let rowNo = 0; rowNo < rowTotal; rowNo++) {\n    const thisRow = chartData[rowNo]\n    // Series counter:\n    let seriesCounter = 0\n    // Inner loop by 'cells' in 'row':\n    for (let cNo = 0; cNo < colTotal; cNo += clusterNo) {\n      const xHeader = headerArray[cNo]\n      const yHeader = headerArray[cNo + 1]\n      const xPoint = thisRow[xHeader]\n      const yPoint = thisRow[yHeader]\n      // Omit any empty datapoints (which would get set to zero)\n      // And omit zeroes on logs\n      let valOk = true\n      if (xPoint.length === 0 || yPoint.length === 0) {\n        valOk = false\n      } else if (config.leftLog && +xPoint === 0) {\n        valOk = false\n      } else if (config.rightLog && +yPoint === 0) {\n        valOk = false\n      }\n      if (valOk) {\n        const valX = Number(xPoint) / xFactor\n        const valY = Number(yPoint) / yFactor\n        const pointObj = {\n          valX,\n          valY,\n          category: thisRow[config.catHead],\n          header: xHeader,\n          fillName: colours(xHeader),\n          fill: config.colourLookup[colours(xHeader)],\n          strokeName: colours(xHeader),\n          stroke: config.colourLookup[colours(xHeader)],\n          seriesNo: seriesCounter,\n        }\n        if (config.isSized) {\n          const zHeader = headerArray[cNo + 2]\n          const zPoint = thisRow[zHeader]\n          pointObj.valZ = Number(zPoint)\n        }\n        // The datapoint object has to be pushed to the series\n        // array as an *array element*.\n        mappedData[seriesCounter].push([pointObj])\n      }\n      seriesCounter++\n    }\n  }\n  return mappedData\n}\n// MAP SCATTER SERIES DATA\n\n// GET SERIES BASE VALS\n// For stacked charts\nexport function getSeriesBaseVals(pointCount) {\n  const baseVals = []\n  for (let aPt = 0; aPt < pointCount; aPt++) {\n    baseVals.push({\n      negBase: 0,\n      posBase: 0,\n    })\n  }\n  return baseVals\n}\n// GET SERIES BASE VALS ends\n\n// MAKE BAR-COL SERIES GROUP BINDING\nexport function makeBarColSeriesGroupBinding(\n  mainSeriesGroup,\n  mappedData,\n  duration,\n  chartType\n) {\n  const groupBinding = mainSeriesGroup\n    .selectAll('.series-group')\n    .data(mappedData)\n  // Enter, appending class\n  groupBinding\n    .enter()\n    .append('g')\n    .attr('id', (ddd, iii) => `series-group series-${iii}`)\n  // No update\n  // Exit\n  groupBinding\n    .exit()\n    .selectAll(`.d3-${chartType}-rect`)\n    .transition()\n    .duration(duration)\n    .attr('width', 0)\n  // Exit\n  groupBinding\n    .exit()\n    .transition()\n    .delay(duration)\n    .remove()\n  return groupBinding\n}\n// MAKE BAR-COL SERIES GROUP BINDING ends\n\n// EXTEND LAYER FILL\n// Called from Lineseries.extendAllLayerFills to 'extend' layer cake\n// fills to zero by prefixing and appending zero points to path\n// In here to work round D3 'this' issue\nexport function extendLayerFill(fillPath, scaleZero, duration) {\n  // Wait until transition is complete. I have to do this the\n  // hard way: isolating the first and last elements in the svg path and\n  // duplicating them with y-moves to scale-zero\n  setTimeout(() => {\n    const elem = document.getElementById(fillPath.attr('id'))\n    let pathStr = elem.getAttribute('d')\n    // Convert string to array\n    const pathArray = pathStr.split('L')\n    pathStr = pathStr.replace('M', 'L')\n    // Drop initial 'M' (moveto). So now entire array is [x,y] vals\n    pathArray[0] = pathArray[0].replace('M', '')\n    // Get first point, set y-point to zero and prepend to path string\n    const firstPt = pathArray[0].split(',')\n    // x-coord: just the value\n    firstPt[1] = scaleZero\n    // This is now the 'moveto':\n    pathStr = `M ${firstPt.join()}${pathStr}`\n    // Ditto last point\n    const paLen = pathArray.length - 1\n    const lastPt = pathArray[paLen].split(',')\n    lastPt[1] = scaleZero\n    pathStr += `L ${lastPt.join()}`\n    // Reset entire path\n    elem.setAttribute('d', pathStr)\n    // And, now that the path is complete, make it visible\n    elem.setAttribute('opacity', 1)\n  }, duration)\n}\n// EXTEND LAYER FILL ends\n\n// ADD STEPLINE SPUR\n// Called from Lineseries.addAllSteplineSpurs to append the short\n// horizontal spur at the end of a stepline that ends with a vertical\n// In here to work round D3 'this' issue\nexport function addSteplineSpur(line, spur) {\n  const elem = document.getElementById(line.attr('id'))\n  let pathStr = elem.getAttribute('d')\n  // Convert string to array\n  const pathArray = pathStr.split('L')\n  const paLen = pathArray.length - 1\n  // Get the last point two points:\n  const ultPt = pathArray[paLen].split(',')\n  const penUltPt = pathArray[paLen - 1].split(',')\n  // If the ult y-value is different from the penult, we need a spur\n  if (ultPt[1] !== penUltPt[1]) {\n    // Increase x-coord and append to path string\n    ultPt[0] = Number(ultPt[0]) + spur\n    pathStr += `L ${ultPt.join()}`\n    // Reset entire path\n    elem.setAttribute('d', pathStr)\n  }\n}\n// ADD STEPLINE SPUR ends\n\n// GET SERIES CLUSTER WIDTH AND PADDING\n// Called from:\n//    ColumnChart.configSeriesColumns\n//    MixedChart.configSeriesMixed\n//    BarChart.configSeriesBars\n// Returns revised clusterwidth and padding, after\n// margins of IB have been adjusted for\n// projecting elements\n// FIXME: duplicates AxisUtils.getHalfClusterWidthForAxis\nexport function getSeriesClusterWidthAndPadding(config, isBars) {\n  let lookup = config.series.column\n  let bound = config.innerBox.width\n  // But, if bar chart:\n  if (isBars) {\n    lookup = config.series.bar\n    bound = config.innerBox.height\n  }\n  const pCountMinusOne = Math.max(config.pointCount - 1, 1)\n  // -1 because series range will be one cluster wider than inner box\n  // (half-cluster left and right). But mustn't be < 1 !!\n  const defaultPadding = lookup.gap\n  // Add up total amount of default padding\n  //\n  const paddingTotal = pCountMinusOne * defaultPadding\n  let clusterWidth = (bound - paddingTotal) / pCountMinusOne\n  // But what if cluster is too narrow?\n  const absoluteMinWidth = lookup.absoluteMinWidth\n  const minWidth = lookup.minWidth\n  const maxWidth = lookup.maxWidth\n  const narrowGap = lookup.narrowGap\n  let padding = defaultPadding\n  // Check for min/max column width...\n  if (clusterWidth < absoluteMinWidth) {\n    padding = 0\n    clusterWidth = bound / pCountMinusOne\n  } else if (clusterWidth < minWidth) {\n    clusterWidth = bound / pCountMinusOne - narrowGap\n    padding = narrowGap\n  } else if (!isBars && clusterWidth > maxWidth) {\n    // Max only applies to columns\n    clusterWidth = maxWidth\n    const aggregateClusterWidth = clusterWidth * pCountMinusOne\n    padding = (bound - aggregateClusterWidth) / pCountMinusOne\n  }\n  return {\n    clusterWidth,\n    padding,\n  }\n}\n// GET SERIES CLUSTER WIDTH AND PADDING ends\n","// This is cannibalised from Plunker's\n// Word wrap plugin for D3.js\n// https://embed.plnkr.co/plunk/YBCAc3\n\nimport * as d3 from 'd3'\n// import * as ChartUtilities from '../chart-utilities';\n\n/*  These attributes must be set on the incoming\n    text elements:\n      x\n      y\n      leading\n      anchor\n*/\n\n// WRAP ALL TEXT ELEMENTS\n// Called from various text-updating functions to wrap\n// an array of bound elements. Params are:\n//    the array of elements to wrap\n//    required properties\n//    the original 'this' context\n//    callback after wrapping\n//    an optional flag to trip debugging\n//    NOTE: get rid of the debug flag\nexport function wrapAllTextElements(\n  textElementArray,\n  textWrapConfig,\n  globalThis,\n  afterTextWrap,\n  debugFlag\n) {\n  // Colours lookup now redundant\n  // const colours = textWrapConfig.colours;\n  // For callback: no of lines in each element\n  // (passed in empty)\n  const lineCountArray = []\n  // If the debugFlag exists, trips a debug point\n  // NOTE: kill this... eventually\n  if (typeof debugFlag !== 'undefined') {\n    // eslint-disable-next-line no-debugger\n    debugger\n  }\n  textElementArray.each(function() {\n    const textElement = d3.select(this)\n    wrapOneTextElement(textElement, textWrapConfig, lineCountArray)\n  })\n  // If there's a callback, execute it\n  if (typeof afterTextWrap !== 'undefined') {\n    afterTextWrap(globalThis, lineCountArray, textWrapConfig)\n  }\n}\n// WRAP ALL TEXT ELEMENTS ends\n\n// WRAP ONE TEXT ELEMENT\n// Called from wrapAllTextElements\n// Params are a text element and the width to which to wrap\nexport function wrapOneTextElement(textElement, config, lineCountArray) {\n  // Unpack the config properties: wrap width & tag to force line turns\n  const wrapWidth = config.wWidth\n  const forceTurn = config.forceTurn\n  const forcePx = config.forcePx\n  // Arrayify text into individual words\n  const firstArray = textElement.text().split(' ')\n  // forceTurns may occur mid-word, so:\n  const wordArray = splitArrayAtReturnTags(firstArray, forceTurn)\n  // Next append words one at a time to make a line,\n  // checking width until the line breaks (or finding forced turns)\n  // In the resulting lineArray:\n  //  -  each element representss one line\n  //  -  each line-element is a sub-array of words\n  const lineArray = [[]]\n  let lineCount = 0\n  // Loop by words\n  wordArray.forEach(function(ddd) {\n    // Append one word at a time a line string\n    const lineSoFar = lineArray[lineCount].concat(ddd).join(' ')\n    // Test whether it breaks the line\n    // NOTE: this seems a bit cumbersome. Can I improve?\n    textElement.text(lineSoFar)\n    if (ddd.includes(forceTurn)) {\n      // Word ends with tag. Push the detagged word\n      // to the existing line, and add a new line-element\n      // to the array\n      lineArray[lineCount].push(ddd.replace(forceTurn, ''))\n      lineCount++\n      lineArray[lineCount] = []\n    } else if (lineBreaks(textElement, wrapWidth)) {\n      // String should auto-turn. Add new line-element\n      // to the array, and push the word there\n      lineCount++\n      lineArray[lineCount] = []\n      lineArray[lineCount].push(ddd)\n    } else {\n      // Just push the word to the existing line\n      lineArray[lineCount].push(ddd)\n    }\n  })\n  // I may have an empty first element, which I kill:\n  // FIXME: this happens if first word breaks width,\n  // so fix upstairs... one day...\n  if (lineArray[0].length === 0) {\n    lineArray.shift()\n  }\n  // Re-concatenate sub-arrays of words back into strings\n  const joinedArray = lineArray.map((line) => line.join(' '))\n  // If individual lines contain emphasis tags, I have to\n  // separate those out into separate elements, so that\n  // each element of the array represents a tspan\n  const tSpanReadyArray = makeTspanReadyArray(joinedArray)\n  textElement.call(tSpanify, tSpanReadyArray, forcePx)\n  // Append the number of *lines* to the counter-array\n  lineCountArray.push(joinedArray.length)\n}\n// WRAP ONE TEXT ELEMENT ends\n\n// MAKE THREE NB-SPACES\n// Called from splitArrayAtReturnTags. Just returns\n// 3 non-breaking spaces\nexport function makeThreeNbSpaces() {\n  const nbsp = String.fromCharCode(160)\n  return `${nbsp}${nbsp}${nbsp}`\n}\n// MAKE THREE NB-SPACES ends\n\n// SPLIT ARRAY AT RETURN TAGS\n// Called from wrapOneTextElement to handle mid-word return tags\n// Result is an array of words, with tag attached to word\n// after which we turn the line\nexport function splitArrayAtReturnTags(myArray, forceTurn) {\n  const result = []\n  const threeNbSpaces = makeThreeNbSpaces()\n  for (let iii = 0; iii < myArray.length; iii++) {\n    const word = myArray[iii]\n    if (word.includes(forceTurn)) {\n      const splitWord = word.split(forceTurn)\n      // If there's a tag, split word there and push\n      // (all words except last, with tag)\n      const wLen = splitWord.length - 1\n      for (let wNo = 0; wNo < wLen; wNo++) {\n        let el = splitWord[wNo]\n        // Don't delete the three nbsps that precede\n        // a footnote symbol\n        if (!el.includes(threeNbSpaces)) {\n          el = el.trim()\n        }\n        if (el.length > 0) {\n          // If turned at end of string, ignore empty element\n          result.push(`${el}${forceTurn}`)\n        }\n      }\n      // last word (no tag)\n      result.push(splitWord[wLen].trim())\n    } else {\n      // No tag, just push the word\n      result.push(word)\n    }\n  }\n  return result\n}\n// SPLIT ARRAY AT RETURN TAGS\n\n// LINE BREAKS\n// Called from wrapOneTextElement to determine whether text needs\n// to autowrap. Removes tags before checking.\nexport function lineBreaks(textElement, wrapWidth) {\n  const tNode = textElement.node()\n  const originalContent = tNode.innerHTML\n  // Strip opening and closing emphasis tags\n  const openIt = '&lt;i&gt;'\n  const closeIt = '&lt;/i&gt;'\n  const openBo = '&lt;b&gt;'\n  const closeBo = '&lt;/b&gt;'\n  let testContent = originalContent.replace(openIt, '')\n  testContent = testContent.replace(closeIt, '')\n  testContent = testContent.replace(openBo, '')\n  testContent = testContent.replace(closeBo, '')\n  // Remove any 'nospace' tag (allows mid-word ital'n)\n  testContent = testContent.replace('nospacebefore', '')\n  testContent = testContent.replace('nospaceafter', '')\n  // Test length with stripped content\n  tNode.innerHTML = testContent\n  const bbx = tNode.getBBox()\n  const turnLine = bbx.width > wrapWidth\n  // Put original content back\n  tNode.innerHTML = originalContent\n  return turnLine\n}\n// LINE BREAKS ends\n\n// T-SPANIFY\n// Called from wrapOneTextElement to append tSpans to the\n// text element\n// Each element of lineArray is one line of the string\n// (as determined by autowrap or hard return). Each line element\n// is, in turn, an array of individual words\nexport function tSpanify(textElement, lineArray) {\n  const teX = +textElement.attr('x')\n  const leading = +textElement.attr('leading')\n  const fontFamily = textElement.style('font-family')\n  // Empty the actual text element: we only want t-spans\n  textElement.text('')\n  textElement\n    .selectAll('tspan')\n    .data(lineArray)\n    .enter()\n    .append('tspan')\n    .attr({\n      x: (ddd) => {\n        let xPos = null\n        if (ddd.newline) {\n          xPos = teX\n        }\n        return xPos\n      },\n      // See below for y\n    })\n    .style({\n      'font-family': (ddd) => {\n        let fam = fontFamily\n        if (ddd.italics) {\n          fam = `${fam}Ita`\n        }\n        return fam\n      },\n    })\n    .text((ddd) => ddd.content)\n\n  // I only want to reset y coord on tSpans that\n  // start a new line (so don't move italicised spans)\n  // Start at y - leading: first 'newline' will bring us\n  // into position\n  let teY = +textElement.attr('y') - leading\n  textElement.selectAll('tspan').each(function() {\n    const thisSpan = d3.select(this)\n    thisSpan.attr({\n      y: (ddd) => {\n        let yPos = null\n        if (ddd.newline) {\n          // Increment y coord\n          teY += leading\n          yPos = teY\n        }\n        return yPos\n      },\n    })\n  })\n}\n// T-SPANIFY ends\n\n// MAKE T-SPAN-READY ARRAY\n// Called from wrapOneTextElement.\n// The arg is an array of lines of text in a text element\n// However, I need to generate separate tSpans for any\n// italicised strings. So this function creates those.\nexport function makeTspanReadyArray(lineArray) {\n  // New array of all tspan definitions\n  const spannedArray = []\n  const tagRx = /<.*?>/\n  // Initially, italics are off\n  let iOn = false\n  for (let lineNo = 0; lineNo < lineArray.length; lineNo++) {\n    const thisLine = lineArray[lineNo]\n    if (thisLine.match(tagRx) === null) {\n      // No tags: append to array,\n      // flagged as new line, with inherited italicisation\n      spannedArray.push({\n        content: thisLine,\n        italics: iOn,\n        newline: true,\n      })\n    } else {\n      // Pass tagged lines to a handler. The array\n      // will be updated by ref with new tpan defs.\n      // iOn is italics state at end of line, to carry\n      // forward to next...\n      iOn = unpickTaggedLine(thisLine, iOn, spannedArray)\n    }\n  }\n  return spannedArray\n}\n// MAKE T-SPAN-READY ARRAY ends\n\n// UNPICK TAGGED LINE\n// Called from makeTspanReadyArray\n// Args are the line of text; the inherited italics flag;\n// the ongoing array, to which items will be appended\nexport function unpickTaggedLine(thisLine, iOn, spannedArray) {\n  const tagRx = /<.*?>/g\n  const openItal = '<i>'\n  const len = thisLine.length\n  const matches = Array.from(thisLine.matchAll(tagRx))\n  // matches is an array of objs with props like:\n  //    0: \"<i>\"\n  //    index: 15\n  // Start of line:\n  let posA = 0\n  // First element will be a new line; for subsequent elements\n  // flag is false.\n  let newline = true\n  for (let iii = 0; iii < matches.length; iii++) {\n    const myMatch = matches[iii]\n    const posB = myMatch.index\n    const content = thisLine.substring(posA, posB)\n    // Only append the span (and reset newline) if it has content\n    if (content.length > 0) {\n      spannedArray.push({\n        content,\n        italics: iOn,\n        newline,\n      })\n      newline = false\n    }\n    posA = posB + myMatch[0].length\n    iOn = myMatch[0] === openItal\n  }\n  // Append remainder of line\n  spannedArray.push({\n    content: thisLine.substring(posA, len),\n    italics: iOn,\n    newline,\n  })\n  // Return italics state for next line...\n  return iOn\n}\n// UNPICK TAGGED LINE\n\n// FIX ITALICS TAGS\n// I have to 'fix' the text object's 'content' attr,\n// since if it contains the <i> or </i> tags, that invalidates the SVG.\n// So replace '<>' with '[]'\nexport function fixItalicsTags(thisText) {\n  let iFixStr = thisText.attr('content').replace(/</g, '[')\n  iFixStr = iFixStr.replace(/>/g, ']')\n  iFixStr = iFixStr.replace('nospacebefore', '')\n  iFixStr = iFixStr.replace('nospaceafter', '')\n  thisText.attr('content', iFixStr)\n}\n// FIX ITALICS TAGS ends\n\n// FIX CHEVRONS\n// I have to 'fix' the text object's 'content' attr,\n// since if it contains the <i> or </i> tags, that invalidates the SVG.\n// So replace '<>' with '[]'\nexport function fixChevrons(thisText) {\n  let iFixStr = thisText.attr('content').replace(/</g, '[')\n  iFixStr = iFixStr.replace(/>/g, ']')\n  iFixStr = iFixStr.replace('nospacebefore', '')\n  iFixStr = iFixStr.replace('nospaceafter', '')\n  thisText.attr('content', iFixStr)\n}\n// FIX CHEVRONS ends\n\n// GET TEXT AND TSPANS MOVE\n// Variously called to count newline tspans and return\n// either the number of lines or the distance by which\n// an element has to be moved vertically\nexport function getTextAndTspansMove(d3El, leading = 1) {\n  let tweak = 0\n  if (leading > 1) {\n    // To get a move-distance, rather than number of lines\n    tweak -= leading\n  }\n  d3El.selectAll('tspan').each(function() {\n    const thisSpan = d3.select(this)\n    const spanY = thisSpan.attr('y')\n    if (spanY !== null) {\n      tweak += leading\n    }\n  })\n  return tweak\n}\n// GET TEXT AND TSPANS MOVE ends\n\n// MOVE TEXT AND TSPANS\n// As previous, except that passed text is a D3 selection\n// FIXME: a little consistency wouldn't go amiss\nexport function moveTextAndTspans(tElement, moveBy) {\n  const yPos = +tElement.attr('y')\n  tElement.attr('y', yPos + moveBy)\n  tElement.selectAll('tspan').each(function() {\n    const thisSpan = d3.select(this)\n    const spanY = thisSpan.attr('y')\n    // Only tweak tspans that start a new line\n    if (spanY !== null) {\n      thisSpan.attr('y', +spanY + moveBy)\n    }\n  })\n}\n// MOVE D3 TEXT AND TSPANS\n","// For D3:\n/* eslint-disable prefer-reflect, func-names, no-invalid-this,\n  consistent-this */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as d3 from 'd3'\n// import * as _ from 'lodash'\n\n// Utilities modules\nimport * as ChartUtils from '../chart-utilities'\nimport * as TextWrapping from '../chartside-utilities/text-wrapping'\n// Chart number box\nimport * as NumberBox from './numberbox'\n\n// copied from lodash src (lodash causing build issues with Rollup)\nfunction isNil(value) {\n  return value == null\n}\n\nclass SilverBackground extends Component {\n  // DEFAULT PROPS\n  // This component maintains class names for the elements that it appends\n  static get defaultProps() {\n    return {\n      stringClasses: {\n        title: { class: 'silver-d3-title-string' },\n        subtitle: { class: 'silver-d3-subtitle-string' },\n        subsubtitle: { class: 'silver-d3-subsubtitle-string' },\n        source: { class: 'silver-d3-source-string' },\n        footnote: { class: 'silver-d3-footnote-string' },\n      },\n    }\n  }\n\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    // I think I have to track the IB as a global...\n    // NOTE: but check...\n    this.innerBoxBounds = []\n  }\n\n  componentDidMount() {\n    if (this.props.drawBackground) {\n      this.updateBackground()\n      this.updateBackgroundStrings()\n      this.callNumberBox()\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.drawBackground\n  }\n\n  componentDidUpdate() {\n    if (this.props.drawBackground) {\n      this.updateBackground()\n      this.updateBackgroundStrings()\n      this.callNumberBox()\n    }\n  }\n\n  // INSERT FOOTNOTE SPACES\n  // Passed a line of text, inserts nbsp chars before\n  // footnote symbols -- but not if it's a line turn\n  insertFootnoteSpaces(line) {\n    // NOTE: hard coding here -- better in DPs?\n    const nbsp = String.fromCharCode(160)\n    const sepCount = 3\n    // NOTE: this doesn't make sense...\n    // There'll be 4 spaces, but only insert 3 because italiciseTspan\n    // joins again with a space!\n    const nbSpaces = nbsp.repeat(sepCount)\n    // Allowed footnote symbols, preceded by breakable space\n    // I can work with just single symbols\n    const fSymbols = ['*', '†', '‡', '§', '**', '††', '‡‡', '§§']\n    for (let sNo = 0; sNo < fSymbols.length; sNo++) {\n      const sym = fSymbols[sNo]\n      const symPos = line.indexOf(sym)\n      // Check for preceding line return\n      // (Checking 4 and 5 back to cover space char that may not exist)\n      const newLine =\n        line.substring(symPos - 4, symPos) === '<br>' ||\n        line.substring(symPos - 5, symPos - 1) === '<br>'\n      // Nothing before first symbol, or after return\n      if (symPos > 0) {\n        if (newLine) {\n          // Delete possible preceding space\n          if (line[symPos - 1] === ' ' || line[symPos - 1] === nbsp) {\n            line = `${line.slice(0, symPos - 1)}${line.slice(symPos)}`\n          }\n        } else {\n          const thisSep = nbSpaces + sym\n          line = line.replace(sym, thisSep)\n        }\n      }\n    }\n    return line\n  }\n  // INSERT FOOTNOTE SPACES ends\n\n  // RESTATE STRINGS\n  // Appends classes (from internal prop) to strings.\n  // Then returns strings object as D3-friendly array.\n  restateStrings(strings) {\n    // Append class names to string definitions\n    const strList = Object.keys(strings)\n    const stringClasses = this.props.stringClasses\n    for (const str in strList) {\n      const sName = strList[str]\n      // Append class to each string object\n      strings[sName] = Object.assign(strings[sName], stringClasses[sName])\n      // Footnotes: four spaces before symbols\n      if (sName === 'footnote') {\n        const footer = strings[sName]\n        footer.content = this.insertFootnoteSpaces(footer.content)\n      }\n    }\n    // Filter out non-displaying source object, then convert to array (for D3)\n    // Also filter out numberbox, which is handled separately\n    const stringArray = Object.keys(strings)\n      .filter((key) => {\n        const str = strings[key]\n        let strOK = true\n        if (str.id.includes('source') && !str.display) {\n          strOK = false\n        } else if (str.id.includes('number')) {\n          strOK = false\n        }\n        return strOK\n      })\n      .map((key) => strings[key])\n    return stringArray\n  }\n  // RESTATE STRINGS ends\n\n  // UPDATE BACKGROUND\n  // Background shapes. (This doesn't affect the innerbox.)\n  updateBackground() {\n    const hundred = 100\n    const ten = 10\n    const config = this.props.config\n    // Populate an array of shapes to be drawn, checking 'display' prop\n    const backArray = []\n    for (const shape of config.background.shapes) {\n      if (shape.display) {\n        backArray.push(shape)\n      }\n    }\n    const chartHeight = config.background.outerbox.dimensions.height\n    const chartWidth = config.background.outerbox.dimensions.width\n    // Colours\n    const colours = config.metadata.colours\n    // Context\n    const marginsGroup = d3.select('.silver-chart-shapes-group')\n    const boundShape = marginsGroup.selectAll('rect').data(backArray)\n    // Enter\n    boundShape\n      .enter()\n      .append('rect')\n      .attr({\n        class: (ddd) => ddd.class,\n        // NOTE: default fill should probably be the same as the\n        // chartwrapper background fill...\n        fill: '#efefef',\n      })\n    // Update\n    boundShape\n      .transition()\n      .duration(config.other.duration)\n      .attr({\n        id: (ddd) => {\n          let idStr = ddd.id\n          const fill = ddd.fill\n          const stroke = ddd.stroke\n          const hasColours =\n            typeof fill !== 'undefined' || typeof stroke !== 'undefined'\n          if (hasColours) {\n            // Separator for Illy\n            idStr += '~~~'\n            if (typeof fill !== 'undefined') {\n              idStr += `fill:${fill},`\n            }\n            if (typeof stroke !== 'undefined') {\n              idStr += `stroke:${stroke},`\n            }\n            // Delete final rogue comma:\n            idStr = idStr.replace(/,$/, '')\n          }\n          return idStr\n        },\n        x: (ddd) => ddd.x,\n        y: (ddd) => ddd.y,\n        // Height and width can be absolute px values, or a percent\n        // of the containing outerbox...\n        height: (ddd) => {\n          // Default is value from context config\n          let height = ddd.height\n          // But if element's size is adjustable, express as % of outerbox\n          // (assumed to be percent val)\n          if (ddd.adjustable.height) {\n            const percent = parseFloat(ddd.height, ten)\n            height = (chartHeight / hundred) * percent\n          }\n          return height\n        },\n        width: (ddd) => {\n          let width = ddd.width\n          if (ddd.adjustable.width) {\n            const percent = parseFloat(ddd.width, ten)\n            width = (chartWidth / hundred) * percent\n          }\n          return width\n        },\n        fill: (ddd) => ChartUtils.getColour(ddd, colours, true),\n      })\n    // Exit\n    boundShape.exit().remove()\n  }\n  // UPDATE BACKGROUND ends\n\n  // GET TEXT ANCHOR\n  getTextAnchor(anchor, x) {\n    // if anchor is defined via config and it's a valid value,\n    // just take the value, otherwise...\n    if (!isNil(anchor) && ['start', 'middle', 'end'].includes(anchor))\n      return anchor\n    //...apply the following logic:\n    // Strings positioned from right have negative x val\n    return x < 0 ? 'end' : 'start'\n  }\n  // GET TEXT ANCHOR ends\n\n  // UPDATE BACKGROUND STRINGS\n  // Draws the various background strings to positions\n  // determined by prefs. Then does D3.call to wrapText to\n  // handle wrapping, with callback to do position tweaks,\n  // based on wrapping...\n  updateBackgroundStrings() {\n    const globalThis = this\n    const config = this.props.config\n    const strings = config.background.strings\n    // Add value to strings and convert to D3-friendly array\n    // excluding numberbox and non-displaying source\n    const stringArray = this.restateStrings(strings)\n    const chartWidth = config.background.outerbox.dimensions.width\n    const chartHeight = config.background.outerbox.dimensions.height\n    // Width for wrapping is less margins:\n    const wrappingWidth =\n      chartWidth -\n      (config.background.margins.left + config.background.margins.right)\n    const colours = config.metadata.colours\n    // Context\n    const stringsGroup = d3.select('.silver-chart-strings-group')\n    // Bind text strings to D3 group:\n    const boundText = stringsGroup.selectAll('text').data(stringArray)\n    // Enter\n    boundText.enter().append('text')\n    const textWrapConfig = {\n      wWidth: wrappingWidth,\n      forceTurn: globalThis.props.config.metadata.forceTurn,\n    }\n\n    // Update\n    boundText\n      .attr({\n        class: (ddd) => ddd.class,\n        id: (ddd) => {\n          const id = ddd.id\n          const fill = ddd.fill\n          const justification = this.getTextAnchor(ddd.anchor, ddd.x)\n          const leading = ddd.leading\n          const tID = ChartUtils.getTextID(id, fill, justification, leading)\n          return tID\n        },\n        x: (ddd) => {\n          let xPos = ddd.x\n          if (xPos === 'center') {\n            xPos = chartWidth / 2\n          } else if (xPos < 0) {\n            // Negative x is relative to right of chart\n            xPos += chartWidth\n          }\n          return xPos\n        },\n        y: (ddd) => {\n          let yPos = ddd.y\n          if (yPos < 0) {\n            // Negative y is relative to bottom of chart\n            yPos += chartHeight\n          }\n          return yPos\n        },\n        leading: (ddd) => ddd.leading,\n      })\n      .text((ddd) => ddd.content)\n      .style({\n        fill: (ddd) => ChartUtils.getColour(ddd, colours, true),\n        'font-family': (ddd) => ddd['font-family'],\n        'letter-spacing': (ddd) => {\n          // Only title strings have tracking defined:\n          let spacing = 0\n          if (typeof ddd['letter-spacing'] !== 'undefined') {\n            spacing = ddd['letter-spacing']\n          }\n          return spacing\n        },\n        'font-size': (ddd) => `${ddd['font-size']}px`,\n        'text-anchor': (ddd) => this.getTextAnchor(ddd.anchor, ddd.x),\n      })\n    // Text wrapping\n    boundText.call(\n      TextWrapping.wrapAllTextElements,\n      textWrapConfig,\n      globalThis,\n      globalThis.adjustBackgroundStringPositions\n    )\n    // Exit\n    boundText.exit().remove()\n  }\n  // UPDATE BACKGROUND STRINGS ends\n\n  // ADJUST BACKGROUND STRING POSITIONS\n  // Callback from wrapText.\n  // Inferentially adjust positions of title, subtitle, subsubtitle & footnote\n  // to allow for any wrapping. These tweaks determine 2 adjustments\n  // -- top and bottom -- for the innerbox bounds...\n  // ...which are returned to Chartwrapper\n  adjustBackgroundStringPositions(globalThis, lineCountArray) {\n    const config = globalThis.props.config\n    const strings = config.background.strings\n    const stringClasses = globalThis.props.stringClasses\n    // Cumulative margin of IB from top of chart\n    let topMargin = 0\n    // Running adjustment for turned strings\n    let turnExtra = 0\n    // === === === Title string\n    const titleClass = `.${stringClasses.title.class}`\n    const titleString = d3.select(titleClass)\n    // Move it and adjust top margin\n    const yPos = strings.title.y\n    topMargin = yPos\n    titleString.attr('y', yPos)\n    // Does the title wrap? Get leading and number of extra lines\n    const tLeading = strings.title.leading\n    // Extra padding for wrapping\n    turnExtra += (lineCountArray[0] - 1) * tLeading\n    topMargin = +titleString.attr('y') + turnExtra\n    // === === === Subtitle\n    const subtitleClass = `.${stringClasses.subtitle.class}`\n    const subtitleString = d3.select(subtitleClass)\n    // Subtitle string may be empty, so...\n    const subtitleExists =\n      !subtitleString.empty() && subtitleString.text().length > 0\n    if (subtitleExists) {\n      // Adjust position\n      TextWrapping.moveTextAndTspans(subtitleString, turnExtra)\n      const stLeading = strings.subtitle.leading\n      const stExtra = (lineCountArray[1] - 1) * stLeading\n      turnExtra += stExtra\n      topMargin = +subtitleString.attr('y') + stExtra\n    }\n    // === === === Sub-subtitle\n    const sstClass = `.${stringClasses.subsubtitle.class}`\n    const sstString = d3.select(sstClass)\n    // Sub-subtitle string may be empty, so...\n    const sstExists = !sstString.empty() && sstString.text().length > 0\n    if (sstExists) {\n      TextWrapping.moveTextAndTspans(sstString, turnExtra)\n      // ChartUtils.moveTextWithTspans(sstString, turnExtra);\n      const sstLeading = strings.subsubtitle.leading\n      const sstExtra = (lineCountArray[2] - 1) * sstLeading\n      turnExtra += sstExtra\n      topMargin = +sstString.attr('y') + sstExtra\n    }\n    // === === === Source and footnote\n    // Handler returns amount by which to adjust bottom margin\n    let bottomMargin\n    if (strings.footnote.aboveSource) {\n      // Footnote stacked above source\n      bottomMargin = globalThis.adjustSourceAndFootnoteStacked(globalThis)\n    } else {\n      // Source and footnote are side by side\n      bottomMargin = globalThis.adjustSourceAndFootnoteLevel(globalThis)\n    }\n    // FIXME: 1) this is an unholy mess\n    //       2) this whole function needs refactoring, anyway\n    // At this point I have:\n    //    topMargin: baseline of bottom line of title cluster\n    //    bottomMargin: baseline of top line of source/footnote cluster\n    // Assemble and return a global (i.e. pre-panels) inner box object:\n    const bGrd = config.background\n    const mLeft = bGrd.margins.left\n    const mRight = bGrd.margins.right\n    const globalInnerBox = {\n      x: mLeft,\n      width: bGrd.outerbox.dimensions.width - (mLeft + mRight),\n      y: topMargin,\n      height: bGrd.outerbox.dimensions.height - (topMargin + bottomMargin),\n    }\n    // Let the background draw before proceeding\n    setTimeout(() => {\n      globalThis.props.onGetGlobalInnerBox(globalInnerBox)\n    }, config.other.duration * 1.5)\n  }\n  // ADJUST BACKGROUND STRING POSITIONS ends\n\n  // ADJUST SOURCE AND FOOTNOTE LEVEL\n  // Called from adjustBackgroundStringPositions to set\n  // positions of source and footnote strings and make any\n  // adjustment to bottom margin. This function deals with source\n  // and footnote 'level'. We move them up to allow for turned lines,\n  // then measure the number of lines to get bottom margin\n  adjustSourceAndFootnoteLevel(globalThis) {\n    const config = globalThis.props.config\n    const strings = config.background.strings\n    const chartHeight = config.background.outerbox.dimensions.height\n    // const chartWidth = config.background.outerbox.dimensions.width;\n    const sourceString = d3.select('.silver-d3-source-string')\n    const sourceExists = !sourceString.empty() && sourceString.text().length > 0\n    const footnoteString = d3.select('.silver-d3-footnote-string')\n    const footnoteExists =\n      !footnoteString.empty() && footnoteString.text().length > 0\n    // By default, source and footnote are in position above bottom\n    // Get extra height of wrapped source and footnote (leading * (lines - 1))\n    let sourceMove = 0\n    let footnoteMove = 0\n    let bottomMargin = 0\n    let footnoteYPos = chartHeight\n    let sourceYPos = footnoteYPos\n    // let footnoteXPos = 0;\n\n    if (sourceExists) {\n      sourceYPos = chartHeight + strings.source.y\n      sourceMove = TextWrapping.getTextAndTspansMove(\n        sourceString,\n        strings.source.leading\n      )\n    }\n    // some presets like Films, want to keep the background margin bottom even\n    // when there is no source or footnote to add. In that case the preset comes\n    // with a keepBottomMargin flag. If true, the area chart grows until sitting\n    // on the original source position\n    else if (strings.source.keepBottomMargin) {\n      sourceYPos = chartHeight + strings.source.y\n      sourceMove = TextWrapping.getTextAndTspansMove(\n        sourceString,\n        strings.source.leading\n      )\n      sourceYPos += strings.source.keepBottomMarginOffset\n    }\n    if (footnoteExists) {\n      footnoteYPos = chartHeight + strings.footnote.y\n      footnoteMove = TextWrapping.getTextAndTspansMove(\n        footnoteString,\n        strings.footnote.leading\n      )\n      // NOTE: inferential to footnotes -- I 'know' they're right-aligned!\n      // footnoteXPos = strings.footnote.x;\n      // if (footnoteXPos < 0) {\n      //   footnoteXPos += chartWidth;\n      // }\n    }\n    // Which is greater?\n    const bottomMove = Math.max(sourceMove, footnoteMove)\n    // NOTE: inferential. It all assumes\n    //    (a) that the source and footnote are at the bottom, and\n    //    (b) that they're 'level'.\n    // So there's redundancy here (going back, actually, to the lookup file)\n\n    let basesaligned = true\n    if (sourceExists) {\n      basesaligned = strings.source.wrapoptions.basealigned\n    }\n    // We have to move text element and t-spans.\n    // Default is for both to move by their height\n    // But is bottom-aligned...\n    if (!basesaligned) {\n      sourceMove = bottomMove\n      footnoteMove = bottomMove\n    }\n    if (sourceExists) {\n      globalThis.moveSourceAndFootnote(sourceString, sourceMove)\n    }\n    if (footnoteExists) {\n      globalThis.moveSourceAndFootnote(footnoteString, footnoteMove)\n    }\n\n    // And adjust bottom margin:\n    // I get the absolute xpos of topmost baseline, from top of chart\n    // Basline is chart height minus that value\n    const highestBaseline = Math.min(sourceYPos, footnoteYPos)\n    bottomMargin = chartHeight - highestBaseline\n    return bottomMargin + bottomMove\n  }\n  // ADJUST SOURCE AND FOOTNOTE LEVEL ends\n\n  // ADJUST SOURCE AND FOOTNOTE STACKED\n  // Called from adjustBackgroundStringPositions to set\n  // positions of source and footnote strings and make any\n  // adjustment to bottom margin. Here, footnote is stacked above\n  // source. Move source up to allow for turned lines; then footnote\n  // above it; then margin below axis\n  adjustSourceAndFootnoteStacked(globalThis) {\n    const config = globalThis.props.config\n    const strings = config.background.strings\n    const chartHeight = config.background.outerbox.dimensions.height\n    // const chartWidth = config.background.outerbox.dimensions.width;\n    const sourceString = d3.select('.silver-d3-source-string')\n    const sourceExists = !sourceString.empty() && sourceString.text().length > 0\n    const footnoteString = d3.select('.silver-d3-footnote-string')\n    const footnoteExists =\n      !footnoteString.empty() && footnoteString.text().length > 0\n    // At this point, source and footnote are in position at the bottom\n    // of the chart, correctly aligned left/right\n    // Get absolute default ypos of source, and extra height of\n    // wrapped string (leading * (lines - 1)). Then move source\n    let baselineYPos = 0\n    let sourceMove = 0\n\n    // some presets (i.e. Films. want to keep the background margin bottom even\n    // when there is no source or footnote to add. In that case the preset comes\n    // with a keepBottomMargin flag)\n    if (sourceExists || strings.source.keepBottomMargin) {\n      sourceMove = TextWrapping.getTextAndTspansMove(\n        sourceString,\n        strings.source.leading\n      )\n      // Set to distance from top of chart to source baseline:\n      baselineYPos = chartHeight + strings.source.y\n      globalThis.moveSourceAndFootnote(sourceString, sourceMove)\n    }\n    let footnoteMove = sourceMove\n    // Gap between footnote and source\n    const gap = strings.footnote.sourceGap\n    if (footnoteExists) {\n      if (sourceExists) {\n        footnoteMove += gap\n      } else {\n        // Inelegant; but fixes issue when no source\n        baselineYPos = chartHeight + strings.footnote.y\n      }\n      footnoteMove += TextWrapping.getTextAndTspansMove(\n        footnoteString,\n        strings.footnote.leading\n      )\n      globalThis.moveSourceAndFootnote(footnoteString, footnoteMove)\n      // Inferential to footnotes. Right-aligned is\n      // flagged by a minutely-negative x value, set in prefs\n      // let footnoteXPos = strings.footnote.x;\n      // if (footnoteXPos < 0) {\n      //   footnoteXPos += chartWidth;\n      // }\n      baselineYPos -= footnoteMove\n    } else {\n      baselineYPos -= sourceMove\n    }\n    // We want to return the distance between the baseline of the\n    // topmost element of source/footnote and the bottom of the chart\n    return chartHeight - baselineYPos\n  }\n  // ADJUST SOURCE AND FOOTNOTE STACKED ends\n\n  // MOVE SOURCE AND FOOTNOTE\n  // Called from adjustSourceAndFootnoteLevel/Stacked. Moves source\n  // and footnote elements specifically, with child t-spans\n  moveSourceAndFootnote(tElement, yMove) {\n    // Move the text element\n    const xPos = +tElement.attr('x')\n    tElement.attr({\n      y: () => {\n        let moveY = tElement.attr('y')\n        moveY -= yMove\n        return moveY\n      },\n    })\n    // Move tSpans\n    tElement.selectAll('tspan').each(function () {\n      const thisSpan = d3.select(this)\n      thisSpan.attr({\n        x: () => {\n          let myX = null\n          if (thisSpan.attr('y') !== null) {\n            myX = xPos\n          }\n          return myX\n        },\n        y: () => {\n          let moveY = null\n          const spanY = thisSpan.attr('y')\n          if (spanY !== null) {\n            moveY = +spanY - yMove\n          }\n          return moveY\n        },\n      })\n    })\n  }\n  // MOVE SOURCE AND FOOTNOTE ends\n\n  callNumberBox() {\n    const config = this.props.config\n    const bgID = '#background-group'\n    NumberBox.updateNumberBox(config, bgID)\n  }\n\n  // RENDER\n  // Just render the svg group. Everything else is appended\n  // from componentDidMount\n  render() {\n    return (\n      <g className=\"silver-chart-background-group\" id=\"background-group\">\n        <g className=\"silver-chart-shapes-group\" id=\"shapes-group\" />\n        <g className=\"silver-chart-strings-group\" id=\"strings-group\" />\n        <g className=\"silver-chart-panels-group\" id=\"panels-group\" />\n      </g>\n    )\n  }\n}\n\nSilverBackground.propTypes = {\n  config: PropTypes.object,\n  drawBackground: PropTypes.bool,\n  stringClasses: PropTypes.object,\n  // eslint-disable-next-line react/no-unused-prop-types\n  onGetGlobalInnerBox: PropTypes.func.isRequired,\n}\n\nexport default SilverBackground\n","import * as d3 from 'd3'\n\n// UPDATE NUMBER BOX\n// Called from Background.callNumberBox. This one's\n// cheap and cheerful...\nexport function updateNumberBox(config, bgName) {\n  const backgroundGroup = d3.select(bgName)\n  // Remove existing\n  backgroundGroup.select('.numberbox-group').remove()\n  const nbData = []\n  const nbVal = config.background.strings.numberBox.content\n  // Exclude empty string, pass numbers and '?'\n  // (also trapped in numberbox-editor)\n  let valIsGood = false\n  if (nbVal.toString().length > 0) {\n    if (nbVal === '?' || !isNaN(nbVal)) {\n      valIsGood = true\n    }\n  }\n  if (valIsGood) {\n    nbData.push(config.background.strings.numberBox)\n    const nbGroup = backgroundGroup.selectAll('.numberbox-group').data(nbData)\n    nbGroup\n      .enter()\n      .append('g')\n      .attr({\n        id: 'numberbox-group',\n        class: 'numberbox-group',\n      })\n    const nbRect = nbGroup.append('rect')\n    const nbNumber = nbGroup.append('text')\n    updateRect(nbRect, config)\n    updateNumber(nbNumber, config)\n  }\n}\n// UPDATE NUMBER BOX ends\n\n// UPDATE RECT\nexport function updateRect(nbRect, config) {\n  const nbProps = config.background.strings.numberBox\n  const dimensions = config.background.outerbox.dimensions\n  nbRect\n    .style({\n      // Assumes no stroke\n      fill: () => {\n        const fillName = nbProps.rectfill\n        return config.metadata.colours[fillName]\n      },\n    })\n    .attr({\n      x: dimensions.width - nbProps.x - nbProps.rectwidth,\n      y: nbProps.y,\n      width: nbProps.rectwidth,\n      height: nbProps.rectheight,\n      id: () => {\n        let id = 'chartnumber-rect~~~'\n        id = `${id}fill:${nbProps.rectfill}`\n        return id\n      },\n    })\n}\n// UPDATE RECT ends\n\n// UPDATE NUMBER\nexport function updateNumber(nbNumber, config) {\n  const nbProps = config.background.strings.numberBox\n  const dimensions = config.background.outerbox.dimensions\n  const emVal = config.metadata.emVal\n  nbNumber\n    .text((ddd) => {\n      return ddd.content\n    })\n    .style({\n      fill: () => {\n        const fillName = nbProps.textfill\n        return config.metadata.colours[fillName]\n      },\n      'font-family': nbProps.font,\n      'font-size': nbProps.fontsize,\n      'text-anchor': nbProps.anchor,\n    })\n    .attr({\n      x: dimensions.width - nbProps.x - nbProps.rectwidth / 2,\n      y: () => {\n        // Y anchor point is halfway down the rect,\n        // then half font-size\n        let yPos = nbProps.y + nbProps.rectheight / 2\n        yPos += (nbProps.fontsize * emVal) / 2\n        return yPos\n      },\n      id: () => {\n        // Text needs just'n and fill (width, see below)\n        let id = 'chartnumber-text~~~justification:center,'\n        id = `${id}fill:${nbProps.textfill}`\n        return id\n      },\n    })\n}\n// UPDATE NUMBER ends\n","// For D3:\n/* eslint-disable prefer-reflect, func-names, no-invalid-this,\n  consistent-this, no-unused-vars */\n\n// FIXME: this could be a non-React component\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as d3 from 'd3'\n\n// Utilities modules\nimport * as ChartUtils from '../chart-utilities'\nimport * as PanelUtils from './panel-utilities'\nimport * as TextWrapping from '../chartside-utilities/text-wrapping'\n\nclass SilverPanels extends Component {\n  // DEFAULT PROPS\n  static get defaultProps() {\n    return {}\n  }\n\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.panelArray = []\n    // I think I have to track the IB as a global...\n    this.innerBoxBounds = []\n  }\n\n  componentDidMount() {\n    if (this.props.drawPanels) {\n      this.updatePanels()\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.drawPanels\n  }\n\n  componentDidUpdate() {\n    if (this.props.drawPanels) {\n      this.updatePanels()\n    }\n  }\n\n  // ADJUST GLOBAL INNER BOX FOR BELOW-TITLE PADDING\n  // Called from updatePanels. Returns entire-chart\n  // inner box, adjusted for padding below title cluster\n  adjustGlobalInnerBoxForBelowTitlePadding(config) {\n    // All-chart inner box\n    const globalInnerBox = this.props.innerbox\n    // Total number of panels:\n    const pTotal = config.panelArray.length\n    const topPadding =\n      config.background.topPadding.belowTitleClusterBaseline.toPanelFlash\n    if (pTotal > 1) {\n      globalInnerBox.y += topPadding\n      globalInnerBox.height -= topPadding\n    }\n    return globalInnerBox\n  }\n  // ADJUST GLOBAL INNER BOX FOR BELOW-TITLE PADDING ends\n\n  // GET HORIZONTAL PANEL GAP\n  // Called from updatePanels. Returns horiz. gap\n  // between panels, depending upon overall chart width\n  getHorizontalPanelGap(outerbox, opX, colLen) {\n    // Horizontal padding depends upon overall chart width and number of panels\n    // Initially assume the chart is narrow\n    const paddingX = opX\n    let pGapX = paddingX.narrow\n    // But if chart is wide, h-gap depends upon number of panels\n    if (outerbox.width >= paddingX.narrowThreshold) {\n      pGapX = opX.wideTwo\n      if (colLen > 2) {\n        pGapX = opX.wideMoreThanTwo\n      }\n    }\n    return pGapX\n  }\n  // GET HORIZONTAL PANEL GAP ends\n\n  // GET PANEL WIDTH/HEIGHT\n  // 2 fcns called from updatePanels to get width\n  // and height of ONE panel\n  getPanelWidth(pWidth, pGap, colLen) {\n    // Deduct gaps\n    pWidth -= pGap * (colLen - 1)\n    pWidth /= colLen\n    pWidth = Math.max(pWidth, 0)\n    return pWidth\n  }\n\n  getPanelHeight(pHeight, pGap, rowLen) {\n    // Take away gap(s) between rows\n    pHeight -= pGap * (rowLen - 1)\n    pHeight /= rowLen\n    pHeight = Math.max(pHeight, 0)\n    return pHeight\n  }\n  // GET PANEL WIDTH/HEIGHT end\n\n  // BUILD INITIAL PANEL ARRAY\n  // Called from updatePanels to assemble the initial data object\n  // for binding. All I want here is 'location' properties for\n  // each panel\n  buildInitialPanelArray(globalInnerBox, pHeight) {\n    const config = this.props.config\n    const pConfig = config.metadata.panels\n    // Total number of panels:\n    const pTotal = Number(pConfig.total)\n    // Given no. of rows, how many cols?\n    const rowLen = pConfig.rows\n    const colLen = pTotal / rowLen\n    const originalPadding = config.panelAttributes.padding\n    // Padding between panels: x (between cols) and y (between rows) axes\n    // Depends upon overall chart width\n    const outerbox = config.background.outerbox.dimensions\n    const pGapX = this.getHorizontalPanelGap(\n      outerbox,\n      originalPadding.between.x,\n      colLen\n    )\n    const pGapY = originalPadding.between.y\n\n    // Props for the panel rect (flash)\n    const rectProps = config.panelAttributes.rect\n\n    // Attributes common to *all* panels, rects and headers --\n    // Panels:\n    const pWidth = this.getPanelWidth(globalInnerBox.width, pGapX, colLen)\n    const pHeadAttribs = config.panelAttributes.strings.panelheader\n\n    const panelArray = []\n    // Since we're looping by rows, then columns, we need a counter:\n    let pCount = 0\n    // Drawing row by row...\n    for (let rNo = 0; rNo < rowLen; rNo++) {\n      // ...and column by column\n      for (let cNo = 0; cNo < colLen; cNo++) {\n        const pObj = {}\n        // Panel 'location'\n        pObj.x = globalInnerBox.x + (pWidth + pGapX) * cNo\n        pObj.y = globalInnerBox.y + (pHeight + pGapY) * rNo\n        pObj.height = pHeight\n        // Rect location and ID\n        pObj.rectX = pObj.x + Number(rectProps.x)\n        pObj.rectY = pObj.y + Number(rectProps.y)\n        pObj.rectID = rectProps.id\n        // Panel header -- if more than 1 'panel'\n        // (forced to string and trimmed)\n        let pStr = ''\n        if (pTotal > 1) {\n          pStr = config.panelArray[pCount].panelheader.toString().trim()\n        }\n        pObj.content = pStr\n        pObj.textX = pObj.x + pHeadAttribs.x\n        pObj.textY = pObj.y + pHeadAttribs.y\n        pObj.height = pHeight\n        panelArray.push(pObj)\n        pCount++\n      }\n    }\n    return panelArray\n  }\n  // BUILD INITIAL PANEL ARRAY ends\n\n  // BUILD INNER BOX ARRAY\n  // Called from updatePanels to make array of innerbox-bounds objects\n  buildInnerBoxArray(panelArray, pWidth, pHeight, hBaseline) {\n    const ibArray = panelArray.map((pObj) => {\n      const ibItem = {\n        x: pObj.x,\n        width: pWidth,\n        // Top and y adjust to baseline of (unwrapped) panel header...\n        // ...then again by set margin. If there is a header (see just above)\n        y: pObj.y + hBaseline,\n        height: pHeight - hBaseline,\n      }\n      return ibItem\n    })\n    return ibArray\n  }\n  // BUILD INNER BOX ARRAY ends\n\n  // UPDATE RECT\n  // Called from updatePanels to set props on the flash\n  // Flash is drawn *above* (sitting on) top of IB\n  updateRect(pGrpBinding, rectProps, colours) {\n    const rHeight = +rectProps.height\n    pGrpBinding\n      .select('rect')\n      .attr({\n        class: 'panel-rect',\n        id: (ddd) => `${ddd.rectID}~~~fill:${rectProps.fill}`,\n        x: (ddd) => ddd.rectX,\n        y: (ddd) => ddd.rectY - rHeight,\n        height: rHeight,\n        width: +rectProps.width,\n      })\n      .style({\n        fill: colours[rectProps.fill],\n      })\n  }\n  // UPDATE RECT ends\n\n  // UPDATE TEXT\n  // Called from updatePanels to set props on header text\n  // (All except x and y -- see caller)\n  updateText(pHeadText, headProps, colours) {\n    pHeadText\n      .text((ddd) => ddd.content)\n      .attr({\n        class: 'panel-header',\n        id: (ddd, iii) => {\n          const id = `panel-header-${iii}`\n          const fill = headProps.fill\n          const justification = 'start'\n          const leading = headProps.leading\n          const tID = ChartUtils.getTextID(id, fill, justification, leading)\n          return tID\n        },\n        leading: headProps.leading,\n      })\n      .style({\n        fill: colours[headProps.fill],\n        'font-family': headProps['font-family'],\n        'font-size': `${headProps['font-size']}px`,\n        'text-anchor': 'start',\n      })\n  }\n  // UPDATE TEXT\n\n  // BIND AND APPEND\n  // Called from updatePanels. Sets up binding and appends\n  // rect and header\n  bindAndAppend(panelsGroup, panelArray) {\n    const pGrpBinding = panelsGroup.selectAll('g').data(panelArray)\n    // EXIT\n    pGrpBinding.exit().remove()\n    // ENTER\n    const panelGroupEnter = pGrpBinding\n      .enter()\n      .append('g')\n      .attr({\n        class: (ddd, iii) => `panel-group-${iii}`,\n        id: (ddd, iii) => `panel-group-${iii}`,\n      })\n    // RECT\n    panelGroupEnter.append('rect')\n    // HEADER\n    panelGroupEnter.append('text')\n    //\n    return pGrpBinding\n  }\n  // BIND AND APPEND ends\n\n  // DEAL WITH NO PANELS\n  // Called from updatePanels if there's are no panels. Binds\n  // an empty array to the selection, so that the exit method\n  // removes any panel furniture left over from previous chart...\n  dealWithNoPanels(iBox) {\n    const panelArray = []\n    const panelsGroup = d3.select('.silver-chart-panels-group')\n    this.bindAndAppend(panelsGroup, panelArray)\n    // Return un-panelled IB as single array element\n    this.props.onGetInnerBoxes([iBox])\n  }\n  // DEAL WITH NO PANELS ends\n\n  // UPDATE PANELS\n  updatePanels() {\n    const globalThis = this\n    const config = this.props.config\n    const pConfig = config.metadata.panels\n    // Total number of panels:\n    const pTotal = Number(pConfig.total)\n    if (pTotal < 2) {\n      // NOTE: this feels like a whacko kludge...\n      this.dealWithNoPanels(this.props.innerbox)\n      return\n    }\n    // Still here? We have panels...\n    const globalInnerBox = this.adjustGlobalInnerBoxForBelowTitlePadding(config)\n    // Given no. of rows, how many cols?\n    const rowLen = pConfig.rows\n    const colLen = pTotal / rowLen\n    // Colours lookup\n    const colours = config.metadata.colours\n\n    // X-padding between panels depends upon overall chart width\n    const outerbox = config.background.outerbox.dimensions\n    const originalPadding = config.panelAttributes.padding\n    const pGapX = this.getHorizontalPanelGap(\n      outerbox,\n      originalPadding.between.x,\n      colLen\n    )\n    // Y-padding doesn't adjust\n    const pGapY = originalPadding.between.y\n\n    // Props for the flash\n    const rectProps = config.panelAttributes.rect\n\n    // Attributes common to *all* panels, rects and headers --\n    // Panels:\n    const pWidth = this.getPanelWidth(globalInnerBox.width, pGapX, colLen)\n    // Get height of each panel, after we have allowed\n    // for padding between panels:\n    const pHeight = this.getPanelHeight(globalInnerBox.height, pGapY, rowLen)\n    // IBs will adjust to header baseline (below rect)\n    const headProps = config.panelAttributes.strings.panelheader\n    const hBaseline = headProps.y\n\n    // Data for binding\n    const panelArray = this.buildInitialPanelArray(globalInnerBox, pHeight)\n    // Inner boxes held as global for future ref\n    this.innerBoxBounds = this.buildInnerBoxArray(\n      panelArray,\n      pWidth,\n      pHeight,\n      hBaseline\n    )\n\n    // D3 'global panels' binding: parent group for all panel groups\n    const panelsGroup = d3.select('.silver-chart-panels-group')\n\n    // Bind data; append rect and header\n    const panelGroupBinding = this.bindAndAppend(panelsGroup, panelArray)\n\n    // UPDATE RECT\n    this.updateRect(panelGroupBinding, rectProps, colours)\n    // For textwrapping call\n    const wtConfig = {\n      wWidth: pWidth,\n      forceTurn: config.metadata.forceTurn,\n    }\n\n    // UPDATE TEXT\n    const panelHeaderText = panelGroupBinding.select('text')\n    // Set all properties...\n    this.updateText(panelHeaderText, headProps, colours)\n    // ...except x and y, which chain into call to guarantee completion\n    panelHeaderText\n      .attr({\n        x: (ddd) => +ddd.textX,\n        y: (ddd) => +ddd.textY,\n      })\n      .call(\n        TextWrapping.wrapAllTextElements,\n        wtConfig,\n        globalThis,\n        globalThis.afterPanelHeaderWrap\n      )\n    // Wrap text, with callback\n\n    // Exit\n    panelGroupBinding.exit().remove()\n  }\n  // UPDATE PANELS ends\n\n  // AFTER PANEL HEADER WRAP\n  // Callback from wrapText. All it does is call top-level function to\n  // adjust panels if necessary, then tickle Chartwrapper...\n  afterPanelHeaderWrap(globalThis) {\n    // *** Previously, I set a delay to let initial transition complete...\n    // setTimeout(() => {\n    //   globalThis.adjustInnerBoxAndReturn();\n    // }, 100);\n    // *** But this was causing a problem: if user repeatedly changed chart\n    // *** size, innerbox y-value was incrementing during the lag, causing\n    // *** the innerbox to move down the chart (and shrink)\n    // *** So no wait:\n    globalThis.adjustInnerBoxAndReturn()\n  }\n  // AFTER PANEL HEADER WRAP ends\n\n  // ADJUST INNER BOX AND RETURN\n  // Callback from wrapText for panels to adjust innerbox top\n  // and height to allow for wrapped panel headers. This doesn't\n  // change the panel rect...\n  adjustInnerBoxAndReturn() {\n    // Not just concerned with 'active' panel: handle ALL innerboxes...\n    const config = this.props.config\n    // Loop all headers for max line count\n    const headers = d3.selectAll('.panel-header')\n    const pProps = config.metadata.panels\n    // Number of charts per row\n    const rowLen = pProps.total / pProps.rows\n    // Get leading\n    const leading = config.panelAttributes.strings.panelheader.leading\n    // Inner boxes:\n    const innerBoxes = JSON.parse(JSON.stringify(this.innerBoxBounds))\n    // First, get a 1d array of all panel-headers' line-counts\n    const pLinesArray = []\n    headers.each(function() {\n      const head = d3.select(this)\n      // I want the number of lines, rather than a distance to\n      // move each element. So I don't pass in any leading\n      const thisCount = TextWrapping.getTextAndTspansMove(head)\n      pLinesArray.push(thisCount)\n    })\n    // Do charts in panel rows align?\n    const panelsAlign = config.panelAttributes.alignChartsInPanels\n    if (panelsAlign) {\n      // Create a flat array of the max linecounts in each 'row'\n      const maxLineCountArray = PanelUtils.createLineCountMaxArray(\n        pLinesArray,\n        rowLen,\n        leading\n      )\n      // Update array of innerboxes\n      PanelUtils.adjustAlignedInnerBoxes(innerBoxes, maxLineCountArray, leading)\n    } else {\n      // Unaligned charts; set adjustment on each\n      PanelUtils.adjustNonAlignedInnerBoxes(innerBoxes, pLinesArray, leading)\n    }\n    this.props.onGetInnerBoxes(innerBoxes)\n    // At this point, the IBs are tight on panel header baselines\n    // (So I don't insert padding below the header here)\n  }\n  // ADJUST INNER BOX AND RETURN ends\n\n  // RENDER\n  render() {\n    return null\n  }\n}\n\nSilverPanels.propTypes = {\n  config: PropTypes.object,\n  drawPanels: PropTypes.bool,\n  innerbox: PropTypes.object,\n  onGetInnerBoxes: PropTypes.func.isRequired,\n}\n\nexport default SilverPanels\n","// Utilities called from Background\n\n// CREATE LINE-COUNT MAX ARRAY\n// Called from Background.adjustInnerBoxAndReturn\n// Passed the flat array of header linecounts, it returns\n// a 2D array, by rows, of max line counts\nexport function createLineCountMaxArray(lineCountFlatArray, rowLen) {\n  const maxArray = []\n  // Array nests by rows\n  for (let iii = 0; iii < lineCountFlatArray.length; iii += rowLen) {\n    const oneRowArray = lineCountFlatArray.slice(iii, iii + rowLen)\n    const rowMax = Math.max(...oneRowArray)\n    // Now push the row-max back to a flat array\n    // that will (hopefully) match the complete array of IB defs...\n    for (let jjj = 0; jjj < rowLen; jjj++) {\n      maxArray.push(rowMax)\n    }\n  }\n  return maxArray\n}\n// CREATE LINE-COUNT MAX ARRAY ends\n\n// ADJUST ALIGNED INNER BOXES\nexport function adjustAlignedInnerBoxes(iBoxes, maxArray, leading) {\n  const ibCount = iBoxes.length\n  for (let ibx = 0; ibx < ibCount; ibx++) {\n    const thisBox = iBoxes[ibx]\n    // Adjust\n    const tweak = (maxArray[ibx] - 1) * leading\n    thisBox.y += tweak\n    thisBox.height -= tweak\n  }\n}\n// ADJUST ALIGNED INNER BOXES ends\n\n// ADJUST NON-ALIGNED INNER BOXES\n// Called from Background.adjustInnerBoxAndReturn. Adjusts each IB\n// according to number of lines in panel header (does nothing about\n// default padding below headers)\nexport function adjustNonAlignedInnerBoxes(iBoxes, pLinesArray, leading) {\n  for (let ibx = 0; ibx < iBoxes.length; ibx++) {\n    const iBox = iBoxes[ibx]\n    // Lines * leading\n    const lTweak = (pLinesArray[ibx] - 1) * leading\n    iBox.y += lTweak\n    iBox.height -= lTweak\n  }\n}\n// ADJUST NON-ALIGNED INNER BOXES ends\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as TextWrapping from '../chartside-utilities/text-wrapping'\nimport * as ChartUtils from '../chart-utilities'\n\nclass SilverLegendSet extends Component {\n  // Two props: timeouts for calls to tweakLegendSets\n  // and moveLegendSets\n  static get defaultProps() {\n    return {\n      // initialTimeout: 0,\n      tweakLegendSetsTimeout: 500,\n      moveLegendSetsTimeout: 100,\n    }\n  }\n\n  componentDidMount() {\n    this.handleLegendSet()\n  }\n\n  componentDidUpdate() {\n    this.handleLegendSet()\n  }\n\n  // HANDLE LEGEND SET\n  // Called on Mount and Update. Determines whether to draw a\n  // legendSet, or, if no legendsets, just return a zero adjustment\n  // (e.g. for tables)\n  handleLegendSet() {\n    const config = this.props.config\n    if (config.hasLegend) {\n      this.updateLegendHeader()\n      this.updateLegend()\n    } else {\n      // There may be a left-over legendset for\n      // a chart prev'y in this panel\n      this.clearOutLegendSet(config.index)\n      const obj = { tweak: 0, index: config.index }\n      this.props.onGetInnerBox(obj)\n    }\n  }\n  // HANDLE LEGEND SET ends\n\n  // CLEAR OUT LEGEND-SET\n  // Called from handleLegendSet, to empty any\n  // existing legend sets if none are required\n  // (Tables)\n  clearOutLegendSet(cIndex) {\n    const headGroup = d3.select(`.legendheader-group-${cIndex}`)\n    const keyGroup = d3.select(`.legendkey-group-${cIndex}`)\n    headGroup.selectAll('text').remove()\n    keyGroup.selectAll('line').remove()\n    keyGroup.selectAll('rect').remove()\n    keyGroup.selectAll('circle').remove()\n    keyGroup.selectAll('text').remove()\n  }\n  // CLEAR OUT LEGEND-SET ends\n\n  // UPDATE LEGEND HEADER\n  // After mount/update, draw any legend header\n  updateLegendHeader() {\n    const config = this.props.config\n    // Text as array, for binding\n    const hString = config.mainHeader\n    // 'Arrayify' header for D3\n    const headArray = []\n    if (typeof hString !== 'undefined' && hString.length > 0) {\n      headArray.push(hString)\n    }\n    const lPrefs = config.prefs\n    // Position\n    let yPos = lPrefs.innerbox.y\n    let xPos = lPrefs.innerbox.x\n    // Override for zero-columns, which pushes legend outside right of chart\n    const legendOutside = lPrefs.columns === 0\n    if (legendOutside) {\n      xPos += lPrefs.chartWidth + lPrefs.padding.betweenKeys\n      yPos -= lPrefs.padding.belowHeader\n    }\n    // Context is the indexed legendset group, rendered at bottom:\n    const contextGroup = d3.select(`.legendheader-group-${config.index}`)\n    const boundHead = contextGroup.selectAll('text').data(headArray)\n    // Enter\n    boundHead\n      .enter()\n      .append('text')\n      .attr({\n        class: 'legend-header',\n        fill: lPrefs.headerPrefs.fill,\n      })\n    boundHead\n      .attr({\n        x: xPos,\n        y: yPos,\n        id: (ddd, iii) => {\n          let tID = `legend-header-${iii}`\n          tID = `${tID}~~~fill:${lPrefs.headerPrefs.fill}`\n          tID = `${tID}, justification:${lPrefs.headerPrefs.anchor}`\n          return tID\n        },\n      })\n      .style({\n        'font-family': lPrefs.headerPrefs.font,\n        'font-size': `${lPrefs.headerPrefs.size}px`,\n        'text-anchor': lPrefs.headerPrefs.anchor,\n      })\n      .text((ddd) => ddd)\n    boundHead.exit().remove()\n  }\n  // UPDATE LEGEND HEADER ends\n\n  // APPEND KEY\n  // Called from updateAnyLegendType. Appends default\n  // line, rect or dot\n  appendKey(legendGrp) {\n    legendGrp.each(function() {\n      const thisLegend = d3.select(this)\n      const keyStyle = thisLegend.attr('keyStyle')\n      if (keyStyle === 'line') {\n        thisLegend.append('line').style('stroke-width', 0)\n      } else if (keyStyle === 'dot') {\n        thisLegend.append('circle').attr({\n          r: 0,\n          // Default fill (NOTE: change to background fill eventually)\n          fill: '#fff',\n        })\n      } else {\n        thisLegend.append('rect').attr({\n          width: 0,\n          height: 0,\n          // Default fill (NOTE: change to background fill eventually?)\n          fill: '#fff',\n        })\n      }\n    })\n  }\n  // APPEND KEY ends\n\n  // GET LINE YPOS\n  // Called from updateLine to calculate y-position of a key line\n  getLineYpos(config, iii, isY2) {\n    let ypos = config.verticalBase\n    // Adjust for header, if any:\n    if (config.hasHeader) {\n      ypos += config.padding.belowHeader\n    }\n    // Align by half text-height:\n    ypos -= config.textHeight / 2\n    // If key height > width, draw vertically\n    const drawVertical = config.keyHeight > config.keyWidth\n    if (drawVertical) {\n      if (isY2) {\n        ypos += config.keyHeight / 2\n      } else {\n        ypos -= config.keyHeight / 2\n      }\n    }\n    // Adjust for row\n    if (this.props.config.prefs.drawLeftToRight) {\n      ypos += Math.floor(iii / config.colTotal) * config.padding.betweenKeys\n    } else {\n      ypos += (iii % config.colMax) * config.padding.betweenKeys\n    }\n    return ypos\n  }\n  // GET LINE YPOS ends\n\n  // GET LINE XPOS\n  getLineXpos(config, iii, isX2) {\n    let xPos = config.left\n    // If key height > width, draw vertically\n    const drawVertical = config.keyHeight > config.keyWidth\n    if (drawVertical) {\n      // Allow for strokewidth\n      xPos += config.keyWidth / 2\n    } else if (isX2) {\n      // Horizontal: line r/h end point\n      xPos += config.keyWidth\n    }\n    // If I don't adjust columns now, I can retrieve this value later\n    if (this.props.config.prefs.drawLeftToRight) {\n      xPos += (iii % config.colTotal) * config.colWidth\n    } else {\n      xPos += Math.floor(iii / config.colMax) * config.colWidth\n    }\n    return xPos\n  }\n  // GET LINE XPOS ends\n\n  // UPDATE LINE\n  // Called from updateAnyLegendType\n  updateLine(seriesBinding, lineConfig) {\n    seriesBinding\n      .select('line')\n      .transition()\n      .duration(lineConfig.duration)\n      .attr({\n        x1: (ddd, iii) => this.getLineXpos(lineConfig, iii, false),\n        x2: (ddd, iii) => this.getLineXpos(lineConfig, iii, true),\n        y1: (ddd, iii) => this.getLineYpos(lineConfig, iii, false),\n        y2: (ddd, iii) => this.getLineYpos(lineConfig, iii, true),\n        id: (ddd, iii) => {\n          const rID = `legend-keyline-${iii}~~~stroke:${ddd.colour}`\n          return rID\n        },\n      })\n      .style({\n        stroke: (ddd) => lineConfig.colourLookup[ddd.colour],\n        'stroke-width': (ddd, iii) => {\n          const def = lineConfig.styles[iii]\n          let sWid = def.height\n          if (def.height > def.width) {\n            sWid = def.width\n          }\n          return sWid\n        },\n      })\n  }\n  // UPDATE LINE ends\n\n  // UPDATE RECT\n  // Called from updateAnyLegendType\n  updateRect(seriesBinding, rectConfig) {\n    seriesBinding\n      .select('rect')\n      .transition()\n      .duration(rectConfig.duration)\n      .attr({\n        width: (ddd, iii) => rectConfig.styles[iii].width,\n        height: (ddd, iii) => rectConfig.styles[iii].height,\n        fill: (ddd) => rectConfig.colourLookup[ddd.colour],\n        y: (ddd, iii) => {\n          // Y-pos is top of key rect -- moving up from baseline\n          let ypos = rectConfig.verticalBase\n          if (rectConfig.hasHeader) {\n            ypos += rectConfig.padding.belowHeader\n          }\n          // Adjust by half text-height, then, to v-centre-align, half rectHeight\n          ypos -= rectConfig.textHeight / 2 + rectConfig.styles[iii].height / 2\n          // Adjust for row\n          if (this.props.config.prefs.drawLeftToRight) {\n            ypos +=\n              Math.floor(iii / rectConfig.colTotal) *\n              rectConfig.padding.betweenKeys\n          } else {\n            ypos += (iii % rectConfig.colMax) * rectConfig.padding.betweenKeys\n          }\n          return ypos\n        },\n        x: (ddd, iii) => {\n          let xPos = rectConfig.left\n          if (this.props.config.prefs.drawLeftToRight) {\n            xPos += (iii % rectConfig.colTotal) * rectConfig.colWidth\n          } else {\n            xPos += Math.floor(iii / rectConfig.colMax) * rectConfig.colWidth\n          }\n          return xPos\n        },\n        id: (ddd, iii) => {\n          let rID = `legend-rect-${iii}`\n          rID = `${rID}~~~fill:${ddd.colour}`\n          return rID\n        },\n      })\n  }\n  // UPDATE RECT ends\n\n  // UPDATE  DOT\n  // Called from updateAnyLegendType\n  updateDot(seriesBinding, dotConfig) {\n    const colCount = dotConfig.colTotal\n    seriesBinding\n      .select('circle')\n      .transition()\n      .duration(dotConfig.duration)\n      .attr({\n        r: (ddd, iii) => dotConfig.styles[iii].width / 2,\n        fill: (ddd) => dotConfig.colourLookup[ddd.colour],\n        cy: (ddd, iii) => {\n          // Y-pos is top of key rect -- moving up from baseline\n          let ypos = dotConfig.verticalBase\n          if (dotConfig.hasHeader) {\n            ypos += dotConfig.padding.belowHeader\n          }\n          // Adjust by half text-height\n          ypos -= dotConfig.textHeight / 2\n          // Adjust for row\n          if (this.props.config.prefs.drawLeftToRight) {\n            ypos += Math.floor(iii / colCount) * dotConfig.padding.betweenKeys\n          } else {\n            ypos += (iii % dotConfig.colMax) * dotConfig.padding.betweenKeys\n          }\n          return ypos\n        },\n        cx: (ddd, iii) => {\n          let xPos = dotConfig.left\n          if (this.props.config.prefs.drawLeftToRight) {\n            xPos += (iii % colCount) * dotConfig.colWidth\n          } else {\n            xPos += Math.floor(iii / dotConfig.colMax) * dotConfig.colWidth\n          }\n          xPos += dotConfig.styles[iii].width / 2\n          return xPos\n        },\n        id: (ddd, iii) => {\n          let rID = `legend-dot-${iii}`\n          rID = `${rID}~~~fill:${ddd.colour}`\n          return rID\n        },\n      })\n  }\n  // UPDATE DOT ends\n\n  // APPEND TEXT\n  // Called from updateAnyLegendType\n  appendText(legendGrp, lPrefs) {\n    const lText = legendGrp.append('text').style({\n      'font-family': lPrefs.textPrefs.font,\n      'font-size': `${lPrefs.textPrefs.size}px`,\n      'text-anchor': 'start',\n      fill: () => lPrefs.colourLookup[lPrefs.textPrefs.fill],\n    })\n    return lText\n  }\n  // APPEND TEXT ends\n\n  // UPDATE TEXT\n  updateText(seriesBinding, textConfig, lPrefs) {\n    const globalThis = this\n    const config = this.props.config\n    const tPrefs = lPrefs.textPrefs\n    const colCount = Math.max(lPrefs.columns, 1)\n    // Party colours flag -- see below on non-use\n    // const usePartyColours = config.prefs.usePartyColours;\n    // Props for wrapping\n    const textWrapConfig = {\n      wWidth: config.prefs.chartWidth,\n      forceTurn: config.prefs.metadata.forceTurn,\n    }\n    const boundText = seriesBinding.select('text')\n    // I call this for dot, rect and line keys, 2 of\n    // which I'm killing\n    if (boundText[0].length === 0) {\n      return\n    }\n    boundText\n      .attr({\n        class: (ddd) => ddd.class,\n        id: (ddd, iii) => {\n          const id = `legend-text-${iii}`\n          const fill = textConfig.textFill\n          const justification = textConfig.anchor\n          const leading = tPrefs.leading\n          const tID = ChartUtils.getTextID(id, fill, justification, leading)\n          return tID\n        },\n        x: (ddd, iii) => {\n          let xPos = textConfig.left\n          if (this.props.config.prefs.drawLeftToRight) {\n            xPos += (iii % colCount) * textConfig.colWidth\n          } else {\n            xPos += Math.floor(iii / textConfig.colMax) * textConfig.colWidth\n          }\n          // Key width and padding\n          const keyStyle = ddd.keyStyle\n          xPos += keyStyle.width + textConfig.padding.textGap\n          return xPos\n        },\n        y: (ddd, iii) => {\n          // Start from baseline\n          let ypos = textConfig.verticalBase\n          if (textConfig.hasHeader) {\n            ypos += textConfig.padding.belowHeader\n          }\n          // ...tweaking for 'row'\n          if (this.props.config.prefs.drawLeftToRight) {\n            ypos += Math.floor(iii / colCount) * textConfig.padding.betweenKeys\n          } else {\n            ypos += (iii % textConfig.colMax) * textConfig.padding.betweenKeys\n          }\n          return ypos\n        },\n        leading: tPrefs.leading,\n      })\n      .text((ddd) => ddd.header)\n      .style({\n        fill: () => {\n          const col = tPrefs.fill\n          // Next comm'd out Mar'21. Don't use party colours for legend label\n          // if (usePartyColours) {\n          //   col = ddd.colour;\n          // }\n          return lPrefs.colourLookup[col]\n        },\n        'font-family': tPrefs.font,\n        'font-size': `${tPrefs.size}px`,\n        'text-anchor': tPrefs.anchor,\n      })\n    boundText.call(\n      TextWrapping.wrapAllTextElements,\n      textWrapConfig,\n      globalThis,\n      globalThis.afterLegendWrap\n    )\n  }\n  // UPDATE TEXT ends\n\n  // GET ROW MAXES ARRAY\n  // Called from afterLegendWrap, to generate an array of the\n  //  max number of lines in the key strings in each row...\n  getRowMaxesArray(lineCountArray, colCount) {\n    // If colCount === 0 (for legend outside chart area),\n    // we can wind up in an infinite loop. So, since external\n    // legends are always in a single column:\n    if (colCount === 0) {\n      colCount = 1\n    }\n    // Now, for legends by columns...\n    const lSetCount = lineCountArray.length\n    const rowCount = Math.ceil(lSetCount / colCount)\n    // Construct empty array of arrays\n    const rowColArray = []\n    for (let iii = 0; iii < rowCount; iii++) {\n      rowColArray.push([])\n    }\n    // Now fill...\n    for (let iii = 0; iii < lSetCount; iii++) {\n      let rowNumber = iii % rowCount\n      if (this.props.config.prefs.drawLeftToRight) {\n        rowNumber = Math.floor(iii / colCount)\n      }\n      rowColArray[rowNumber].push(lineCountArray[iii])\n    }\n\n    // Now I need max linecount from each 'row'\n    const rowMaxes = []\n    for (let rCount = 0; rCount < rowColArray.length; rCount++) {\n      rowMaxes.push(Math.max(...rowColArray[rCount]))\n    }\n    return rowMaxes\n  }\n  // GET ROW MAXES ARRAY ends\n\n  // GET ARRAY CHUNKS\n  // Currently called from tweakLegendSets, below. But I've a feeling this\n  // is duplicated elsewhere so should migrate as a general utility.\n  // Converts a 1D array into a 2D array of chunks\n  getArrayChunks(myArray, chunkSize) {\n    const result = []\n    while (myArray.length) {\n      result.push(myArray.splice(0, chunkSize))\n    }\n    return result\n  }\n  // GET ARRAY CHUNKS ends\n\n  // GET LEGEND-SET CLASS ROOT\n  // Called from tweakLegendSets, returns the classname of\n  // the group enclosing all legend-sets\n  getLegendSetClassRoot(panelNumber, keyType) {\n    // Root of class name for legend-set line/rect groups:\n    // FIXME: I should be getting element names from a lookup\n    // Legend set can use line or rect key...\n    let lSetClassRoot = '.series-legend-rect-group'\n    if (keyType === 'line') {\n      lSetClassRoot = '.series-legend-line-group'\n    } else if (keyType === 'dot') {\n      lSetClassRoot = '.series-legend-dot-group'\n    }\n    lSetClassRoot = '.series-legend-pair-group'\n    // Extend classname root with panel number:\n    lSetClassRoot = `${lSetClassRoot}-${panelNumber}`\n    return lSetClassRoot\n  }\n  // GET LEGEND-SET CLASS ROOT ends\n\n  // TRANSPOSE COLUMN ORIGINS\n  // Called from getColumnOrigins. If lSets are drawn by rows,\n  // resets order. For example, with 3 colums, turns\n  // ABCDE into ACEBD\n  // NOTE: I've a nagging feeling that this function is\n  // dup'd... somewhere else...\n  transposeColumnOrigins(inArray, rowTotal) {\n    const outArray = []\n    for (let iii = 0; iii < rowTotal; iii++) {\n      for (let jjj = iii; jjj < inArray.length; jjj += rowTotal) {\n        outArray.push(inArray[jjj])\n      }\n    }\n    return outArray\n  }\n  // TRANSPOSE COLUMN ORIGINS ends\n\n  // CHUNK LEGENDS BY ROWS\n  // Params are flat array of lset widths, and\n  chunkLegendsByRows(lArray, colTotal) {\n    const myArray = []\n    for (let colNo = 0; colNo < colTotal; colNo++) {\n      myArray.push([])\n      for (let setNo = 0; setNo < lArray.length; setNo += colTotal) {\n        const oneSet = lArray.slice(setNo, setNo + colTotal)\n        const val = oneSet[colNo]\n        if (typeof val !== 'undefined') {\n          myArray[colNo].push(val)\n        }\n      }\n    }\n    return myArray\n  }\n  // CHUNK LEGENDS BY ROWS ends\n\n  // GET COLUMN ORIGINS\n  // Called from tweakLegendSets; returns an array of column widths\n  getColumnOrigins(lSetClassRoot, lSetTotal, rowTotal) {\n    const config = this.props.config\n    // First, get an array of the on-page width of each legendset\n    // (that's key and text, grouped)\n    const lSetWidths = []\n    for (let lSetNo = 0; lSetNo < lSetTotal; lSetNo++) {\n      // Name of specific legendset group\n      const lSetClassName = `${lSetClassRoot}-${lSetNo}`\n      const thisSet = d3.select(lSetClassName)\n      let bbWidth = 0\n      if (!thisSet.empty()) {\n        bbWidth = thisSet.node().getBBox().width\n      }\n      lSetWidths.push(bbWidth)\n    }\n    // Convert flat array to a 2D array of colTotal elements,\n    // each an array of widths for legendsets in that column\n    /* For example:\n      [\n        [20, 36, 50],   Col A widths\n        [27, 48]        Col B widths\n      ]\n    */\n    const colTotal = Math.max(config.prefs.columns, 1)\n    let colWidths = []\n    if (this.props.config.prefs.drawLeftToRight) {\n      // Kludge for columns: min 1\n      colWidths = this.chunkLegendsByRows(lSetWidths, colTotal)\n    } else {\n      colWidths = this.getArrayChunks(lSetWidths, rowTotal)\n    }\n    // Next, we reset each legendset to the max width of\n    // that column, adding padding and any previous column.\n    // The result is a 2D array, by columns, with elements in\n    // each 'column' set to the same value\n    let cumulativeWidth = 0\n    for (let iii = 0; iii < colWidths.length; iii++) {\n      // Max width in one col:\n      const thisCol = colWidths[iii]\n      let maxWidth = Math.max(...thisCol)\n      // Add gap between columns\n      maxWidth += config.prefs.padding.betweenColumns\n      // And add distance so far\n      maxWidth += cumulativeWidth\n      // maxColWidths.push(maxWidth);\n      // Now set each element in chunk to max\n      for (let jjj = 0; jjj < thisCol.length; jjj++) {\n        thisCol[jjj] = maxWidth\n      }\n      cumulativeWidth = maxWidth\n    }\n    // So now we have an array, each of whose elements is the\n    // width (including gap) of the column to which that\n    // element belongs.\n    // However... each column is actually adjusted to the\n    // width of the previous column. So I prefix a set of\n    // zeroes...\n    let flatWidths\n    if (this.props.config.prefs.drawLeftToRight) {\n      // Flat array of column origins\n      const simpleArray = this.simplifyColArray(colWidths)\n      // Assign column origins to individual legendsets\n      flatWidths = this.columniseOrigins(simpleArray, lSetTotal, colTotal)\n    } else {\n      flatWidths = colWidths.flat()\n      for (let rNo = 0; rNo < rowTotal; rNo++) {\n        flatWidths.unshift(0)\n        flatWidths.pop()\n      }\n    }\n    // So the result is an array of legendset origins\n    return flatWidths\n  }\n  // GET COLUMN ORIGINS ends\n\n  // SIMPLIFY COL ARRAY\n  // Called from getColumnOrigins if order is by rows.\n  // Gets a simple array, each of which contains the origin\n  //  of one column.\n  // And, since we shift each column left, prepends zero.\n  // So [[A,A,A],[B,B]] becomes [0, A, B]\n  simplifyColArray(cArray) {\n    const result = [0]\n    for (let iii = 0; iii < cArray.length - 1; iii++) {\n      result.push(cArray[iii][0])\n    }\n    return result\n  }\n  // SIMPLIFY COL ARRAY ends\n\n  // COLUMNISE ORIGINS\n  // Called from getColumnOrigins if order is by rows\n  // Assigns values from the flat array of column origins\n  // to each legendset\n  columniseOrigins(cArray, lSetTotal, colTotal) {\n    const result = []\n    let counter = 0\n    for (let iii = 0; iii < lSetTotal; iii++) {\n      result.push(cArray[counter])\n      if (counter < colTotal - 1) {\n        counter++\n      } else {\n        counter = 0\n      }\n    }\n    return result\n  }\n  // COLUMNISE ORIGINS ends\n\n  // GET Y-TWEAKS BY COLUMNS\n  // Called from tweakLegendSets to assemble an array of the\n  // distances by which legendSets move down to allow for\n  // turned lines\n  // If sets are drawn by rows\n  getYtweaksByRows(lSetClassRoot, lSetTotal, columnCount, rowMaxesArray) {\n    const config = this.props.config\n    const leading = config.prefs.textPrefs.leading\n    // Loop through legendsets\n    const yTweakArray = []\n    // colCounter trips change of row\n    // let colCounter = 0;\n    // maxArrayCounter is index in array of max values\n    // let maxArrayCounter = 0;\n    // let lsCounter = 0;\n    let tweak = 0\n    // Loop by 'rows'\n    for (let rowNo = 0; rowNo < rowMaxesArray.length; rowNo++) {\n      // Apply current tweak to this row\n      const start = rowNo * columnCount\n      const end = start + columnCount\n      for (let iii = start; iii < end; iii++) {\n        yTweakArray.push(tweak)\n      }\n      // Number of extra lines of text along this row, as leading\n      // to be applied to subsequent rows\n      tweak += (rowMaxesArray[rowNo] - 1) * leading\n    }\n    return yTweakArray\n  }\n  // GET Y-TWEAKS BY COLUMNS ends\n\n  // GET Y-TWEAKS BY ROWS\n  // Called from tweakLegendSets to assemble an array of the\n  // distances by which legendSets move down to allow for\n  // turned lines\n  // If sets are drawn by columns\n  getYtweaksByColumns(lSetClassRoot, lSetTotal, rowTotal, rowMaxesArray) {\n    const config = this.props.config\n    const leading = config.prefs.textPrefs.leading\n    // Loop through legendsets, but starting from 2nd row (1st row won't move)\n    let rowCounter = 0\n    // Initialise tweak value, by which legendsets will be moved down\n    let tweak = 0\n    const yTweakArray = []\n    for (let lSetNo = 0; lSetNo < lSetTotal; lSetNo++) {\n      // At the top of each 'column':\n      if (lSetNo % rowTotal === 0) {\n        rowCounter = 0\n        tweak = 0\n      } else {\n        // Get leading for number of lines in PREVIOUS 'row'\n        const lastRowLineCount = (rowMaxesArray[rowCounter - 1] - 1) * leading\n        tweak += lastRowLineCount\n      }\n      // Adjust existing y-pos by tweak:\n      yTweakArray.push(tweak)\n      rowCounter++\n    }\n    return yTweakArray\n  }\n  // GET Y-TWEAKS BY ROWS ends\n\n  // MOVE LEGEND SET\n  // Called from tweakLegendSets to set new positions on keys\n  moveLegendSet(lSetText, lSetKey, textCoords, keyCoords) {\n    // Determine key type:\n    let keyType = 'line'\n    const keyId = lSetKey.attr('id')\n    if (keyId !== null && typeof keyId !== 'undefined') {\n      if (keyId.includes('rect')) {\n        keyType = 'rect'\n      } else if (keyId.includes('dot')) {\n        keyType = 'dot'\n      }\n    }\n    // Now reset vertical position:\n    lSetText.attr('x', textCoords.x)\n    lSetText.attr('y', textCoords.y)\n    // But also have to set tspans\n    const tSpans = lSetText.selectAll('tspan')\n    const id = lSetText.attr('id')\n    // Get leading from ID metadata:\n    const leading = +id.match(/leading:\\d*/)[0].split(':')[1]\n    let tSpanCounter = 0\n    tSpans.each(function() {\n      const xAttr = this.getAttribute('x')\n      if (xAttr !== null) {\n        this.setAttribute('x', `${textCoords.x}px`)\n      }\n      const yAttr = this.getAttribute('y')\n      let tspanY = +textCoords.y\n      if (yAttr !== null) {\n        tspanY += leading * tSpanCounter\n        tSpanCounter++\n        this.setAttribute('y', tspanY)\n      }\n    })\n    if (keyType === 'rect') {\n      lSetKey.attr('x', keyCoords.x)\n      lSetKey.attr('y', keyCoords.y)\n    } else if (keyType === 'line') {\n      lSetKey.attr('x1', keyCoords.x1)\n      lSetKey.attr('x2', keyCoords.x2)\n      lSetKey.attr('y1', keyCoords.y1)\n      lSetKey.attr('y2', keyCoords.y2)\n    } else {\n      lSetKey.attr('cx', keyCoords.cx)\n      lSetKey.attr('cy', keyCoords.cy)\n    }\n  }\n  // MOVE LEGEND SET\n\n  // TWEAK LEGEND SETS\n  // Called from afterLegendWrap, to move legend-sets down\n  // to allow for multi-line key strings, and to move them\n  // into columns with set gaps between columns\n  // Params are the number of columns over which legends are arranged;\n  // an array of the max number of lines in any legend in any one row;\n  // and the total number of legendSets\n  tweakLegendSets(columnCount, rowMaxesArray, lSetCount) {\n    const config = this.props.config\n    // Do legends exist? There's an edge case where the\n    // user clicks quickly from Single/Mixed to Double and\n    // by the time this function is called, the 'Double'\n    // execution process has already killed the legends.\n    // So look for the main legends group...\n    const lName = `.legendkey-group-${config.index}`\n    const outerLegendsGroup = d3.select(lName)\n    if (outerLegendsGroup.empty()) {\n      return\n    }\n    const rowTotal = rowMaxesArray.length\n    // Get key type: line/rect/dot\n    let keyType = 'line'\n    // // Class name for parent legend-set group:\n    const lSetClassRoot = this.getLegendSetClassRoot(config.index, keyType)\n    // Original panel-left passed in by parent\n    const left = config.prefs.absoluteLeft\n\n    // Multiple loop-throughs seem inescapable. First I have\n    // to go through all the on-page legend-sets and get\n    // an array of COLUMN origins (one for each element),\n    // based on column widths\n    const colOrigins = this.getColumnOrigins(lSetClassRoot, lSetCount, rowTotal)\n    // I need an array of values to which the y-pos of\n    // each element is adjusted, to allow for wrapping\n    // in the previous row\n    let rowTweaks\n    if (this.props.config.prefs.drawLeftToRight) {\n      rowTweaks = this.getYtweaksByRows(\n        lSetClassRoot,\n        lSetCount,\n        Math.max(columnCount, 1),\n        rowMaxesArray\n      )\n    } else {\n      rowTweaks = this.getYtweaksByColumns(\n        lSetClassRoot,\n        lSetCount,\n        rowTotal,\n        rowMaxesArray\n      )\n    }\n    // For clarity:\n    //  - colWidths is an array, one element per legendset,\n    //    each being the on-page width of the previous column\n    //  - rowTweaks is an array, one element per row,\n    //    of amounts by which to adjust the y-position of\n    //    each legend set in that row\n\n    // Third and (hopefully!) final loop\n    for (let lSetNo = 0; lSetNo < lSetCount; lSetNo++) {\n      // Name of specific legendset group\n      const lSetClassName = `${lSetClassRoot}-${lSetNo}`\n      const thisSet = d3.select(lSetClassName)\n\n      // Keys\n      let lSetKey = null\n      let keyOriginalX = 0\n      let keyX = 0\n      let keyCoords = {}\n      const lSetLineKey = thisSet.select('line')\n      const lSetRectKey = thisSet.select('rect')\n      const lSetDotKey = thisSet.select('circle')\n      if (!lSetRectKey.empty()) {\n        keyOriginalX = Number(lSetRectKey.attr('x'))\n        keyX = keyOriginalX\n        if (columnCount > 0) {\n          keyX = left + colOrigins[lSetNo]\n        }\n        keyCoords = {\n          x: keyX,\n          y: Number(lSetRectKey.attr('y')) + rowTweaks[lSetNo],\n        }\n        lSetKey = lSetRectKey\n        keyType = 'rect'\n      } else if (!lSetLineKey.empty()) {\n        // Original x1\n        keyOriginalX = +lSetLineKey.attr('x1')\n        keyX = keyOriginalX\n        let x2 = +lSetLineKey.attr('x2')\n        // Width of key, assuming a horizontal line\n        const keyWidth = x2 - keyOriginalX\n        // If line is vertical (thermos), keyWidth is zero,\n        // and we need to move by half stroke-width\n        let vLineTweak = 0\n        if (keyWidth === 0) {\n          vLineTweak = parseFloat(lSetLineKey.style('stroke-width')) / 2\n        }\n        // Column adjustment\n        // NOTE: could be better...\n        if (columnCount > 0) {\n          keyX = left + vLineTweak + colOrigins[lSetNo]\n          x2 = left + vLineTweak + keyWidth + colOrigins[lSetNo]\n        }\n        keyCoords = {\n          x1: keyX,\n          x2,\n          y1: Number(lSetLineKey.attr('y1')) + rowTweaks[lSetNo],\n          y2: Number(lSetLineKey.attr('y2')) + rowTweaks[lSetNo],\n        }\n        lSetKey = lSetLineKey\n        keyType = 'line'\n      } else if (!lSetDotKey.empty()) {\n        keyOriginalX = +lSetDotKey.attr('cx')\n        keyX = keyOriginalX\n        if (columnCount > 0) {\n          keyX = left + colOrigins[lSetNo]\n          keyX += +lSetDotKey.attr('r')\n        }\n        keyCoords = {\n          cx: keyX,\n          cy: Number(lSetDotKey.attr('cy')) + rowTweaks[lSetNo],\n        }\n        lSetKey = lSetDotKey\n        keyType = 'circle'\n      }\n      // Text\n      const lSetText = thisSet.select('text')\n      // Default is legends outside chart, in which case\n      // they don't move\n      let textX = Number(lSetText.attr('x'))\n      if (columnCount > 0) {\n        // How far did keys move? Adjust text accordingly\n        const keyMove = keyOriginalX - keyX\n        textX -= keyMove\n      }\n      const textCoords = {\n        x: textX,\n        y: Number(lSetText.attr('y')) + rowTweaks[lSetNo],\n      }\n      // We need a moment...\n      setTimeout(() => {\n        this.moveLegendSet(lSetText, lSetKey, textCoords, keyCoords)\n      }, this.props.moveLegendSetsTimeout)\n    }\n  }\n  // TWEAK LEGEND SETS ends\n\n  // AFTER LEGEND WRAP\n  // Callback after legend strings have been wrapped.\n  afterLegendWrap(globalThis, lineCountArray) {\n    const config = globalThis.props.config\n    const columnCount = config.prefs.columns\n    const rowMaxesArray = globalThis.getRowMaxesArray(\n      lineCountArray,\n      columnCount\n    )\n    // So we have an array, by legend-rows, of max number of lines...\n    // I have to adjust the positions of legendsets:\n    const lSetCount = config.headers.length\n    if (rowMaxesArray.length > 0) {\n      // I need to wait for the update, so...\n      setTimeout(() => {\n        globalThis.tweakLegendSets(columnCount, rowMaxesArray, lSetCount)\n      }, globalThis.props.tweakLegendSetsTimeout)\n      // Then return the tweaks to the Inner Box to Chartwrapper\n      globalThis.returnAdjustedInnerBox(config, rowMaxesArray)\n    }\n  }\n  // AFTER LEGEND WRAP ends\n\n  // MAKE LEGEND SET CONFIG\n  // Called from updateAnyLegendType to assemble a config object\n  // with all properties necessary to draw key and text\n  makeLegendSetConfig(lData, lPrefs) {\n    const config = this.props.config\n    // Legend baseline is text baseline. So rect/line keys are vertically positioned\n    // relative to half height of text...\n    const verticalBase = lPrefs.innerbox.y\n    // But what if there's a legend header...?\n    const hString = config.mainHeader\n    let hasHeader = false\n    const padding = config.prefs.padding\n    if (typeof hString !== 'undefined' && hString.length > 0) {\n      // verticalBase += padding.belowHeader;\n      hasHeader = true\n    }\n    // Initial left-position of keys:\n    let left = lPrefs.innerbox.x\n    // Columns:\n    let colTotal = +lPrefs.columns\n    // Rows\n    let rows = Math.ceil(lData.length / colTotal)\n    // Override for zero-columns, which pushes legend to right of chart\n    const legendOutside = colTotal === 0\n    if (legendOutside) {\n      colTotal = 1\n      left += lPrefs.chartWidth + padding.betweenKeys\n      rows = 0\n    }\n    const colWidth = lPrefs.innerbox.width / colTotal\n    // Max number of items in any column\n    const colMax = Math.ceil(lData.length / colTotal)\n    const legendSetConfig = {\n      anchor: lPrefs.textPrefs.anchor,\n      colMax,\n      colourLookup: lPrefs.colourLookup,\n      colTotal,\n      colWidth,\n      duration: lPrefs.duration,\n      hasHeader,\n      index: config.index,\n      isMixed: lPrefs.isMixed,\n      left,\n      legendOutside,\n      padding,\n      rows,\n      styles: lPrefs.keyStyleArray,\n      textFill: lPrefs.textPrefs.fill,\n      textHeight: lPrefs.textPrefs.size * lPrefs.emVal,\n      verticalBase,\n    }\n    // Set keyWidth and keyHeight on legendSetConfig\n    this.setOverallKeyWidthAndHeight(legendSetConfig, lPrefs.keyStyleArray)\n    return legendSetConfig\n  }\n  // MAKE LEGEND SET CONFIG ends\n\n  // RETURN ADJUSTED INNER BOX\n  // Called from updateLegendLine/Rect to calculate adjustments to Inner Box\n  // and return them to caller\n  returnAdjustedInnerBox(config, rowLineCountArray) {\n    // For 'rect' legends, it's the top padding, extra lines and the height of 1 rect:\n    // NOTE: 'dots' will probably be the same, but line-keys will presumably\n    // need to align to text baseline...\n    // ...unless, of course, legends were drawn outside the chart\n    let tweak = 0\n    // So as of now, IB top is at baseline of either the header (if any)\n    // or the first key...\n    if (config.prefs.columns > 0) {\n      // Legends are internal, but is there a header?\n      // If so, add the gap between header and keys\n      if (config.mainHeader.length > 0) {\n        tweak += config.prefs.padding.belowHeader\n      }\n      // Now count rows...\n      const padding = config.prefs.padding.betweenKeys\n      const leading = config.prefs.textPrefs.leading\n      for (let rCount = 0; rCount < rowLineCountArray.length; rCount++) {\n        tweak += padding\n        tweak += (rowLineCountArray[rCount] - 1) * leading\n      }\n      tweak -= padding\n    }\n    const obj = { tweak, index: config.index }\n    this.props.onGetInnerBox(obj)\n  }\n  // RETURN ADJUSTED INNER BOX ends\n\n  // SET OVERALL KEY WIDTH AND HEIGHT\n  setOverallKeyWidthAndHeight(legendSetConfig, styleArray) {\n    let keyWidth = 0\n    let keyHeight = 0\n    for (const style in styleArray) {\n      const thisStyle = styleArray[style]\n      if (thisStyle.width > keyWidth) {\n        keyWidth = thisStyle.width\n      }\n      if (thisStyle.height > keyHeight) {\n        keyHeight = thisStyle.height\n      }\n    }\n    legendSetConfig.keyWidth = keyWidth\n    legendSetConfig.keyHeight = keyHeight\n  }\n  // SET OVERALL KEY WIDTH AND HEIGHT ends\n\n  // SERIES BINDING ENTER\n  seriesBindingEnter(seriesBinding, config) {\n    const enter = seriesBinding\n      .enter()\n      .append('g')\n      .attr(\n        'class',\n        (ddd, iii) => `series-legend-pair-group-${config.index}-${iii}`\n      )\n      .attr('id', (ddd, iii) => `legend-${iii + 1}`)\n      .attr('keyStyle', (ddd) => {\n        const temp = ddd.keyStyle.style\n        return temp\n      })\n    return enter\n  }\n  // SERIES BINDING ENTER ends\n\n  // UPDATE ANY LEGEND TYPE\n  // Called from updateLegend. Forks to series-specific\n  // key styles (for mixed/double)\n  updateAnyLegendType(lData) {\n    const config = this.props.config\n    const lPrefs = config.prefs\n    // All properties for drawing the legend:\n    const setConfig = this.makeLegendSetConfig(lData, lPrefs)\n    // Context is the indexed legendset group, rendered below:\n    const contextGroup = d3.select(`.legendkey-group-${config.index}`)\n    // Bind by series\n    // Each data point has properties:\n    //   header\n    //   colour (the colour name)\n    //   keyStyle: style (line/dot/rect), width, height\n    const seriesBinding = contextGroup.selectAll('g').data(lData)\n    // ENTER\n    const seriesLegendEnter = this.seriesBindingEnter(seriesBinding, config)\n    // NOTE: what about double/mixed scales\n    this.appendKey(seriesLegendEnter)\n    if (!seriesBinding.select('line').empty()) {\n      // this.improveSetConfig(setConfig, 'line');\n      this.updateLine(seriesBinding, setConfig)\n    }\n    if (!seriesBinding.select('rect').empty()) {\n      // this.improveSetConfig(setConfig, 'rect');\n      this.updateRect(seriesBinding, setConfig)\n    }\n    if (!seriesBinding.select('circle').empty()) {\n      // this.improveSetConfig(setConfig, 'dot');\n      this.updateDot(seriesBinding, setConfig)\n    }\n    this.appendText(seriesLegendEnter, lPrefs)\n    this.updateText(seriesBinding, setConfig, lPrefs)\n\n    // EXIT\n    seriesBinding.exit().remove()\n    // Callback returns adjustments to Inner Box\n    if (lData.length > 0) {\n      // this.returnAdjustedInnerBox(setConfig);\n    }\n  }\n  // UPDATE ANY LEGEND TYPE ends\n\n  // UPDATE LEGEND\n  // Called from mount/update.\n  updateLegend() {\n    const config = this.props.config\n    const lPrefs = config.prefs\n    const keyStyles = lPrefs.keyStyleArray\n    // Colours scale\n    const colours = config.colourMap\n    // Data object: headers, colours and key style\n    const lData = colours.domain().map((header, seriesNo) => {\n      const obj = {\n        header,\n        colour: colours(header),\n        keyStyle: keyStyles[seriesNo],\n      }\n      return obj\n    })\n    // Kill existing legend\n    this.updateAnyLegendType([])\n    // And recreate\n    this.updateAnyLegendType(lData)\n  }\n  // UPDATE LEGEND ends\n\n  // RENDER\n  // Just render the svg groups. Outer group with children\n  // for header, and keys\n  // Everything else is appended from componentDidMount\n  render() {\n    const lNo = this.props.config.index\n    const outerName = `legendset-group-${lNo}`\n    const headName = `legendheader-group-${lNo}`\n    const keyName = `legendkey-group-${lNo}`\n    return (\n      <g className={outerName} id={outerName}>\n        <g className={headName} id={headName} />\n        <g className={keyName} id={keyName} />\n      </g>\n    )\n  }\n}\n\nSilverLegendSet.propTypes = {\n  config: PropTypes.object,\n  onGetInnerBox: PropTypes.func.isRequired,\n  // initialTimeout: PropTypes.number,\n  // Because it's a prop of the passed globalThis...\n  // eslint-disable-next-line react/no-unused-prop-types\n  tweakLegendSetsTimeout: PropTypes.number,\n  moveLegendSetsTimeout: PropTypes.number,\n}\n\nexport default SilverLegendSet\n","/* eslint-disable complexity */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities module\nimport * as ChartUtils from '../chart-utilities'\nimport * as LegendUtils from './legend-utilities'\nimport SilverLegendSet from './legendset'\n\nclass SilverLegends extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      legendSets: '',\n    }\n    // I think I have to track all IB bounds as a global...\n    this.innerBoxes = []\n    // Callback from LegendSet\n    this.handleLegendSetInnerBoxBounds = this.handleLegendSetInnerBoxBounds.bind(\n      this\n    )\n  }\n\n  // COMPONENT DID MOUNT\n  // I think that, by definition, there are no legends\n  // to append on mount...\n\n  componentDidMount() {\n    if (this.props.drawLegends) {\n      // this.props.onGetInnerBoxes(this.props.innerboxes);\n    }\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Creates new internal global array of IB definitions, each with\n  // the 'drawn' flag at default false.\n  // Then assembles array of legendSets (JSX)\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    let legendSets = ''\n    // On first call in update cycle, the drawLegend flag\n    // will be false, preventing legends being attempted\n    // until Background has assembled a decent IB\n    if (nextProps.drawLegends) {\n      // Pull in the IBs passed as props; mark each as 'un-legended';\n      // and save an an internal global (see handleLegendSetInnerBoxBounds, above)\n      const ibDefs = Object.assign([], nextProps.innerboxes)\n      for (let ibx = 0; ibx < ibDefs.length; ibx++) {\n        ibDefs[ibx].drawn = false\n      }\n      this.innerBoxes = ibDefs\n      legendSets = this.assembleLegendSets()\n    }\n    this.setState({ legendSets })\n  }\n  // COMPONENT WILL RECEIVE PROPS ends\n\n  // SHOULD COMPONENT UPDATE\n  // Only update if the flag says so\n  shouldComponentUpdate(nextProps) {\n    return nextProps.drawLegends\n  }\n  // SHOULD COMPONENT UPDATE\n\n  // GET PADDING FOR INNER BOX\n  // Called from assembleLegendSets. Based upon chart type\n  // appends to the IB object a value representing the\n  // default (untweaked) padding below any legendset\n  // NOTE: to be clear...\n  // Any legendstack has a default padding below; this\n  // value depends, however, upon the chart type.\n  // (If it's a table there's no legends, so zero padding).\n  // If there ARE legends, tweaks are applied (see elsewhere)\n  // for wrapped legend strings, or if there's more than one\n  // row of legends...\n  getPaddingForInnerBox(paddings, iBox, panelConfig) {\n    // Questions:\n    // Are there enough series for a legend?\n    // Is this a table?\n    // Is the legend drawn inside the chart?\n    let legendWithin = false\n    let seriesCount = panelConfig.seriesCount\n    // If there are blobs, subtract a series\n    if (panelConfig.blobs.blobState.column > 0) {\n      seriesCount--\n    }\n    // I'm checking that legends are within panel. Also that, if\n    // double scale, there are more than 2 series\n    // (2-series dbl scale shows axis headers and  omits legends)\n    let seriesThreshold = 1\n    if (panelConfig.scales.isDouble) {\n      seriesThreshold = 2\n    }\n    if (\n      panelConfig.overallChartType !== 'table' &&\n      seriesCount > seriesThreshold &&\n      panelConfig.legend.value > 0\n    ) {\n      legendWithin = true\n    }\n    if (legendWithin) {\n      // Internal legends\n      if (panelConfig.blobs.hasBlobs) {\n        // Blobs:\n        iBox.paddingBelowLegends = paddings.toBlobTop\n      } else if (panelConfig.scales.isDouble) {\n        // Double scale\n        iBox.paddingBelowLegends = paddings.toTopOfChart.double\n      } else if (panelConfig.overallChartType.includes('bar')) {\n        // Bars\n        iBox.paddingBelowLegends = paddings.toTopOfChart.bar\n      } else {\n        // Default\n        iBox.paddingBelowLegends = paddings.toTopOfChart.default\n      }\n    } else {\n      // External legends: no padding\n      iBox.paddingBelowLegends = 0\n    }\n    // Can I handle outside here?\n  }\n  // GET PADDING FOR INNER BOX\n\n  // HANDLE LEGEND-SET INNER BOX BOUNDS\n  // Event handler for callback from each instance of Legendset\n  // Arg is an object with 2 props: panel-index and tweak (depth\n  // of stack drawn by this iteration of Legendset).\n  // It works on an internal global, innerBoxes, which maintains\n  // an ongoing set of IB bounds. As each Legendset 'reports',\n  // an IB definition is updated to allow for the legend-set's height.\n  // Then we loop thro ALL IB defs and get the biggest 'tweak'. If\n  // ALL legendsets have been drawn, we apply that max tweak to\n  // ALL IB defs, which are passed up to Chartwrapper.\n  // This ensures that all charts (if multipanel) start at the same\n  // vertical position\n  handleLegendSetInnerBoxBounds(ibObj) {\n    const config = this.props.config\n    // ibObj is an object with 2 props: IB-tweak and panel-index\n    const ibCount = this.innerBoxes.length\n    // Identify the IB def in the array of IBs, adjust top,\n    // and mark as 'drawn'\n    const thisIB = this.innerBoxes[ibObj.index]\n    thisIB.drawn = true\n    thisIB.tweak = ibObj.tweak\n    // Loop through all panels.\n    let drawnCount = 0\n    for (let ibx = 0; ibx < ibCount; ibx++) {\n      const thisBox = this.innerBoxes[ibx]\n      if (thisBox.drawn) {\n        drawnCount++\n      }\n    }\n    const allDone = drawnCount === ibCount\n\n    // When ALL charts have been 'legended', I get the max tweak\n    // in each 'row' of panels and apply to that entire row\n    // NOTE: this can surely be farmed out...\n    if (allDone) {\n      // Array of panels, by rows\n      const rowCount = config.metadata.panels.rows\n      // Get number of panels in each row. I'm assuming that upstream\n      // checks guarantee this is an integer\n      const rowLen = ibCount / rowCount\n      const rowedArray = LegendUtils.createRowedArray(this.innerBoxes, rowLen)\n      // So each element in rowedArray represents one row\n      // Do charts in panel rows align?\n      const panelsAlign = config.panelAttributes.alignChartsInPanels\n      if (panelsAlign) {\n        // Tweaks are max in any row\n        const maxArray = LegendUtils.getRowMaxesArray(rowedArray, rowLen)\n        // Feed tweaks back into main array\n        LegendUtils.adjustAlignedInnerBoxes(this.innerBoxes, maxArray)\n      } else {\n        LegendUtils.adjustNonAlignedInnerBoxes(this.innerBoxes)\n      }\n      //\n      //\n      // Dispatch callback to Chartwrapper with adjusted IBs.\n      // This callback was originally outside the condition, just below.\n      // But this resulted in legend-stacks being moved down\n      // with every legendset drawn... (fixed 18.7.18)\n      this.props.onGetInnerBoxes(this.innerBoxes)\n    }\n    // HANDLE LEGEND-SET INNER BOX BOUNDS ends\n  }\n\n  // GET KEY STYLE ARRAY\n  // Called from assembleLegendSets. Params are\n  // panel-specific config object, and key styles from DPs\n  getKeyStyleArray(pConfig, styles) {\n    // Styles are defined in DPs, by series type\n    // If chart is mixed/double, potentially 2 chart-types\n    const isMixed = pConfig.scales.isDouble || pConfig.scales.isMixed\n    const splitAt = pConfig.scales.splitDataAtCol\n    const keyStyleArray = []\n    // Pick a 'side'\n    let side = 'left'\n    if (pConfig.scales.enableScale.right) {\n      side = 'right'\n    }\n    let loopCount = pConfig.seriesCount\n    // But pies loop by categories, so...\n    if (pConfig.scales[side].type.includes('pie')) {\n      loopCount = pConfig.pointCount\n    }\n    // Loop by series:\n    for (let iii = 0; iii < loopCount; iii++) {\n      let keyProps = {}\n      if (isMixed) {\n        if (iii < splitAt) {\n          keyProps = this.getKeyStyleProps(\n            pConfig.scales.left.type,\n            pConfig.scales.left.stacked,\n            pConfig.scales.left.thermoDots,\n            styles\n          )\n        } else {\n          keyProps = this.getKeyStyleProps(\n            pConfig.scales.right.type,\n            pConfig.scales.right.stacked,\n            pConfig.scales.right.thermoDots,\n            styles\n          )\n        }\n      } else {\n        const type = pConfig.scales[side].type\n        const stacked = pConfig.scales[side].stacked\n        const thermoDots = pConfig.scales[side].thermoDots\n        keyProps = this.getKeyStyleProps(type, stacked, thermoDots, styles)\n      }\n      keyStyleArray.push(keyProps)\n    }\n    return keyStyleArray\n  }\n\n  // ASSEMBLE LEGEND SETS\n  /*  Called from render to calc how many legendsets to draw.\n      Knocks up the JSX with data and IB bounds then renders:\n      - the outlying group (as now) with, as its children...\n      - however many Legendset components\n      And there's an event listener for each legendset which returns\n      revised IB bounds, which, once 'complete', are passed back\n      to Chartwrapper\n      NOTE: desperately needs refactoring\n  */\n  assembleLegendSets() {\n    const config = this.props.config\n    const innerboxes = this.innerBoxes\n    // Init array of legend sets...\n    const legendSets = []\n    // Count the number of panels that have legends\n    let legendCounter = 0\n    // ...each element of which consists of:\n    // - a call to a keyed LegendSet with...\n    // - legendPrefs: {keyWidth, keyHeight, padding}\n    // - innerbox: {x, y, height, width}\n    // Maybe I don't need all those props, but leave it open\n    // - legendData: an array of objects, each with header and colour properties\n    // - a key\n    // - a binding to an event handler which awaits the revised innerbox bounds\n    //\n    // Lookup values for paddings below legends (if any)\n    // const legendPaddings = config.legend.padding;\n    const legendPaddings = config.background.topPadding.belowLegendBaseline\n    // So Legend is doing external triage. Legendset components are 'dumb' and\n    // just render a containing group, then a stack of subgroups with\n    // key-element and text...\n    // Loop by 'panel'\n    for (let ibIndex = 0; ibIndex < config.panelArray.length; ibIndex++) {\n      const thisData = config.panelArray[ibIndex]\n      // Append padding-below value to each innerbox object\n      // based on chart type\n      this.getPaddingForInnerBox(legendPaddings, innerboxes[ibIndex], thisData)\n      // Double/mixed scale\n      const isDouble = thisData.scales.isDouble\n      const isMixed = thisData.scales.isMixed\n      // seriesCount\n      let { seriesCount } = thisData\n      // Side:\n      let side = 'left'\n      if (thisData.scales.enableScale.right) {\n        side = 'right'\n      }\n      // No legend if only 1 series; if 2 series, no legend if double scale\n      let hasLegend = true\n      // Number of data-'columns' per series. Default (non-scatters) is 1\n      let cluster = 1\n      // Check for scatters or pies:\n      // NOTE: should be using the overallChartType prop\n      const typeString = `${thisData.scales.left.type}-\n        ${thisData.scales.right.type}`\n      const isScatter = typeString.includes('scatter')\n      const isPie = typeString.includes('pie')\n      const isTable = typeString.includes('table')\n      if (!isPie) {\n        if (isTable) {\n          hasLegend = false\n        } else if (isScatter) {\n          cluster = 2\n          if (typeString.includes('sized')) {\n            cluster = 3\n          }\n          if (seriesCount / cluster < 2) {\n            hasLegend = false\n          } else {\n            seriesCount /= cluster\n          }\n        } else {\n          // Non scatters: possible blobs series\n          let blobAdjust = 0\n          if (thisData.blobs.blobState.column > 0) {\n            blobAdjust = 1\n          }\n          if (seriesCount - blobAdjust === 1) {\n            hasLegend = false\n          } else if (isDouble && seriesCount - blobAdjust === 2) {\n            // Double scale: if only two series we rely upon axis headers\n            // and don't need legends\n            hasLegend = false\n          }\n        }\n      }\n      const lSetObj = {\n        hasLegend,\n        index: ibIndex,\n        seriesCount,\n      }\n      if (!isTable) {\n        const headers = []\n        // If it's a double scale, the array remains empty,\n        // killing ALL legends\n        // NO! If double and seriesCount (-blobs) > 2, also runs\n        // Key by series headers...\n        let sourceArray = thisData.headers\n        let startFrom = 1\n        if (isPie) {\n          // ...except pies, which key categories\n          sourceArray = thisData.categories\n          startFrom = 0\n        }\n        // Take first header from each 'cluster' (ignoring category header)\n        for (let iii = startFrom; iii < sourceArray.length; iii += cluster) {\n          // Omit any blob header\n          if (sourceArray[iii] !== thisData.blobs.blobState.header) {\n            headers.push(sourceArray[iii])\n          }\n        }\n        const scales = thisData.scales\n        const chartType = scales[side].type\n        const stacked = scales[side].stacked\n        const thermoDots = scales[side].thermoDots\n        // Map series colours:\n        let colours = thisData.series[chartType].colours\n        if (isDouble || isMixed) {\n          colours = thisData.series.colours\n        }\n        // Function converts to array of legend-data, each element with\n        // props 'header' and 'colour'\n        const colourMap = ChartUtils.getColourMap(headers, colours)\n\n        // The key styles as defined in DPs\n        const styles = config.legend.styles\n        const keyStyleArray = this.getKeyStyleArray(thisData, styles)\n        // NOTE: can I integrate colours into keyStyleArray?\n        lSetObj.headers = headers\n        lSetObj.colourMap = colourMap\n        lSetObj.mainHeader = thisData.legend.header\n        // General legend prefs\n        const usePartyColours =\n          thisData.series.ukParties || thisData.series.usParties\n        lSetObj.prefs = {\n          chartType,\n          chartWidth: config.background.outerbox.dimensions.width,\n          columns: thisData.legend.value,\n          drawLeftToRight: config.legend.drawLeftToRight,\n          duration: config.other.duration,\n          headerPrefs: config.legend.headerText,\n          keyStyleArray,\n          keySizePrefs: config.legend,\n          left: config.background.margins.left,\n          metadata: config.metadata,\n          padding: config.legend.padding,\n          stacked,\n          textPrefs: config.legend.text,\n          thermoDots,\n          usePartyColours,\n        }\n        lSetObj.prefs.isMixed =\n          thisData.scales.isDouble || thisData.scales.isMixed\n        // ...and panel-specific innerbox bounds (use all IB props, in case\n        // we want to consider wrapping... eventually...)\n        lSetObj.prefs.innerbox = innerboxes[ibIndex]\n        // Absolute panel left, before any margin adjustment\n        // Used to do legend tweaks\n        lSetObj.prefs.absoluteLeft = innerboxes[ibIndex].x\n        lSetObj.prefs.emVal = config.metadata.emVal\n        // Colour lookup:\n        lSetObj.prefs.colourLookup = config.metadata.colours\n        // And doubleScale:\n        // lSetObj.prefs.doubleScale = isDouble;\n        // }\n        // Increment counter (if, just below, this is\n        // zero, no panel has legends, so simply abort)\n        if (lSetObj.hasLegend) {\n          legendCounter++\n        }\n      }\n      // All legendsets are pushed to the array, even tables,\n      // or 1-series charts\n      legendSets.push(lSetObj)\n    }\n\n    const jsxArray = []\n    // If no legends, return unmodified innerboxes\n    if (legendCounter === 0) {\n      this.props.onGetInnerBoxes(innerboxes)\n    } else {\n      // So, in theory, legendSets should be an array of set\n      // definitions. Knock up the jsx array:\n      for (let childI = 0; childI < legendSets.length; childI++) {\n        const lSet = Object.assign({}, legendSets[childI])\n        const lSetJSX = (\n          <SilverLegendSet\n            config={lSet}\n            key={`legendset-${childI}`}\n            onGetInnerBox={this.handleLegendSetInnerBoxBounds}\n          />\n        )\n        jsxArray.push(lSetJSX)\n      }\n    }\n\n    return jsxArray\n  }\n  // ASSEMBLE LEGEND SETS ends\n\n  // GET KEY WIDTH/HEIGHT\n  // Called from getKeyStyleArray to determine which\n  // key-style to use, by series type\n  // Params are series-type, stacked-flag,\n  // thermo-dots flag, and key styles from DPs\n  getKeyStyleProps(type, stacked, thermoDots, styles) {\n    let wah = styles.line\n    if (type.includes('line') && stacked) {\n      wah = styles.linestacked\n    } else if (type.includes('thermo')) {\n      if (thermoDots) {\n        wah = styles.thermodot\n      } else {\n        wah = styles.thermo\n      }\n    } else if (type.includes('scatter')) {\n      wah = styles.scatter\n    } else if (type.includes('bar') || type.includes('column')) {\n      wah = styles.barcolumn\n    } else if (type.includes('pie')) {\n      wah = styles.pie\n    }\n    return wah\n  }\n\n  // RENDER\n  render() {\n    // There is a potential legendSet for each panel\n    const legendSets = Object.assign([], this.state.legendSets)\n    const actualSets = []\n    for (let i = 0; i < legendSets.length; i++) {\n      const thisSet = legendSets[i]\n      actualSets.push(thisSet)\n    }\n    // So are there any legend sets? If not, I don't want any empty groups...\n    let legendSetsJsx = null\n    if (actualSets.length > 0) {\n      legendSetsJsx = (\n        <g className=\"silver-chart-legends-group\" id=\"legends-group\">\n          {actualSets}\n        </g>\n      )\n    }\n    return legendSetsJsx\n  }\n}\n\nSilverLegends.propTypes = {\n  config: PropTypes.object,\n  drawLegends: PropTypes.bool,\n  onGetInnerBoxes: PropTypes.func.isRequired,\n}\n\nexport default SilverLegends\n","// Utilities called from Legends and LegendSets\n\n// CREATE ROWED ARRAY\n// Called from Legends.handleLegendSetInnerBoxBounds to\n// generate an array for panels, by rows\nexport function createRowedArray(iBoxes, rowLen) {\n  const rowedArray = []\n  // Array nests by rows\n  for (let iii = 0; iii < iBoxes.length; iii += rowLen) {\n    rowedArray.push(iBoxes.slice(iii, iii + rowLen))\n  }\n  return rowedArray\n}\n// CREATE ROWED ARRAY ends\n\n// GET ROW MAXES ARRAY\n// Args are a 'rowed' array of innerbox definitions,\n// and the number of rows\nexport function getRowMaxesArray(rowedArray, rowLen) {\n  const maxArray = []\n  // Loop by rows\n  for (const rNo in rowedArray) {\n    const aRow = rowedArray[rNo]\n    // Get the max tweak in that row\n    const rowMax = Math.max(\n      ...aRow.map((obj) => obj.tweak + obj.paddingBelowLegends)\n    )\n    // For each element in current row, push the row-max to an array\n    // that should (!) match the complete array of IB defs...\n    for (let iii = 0; iii < rowLen; iii++) {\n      maxArray.push(rowMax)\n    }\n  }\n  return maxArray\n}\n// GET ROW MAXES ARRAY\n\nexport function adjustAlignedInnerBoxes(iBoxes, maxArray) {\n  const ibCount = iBoxes.length\n  for (let ibx = 0; ibx < ibCount; ibx++) {\n    const thisBox = iBoxes[ibx]\n    // Adjust\n    const tuneTweak = maxArray[ibx]\n    thisBox.y += tuneTweak\n    thisBox.height -= tuneTweak\n  }\n}\n\nexport function adjustNonAlignedInnerBoxes(iBoxes) {\n  for (const ibx in iBoxes) {\n    const iBox = iBoxes[ibx]\n    const adjustment = iBox.tweak + iBox.paddingBelowLegends\n    iBox.y += adjustment\n    iBox.height -= adjustment\n  }\n}\n\n/*\nWhat's happening?\n1.  Each legendset reports back, adjusts the inner box to its tweak, and marks itself 'drawn'\n2.  Upon each report-back, I loop through ALL panels. \n        For each, I check for any overrides (too few series to do legends). In that case,\n        I set tweak to zero and mark the box 'drawn'\n3.  When all charts have been 'legended', I apply\n\nIn LegendSets.returnAdjustedInnerBox:\n  default tweak = 0\n  the assumption seems to be that IB.y is the set margin below the background strings\n    (i.e., generally, 15pts below subtitle baseline)\n  if there are internal legends\n    I allow for the header -- drop IB.y by padding below header\n    I count 'rows' and, for each, add to the tweak:\n      the padding below a legend-row\n      (rowCount - 1) * leading\n            This is to allow for wrapping. For each row, I have a var, rowMaxesArray, an\n            array of the max number of (wrapped) lines in each row\n    Then I subtract the padding once.\n  So in theory I return an adjustment for the number of legend-rows.\n  If legends are external, this should be zero\n  If one row, it seems to be zero\n  If 2 rows, it would be padding (10)\n\n  I'm not getting all that; and it looks to me like I'm setting some sort of default, \n  somewhere down the line. I.e., that my tweak ADDS to a default adjustment. Which, in\n  turn, implies that I always make a legend adjustment that gets 'taken back'\n\n*/\n","// AXIS UTILITIES\n// Functions shared by various chart-type components, to create\n// config objects for linear/ordinal x/y-axes...\n\n// We need D3 and ChartUtilities\nimport * as d3 from 'd3'\n\n// SCALE NUMBER FORMAT\n// Called by axis-config functions\n// Passed scale increment, returns an approp D3 number format\n// Cheap and cheerful. And may need separating into a double-\n// process: dps, then format...\n// NOTE: duped in BlobUtils.formatBlobVal\nexport function scaleNumberFormat(scaleIncr) {\n  const numArray = scaleIncr.toString().split('.')\n  // Always thou separators...\n  // let snForm = ',f';\n  let snForm = ','\n  if (numArray.length > 1) {\n    snForm = `,.${numArray[1].length}f`\n  }\n  return snForm\n}\n// SCALE NUMBER FORMAT ends\n\n// GET SIDE\n// Cheaply and cheerfully returns axis side. This\n// needs a proper left/right/top/bottom fix eventually...\nexport function getSide(scales) {\n  let side = 'left'\n  if (scales.enableScale.right) {\n    side = 'right'\n  }\n  return side\n}\n// GET SIDE ends\n\n// GET HALF CLUSTER WIDTH FOR AXIS\n// Called from xaxis-ordinal-config.\n// Returns half width of a bar/column cluster\n// so that we can adjust bounds. This duplicates\n// ChartUtils.getSeriesClusterWidthAndPadding\nexport function getHalfClusterWidthForAxis(config, bounds, isCol) {\n  // NOTE: is this necessary?\n  let bound = bounds.height\n  if (isCol) {\n    bound = bounds.width\n  }\n  // Thermo, column or bar?\n  let type = 'thermovertical'\n  if (!config.thermometer) {\n    if (isCol) {\n      type = 'column'\n    } else {\n      type = 'bar'\n    }\n  }\n  const defaultPadding = config.series[type].gap\n  const pointCount = config.pointCount\n  // Add up total amount of default padding\n  const paddingTotal = (pointCount - 1) * defaultPadding\n  // And get w/h of one cluster\n  let clusterWidth = (bound - paddingTotal) / pointCount\n  // But what if cluster is too narrow?\n  const minWidth = config.series[type].minWidth\n  const absoluteMinWidth = config.series[type].absoluteMinWidth\n  const maxWidth = config.series[type].maxWidth\n  const narrowGap = config.series[type].narrowGap\n  // Check for min/max column width...\n  if (clusterWidth < absoluteMinWidth) {\n    clusterWidth = bound / pointCount\n  } else if (clusterWidth < minWidth) {\n    clusterWidth = bound / pointCount - narrowGap\n  } else if (type === 'column' && clusterWidth > maxWidth) {\n    // Only apply a max width to columns\n    clusterWidth = maxWidth\n  }\n  // I only want half\n  return clusterWidth / 2\n}\n// GET HALF CLUSTER WIDTH FOR AXIS ends\n\n// GET BAR-THERMO GAP\n// Called from ConfigYaxisOrdinal and, in Barchart,\n// configBlobs\nexport function getBarThermoGap(config) {\n  if (config.thermometer) {\n    return config.series.thermohorizontal.gap\n  }\n  // Still here?\n  return config.series.bar.gap\n}\n// GET BAR-THERMO GAP ends\n\n// SET DOUBLE SCALE AXIS COLOURS\n// Called from ConfigYaxisLinear, sets colours for left or right\n// axis labels and header. Defaults to left and right colours; but\n// if chart types differ (line/column), overrides with type-specific colours\nexport function setDoubleScaleAxisColours(\n  textPrefs,\n  dPrefs,\n  side,\n  leftType,\n  rightType\n) {\n  // I want to set 2 props: fill and fillValue, according to side\n  // Default is left/right\n  const leftLine = leftType.includes('line')\n  const rightLine = rightType.includes('line')\n  // NOTE: no doubt I could be cleverer and duck this fork; but I\n  // suspect it would make the code even more impenetrable...\n  if (side === 'left') {\n    // 'fill' is colour name, for Illustrator to pick up\n    // 'fillValue' is actual hex val for browser display\n    textPrefs.fill = dPrefs.fill.left\n    textPrefs.fillValue = dPrefs.fill.leftVal\n    // If series types differ...\n    if (leftLine !== rightLine) {\n      if (leftLine) {\n        textPrefs.fill = dPrefs.fill.linealone\n        textPrefs.fillValue = dPrefs.fill.linealoneVal\n      } else {\n        textPrefs.fill = dPrefs.fill.columnalone\n        textPrefs.fillValue = dPrefs.fill.columnaloneVal\n      }\n    }\n  } else {\n    // Right axis\n    textPrefs.fill = dPrefs.fill.right\n    textPrefs.fillValue = dPrefs.fill.rightVal\n    if (leftLine !== rightLine) {\n      if (rightLine) {\n        textPrefs.fill = dPrefs.fill.linealone\n        textPrefs.fillValue = dPrefs.fill.linealoneVal\n      } else {\n        textPrefs.fill = dPrefs.fill.columnalone\n        textPrefs.fillValue = dPrefs.fill.columnaloneVal\n      }\n    }\n  }\n}\n// SET DOUBLE SCALE AXIS COLOURS ends\n\n// SET DOUBLE SCALE AXIS TEXT PROPS\n// Called from ConfigYaxisLinear\nexport function setDoubleScaleAxisTextProps(textPrefs, dPrefs) {\n  textPrefs.font = dPrefs.font\n  textPrefs.leading = dPrefs.leading\n  textPrefs.size = dPrefs.size\n  textPrefs.headerMargin = dPrefs.headerMargin\n}\n// SET DOUBLE SCALE AXIS TEXT PROPS ends\n\n// CHECK PROPERTIES FOR ADDITIONAL BASELINE\n// Called from flagAdditionalBaseline\n// Arg is scale definition, left/right\n// This is for y-axis only\nexport function checkPropertiesForAdditionalBaseline(scaleDef) {\n  let baseFlag = false\n  if (\n    scaleDef.type.includes('column') ||\n    scaleDef.type.includes('scatter') ||\n    scaleDef.type.includes('thermo') ||\n    scaleDef.stacked\n  ) {\n    if (scaleDef.minMaxObj.scale.min <= 0) {\n      baseFlag = true\n    }\n  }\n  return baseFlag\n}\n// CHECK PROPERTIES FOR ADDITIONAL BASELINE ends\n\n// FLAG ADDITIONAL BASELINE\n// Called from ConfigYaxisLinear. Determines whether the chart needs\n// the additional baseline in front of the series\nexport function flagAdditionalBaseline(config, side) {\n  let addBaseline = false\n  // Mixed: test both sides\n  // Single: just 'this' side\n  // Test 'this' side:\n  const thisSide = config.scales[side]\n  addBaseline = checkPropertiesForAdditionalBaseline(thisSide)\n  // Now mixed (only if not already set)\n  if (!addBaseline) {\n    if (config.scales.isMixed || config.scales.isDouble) {\n      let otherSideName = 'right'\n      if (side === 'right') {\n        otherSideName = 'left'\n      }\n      const otherSide = config.scales[otherSideName]\n      addBaseline = checkPropertiesForAdditionalBaseline(otherSide)\n    }\n  }\n  return addBaseline\n}\n// FLAG ADDITIONAL BASELINE ends\n\n// APPEND TEST TEXT\n// Called from axis component string-tests. Passed\n// the config object and a group, draws a text\n// object into which test strings are injected\n// (caller removes)\nexport function appendTestText(config, contextId) {\n  const axisGroup = d3.select(`#${contextId}`)\n  // Text object\n  const testText = axisGroup\n    .append('text')\n    .attr('id', 'testText')\n    .style({\n      'font-family': config.textPrefs.font,\n      'font-size': () => {\n        let size = config.textPrefs.size.primaryOnly\n        if (config.hasSecondaryAxis) {\n          size = config.textPrefs.size.primaryIfSecondary\n        }\n        return `${size}px`\n      },\n      fill: config.textPrefs.fillValue,\n    })\n  return testText\n}\n// APPEND TEST TEXT ends\n\n// APPEND IN-FRONT TICK\n// Draws the additional tick in front of series, x or y axis.\n//  Called from linear axis components\n//    Arg 1 is calling component's config object\n//    Arg 2 is true for yaxis/column, false for xaxis/bar\n//    Arg 3 contains coords for line ends\nexport function appendInFrontTick(config, isHorizontal, points) {\n  const zPrefs = config.tickPrefs.zero\n  const start = points.start\n  const end = points.end\n  const scaleVal = points.scaleVal\n  const duration = config.duration\n  // How will the zero line appear?\n  let zColVal = zPrefs.simpleValue\n  let zColName = zPrefs.simple\n  if (config.mixedVals) {\n    zColVal = zPrefs.mixedValue\n    zColName = zPrefs.mixed\n  }\n  const zClass = 'axis-zero-line'\n  const zId = `${zClass}~~~stroke:${zColName}`\n  const zThickness = zPrefs.width\n  // Use a separate group so this lies above the series\n  const zeroGrp = `.zeroline-group-${config.chartIndex}`\n  // Bind data\n  const zBinding = d3\n    .select(zeroGrp)\n    .selectAll(zClass)\n    .data([0])\n  // If there's already a zero line (double scales), tiptoe away now\n  if (config.isDouble && zBinding[0].parentNode.childElementCount > 0) {\n    return\n  }\n  // ENTER\n  zBinding.enter().append('line')\n  // NOTE. This works with +/– values, but I haven't\n  // looked at broken scales yet\n  // (Although if scale breaks, the zero line will vanish somewhere off-chart...)\n  zBinding\n    .transition()\n    .duration(duration)\n    .attr({\n      class: zClass,\n      x1: () => {\n        let val = start\n        if (!isHorizontal) {\n          val = scaleVal\n        }\n        return val\n      },\n      x2: () => {\n        let val = end\n        if (!isHorizontal) {\n          val = scaleVal\n        }\n        return val\n      },\n      y1: () => {\n        let val = start\n        if (isHorizontal) {\n          val = scaleVal\n        }\n        return val\n      },\n      y2: () => {\n        let val = end\n        if (isHorizontal) {\n          val = scaleVal\n        }\n        return val\n      },\n      id: zId,\n    })\n    .style({\n      'stroke-width': zThickness,\n      stroke: zColVal,\n    })\n\n  zBinding.exit().remove()\n}\n// APPEND IN-FRONT TICK ends\n\n// FIX NEGATIVE LABELS\n// Called from XaxisLinear.updateXaxis and\n// XaxisOrdinal.updatePrimaryXaxis\n// Adjust position of negative labels,\n// to centre-align on the number\nexport function fixNegativeLabels(axisGroup) {\n  axisGroup.selectAll('text').each(function(ddd) {\n    const thisLab = d3.select(this)\n    // Now that this is called from XaxisOrdinal, we have\n    // to check for dates (which evaluate to < 0), too\n    if (typeof ddd !== 'object' && +ddd < 0) {\n      thisLab.attr('x', () => {\n        let xVal = thisLab.attr('x')\n        // Get width of label with '-'. Then re-measure\n        // without the '-' and adjust by half. Not\n        // overwhelmingly efficient, but shouldn't be\n        // a big drag\n        // (Keep value as a string)\n        const originalVal = thisLab.text()\n        const widA = thisLab.node().getComputedTextLength()\n        thisLab.text(originalVal.substring(1))\n        const widB = thisLab.node().getComputedTextLength()\n        const halfMinus = (widA - widB) / 2\n        thisLab.text(originalVal)\n        xVal -= halfMinus\n        return xVal\n      })\n    }\n  })\n}\n// FIX NEGATIVE LABELS ends\n\n// GET AXIS LABEL WIDTH\n// Called from XaxisOrdinal and XaxisLinear, to get width\n// of first or last axis label, for margin adjustment\nexport function getAxisLabelWidth(testObj, tVal, forceTurn, isFirst) {\n  // Fork on whether text turns, in which case\n  // check width of each 'line'\n  const textTurns = tVal.toString().includes(forceTurn)\n  let valArray = [tVal]\n  if (textTurns) {\n    valArray = tVal.split(forceTurn)\n  }\n  let labelWidth = 0\n  // Loop on 'lines'\n  for (let vNo = 0; vNo < valArray.length; vNo++) {\n    const thisVal = valArray[vNo]\n    let minusAdj = 0\n    // Get line width\n    testObj.text(thisVal)\n    let tWidth = testObj.node().getBBox().width\n    if (!textTurns) {\n      // If text doesn't turn (i.e. it's a simple label)\n      // and first val < 0, allow for the width of the '-'\n      // Ticks will subsequently align to centre of value without '-'\n      let unMinusWidth = 0\n      if (isFirst && tVal < 0) {\n        // Measure without any minus\n        testObj.text(Math.abs(tVal))\n        unMinusWidth = testObj.node().getComputedTextLength()\n        // Difference between absolute and minus val, if any\n        minusAdj = (tWidth - unMinusWidth) / 2\n        // But, inferentially:\n        minusAdj -= 0.28\n      }\n    }\n    // NOTE: assumption that xaxis strings are centre-aligned\n    // (minusAdj is always zero for split labels)\n    tWidth /= 2\n    tWidth += minusAdj\n    labelWidth = Math.max(labelWidth, tWidth)\n  }\n  return labelWidth\n}\n// GET AXIS LABEL WIDTH\n\n// GET LINEAR AXIS TICK FORMAT\n// Conditional tick label formatter forces zeros to \"0\"\nexport function getLinearAxisTickFormat(val, fStr) {\n  if (val.toString() === '0') {\n    fStr = 'f'\n  }\n  const myFormatter = d3.format(fStr)\n  return myFormatter(val)\n}\n// GET LINEAR AXIS TICK FORMAT ends\n","// Called from ScatterSeries to add z-axis\n// header, if there is one\n\nimport * as d3 from 'd3'\nimport * as TextWrapping from '../chartside-utilities/text-wrapping'\n\n// ADD KEY GROUP\n// Called from addZHead to create header group\nexport function addKeyGroup() {\n  // Append to parent content group:\n  const id = 'content-group-0'\n  const parentGroup = d3.select(`#${id}`)\n  const keyGroup = parentGroup.append('g').attr({\n    id: 'zaxis-header-group',\n    className: 'zaxis-header-group',\n  })\n  return keyGroup\n}\n// ADD KEY GROUP ends\n\n// TWEAK T-SPANS\n// Called directly from appendText to move header tSpans\n// 'move' is leading. This process is usually done via a\n// callback, through text-wrapping; but here it has to be direct\nexport function tweakTspans(headText, move) {\n  const myHead = headText[0][0]\n  const childCount = myHead.children.length\n  for (let cNo = 1; cNo < childCount; cNo++) {\n    const child = myHead.children[cNo]\n    const cPos = +child.getAttribute('y') + move\n    child.setAttribute('y', cPos)\n  }\n}\n// TWEAK T-SPANS ends\n\n// APPEND TEXT\nexport function appendText(config, location, keyGroup) {\n  // Content is z column header from first cluster\n  // const hStr = config.headers[2];\n  const hStr = config.zAxisHeader\n  const tPrefs = config.seriesPrefs.zkey\n  //\n  // Positions\n  const rad = tPrefs.dotRadius\n  const gap = tPrefs.gap\n  const xPos = location.x + rad + gap\n  const halfTextHeight = (config.emVal * tPrefs.fontSize) / 2\n  let yPos = location.y + halfTextHeight\n  yPos += config.chartIndex * (rad * 3)\n  // Text format\n  const fillName = tPrefs.textFill\n  const fillVals = config.colourLookup[fillName]\n  const headText = keyGroup\n    .append('text')\n    .attr({\n      x: xPos,\n      y: yPos,\n    })\n    // NOTE: anchor was originall set in DPs, but is\n    // hard-wired now that the key is drifting arbitrarily\n    // around the place...\n    .style({\n      'text-anchor': 'start',\n      'font-family': tPrefs.font,\n      'font-size': `${tPrefs.fontSize}px`,\n      leading: tPrefs.leading,\n      fill: fillVals,\n    })\n    .text(hStr)\n  headText.attr({\n    id: () => {\n      let tID = 'zaxis-header-string~~~'\n      tID = `${tID}fill:${fillName}`\n      tID = `${tID}, leading:${tPrefs.leading}`\n      tID = `${tID}, justification: start`\n      return tID\n    },\n  })\n  // Text-wrapping, with callback to tweak tSpans\n  const wtConfig = {\n    wWidth: 1000,\n    forceTurn: config.forceTurn,\n  }\n  // Text wrapping (no callback, etc.)\n  headText.call(TextWrapping.wrapAllTextElements, wtConfig)\n  // Handle tSpans after a timeOut to allow TextWrapping\n  // to create tSpans\n  setTimeout(() => {\n    tweakTspans(headText, tPrefs.leading)\n  }, 50)\n}\n// APPEND TEXT ends\n\n// APPEND DOT\nexport function appendDot(config, location, keyGroup) {\n  const kPrefs = config.seriesPrefs.zkey\n  const dotRad = kPrefs.dotRadius\n  const dotStrokeWidth = kPrefs.dotStrokeWidth\n  const dotStrokeName = kPrefs.dotStroke\n  const dotStroke = config.colourLookup[dotStrokeName]\n  const dotFill = kPrefs.dotFill\n  // Inherited position is top right of chart\n  const dotX = location.x\n  let dotY = location.y\n  dotY += config.chartIndex * (dotRad * 3)\n  keyGroup\n    .append('circle')\n    .attr({\n      id: () => {\n        let id = 'zaxis-header-dot~~~'\n        const fill = dotFill\n        id = `${id}fill: ${fill},`\n        const sName = dotStrokeName\n        id = `${id}stroke: ${sName}`\n        return id\n      },\n      cx: dotX,\n      cy: dotY,\n      r: dotRad,\n    })\n    .style({\n      fill: dotFill,\n      'stroke-width': dotStrokeWidth,\n      stroke: dotStroke,\n    })\n}\n// APPEND DOT ends\n\n// GET KEY LOCATION\n// Origin for key\nexport function getKeyLocation(config) {\n  const bounds = config.originalBounds\n  // This is pretty arbitrary\n  const x = config.outerWidth + 5\n  const y = Math.max(5, 0 - bounds.y)\n  return { x, y }\n}\n// GET KEY LOCATION\n\n// ADD Z KEY\n// Called from scatterSeries.updateScatter\nexport function addZKey(config, outerGroup) {\n  const keyGroup = addKeyGroup(outerGroup)\n  const keyLocation = getKeyLocation(config)\n  appendDot(config, keyLocation, keyGroup)\n  appendText(config, keyLocation, keyGroup)\n}\n// ADD Z KEY ends\n\n// GET SIZED DOT SCALE\n// Called from ScatterSeries.appendDot to map z-axis\n// values to scale range\nexport function getSizedDotScale(config) {\n  // const rangeMin = config.zAxisBounds.min;\n  const rangeMin = 0\n  const rangeMax = config.zAxisBounds.max\n  const dotRange = [rangeMin, rangeMax]\n  // const minVal = config.minZval;\n  const minVal = 0\n  const maxVal = config.maxZval\n  const dotDomain = [minVal, maxVal]\n  return d3.scale\n    .sqrt()\n    .domain(dotDomain)\n    .range(dotRange)\n}\n/*\nThe way scales work in D3 is that they map input values \n(defined by .domain()) to output values (defined by .range()). So\n  d3.scale.sqrt().domain([1, 100]).range([10, 39])\nmaps values from 1 to 100 to the 10 to 39 range. \nThat is, 1 corresponds to 10 and 100 to 39.\n*/\n// GET SIZED DOT SCALE ends\n\nexport function getMinXandZvalues(chartData, headers) {\n  const myData = JSON.parse(JSON.stringify(chartData))\n  const clusterNo = 3\n  // Isolate the x- and y-headers\n  const headArray = []\n  for (let hNo = 1; hNo < headers.length; hNo += clusterNo) {\n    headArray.push({\n      x: headers[hNo],\n      z: headers[hNo + 2],\n    })\n  }\n  // Get default x min from first point\n  let xMin = +myData[0][headers[1]]\n  // let zMax = +myData[0][headers[3]];\n  //\n  const pointCount = myData.length\n  // const seriesLen = myData[0].length;\n  let rowsWithMinXval = []\n  // So we're looping through, point by point\n  for (let pNo = 0; pNo < pointCount; pNo++) {\n    const thisPoint = myData[pNo]\n    // Now check x-mins\n    // (there may be several series)\n    const xMinArray = []\n    for (const head in headArray) {\n      const thisHead = headArray[head].x\n      xMinArray.push(+thisPoint[thisHead])\n    }\n    const rowMin = Math.min(...xMinArray)\n    if (rowMin < xMin) {\n      rowsWithMinXval = [thisPoint]\n      xMin = rowMin\n    } else if (rowMin === xMin) {\n      rowsWithMinXval.push(thisPoint)\n    }\n  }\n  // So we should emerge with an array of points\n  // that have a min x-val in at least 1 series\n  // However, each point may have vals for >1 series...\n  const zMaxes = []\n  for (const aPoint in rowsWithMinXval) {\n    const thisRow = rowsWithMinXval[aPoint]\n    for (const head in headArray) {\n      const xHead = headArray[head].x\n      const zHead = headArray[head].z\n      if (+thisRow[xHead] === xMin) {\n        zMaxes.push(thisRow[zHead])\n        // zMax = thisRow[zHead];\n      }\n    }\n  }\n  // z could be < 0; trap downstream\n  return {\n    x: xMin,\n    z: Math.max(...zMaxes),\n  }\n}\n","// Utilities to identify and carry out broken scales\n\n// GET Y-AXIS BROKEN SCALE PADDING\n// Called from MixedChart, ScatterChart and VthermoChart.\n// Also internally.\n// Broken scale padding is different for bars and h-thermos\nexport function getYaxisBrokenScalePadding(chartType, config) {\n  let brokenScalePadding = config.yAxis.brokenScalePadding.default;\n  if (chartType.includes('thermo')) {\n    brokenScalePadding = config.yAxis.brokenScalePadding.thermoHorizontal;\n  }\n  return brokenScalePadding;\n}\n// GET Y-AXIS BROKEN SCALE PADDING\n\n// DOES Y-AXIS BREAK ON SCATTER\n// Called from makeBreakScaleObj, since padding of xaxis labels\n// changes if scatter  y-axis breaks\nexport function doesYaxisBreakOnScatter(chartType, config) {\n  let yAxisBreaks = false;\n  if (chartType.includes('scatter')) {\n    // Inferential!\n    const scaleMin = config.scales.right.minMaxObj.scale.min;\n    const isLog = config.scales.right.log;\n    yAxisBreaks = scaleMin > 0 && !isLog;\n  }\n  return yAxisBreaks;\n}\n// DOES Y-AXIS BREAK ON SCATTER\n\n// FACTOR BSS POINTS\n// Responsive DCs draw BS symbol at 200%\nexport function factorBssPoints(points, factor) {\n  if (factor === 1) {\n    return points;\n  }\n  // Still here? Clone (coz this gets called 2x: test and live) and factor\n  const pts = points.map(onePt => {\n    const ptObj = {\n      x: onePt.x * factor,\n      y: onePt.y * factor,\n    };\n    return ptObj;\n  });\n  return pts;\n}\n// FACTOR BSS POINTS ends\n\n// MAKE BREAK-SCALE OBJECT\n// Called from configX/YaxisLinear to assemble\n// the properties for a BS symbol\nexport function makeBreakScaleObj(chartType, config) {\n  const bss = config.brokenScaleSymbol;\n  const padding = getYaxisBrokenScalePadding(chartType, config);\n  const scatterYaxisBreaks = doesYaxisBreakOnScatter(chartType, config);\n  // Size determines origin if right-aligned\n  // const bsSizeFactor = config.brokenScaleFactors?.size\n  // Prev doesn't work for me, so substituted:\n  const bsSizeFactor = config.brokenScaleFactors\n    ? config.brokenScaleFactors.size\n    : undefined;\n  const points = factorBssPoints(bss.points, bsSizeFactor);\n  // Width of entire symbol: x-val of final point\n  const origin = points[points.length - 1].x;\n  // Strokewidth\n  // const bsWidthFactor = config.brokenScaleFactors?.strokewidth;\n  // Again, substitute:\n  const bsWidthFactor = config.brokenScaleFactors\n    ? config.brokenScaleFactors.strokewidth\n    : undefined;\n  const width = bss.width * bsWidthFactor;\n  // NOTE: should also check if 'break' is T/F here, rather than\n  // after return to caller\n  return {\n    break: false,\n    linejoin: bss.linejoin,\n    noSymbol: bss.noSymbol,\n    origin,\n    padding,\n    points,\n    horizontalPaddingToXaxisLabel: bss.horizontalPaddingToXaxisLabel,\n    scatterYaxisBreaks,\n    strokeName: bss.strokeName,\n    strokeValue: bss.strokeValue,\n    width,\n  };\n  // 'width' here is strokeWidth\n}\n// MAKE BREAK-SCALE OBJECT ends\n\n// CHECK FOR BROKEN SCALE\n// Called from X/YaxisLinear.drawBreakSymbol. Check whether\n// charttype is in a list of 'noSymbol' types\nexport function checkForBrokenScaleSymbol(chartType, breakObj) {\n  let drawSymbol = true;\n  const noSymbArray = breakObj.noSymbol;\n  for (let sNo = 0; sNo < noSymbArray.length; sNo++) {\n    const type = noSymbArray[sNo];\n    if (chartType.includes(type)) {\n      drawSymbol = false;\n      break;\n    }\n  }\n  return drawSymbol;\n}\n// CHECK FOR BROKEN SCALE ends\n","// CONFIG X-AXIS LINEAR\n// Assembles x-axis config object for a linear axis:\n// bars, hthermos and scatters\n\nimport * as d3 from 'd3'\nimport * as ScatterZKey from '../../scatterchart/scatterzkey'\nimport * as BrokenScale from '../broken-scale'\nimport * as AxisUtilities from '../axis-utilities'\n\n// Arg 1: one chart definition from panelArray\n// 2: inner box\n// 3: flags whether test render, or 'live'\nexport default function(chartConfig, bounds, testFlag) {\n  const xAxis = Object.assign({}, chartConfig.xAxis)\n  // FIXME: this is wretched:\n  let side = ''\n  if (chartConfig.scales.left.type.includes('scatter')) {\n    side = 'left'\n  } else {\n    side = AxisUtilities.getSide(chartConfig.scales)\n  }\n  const isLog = chartConfig.scales[side].log\n  const mmO = Object.assign({}, chartConfig.scales[side].minMaxObj.scale)\n  const chartType = chartConfig.scales[side].type\n  // Broken scale...?\n  const breakScaleObj = BrokenScale.makeBreakScaleObj(chartType, chartConfig)\n  // (No index check on a linear x-axis)\n  if (mmO.min > 0 && !isLog) {\n    if (testFlag) {\n      bounds.x += breakScaleObj.padding\n      bounds.width -= breakScaleObj.padding\n    }\n    breakScaleObj.break = true\n  }\n  // Prefs for text...\n  const textPrefs = Object.assign({}, xAxis.text)\n  // (Fcn above)\n  textPrefs.textFormat = AxisUtilities.scaleNumberFormat(mmO.increment)\n  textPrefs.emVal = chartConfig.emVal\n  // ...and for ticks\n  // We start with the defaults\n  const tickPrefs = Object.assign({}, xAxis.ticks.default)\n  // Then overwrite with style-specific:\n  const barPrefs = xAxis.ticks.bar\n  if (typeof barPrefs !== 'undefined') {\n    Object.keys(barPrefs).forEach((key) => {\n      tickPrefs[key] = barPrefs[key]\n    })\n  }\n  // Axis header and additional baseline flag\n  let header = ''\n  let additionalBaseline = false\n  let scatterDotProps = {}\n  // Broken scale padding is different for bars and h-thermos\n  const brokenScalePadding = BrokenScale.getYaxisBrokenScalePadding(\n    chartType,\n    chartConfig\n  )\n  if (chartType.includes('scatter')) {\n    header = chartConfig.axisHeaders.xaxis\n    textPrefs.header = chartConfig.xAxis.header\n    additionalBaseline = true\n    // For any dot projection, scatters need\n    // min actual x-value, and dot radius.\n    // Also z-value and -scale for sized scatters\n    let dotRad = 0\n    let xMin = chartConfig.scales[side].minMaxObj.actual.min\n    if (chartType === 'sizedscatter') {\n      // Fake a specific config object, with scale- and\n      // actual-max, to get a D3 scale\n      const zScaleProps = chartConfig.scales.z\n      const zConfig = {\n        zAxisBounds: { max: zScaleProps.max },\n        maxZval: zScaleProps.actualMax,\n      }\n      const zScale = ScatterZKey.getSizedDotScale(zConfig)\n      // Now I have to isolate one or more points with min\n      // x-value. Then narrow down to the one with the\n      // biggest z-value. So it's the leftmost dot with\n      // biggest radius...\n      const dotProps = ScatterZKey.getMinXandZvalues(\n        chartConfig.chartData,\n        chartConfig.headers\n      )\n      // Radius can't be < 0 (in case neg value)\n      dotRad = Math.max(zScale(dotProps.z) / 2, 0)\n      xMin = dotProps.x\n    } else {\n      dotRad = chartConfig.series.scatter.dots.fixedRadius\n    }\n    // So obj with:\n    //    min x value\n    //    radius of dot\n    scatterDotProps = {\n      minVal: xMin,\n      dotRad,\n    }\n  }\n  // Add'nal prefs not inherited from defaults\n  tickPrefs.tickDensity = mmO.tickDensity\n  tickPrefs.tickValues = mmO.tickValues\n  const xAxisConfig = {\n    // NOTE: hard-wired to 'left'. Need this for any\n    // bar projection\n    actualMaxVal: chartConfig.scales.left.minMaxObj.actual.max,\n    additionalBaseline,\n    bounds,\n    breakScaleObj,\n    brokenScalePadding,\n    chartIndex: chartConfig.chartIndex,\n    chartType,\n    colourLookup: chartConfig.colourLookup,\n    duration: chartConfig.duration,\n    factor: chartConfig.scales[side].factor,\n    forceTurn: chartConfig.forceTurn,\n    hasSecondaryAxis: false,\n    header,\n    minVal: mmO.min,\n    maxVal: mmO.max,\n    orient: xAxis.orient[chartType],\n    side,\n    scatterDotProps,\n    textPrefs,\n    tickPrefs,\n    zeroPrefs: chartConfig.yAxis.ticks.zero,\n  }\n  // Mixed +/– flag (including if max >= 0)\n  xAxisConfig.mixedVals = mmO.min < 0 && mmO.max >= 0\n  // Assemble the x-scale object\n  if (isLog) {\n    xAxisConfig.scale = d3.scale\n      .log()\n      .range([0, bounds.width])\n      .domain([mmO.min, mmO.max])\n  } else {\n    xAxisConfig.scale = d3.scale\n      .linear()\n      .range([0, bounds.width])\n      .domain([mmO.min, mmO.max])\n  }\n  return xAxisConfig\n}\n// CONFIG X-AXIS LINEAR ends\n","// Assembles config object for ordinal y-axis\n// (bar and hthermo charts)\n\nimport * as d3 from 'd3'\nimport * as BrokenScale from '../broken-scale'\nimport * as AxisUtilities from '../axis-utilities'\n\nexport default function(chartConfig, bounds, testFlag) {\n  const yAxis = Object.assign({}, chartConfig.yAxis)\n  // Prefs for text...\n  const textPrefs = Object.assign({}, yAxis.text)\n  // ...and ticks\n  const tickPrefs = Object.assign({}, yAxis.ticks.default)\n  // Then overwrite with style-specific, which can be 'bar'\n  // or 'thermohorizontal'; so...\n  // (Is this such a good idea? Is there a better way...?)\n  let tPrefs = yAxis.ticks.bar\n  if (chartConfig.thermometer) {\n    tPrefs = yAxis.ticks.thermohorizontal\n  }\n  if (typeof tPrefs !== 'undefined') {\n    Object.keys(tPrefs).forEach((key) => {\n      tickPrefs[key] = tPrefs[key]\n    })\n  }\n  tickPrefs.tickCount = chartConfig.pointCount\n  tickPrefs.tickPadding = yAxis.margins.ordinalInnerMargin\n  // Get side:\n  const side = AxisUtilities.getSide(chartConfig.scales)\n  const chartType = chartConfig.scales[side].type\n  // Broken scale?\n  const minVal = chartConfig.scales[side].minMaxObj.scale.min\n  const isLog = chartConfig.scales[side].log\n  let breakScale = false\n  if (minVal > 0 && !isLog) {\n    breakScale = true\n  }\n  // Broken scale padding is different for bars and h-thermos\n  const brokenScalePadding = BrokenScale.getYaxisBrokenScalePadding(\n    chartType,\n    chartConfig\n  )\n  const yAxisConfig = {\n    bounds,\n    breakScale,\n    brokenScalePadding,\n    categories: chartConfig.categories,\n    categoryType: chartConfig.categoryType,\n    chartIndex: chartConfig.chartIndex,\n    chartType,\n    colourLookup: chartConfig.colourLookup,\n    duration: chartConfig.duration,\n    emVal: chartConfig.emVal,\n    forceTurn: chartConfig.forceTurn,\n    orient: yAxis.orient[chartType],\n    // Pre-margins x-pos for positioning left-aligned cat strings\n    // NOTE: inferential?\n    originalX: chartConfig.originalInnerBox.x,\n    testFlag,\n    textPrefs,\n    tickPrefs,\n  }\n  // Y-SCALE\n  // Get category column header, to identify each cat string in data:\n  const catHead = chartConfig.headers[0]\n  const yDomain = chartConfig.chartData.map((ddd) => ddd[catHead])\n  // Offset from IB top and bottom:\n  let tickOffset = 0\n  if (chartConfig.thermometer) {\n    const thermoDots = chartConfig.scales[side].thermoDots\n    if (thermoDots) {\n      // I'm assuming same radius/length for horiz and vert thermos\n      tickOffset = chartConfig.series.thermohorizontal.dot.radius\n    } else {\n      tickOffset = chartConfig.series.thermohorizontal.line.length / 2\n    }\n  } else {\n    tickOffset = AxisUtilities.getHalfClusterWidthForAxis(\n      chartConfig,\n      bounds,\n      false\n    )\n  }\n  // NOTE: but allow for font emsize?\n  yAxisConfig.scale = d3.scale\n    .ordinal()\n    .domain(yDomain)\n    .rangePoints([tickOffset, bounds.height - tickOffset], 0, 0)\n  return yAxisConfig\n}\n","// Shared by xaxis-linear and -ordinal\n\nimport * as d3 from 'd3'\nimport * as TextWrapping from '../chartside-utilities/text-wrapping'\nimport * as ChartUtils from '../chart-utilities'\n\n// UPDATE X-AXIS HEADER\n// Called from each caller's componentDidMount and componentDidUpdate\n// Args are the caller's 'this' (for post-text-wrapping)\n// and config\nexport function updateXaxisHeader(globalThis, config) {\n  const chartIndex = config.chartIndex\n  // Context: ticks group\n  const headId = `xaxis-header-group-${chartIndex}`\n  const headGroup = d3.select(`#${headId}`)\n  const headString = config.header\n  // No width testing... but NOTE: I may have to revisit\n  // Object to pass to wrapText\n  const wtConfig = {\n    wWidth: config.bounds.width,\n    forceTurn: config.forceTurn,\n  }\n  const hPrefs = config.textPrefs.header\n  const anchor = hPrefs.anchor\n  // Aug'19: coming at header y-pos from a different angle,\n  // relating it to label positions\n  // Remember: space has transformed, so we start from zero\n  let xPos = 0\n  xPos += config.bounds.width / 2\n  // For y, zero is top of innerbox\n  let yPos = 0\n  if (config.orient === 'bottom') {\n    // To bottom of chart:\n    yPos += config.bounds.height\n    // Labels:\n    let yPadding = config.textPrefs.padding.axisAtBottom.default\n    // But padding is different for broken scatters\n    if (\n      config.chartType.includes('scatter') &&\n      config.breakScaleObj.scatterYaxisBreaks\n    ) {\n      yPadding = config.textPrefs.padding.axisAtBottom.brokenScatter\n    }\n    yPos += yPadding\n    // If this is an ordinal scale (i.e. dates are possible)...\n    if (typeof config.granularity !== 'undefined') {\n      if (config.categoryType === 'string') {\n        // Adjust for multiline axis labels\n        // Would this be better calc'd from the source up?\n        // Who knows...?\n        yPos += adjustHeadYposForTurnedLabels(yPos, config)\n      } else if (\n        config.granularity.primary.showLabel &&\n        config.hasSecondaryAxis\n      ) {\n        // If the 1ry axis shows labels AND there's a row of 2ry\n        // axis labels, drop the header an extra row...\n        yPos += config.textPrefs.rowheight\n      }\n    }\n    // Actual header:\n    yPos += hPrefs.margin\n  } else {\n    yPos -= config.textPrefs.rowheight\n    yPos -= hPrefs.margin\n  }\n  const headArray = [{ content: headString }]\n  const boundHead = headGroup.selectAll('text').data(headArray)\n  boundHead.enter().append('text')\n  boundHead\n    .attr({\n      class: 'xaxis-header',\n      x: xPos,\n      y: yPos,\n      id: (ddd, iii) => {\n        const id = `xaxis-header-${iii}`\n        const fill = hPrefs.fill\n        const justification = anchor\n        const leading = hPrefs.leading\n        const tID = ChartUtils.getTextID(id, fill, justification, leading)\n        return tID\n      },\n      leading: hPrefs.leading,\n    })\n    .style({\n      fill: config.textPrefs.fillValue,\n      'font-family': hPrefs.font,\n      'font-size': `${hPrefs.size}px`,\n      'text-anchor': anchor,\n    })\n    .text((ddd) => ddd.content)\n\n  // Text wrapping (no callback)\n  boundHead.call(TextWrapping.wrapAllTextElements, wtConfig, globalThis)\n\n  boundHead.exit().remove()\n}\n// UPDATE X-AXIS HEADER ends\n\n// GET X-AXIS HEADER MARGIN\n// Called from doStringTests to get depth of margin\n// for any header. String will NOT autowrap.\nexport function getXaxisHeaderMargin(config) {\n  const header = config.header\n  const forceTurn = config.forceTurn\n  let margin = 0\n  if (header.length > 0) {\n    margin += config.textPrefs.header.margin\n    // More than one line? Add leading.\n    const extraLines = header.split(forceTurn).length - 1\n    margin += extraLines * config.textPrefs.header.leading\n  }\n  return margin\n}\n// GET X-AXIS HEADER MARGIN ends\n\n// ADJUST HEAD Y-POS FOR TURNED LABELS\n// Called from updateXaxisHeader. Finds max number of turned\n// lines in axis headers and returns adjustment for axis header\nexport function adjustHeadYposForTurnedLabels(yPos, config) {\n  let lineCount = 0\n  const rx = /<br>/g\n  const catArray = config.categories\n  for (const cat in catArray) {\n    const matchArray = catArray[cat].match(rx)\n    if (matchArray !== null) {\n      lineCount = Math.max(matchArray.length, lineCount)\n    }\n  }\n  return lineCount * config.textPrefs.leading\n}\n// ADJUST HEAD Y-POS FOR TURNED LABELS ends\n","// Disable prefer-reflect, for D3 axis.call()\n/* eslint-disable prefer-reflect,  no-invalid-this,  func-names */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities module\nimport * as AxisUtils from '../axis-utilities'\nimport * as XaxisHeader from '../xaxis-header'\nimport * as BrokenScale from '../broken-scale'\n\nclass SilverXaxisLinear extends Component {\n  // DEFAULT PROPS\n  static get defaultProps() {\n    return {\n      axis: d3.svg.axis(),\n      grpNames: {\n        outerClass: 'axis-group',\n        outerId: 'xaxis-group-',\n        ticksId: 'xaxis-ticks-group-',\n        labelsId: 'xaxis-labels-group-',\n        headerId: 'xaxis-header-group-',\n      },\n      // But headerId now set indep'y in xaxis-header.js\n    }\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    const config = this.props.config\n    const xAxis = this.setXaxisConfig()\n    this.updateXaxis(xAxis)\n    this.drawBreakSymbol()\n    if (config.header.length > 0) {\n      XaxisHeader.updateXaxisHeader(this, config)\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    const config = this.props.config\n    const xAxis = this.setXaxisConfig()\n    this.updateXaxis(xAxis)\n    this.drawBreakSymbol()\n    if (config.header.length > 0) {\n      XaxisHeader.updateXaxisHeader(this, config)\n    }\n  }\n\n  // SET X-AXIS CONFIG\n  setXaxisConfig() {\n    const xAxis = this.props.axis\n    const config = this.props.config\n    const tPrefs = config.tickPrefs\n    // Top or bottom:\n    const orient = config.orient\n    const isTop = orient === 'top'\n    // Scale function:\n    const xScale = config.scale\n    // 'Hard'tick values:\n    const tickValues = tPrefs.tickValues\n    // Padding between labels and axis\n    const projection = tPrefs.projection[config.chartType]\n    const emVal = config.textPrefs.emVal\n    let tickPadding = 0\n    if (isTop) {\n      tickPadding = config.textPrefs.padding.axisAtTop.bar\n      // But\n      if (config.chartType.includes('thermo')) {\n        tickPadding = config.textPrefs.padding.axisAtTop.thermo\n      }\n    } else {\n      tickPadding = config.textPrefs.padding.axisAtBottom.default\n      // But padding is different for broken scatters\n      if (\n        config.chartType.includes('scatter') &&\n        config.breakScaleObj.scatterYaxisBreaks\n      ) {\n        tickPadding = config.textPrefs.padding.axisAtBottom.brokenScatter\n      }\n      // Subtract tick projection\n      tickPadding -= projection\n      // And subtract text height, to get margin to top-of-text\n      tickPadding -= config.textPrefs.size.primaryOnly * emVal\n    }\n    // Tick length\n    const tlPrefs = tPrefs.lengths\n    let tickLength = 0\n    if (tPrefs.across) {\n      tickLength -= config.bounds.height\n    } else {\n      // Use default here. May be overwritten in post-render\n      // I'm setting just length. If start !== 0, that'll\n      // (hopefully) get fixed post-render\n      tickLength = tlPrefs.default.end\n      // And adjust tickPadding (between tick ends and labels)\n      // tickPadding -= tickLength;\n      tickLength -= tlPrefs.default.start\n    }\n    // Number format\n    const textFormat = config.textPrefs.textFormat\n    xAxis\n      .scale(xScale)\n      .orient(orient)\n      // Position of labels above/below tick ends\n      .tickPadding(tickPadding)\n      .tickValues(tickValues)\n      // Tick length\n      .tickSize(tickLength)\n      // Number format\n      .tickFormat((ddd) => AxisUtils.getLinearAxisTickFormat(ddd, textFormat))\n    return xAxis\n  }\n  // SET X-AXIS CONFIG ends\n\n  // GET AXIS GROUP TRANSFORMATION\n  // Called from updateXAxis. Returns string that determines\n  // whether axis is drawn top/bottom\n  getAxisGroupTransformation() {\n    let height = 0\n    if (this.props.config.orient === 'bottom') {\n      height = this.props.config.bounds.height\n    }\n    return height\n  }\n  // GET AXIS GROUP TRANSFORMATION ends\n\n  // DRAW BREAK SYMBOL\n  drawBreakSymbol() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    const breakObj = config.breakScaleObj\n    if (!breakObj.break) {\n      return\n    }\n    // Scale breaks. But do we draw a symbol?\n    const drawSymbol = BrokenScale.checkForBrokenScaleSymbol(\n      config.chartType,\n      breakObj\n    )\n    if (!drawSymbol) {\n      return\n    }\n    // Still here? Symbol is drawn halfway down the area of padding\n    // and aligned l/r to scale...\n    // Context: ticks group\n    const grpId = `${this.props.grpNames.outerId}${chartIndex}`\n    const bsGroup = d3.select(`#${grpId}`)\n    // Position relative to first label:\n    const firstLabel = d3.select('.xaxis-label-0')\n    const xPos = 0 - config.brokenScalePadding\n    //\n    // If we have a multipanel chart with a bar chart in the first panel,\n    // *subsequent* panels put BS symbol above or below the midpoint.\n    // I tried using the bBox and label's 'y' attribute, but both seem to mis-report\n    // So I'm going back to basics:\n    // Label height from font size\n    const labelHeight =\n      parseInt(firstLabel.style('font-size'), 10) * config.textPrefs.emVal\n    // Label baseline from DPs\n    const labelBase = config.tickPrefs.padding\n    const yPos = 0 - labelBase - labelHeight / 2\n    // // Create array of coordinates\n    const lineData = breakObj.points.map((onePt) => {\n      const ptObj = {\n        x: xPos + onePt.x,\n        y: yPos + onePt.y,\n      }\n      return ptObj\n    })\n    // NOTE: this is all a straight cannibalisation\n    // and dup'd elsewhere\n    const lineFunction = d3.svg\n      .line()\n      .x((ddd) => ddd.x)\n      .y((ddd) => ddd.y)\n      .interpolate('linear')\n    bsGroup\n      .append('path')\n      .attr('d', lineFunction(lineData))\n      .attr('id', `broken-scale-symbol~~~stroke:${breakObj.strokeName}`)\n      .style('stroke', breakObj.strokeValue)\n      .style('stroke-width', breakObj.width)\n      .style('stroke-linejoin', breakObj.linejoin)\n      .style('fill', 'none')\n  }\n  // DRAW BREAK SYMBOL ends\n\n  // UPDATE X-AXIS\n  // Called directly on the DOM to update the axis\n  updateXaxis(xAxis) {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Context: ticks group\n    const grpId = `${this.props.grpNames.ticksId}${chartIndex}`\n    const axisGroup = d3.select(`#${grpId}`)\n    const duration = config.duration\n    const axisMove = this.getAxisGroupTransformation()\n    const transform = `translate(0,${axisMove})`\n    const isScatter = config.chartType.includes('scatter')\n    const isBar = config.chartType.includes('bar')\n    // NOTE: handling of tick-lengths is inferential\n    // for scatters v. bars. There is confusion in DPs xAxis\n    // properties regarding 'projection' (used for linear x-axes)\n    // and 'lengths' (used for ordinal x-axes)\n    let tickProjection = 0\n    if (isBar) {\n      tickProjection -= config.tickPrefs.projection.bar\n    }\n    const anchor = config.textPrefs.anchor[config.chartType]\n    // Highlight zero flag (see yaxis-linear.updateYAxis)\n    let highlightZero = config.mixedVals\n    // Baseline width. By default this can be different from other\n    // ticks. But all scatters and mixed bars are same as other ticks.\n    let differentBaselineWidth = true\n    if (isScatter) {\n      differentBaselineWidth = false\n    } else if (isBar && config.mixedVals) {\n      differentBaselineWidth = false\n    }\n    axisGroup\n      // Transition to scale top/bottom\n      // .transition().duration(duration)\n      .attr('transform', transform)\n      // One transition on scale values\n      .transition()\n      .duration(duration)\n      .call(xAxis)\n      // Tick projection\n      .selectAll('line')\n      .attr('y1', tickProjection)\n      // Allow separate baseline style\n      .style('stroke-width', (ddd, iii) => {\n        let sWid = config.tickPrefs.width\n        if (iii === 0 && differentBaselineWidth) {\n          sWid = config.tickPrefs.baseline.width\n        }\n        // But...\n        if (ddd === 0 && highlightZero) {\n          sWid = config.tickPrefs.zero.width\n        }\n        return sWid\n      })\n      .style('stroke', (ddd, iii) => {\n        let sCol = config.tickPrefs.strokeValue\n        // Zero\n        if (ddd === 0) {\n          if (highlightZero) {\n            sCol = config.tickPrefs.zero.mixedValue\n          } else if (iii === 0 && !isScatter) {\n            // Inferential: scatters leave zero on standard gridline\n            sCol = config.tickPrefs.baseline.strokeValue\n          }\n        }\n        return sCol\n      })\n    // And text:\n    axisGroup\n      .selectAll('text')\n      .style('font-family', config.textPrefs.font)\n      .style('font-size', `${config.textPrefs.size.primaryOnly}px`)\n      .style('fill', config.textPrefs.fillValue)\n      .style('text-anchor', anchor)\n\n    // Remove domain path\n    axisGroup.selectAll('path').remove()\n    // Label IDs with metadata\n    axisGroup.selectAll('text').each(function(ddd, iii) {\n      const thisLabel = d3.select(this)\n      // ID: name and metadata\n      thisLabel\n        .attr('id', () => {\n          // NOTE: I need to derive all element base ids from... somewhere\n          let labID = `xaxis-label-${iii}`\n          // fill\n          const fillName = config.textPrefs.fill\n          labID = `${labID}~~~fill:${fillName}`\n          labID = `${labID},justification:${anchor}`\n          // Getting the anchor position is a nightmare. I'm getting\n          // WIDTH from bBox, then working with justification and\n          // whatever Illustrator sets origin to...\n          const bBox = thisLabel.node().getBBox()\n          labID = `${labID},width:${bBox.width}`\n          return labID\n        })\n        .attr('class', () => `xaxis-label-${iii}`)\n    })\n\n    // Tick IDs with metadata\n    axisGroup\n      .selectAll('line')\n      // NOTE: again, 'function' for D3...\n      // Linting errors disable at top\n      .each(function(ddd, iii) {\n        const thisTick = d3.select(this)\n        thisTick.attr('id', () => {\n          let tickID = `xaxis-tick-${iii}`\n          // Stroke name (but check zero/baseline):\n          let strokeName = config.tickPrefs.stroke\n          if (ddd === 0) {\n            if (iii === 0 && !isScatter) {\n              strokeName = config.tickPrefs.baseline.stroke\n            } else if (highlightZero) {\n              strokeName = config.tickPrefs.zero.mixed\n            }\n          }\n          tickID = `${tickID}~~~stroke:${strokeName}`\n          return tickID\n        })\n      })\n\n    // Negative labels have to be re-aligned to centre of\n    // number (ignore '-')\n    setTimeout(() => {\n      AxisUtils.fixNegativeLabels(axisGroup)\n    }, 50)\n\n    // FIXME: this is a kludge: I need to revisit zero-line\n    // I want an 'in-front' baseline. But I set it\n    // down here so that code above doesn't do a red zero line at base...\n    // NOTE: mod Nov'19: overlaid zero line for bar or thermo\n    // Note, too, that YaxisLinear uses\n    // an 'additionalBaseline' flag set in AxisUtis.\n    if (config.minVal <= 0 && !isScatter) {\n      highlightZero = true\n    }\n    // Zero line...\n    if (highlightZero) {\n      let start = axisMove\n      // There may be a projection to end of tick\n      if (config.chartType.includes('bar')) {\n        const barProj = config.tickPrefs.projection.bar\n        start -= barProj\n      }\n      let end = -xAxis.tickSize()\n      // FIXME: kludge Nov'19 for scatters\n      if (start === end) {\n        start = 0\n        // Additional kludge to prevent the red zeroline appearing in front of\n        // any back baseline (strictly speaking, this is a stacking issue; but\n        // there's a limit to how many permutations we can deal with)\n        // I think this is scatter-specific; watch and wait...\n        end -= config.tickPrefs.baseline.width / 2\n      }\n      const points = {\n        start,\n        end,\n        scaleVal: config.scale(0),\n      }\n      AxisUtils.appendInFrontTick(config, false, points)\n      // }\n    }\n  }\n  // UPDATE X-AXIS ends\n\n  // RENDER axis group\n  render() {\n    const config = this.props.config\n    const grpNames = this.props.grpNames\n    const cIndex = config.chartIndex\n    const gClass = grpNames.outerClass\n    const grpId = `${grpNames.outerId}${cIndex}`\n    const tickId = `${grpNames.ticksId}${cIndex}`\n    const labId = `${grpNames.labelsId}${cIndex}`\n    const headerId = `${grpNames.headerId}${cIndex}`\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlining the group\n    const gStyle = { fill: 'none' }\n    return (\n      <g className={gClass} id={grpId} style={gStyle}>\n        <g id={tickId} style={gStyle} />\n        <g id={labId} style={gStyle} />\n        <g id={headerId} style={gStyle} />\n      </g>\n    )\n  }\n}\n\nSilverXaxisLinear.propTypes = {\n  config: PropTypes.object,\n  // Not passed in; declared here as default prop\n  axis: PropTypes.func,\n  grpNames: PropTypes.object,\n}\n\nexport default SilverXaxisLinear\n","/* eslint-disable */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities module\nimport * as AxisUtils from '../axis-utilities'\nimport * as XaxisHeader from '../xaxis-header'\n\nclass SilverXaxisLinearTest extends Component {\n  // DEFAULT PROPS\n  static get defaultProps() {\n    return {\n      groupNames: {\n        groupId: 'xaxis-group-',\n        groupClass: 'axis-group-',\n      },\n    }\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.doStringTests()\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    this.doStringTests()\n  }\n\n  // GET DOT PROJECTION\n  // Called from adjustBoundsWidth to work out how\n  // much leftmost scatter dot projects\n  getDotProjection() {\n    const config = this.props.config\n    let dotProj = 0\n    // Only proceed if scatter:\n    if (config.chartType.includes('scatter')) {\n      const dotProps = config.scatterDotProps\n      const minVal = dotProps.minVal\n      const dotRad = dotProps.dotRad\n      // Find center, then left of (factored) lowest actual x-value\n      let val = config.scale(minVal / config.factor)\n      // There's an extreme-edge case where someone is drawing a 'dummy' chart\n      // to fill in (in Illustrator). If they aren't thinking carefully, the minimum x value\n      // may be significantly less than the scale minimum, so that chart width is a\n      // negative value and the scale inverts. This counters that:\n      val = Math.max(val, 0)\n      // Subtract radius and return any projection\n      val -= dotRad\n      if (val < 0) {\n        dotProj = Math.abs(val)\n      }\n    }\n    return dotProj\n  }\n  // GET DOT PROJECTION\n\n  getBarProjection() {\n    const config = this.props.config\n    let barProj = 0\n    if (config.chartType.includes('bar')) {\n      // NOTE: inferentially 'left'\n      const scaleMin = config.minVal\n      const scaleMax = config.maxVal\n      const actualMax = config.actualMaxVal\n      const bWidth = config.bounds.width\n      if (actualMax > scaleMax) {\n        const scaleRange = scaleMax - scaleMin\n        const dataRange = actualMax - scaleMin\n        const squeezedRange = (bWidth / dataRange) * scaleRange\n        barProj = bWidth - squeezedRange\n      }\n    }\n    return barProj\n  }\n\n  // ADJUST BOUNDS WIDTH\n  // Called from doStringTests. Adjusts bounds\n  // for width of first and last axis labels\n  adjustBoundsWidth(bounds, testObj, isFirst) {\n    const config = this.props.config\n    const forceTurn = config.forceTurn\n    let tVal = +config.maxVal\n    if (isFirst) {\n      tVal = +config.minVal\n    }\n    // Format and inject text:\n    const testStr = AxisUtils.getLinearAxisTickFormat(\n      tVal,\n      config.textPrefs.textFormat\n    )\n    // Returns half width of text element\n    // (i.e. assumes centred text)\n    let tWidth = AxisUtils.getAxisLabelWidth(\n      testObj,\n      testStr,\n      forceTurn,\n      isFirst\n    )\n    // But there's a special case. If it's a scatter chart,\n    // does the leftmost dot project more than the label?\n    if (isFirst) {\n      const dotProjection = this.getDotProjection()\n      tWidth = Math.max(tWidth, dotProjection)\n    } else {\n      // Check for bar chart breaking scale at right:\n      const barProjection = this.getBarProjection()\n      tWidth = Math.max(tWidth, barProjection)\n    }\n    if (isFirst) {\n      bounds.x += tWidth\n    }\n    bounds.width -= tWidth\n    // NOTE: for bar charts with blobs, I need to align blobs\n    // to the r/h edge of the IB, PLUS the distance the label projects\n    // So add a new property to the bounds\n    // I *think* this is only linear xaxes...\n    bounds.labelProjection = tWidth\n  }\n  // ADJUST BOUNDS WIDTH ends\n\n  // ADJUST BOUNDS HEIGHT ends\n  // Called from doStrings\n  // For height, I have to allow for label height, padding and tick\n  // projection. Since I can't get an accurate measurement\n  // of the height of SVG text (getBBox returns glyph cell height,\n  // or whatever you want to call it), I have to 2nd-guess D3 and\n  // use an em-height.\n  // If axis is at the top, I don't allow for label height, since padding\n  // above chart is measured to x-axis label baselines\n  adjustBoundsHeight(bounds) {\n    const config = this.props.config\n    const isTop = config.orient === 'top'\n    let tHeight = 0\n    // NOTE: up to Jan'20 I played by D3 rules, which use a\n    // padding val between tick-end ('projection') and (if axis is\n    // at bottom of chart) top-of-label. This is stupid, so I'm\n    // moving over to absolute distances: axis-line to text baseline.\n    if (isTop) {\n      tHeight = config.textPrefs.padding.axisAtTop.bar\n      // But\n      if (config.chartType.includes('thermo')) {\n        tHeight = config.textPrefs.padding.axisAtTop.thermo\n      }\n    } else {\n      tHeight = config.textPrefs.padding.axisAtBottom.default\n      // But padding is different for broken scatters\n      if (\n        config.chartType.includes('scatter') &&\n        config.breakScaleObj.scatterYaxisBreaks\n      ) {\n        tHeight = config.textPrefs.padding.axisAtBottom.brokenScatter\n      }\n    }\n    // Axis at top pushes top of IB downwards\n    if (isTop) {\n      bounds.y += tHeight\n    }\n    // Either way, reduce height of IB\n    bounds.height -= tHeight\n    // Allow for any axis header\n    let headerMargin = 0\n    if (config.header.length > 0) {\n      headerMargin = XaxisHeader.getXaxisHeaderMargin(config)\n    }\n    if (isTop) {\n      bounds.y += headerMargin\n    }\n    bounds.height -= headerMargin\n  }\n  // ADJUST BOUNDS HEIGHT ends\n\n  // DO STRING TESTS\n  // Called if testFlag=true, to drop text on the wrapper\n  // and see what extra margins we have to allow for.\n  // Xaxis tests--\n  //  - Barchart: width of last axis label\n  //    NOTE: currently assumes number, but could be data...\n  //    NOTE: also currently assumes that categories will be drawn\n  //    left, so no need to check projection of first axis label\n  doStringTests() {\n    const config = this.props.config\n    const grpNames = this.props.groupNames\n    // Append a text object to the main axis group\n    const grpId = `${grpNames.groupId}${config.chartIndex}`\n    const testObj = AxisUtils.appendTestText(config, grpId)\n    const bounds = config.bounds\n    // WIDTH\n    // Adjust bounds for first and last strings\n    // Params are bounds, testObj, isFirst\n    this.adjustBoundsWidth(bounds, testObj, true)\n    this.adjustBoundsWidth(bounds, testObj, false)\n    // HEIGHT\n    this.adjustBoundsHeight(bounds)\n    // All done: clear the text object...\n    testObj.remove()\n    // And fire off the callback\n    this.props.onReturnRevisedInnerBox(bounds)\n  }\n\n  // RENDER axis group as context for test strings\n  render() {\n    const cIndex = this.props.config.chartIndex\n    const grpNames = this.props.groupNames\n    const grpId = `${grpNames.groupId}${cIndex}`\n    const gClass = grpNames.groupClass\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlining the group\n    const gStyle = { fill: 'none' }\n    return <g className={gClass} id={grpId} style={gStyle} />\n  }\n}\n\nSilverXaxisLinearTest.propTypes = {\n  config: PropTypes.object,\n  groupNames: PropTypes.object,\n  // Callback after stringwidth test\n  onReturnRevisedInnerBox: PropTypes.func,\n}\n\nexport default SilverXaxisLinearTest\n","// Disable prefer-reflect, for D3 axis.call()\n/* eslint-disable prefer-reflect,  no-invalid-this,  func-names */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as TextWrapping from '../../chartside-utilities/text-wrapping'\nimport * as ChartUtils from '../../chart-utilities'\n\nclass SilverYaxisOrdinal extends Component {\n  // DEFAULT PROPS\n  static get defaultProps() {\n    return {\n      axis: d3.svg.axis(),\n      grpNames: {\n        outerClass: 'axis-group',\n        outerId: 'yaxis-group-',\n        ticksId: 'yaxis-ticks-group-',\n        labelsId: 'yaxis-labels-group-',\n      },\n    }\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    const yAxis = this.setYaxisConfig()\n    this.updateYaxis(yAxis)\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    const yAxis = this.setYaxisConfig()\n    this.updateYaxis(yAxis)\n  }\n\n  // SET Y-AXIS CONFIG\n  setYaxisConfig() {\n    const yAxis = this.props.axis\n    const config = this.props.config\n    const tPrefs = config.tickPrefs\n    // Scale function:\n    const yScale = config.scale\n    const tickDensity = 10\n    // Padding between labels and tick-ends:\n    const tickPadding = tPrefs.tickPadding\n    // Axis left or right:\n    const orient = config.orient\n    // Tick length\n    const tlPrefs = tPrefs.lengths\n    // NOTE: this is inferential to bar charts and\n    // no doubt needs reworking. I have a start and end,\n    // why not use them?\n    let tickLength = tlPrefs.default.end - tlPrefs.default.start\n    if (config.tickPrefs.across) {\n      tickLength = -config.bounds.width\n    } else if (orient === 'right') {\n      // If axis at right, tickLength is neg value:\n      tickLength = -tickLength\n    }\n    yAxis\n      .scale(yScale)\n      .orient(orient)\n      // Gap between labels and ticks\n      .tickPadding(tickPadding)\n      // Number of ticks\n      .ticks(tickDensity)\n      // Tick length\n      .tickSize(tickLength)\n    return yAxis\n  }\n  // SET Y-AXIS CONFIG ends\n\n  // GET AXIS GROUP TRANSFORM STRING\n  // Called from updateYAxis. Returns string that determines\n  // whether axis is drawn left/right\n  getAxisGroupTransformString() {\n    let transform = 0\n    if (this.props.config.orient === 'right') {\n      transform = this.props.config.bounds.width\n    }\n    return `translate( ${transform}, 0 )`\n  }\n  // GET AXIS GROUP TRANSFORM STRING ends\n\n  // UPDATE Y-AXIS\n  updateYaxis(yAxis) {\n    const globalThis = this\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Context: ticks group\n    let grpId = `${this.props.grpNames.ticksId}${chartIndex}`\n    // Left or right?\n    grpId = `${grpId}-${config.orient}`\n    const axisGroup = d3.select(`#${grpId}`)\n    const transform = this.getAxisGroupTransformString()\n    const anchor = config.textPrefs.anchor[config.chartType]\n    const leading = config.textPrefs.leading\n    // Override D3 style and draw labels\n    // left-aligned on left-oriented axis\n    let labX = config.tickPrefs.padding\n    const orient = config.orient\n    if (orient === 'left' && anchor === 'start') {\n      labX = 0 - config.bounds.x + config.originalX\n    }\n    const fFam = config.textPrefs.font\n    const fFill = config.textPrefs.fillValue\n    const fSize = config.textPrefs.size\n    // Align TOP of text to bar/thermo centre\n    const labY = config.emVal * fSize\n    const boundAxis = axisGroup.attr('transform', transform).call(yAxis)\n    const axisText = boundAxis.selectAll('text')\n    const axisTicks = boundAxis.selectAll('line')\n    axisText\n      .attr({\n        y: labY,\n        x: labX,\n        dy: 0,\n        id: (ddd, iii) => {\n          // NOTE: I should all element base ids from... somewhere\n          const id = `yaxis-label-${iii}`\n          const fill = config.textPrefs.fill\n          const justification = anchor\n          const tID = ChartUtils.getTextID(id, fill, justification, leading)\n          return tID\n        },\n        leading,\n      })\n      .style({\n        'font-family': fFam,\n        'font-size': `${fSize}px`,\n        fill: fFill,\n        'text-anchor': anchor,\n      })\n\n    // NOTE: ticks not styled since not visible. but\n    // I can't necessarily rely on that...\n\n    // Remove domain path\n    axisGroup.selectAll('path').remove()\n\n    // NOTE: this seems likely to duplicate yaxis-linear\n    // to a spooky degree...\n\n    // Tick IDs with metadata\n    axisTicks\n      // NOTE: again, 'function' for D3...\n      // Linting errors disable at top\n      .each(function(ddd, iii) {\n        const thisTick = d3.select(this)\n        thisTick\n          .attr({\n            id: () => {\n              let tickID = `yaxis-tick-${iii}`\n              // And stroke name:\n              const strokeName = config.tickPrefs.stroke\n              tickID = `${tickID}~~~stroke:${strokeName}`\n              return tickID\n            },\n            x1: () => {\n              let xPos = 0\n              // Inferentially for brokenscale h-thermos\n              if (config.chartType.includes('thermoh') && config.breakScale) {\n                xPos -= config.brokenScalePadding\n              }\n              return xPos\n            },\n          })\n          .style({\n            'stroke-width': config.tickPrefs.width,\n            stroke: config.tickPrefs.strokeValue,\n          })\n      })\n\n    // Object to pass to wrapText\n    const wtConfig = {\n      wWidth: config.bounds.catMargin,\n      forceTurn: config.forceTurn,\n    }\n    // Live call\n    axisText.call(\n      TextWrapping.wrapAllTextElements,\n      wtConfig,\n      globalThis,\n      globalThis.afterYaxisOrdinalStringWrap\n    )\n  }\n  // UPDATE Y-AXIS ends\n\n  // FIX EMPTY TSPANS\n  // Called from afterYaxisOrdinalStringWrap.\n  // NOTE: this is a KLUDGE to get round the\n  // problem whereby ordinal y-axis categories\n  // can break the margin, creating an empty\n  // tspan\n  fixEmptyTspans(text) {\n    const spanCount = text[0][0].childElementCount\n    // If there's more than one tspan...\n    if (spanCount > 1) {\n      const span0 = text[0][0].children[0]\n      const span1 = text[0][0].children[1]\n      const textY = text[0][0].getAttribute('y')\n      // ...if the first tspan is empty, FIX it\n      // and set consequent first tspan to the\n      // text-element's vertical position\n      if (span0.innerHTML.length === 0) {\n        span1.setAttribute('y', textY)\n        span0.remove()\n      }\n    }\n  }\n  // KILL EMPTY TSPANS ends\n\n  // GET LABEL LINE COUNT\n  // Counts tSpans in a text element that represent a new\n  // line (i.e. ignores italics on/off)\n  getLabelLineCount(label) {\n    let lineCount = 0\n    const parent = label[0][0]\n    const pLen = parent.childElementCount\n    for (let cNo = 0; cNo < pLen; cNo++) {\n      if (parent.children[cNo].getAttribute('y') !== null) {\n        lineCount++\n      }\n    }\n    return lineCount - 1\n  }\n  // GET LABEL LINE COUNT ends\n\n  // GET LABEL MOVE\n  // Called from afterYaxisOrdinalStringWrap. Since getBBox\n  // is returning an unreliable height, calculate how far\n  // labels move from fontsize, leading and linecount\n  getLabelMove(lab, emVal) {\n    const fontSize = parseFloat(lab.style('font-size'))\n    const leading = +lab.attr('leading')\n    const lineCount = this.getLabelLineCount(lab)\n    // Current position is that top of first line of text\n    // is aligned to centre point of bar/thermo\n    // Allow for actual text height of first line\n    let labMove = fontSize * emVal\n    // Leading of additional lines\n    labMove += lineCount * leading\n    // Return half, as neg value (to move text up)\n    return -labMove / 2\n  }\n  // GET LABEL MOVE ends\n\n  // AFTER Y-AXIS ORDINAL STRING WRAP\n  afterYaxisOrdinalStringWrap(originalThis) {\n    const config = originalThis.props.config\n    // Start with the main axis group\n    const chartIndex = originalThis.props.config.chartIndex\n    let axisGrpName = `#yaxis-ticks-group-${chartIndex}`\n    axisGrpName = `${axisGrpName}-${config.orient}`\n    const parentAxisGrp = d3.select(axisGrpName)\n    parentAxisGrp.selectAll('text').each(function() {\n      const thisLabel = d3.select(this)\n      originalThis.fixEmptyTspans(thisLabel)\n      // Text is top-aligned to bar-centre/hthermo-spindle\n      // So just move up by half height\n      const labMove = originalThis.getLabelMove(thisLabel, config.emVal)\n      TextWrapping.moveTextAndTspans(thisLabel, labMove)\n    })\n  }\n  // AFTER Y-AXIS ORDINAL STRING WRAP ends\n\n  // SET AXIS WIDTH ATTRIBUTE\n  // Called from updateSecondaryXaxis after a timeout, so that\n  // there's time to render 2ry axis labels before we get a width,\n  // which is appended to ID metadata...\n  // NOTE: this is another probable duplicate of a function in xaxis-ordinal\n  setAxisWidthAttribute(axisGroup) {\n    axisGroup.selectAll('text').each(function() {\n      const thisLabel = d3.select(this)\n      const width = thisLabel.node().getBBox().width\n      if (width > 0) {\n        let labID = thisLabel.attr('id')\n        labID = `${labID},width:${width}`\n        thisLabel.attr('id', labID)\n      }\n    })\n  }\n  // SET AXIS WIDTH ATTRIBUTE ends\n\n  // RENDER axis group only\n  render() {\n    const config = this.props.config\n    const grpNames = this.props.grpNames\n    const cIndex = config.chartIndex\n    const gClass = grpNames.outerClass\n    const grpId = `${grpNames.outerId}${cIndex}-${config.orient}`\n    const tickId = `${grpNames.ticksId}${cIndex}-${config.orient}`\n    const labId = `${grpNames.labelsId}${cIndex}-${config.orient}`\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlining the group\n    const gStyle = { fill: 'none' }\n    return (\n      <g className={gClass} id={grpId} style={gStyle}>\n        <g id={tickId} style={gStyle} />\n        <g id={labId} style={gStyle} />\n      </g>\n    )\n  }\n}\n\nSilverYaxisOrdinal.propTypes = {\n  config: PropTypes.object,\n  // Not passed in; declared here as default prop\n  axis: PropTypes.func,\n  grpNames: PropTypes.object,\n}\n\nexport default SilverYaxisOrdinal\n","// Disable prefer-reflect, for D3 axis.call()\n/* eslint-disable prefer-reflect,  no-invalid-this,  func-names */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as TextWrapping from '../../chartside-utilities/text-wrapping'\n\nclass SilverYaxisOrdinalTest extends Component {\n  // DEFAULT PROPS\n  static get defaultProps() {\n    return {\n      groupNames: {\n        groupClass: 'axis-group',\n        groupId: 'yaxis-group-',\n      },\n    }\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.doStringTests()\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    this.doStringTests()\n  }\n\n  findTestTextContext() {\n    const config = this.props.config\n    // Context: just use the general, existing (indexed) axis group\n    let grpId = `${this.props.groupNames.groupId}${config.chartIndex}`\n    grpId = `${grpId}-${config.orient}`\n    const testContext = d3.select(`#${grpId}`)\n    return testContext\n  }\n\n  mapTestCats(catStrings) {\n    const config = this.props.config\n    const cdArray = catStrings.map((cat, iii) => {\n      const oneCat = {\n        content: cat,\n        id: `category-${iii}`,\n        x: 0,\n        y: 0,\n        'font-family': config.textPrefs.font,\n        'font-size': `${config.textPrefs.size}px`,\n        fill: config.textPrefs.fillValue,\n        leading: config.textPrefs.size,\n        'text-anchor': 'start',\n      }\n      return oneCat\n    })\n    return cdArray\n  }\n\n  // DO STRING TESTS\n  doStringTests() {\n    const globalThis = this\n    const config = this.props.config\n    // Add D3-friendly properties to the data array\n    const catArray = this.mapTestCats(config.categories)\n    // ...and decide where to put it (arbitrary)\n    const context = this.findTestTextContext()\n    const boundCats = context.selectAll('text').data(catArray)\n    boundCats.exit().remove()\n    boundCats.enter().append('text')\n    boundCats\n      .text((ddd) => ddd.content)\n      .attr({\n        class: 'category-test-text',\n        id: (ddd, iii) => {\n          // Test-specific id string ends in comma.\n          // See getCategoryWidths, below\n          return `testText-${iii},`\n        },\n        leading: config.textPrefs.size,\n        x: 50,\n        y: 50,\n      })\n      .style({\n        'font-family': config.textPrefs.font,\n        'font-size': `${config.textPrefs.size}px`,\n        // fill: config.textPrefs.fillValue,\n        fill: 'none',\n      })\n    // Config object to pass\n    const wtConfig = {\n      wWidth: config.bounds.width,\n      forceTurn: config.forceTurn,\n    }\n    // Test call to text wrapping\n    boundCats.call(\n      TextWrapping.wrapAllTextElements,\n      wtConfig,\n      globalThis,\n      globalThis.waitForCategoryWidths\n    )\n  }\n  // DO STRING TESTS ends\n\n  // WAIT FOR CATEGORY WIDTHS\n  // Callback after wrapping test strings. Sets a timeout\n  // before calling function to measure string widths\n  // for left-margin setting\n  waitForCategoryWidths(globalThis) {\n    setTimeout(() => {\n      globalThis.getCategoryWidths(globalThis)\n    }, 20)\n  }\n  // WAIT FOR CATEGORY WIDTHS ends\n\n  // GET CATEGORY WIDTHS\n  // Called from waitForCategoryWidths\n  // Until I reworked widths, Apr'21, this read string\n  // widths from element ids. Now that Sibyl no longer\n  // records width with element ID, this does the actual\n  // measurement. Then sets category margin width on\n  // bounds and returns callback to chart-specific component\n  getCategoryWidths(globalThis) {\n    const config = globalThis.props.config\n    const context = globalThis.findTestTextContext()\n    const cats = context.selectAll('text')\n    let tWidth = 0\n    cats.each(function() {\n      const oneCat = d3.select(this)\n      const thisWidth = oneCat.node().getBBox().width\n      // const id = oneCat.attr('id');\n      // const idProps = id.split(',');\n      // const thisWidth = Number(idProps[idProps.length - 1].split(':')[1]);\n      if (thisWidth > tWidth) {\n        tWidth = thisWidth\n      }\n    })\n    // Set text width in bounds, with padding\n    const bounds = config.bounds\n    tWidth += config.tickPrefs.padding\n    // Limit area allowed for cat strings to half chart-width...\n    const halfWidth = bounds.width / 2\n    if (tWidth > halfWidth) {\n      tWidth = halfWidth\n    }\n    bounds.catMargin = tWidth\n    bounds.x += tWidth\n    bounds.width -= tWidth\n    // All done: clear the test text elements...\n    cats.remove()\n    // And fire off the callback\n    globalThis.props.onReturnRevisedInnerBox(bounds)\n  }\n  // GET CATEGORY WIDTHS\n\n  render() {\n    const config = this.props.config\n    const grpNames = this.props.groupNames\n    const cIndex = config.chartIndex\n    const grpClass = grpNames.groupClass\n    const grpId = `${grpNames.groupId}${cIndex}-${config.orient}`\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlining the group\n    const gStyle = { fill: 'none' }\n    return <g className={grpClass} id={grpId} style={gStyle} />\n  }\n}\n\nSilverYaxisOrdinalTest.propTypes = {\n  config: PropTypes.object,\n  groupNames: PropTypes.object,\n  // onReturnRevisedInnerBox: PropTypes.func,\n}\n\nexport default SilverYaxisOrdinalTest\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\n\nclass SilverSeriesBar extends Component {\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateBars()\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateBars()\n    }\n  }\n\n  // ======= Event handler ======\n\n  // BAR CLICK\n  // Handles bar click event. Params are data (cat and value)\n  // and index in overall data.\n  // NOTE: This event currently gets passed back up to\n  // BarChart, where I do a console.log. Long-term, I might\n  // use this to set 'emphasis' on the bar...\n  barClick(barData, index) {\n    const clickObj = { barData, index }\n    this.props.onPassBarClick(clickObj)\n  }\n  // BAR CLICK ends\n\n  // GET COLOURS\n  // Called from updateBars to map colours by series\n  /*\n  NOTE: moved to chart-utilities, Sep 2016\n  NOTE: delete eventually (along with call from updateColumns)...\n  getColours(seriesNames, colourSet) {\n    // Colours from config file\n    // const colourSet = [ '#004D64', '#6995A8', '#009FD8', '#ACADB0' ];\n    const colourScale = d3.scale.ordinal()\n      .domain(seriesNames)\n      .range(colourSet);\n    return colourScale;\n  }\n  */\n  // GET COLOURS ends\n\n  // UPDATE BARS\n  updateBars() {\n    const config = this.props.config\n    // Context (parent group created in render) and duration\n    // (NOTE: In the long term, we'd need more than one group...)\n    const className = config.className.split(' ')[1]\n    const mainSeriesGroup = d3.select(`.${className}`)\n    // NOTE: duration is still up in the air...\n    const duration = config.duration\n    // Passed scales:\n    const xScale = config.xScale\n    const yMainScale = config.yMainScale\n    const yClusterScale = config.yClusterScale\n    const accum = config.accum\n    // Broken scale flag:\n    const breakScale = config.breakScale\n    // Map data:\n    // As far as I can see, the data is in the right format:\n    // an array of objects with header:value properties\n    const mappedData = ChartUtilities.mapSeriesData(config, false)\n    // Array of +/– base vals for 'opposing' charts\n    const baseVals = ChartUtilities.getSeriesBaseVals(config.pointCount)\n    // mappedData is an array of arrays, each of which represents a series\n    // Each series sub-array consists of <pointCount> objects\n    // defining one data point and with properties...\n    //    category: the category string\n    //    fill: fill colour\n    //    y: the 'internal' value of THIS point\n    // At this stage, these are unscaled vals\n\n    // Outer binding\n    const groupBinding = ChartUtilities.makeBarColSeriesGroupBinding(\n      mainSeriesGroup,\n      mappedData,\n      duration,\n      'bar'\n    )\n\n    // Bind inner (points) data\n    const rectBinding = groupBinding\n      .selectAll('.d3-bar-rect')\n      .data((ddd) => ddd)\n    // Enter appends rect on zero, at zero width\n    rectBinding\n      .enter()\n      .append('rect')\n      .attr({\n        class: 'd3-bar-rect',\n        y: (ddd) => yMainScale(ddd.category),\n        height: Math.max(yMainScale.rangeBand(), 0.1),\n        x: xScale(0),\n        width: 0,\n        id: (ddd, iii) => {\n          let idStr = `bar-series-${iii}`\n          idStr = `${idStr}~~~fill:${ddd.fillName}`\n          return idStr\n        },\n      })\n      // Set click event on rect\n      .on('click', (ddd, iii) => this.barClick(ddd, iii))\n      // Crude tooltip (populated in update)\n      // NOTE: can't use '=>' because D3 needs to select 'this'\n      /* eslint-disable func-names, no-invalid-this */\n      .each(function() {\n        d3.select(this)\n          .append('svg:title')\n          .attr('class', 'd3-tooltip')\n      })\n\n    // Update.\n    // NOTE: this can handle +/– values, but (for now) insists upon a 'default'\n    // anchorage to zero (ie, it can't handle broken scales...)\n    rectBinding\n      .transition()\n      .duration(duration)\n      .attr({\n        // Left ('x') position\n        x: (ddd, iii) => {\n          // iii is point-counter here\n          // We're drawing from rect left. Default origin = value\n          // (assumes val is neg; positive overwrites below)\n          let xPos = Number(ddd.val)\n          // Set any padding for a broken scale to default zero\n          let breakPadding = 0\n          if (accum) {\n            // Stacked bars\n            // ddd.y is value\n            const val = Number(ddd.val)\n            if (val < 0) {\n              // If val is negative, subtract it from previous loop's\n              // baseline. Baseline increments negatively for next\n              // neg value\n              const baseVal = baseVals[iii].negBase\n              xPos = baseVal + val\n              baseVals[iii].negBase += val\n            } else {\n              // + val. Use prev baseline, then increment for next +\n              const baseVal = baseVals[iii].posBase\n              xPos = baseVal\n              baseVals[iii].posBase += val\n            }\n          } else if (xPos >= 0) {\n            if (breakScale) {\n              xPos = config.minVal\n              // And, for this case only, set BS padding:\n              breakPadding = config.brokenScalePadding\n            } else {\n              // Non-accum draw positive vals *from* zero\n              xPos = 0\n            }\n          }\n          // xPos += breakPadding;\n          // Return scaled xPos with any breakPadding\n          return xScale(xPos) - breakPadding\n        },\n        // Width: force to positive value, subtracting\n        // scaled zero...\n        width: (ddd) => {\n          let wid = xScale(Math.abs(Number(ddd.val))) - xScale(0)\n          // But if scale breaks...\n          if (breakScale && !accum) {\n            wid = xScale(Math.abs(Number(ddd.val))) - xScale(config.minVal)\n            wid += config.brokenScalePadding\n          }\n          // Don't allow neg width!\n          return Math.max(wid, 0)\n        },\n        // Y position\n        y: (ddd) => {\n          let yPos = 0\n          if (accum) {\n            // Stacked bars...\n            yPos = yMainScale(ddd.category)\n          } else {\n            // Unstacked are in clusters. Get the overall cluster position:\n            yPos = yMainScale(ddd.category)\n            // ...then append internal cluster scaling:\n            yPos += yClusterScale(ddd.header)\n          }\n          return yPos\n        },\n        // Bar height\n        height: () => {\n          // Default is non-accum height...\n          let hgt = yClusterScale.rangeBand()\n          if (accum) {\n            hgt = yMainScale.rangeBand() - config.padding\n          }\n          // Don't be less than zero!\n          return Math.max(hgt, 0)\n        },\n      })\n      .style('fill', (ddd) => ddd.fill)\n      // Populate tooltip (set up by 'enter')\n      .each(function(ddd) {\n        const myBar = d3.select(this)\n        myBar\n          .select('title')\n          .text(\n            `Header: ${ddd.header}; category: ${ddd.category}; value: ${ddd.val}`\n          )\n      })\n\n    // NOTE: EXIT isn't right yet...\n    rectBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('width', 0)\n    rectBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // UPDATE BARS ends\n\n  // UPDATE ZERO LINE\n  // Handles any zero line\n  updateZeroLine() {\n    const config = this.props.config\n    const zPrefs = config.zeroPrefs\n    const className = config.className.split(' ')[1]\n    const barGroup = d3.select(`.${className}`)\n    const duration = config.duration\n    // Scale:\n    const xScale = config.xScale\n    // How will the zero line appear?\n    let zColour = zPrefs.simple\n    if (config.mixedVals) {\n      zColour = zPrefs.mixed\n    }\n    const zWidth = zPrefs.width\n    const zClass = 'd3-col-zero'\n    // Bind data (needs *some* value)\n    const zBinding = barGroup.selectAll('line').data([0])\n    const height = config.bounds.height\n    // NOTE: next makes assumptions:\n    const proj = 0 - config.tickProjection\n    //\n    // ENTER\n    zBinding.enter().append('line')\n    // NOTE. This can handle +/– values, but insists upon a 'default'\n    // anchorage to zero (ie, it can't handle broken scales... yet)\n    // (Although if scale breaks, the zero line will vanish somewhere off-chart...)\n    zBinding\n      .transition()\n      .duration(duration)\n      .attr({\n        class: zClass,\n        x1: xScale(0),\n        y1: proj,\n        x2: xScale(0),\n        y2: height,\n      })\n      .style({\n        'stroke-width': zWidth,\n        stroke: zColour,\n      })\n\n    zBinding.exit().remove()\n  }\n  // UPDATE ZERO LINE ends\n\n  // RENDER all-series parent group:\n  render() {\n    return <g className={this.props.config.className} id=\"series-group:bar\" />\n  }\n}\n\nSilverSeriesBar.propTypes = {\n  config: PropTypes.object,\n  onPassBarClick: PropTypes.func,\n}\n\nexport default SilverSeriesBar\n","// Anything shared by x- and y-axis blobs...\n//    updateBlobHeader draws the blob header\n//    configXBlobs draws x-axis (line/column chart) blobs\n//    configYBlobs is to come for bar chart blobs\n\nimport * as d3 from 'd3'\nimport * as ChartUtilities from '../chart-utilities'\n\n// GET BLOB-HEAD RECT SIZE\n// Called from updateBlobHeader. Returns an object with\n// rect height and width, and width of header string\nexport function getBlobHeadRectSize(config) {\n  const blobMeta = config.blobs.blobMeta\n  const headerProps = blobMeta.header\n  const bhObj = {\n    height: headerProps.rectHeight,\n  }\n  // Put header on page to get width\n  // Identify the group\n  const className = `blob-header-group-${config.chartIndex}`\n  const contextGroup = d3.select(`.${className}`)\n  // Put down test text\n  const testText = contextGroup\n    .append('text')\n    .attr('id', 'testText')\n    .style({\n      'font-family': headerProps.font,\n      'font-size': `${headerProps.size}px`,\n      leading: headerProps.leading,\n    })\n  // Actual string\n  const hString = config.blobs.blobState.header\n  testText.text(hString)\n  const textWidth = testText.node().getComputedTextLength()\n  bhObj.width = textWidth + blobMeta.background.padding.horizontal * 2\n  bhObj.textWidth = textWidth\n  testText.remove()\n  return bhObj\n}\n// GET BLOB-HEAD RECT SIZE ends\n\n// UPDATE BLOB HEADER\n// Draws blob header at top right\nexport function updateBlobHeader(config) {\n  const blobMeta = config.blobs.blobMeta\n  const headerProps = blobMeta.header\n  // Actual string\n  const hString = config.blobs.blobState.header\n  // Rect height and width, and text width:\n  const rectSizeProps = getBlobHeadRectSize(config)\n  const textHeight = blobMeta.text.size * blobMeta.text.emVal\n  // Mar'20: move headers outside chart, stacked from top\n  let top = -config.bounds.y\n  top += config.chartIndex * rectSizeProps.height\n  const left = config.outerWidth - config.bounds.x\n  const origin = {\n    top,\n    left,\n  }\n  // Arrayify the string\n  // (If we're here, the header must, I think, exist...)\n  const headArray = [hString]\n  // Bind to group rendered at bottom:\n  const className = `blob-header-group-${config.chartIndex}`\n  const contextGroup = d3.select(`.${className}`)\n  const boundHeadGroup = contextGroup\n    .selectAll('.blob-header-subgroup')\n    .data(headArray)\n  // Enter appends subgroup for rect and text\n  const bhgEnter = boundHeadGroup\n    .enter()\n    .append('g')\n    .attr({\n      class: 'blob-header-subgroup',\n      id: 'blob-header-subgroup',\n    })\n\n  bhgEnter.append('rect').style({\n    fill: () => {\n      const fillName = blobMeta.background.fill\n      return config.colourLookup[fillName]\n    },\n    stroke: () => {\n      const sName = blobMeta.background.stroke\n      let stroke = 'none'\n      if (sName !== 'none') {\n        stroke = config.colourLookup[sName]\n      }\n      return stroke\n    },\n    'stroke-width': blobMeta.background.strokewidth,\n    opacity: blobMeta.background.opacity,\n  })\n  // NOTE: CHECK ANCHOR WORKS\n  bhgEnter.append('text').style({\n    'font-family': headerProps.font,\n    'font-size': `${headerProps.size}px`,\n    'text-anchor': headerProps.anchor,\n    leading: headerProps.leading,\n    fill: () => {\n      const fillName = blobMeta.text.fill\n      return config.colourLookup[fillName]\n    },\n  })\n\n  boundHeadGroup.select('rect').attr({\n    x: origin.left,\n    y: origin.top,\n    width: rectSizeProps.width,\n    height: rectSizeProps.height,\n    id: () => {\n      let bID = 'blob-header-rect~~~'\n      const bFill = config.blobs.blobMeta.background.fill\n      bID = `${bID}fill: ${bFill},`\n      const bStr = config.blobs.blobMeta.background.stroke\n      bID = `${bID}stroke: ${bStr},`\n      const bWid = config.blobs.blobMeta.background.strokewidth\n      bID = `${bID}strokewidth: ${bWid}`\n      return bID\n    },\n  })\n\n  boundHeadGroup\n    .select('text')\n    .text((ddd) => ddd)\n    .transition()\n    .duration(config.duration)\n    .attr({\n      x: origin.left + rectSizeProps.width / 2,\n      y: () => {\n        let yPos = origin.top + rectSizeProps.height\n        yPos -= (rectSizeProps.height - textHeight) / 2\n        return yPos\n      },\n      id: () => {\n        let tID = 'blob-header-text'\n        tID = `${tID}~~~fill:${blobMeta.text.fill}`\n        tID = `${tID}, justification: center, `\n        tID = `${tID}width: ${rectSizeProps.textWidth}, `\n        tID = `${tID}leading: ${headerProps.leading}`\n        return tID\n      },\n    })\n  return boundHeadGroup\n}\n// UPDATE BLOB HEADER ends\n\n// CONFIG X-BLOBS\n// Returns config object for x-axis blobs (line and column charts)\n// Params are chart CO, inner box, test flag and side (left/right)\nexport function configXBlobs(\n  chartConfig,\n  bounds,\n  postYaxisBounds,\n  testFlag,\n  side\n) {\n  const blobs = chartConfig.blobs\n  const chartType = chartConfig.scales[side].type\n  const padding = chartConfig.series[chartType].gap\n  const accum = chartConfig.scales[side].stacked\n  const pointCount = chartConfig.pointCount\n  const gap = chartConfig.series[chartType].gap\n  // Assemble the config object with basic props\n  const config = {\n    accum,\n    bounds,\n    blobData: chartConfig.chartData,\n    blobs,\n    chartIndex: chartConfig.chartIndex,\n    chartType,\n    colourLookup: chartConfig.colourLookup,\n    duration: chartConfig.duration,\n    gap,\n    groupName: `blob-group-${chartConfig.chartIndex}`,\n    indexed: chartConfig.indexDot,\n    originalBounds: chartConfig.originalInnerBox,\n    outerWidth: chartConfig.outerWidth,\n    padding,\n    pointCount,\n    postYaxisBounds,\n    seriesCount: chartConfig.seriesCount,\n    testFlag,\n  }\n  // And append emVal for text:\n  config.blobs.blobMeta.text.emVal = chartConfig.emVal\n  // HEADERS:\n  // NOTE: this is all dup'd in barchart.js...\n  // and there's redundancy in header-extraction, too...\n  // Separate first (category) column header from subsequent headers:\n  // NOTE: do I really need these?\n  const actualHeaders = chartConfig.headers.slice()\n  config.catHead = actualHeaders.shift()\n  config.seriesHeads = actualHeaders\n  // NOTE ends\n\n  // So, to be clear, the config obj includes properties--\n  //      catHead: the category column header\n  //      seriesHeads: all subsequent (col 2 etc...) header strings\n  //      colourMap: a D3 scale object that maps headers to series colours\n  // X-SCALE:\n  const xDomain = chartConfig.categories\n  // Line/thermo or column?\n  // if (chartType === 'column' || chartType.includes('thermo')) {\n  if (chartType === 'column') {\n    // Cluster width & padding\n    const cwp = ChartUtilities.getSeriesClusterWidthAndPadding(\n      chartConfig,\n      false\n    )\n    const halfClusterWidth = cwp.clusterWidth / 2\n    config.halfClusterWidth = halfClusterWidth\n    config.padding = cwp.padding\n    // On the use of 'padding' here, see columnchart.js > configSeriesColumns\n    // Main scale (by data point)\n    // config.xMainScale = d3.scale\n    //   .ordinal()\n    //   .rangeBands([0, config.bounds.width + padding, 0, 0])\n    //   .domain(xDomain);\n    config.xMainScale = d3.scale\n      .ordinal()\n      .rangeBands(\n        [\n          0 - halfClusterWidth,\n          config.bounds.width + halfClusterWidth + config.padding,\n        ],\n        0,\n        0\n      )\n      .domain(xDomain)\n  } else {\n    config.xMainScale = d3.scale\n      .ordinal()\n      .rangePoints([0, config.bounds.width], 0, 0)\n      // .rangePoints([0, config.bounds.width, 0, 0])\n      .domain(xDomain)\n  }\n  return config\n}\n\n// CONFIG X-BLOBS ends\n\n// FORMAT BLOB VALUE\n// NOTE: dup of AxisUtils.scaleNumberFormat\nexport function formatBlobVal(val) {\n  const valAsArray = val.toString().split('.')\n  let format = ','\n  if (valAsArray.length > 1) {\n    format = `,.${valAsArray[1].length}f`\n  }\n  return format\n}\n// FORMAT BLOB VALUE\n","// Linting disabled for D3\n/* eslint-disable no-invalid-this,  func-names */\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities module\nimport * as BlobUtils from './blob-utilities'\n\nclass SilverYaxisBlobs extends Component {\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    if (this.props.config.testFlag) {\n      // margin tests, at the end of which we return updated innerbox bounds...\n      this.doBlobTests()\n    } else {\n      this.updateBlobs()\n      BlobUtils.updateBlobHeader(this.props.config)\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    if (this.props.config.testFlag) {\n      // margin tests, at the end of which we return updated innerbox bounds...\n      this.doBlobTests()\n    } else {\n      this.updateBlobs()\n      BlobUtils.updateBlobHeader(this.props.config)\n    }\n  }\n\n  // DO BLOB TESTS\n  // For yaxis (vertical) blobs, I'm so far interested only in\n  // the width, which can be calculated without dropping anything\n  // on to the wrapper from fontsize, padding and margin...\n  doBlobTests() {\n    const config = this.props.config\n    const bounds = config.bounds\n    // NOTE: but if no blobs, return IB unchanged\n    if (config.blobs.blobState.column > 0) {\n      const bMargin = this.getBlobMargin()\n      // Adjust and return the IB\n      bounds.width -= bMargin\n    }\n    this.props.onReturnRevisedInnerBox(bounds)\n  }\n  // DO BLOB TESTS ends\n\n  // GET BLOB MARGIN\n  // Called from doBlobTests and updateBlobs, returns\n  // the margin allowed for blobs (blob-widths + margin)\n  getBlobMargin() {\n    const config = this.props.config\n    const blobMeta = config.blobs.blobMeta\n    const blobState = config.blobs.blobState\n    let myWidth = 0\n    // Initialise margin which, for circles, defaults to cluster-height\n    let myMargin = 0\n    if (config.chartType.includes('bar')) {\n      myMargin = this.props.config.yMainScale.rangeBand()\n    } else {\n      // Thermometer\n      myMargin = this.getBlobHeightFromChartHeight(config)\n    }\n    if (blobState.isRect) {\n      // I want the longest string. That means plonking and\n      // measuring...\n      // Plonk 'em down and format, then measure width...\n      // const className = `blobs-group-${ this.props.config.chartIndex }`;\n      const className = config.groupName\n      const blobGroup = d3.select(`.${className}`)\n      // Text object\n      const testText = blobGroup\n        .append('text')\n        .attr('id', 'testText')\n        .style({\n          'font-family': config.blobs.blobMeta.text.font,\n          'font-size': `${config.blobs.blobMeta.text.size}px`,\n        })\n      for (let iii = 0; iii < blobState.valsArray.length; iii++) {\n        const thisVal = blobState.valsArray[iii]\n        testText.text(thisVal)\n        // NOTE::::::\n        // getComputedTextLength seems to return a different width\n        // from the eventually-displayed width of blob vals...\n        const width = testText.node().getComputedTextLength()\n        myWidth = Math.max(myWidth, width)\n      }\n      // So myMargin should be width of longest string...\n      // Add padding, L+R\n      myWidth += blobMeta.background.padding.horizontal * 2\n      // Set it on blobState, which should update by ref\n      blobState.blobWidth = myWidth\n      myMargin = myWidth\n      // Clear the text object...\n      testText.remove()\n    }\n    // Add margin to left of blobs, and return\n    myMargin += blobMeta.margin.left\n    return myMargin\n  }\n  // GET BLOB MARGIN ends\n\n  // GET BLOB HEIGHT FROM CHART HEIGHT\n  // Called variously. Returns a blob height based on\n  // total chart height\n  getBlobHeightFromChartHeight(config) {\n    const height = config.bounds.height\n    // Subtract all the inter-blob gaps I'll want from the total height\n    // NOTE: arbitrary 5pt gap. Set in DPs?\n    // const gaps = (config.pointCount - 1) * 5;\n    // const gaplessHeight = height - gaps;\n    const gaplessHeight = height\n    return gaplessHeight / config.pointCount\n  }\n  // GET BLOB HEIGHT FROM CHART HEIGHT ends\n\n  // GET BLOB HEIGHT\n  // Called from updateBlobs to calculate height of blobs\n  getBlobHeight(config) {\n    let blobHeight = 0\n    if (config.chartType.includes('bar')) {\n      // Bars have a rangeband\n      blobHeight = config.yMainScale.rangeBand()\n      blobHeight -= config.padding\n    } else {\n      // Thermos do it the hard way\n      blobHeight = this.getBlobHeightFromChartHeight(config)\n    }\n    // Don't be < 0!\n    blobHeight = Math.max(blobHeight, 0)\n    return blobHeight\n  }\n  // GET BLOB HEIGHT ends\n\n  // UPDATE BLOBS\n  updateBlobs() {\n    const config = this.props.config\n    if (config.blobs.blobState.columns === 0) {\n      return\n    }\n    const isRect = config.blobs.blobState.isRect\n    // Context (series parent group created in render)\n    const className = `blob-series-group-${config.chartIndex}`\n    const contextGroup = d3.select(`.${className}`)\n    // Transpose group to RHS\n    // NOTE:::::::::::::::::::\n    // Here's the problem: I'm transforming relative to right of\n    // innerbox, which is set to final xscale tick -- not string!\n    const transBy =\n      config.bounds.width +\n      config.blobs.blobMeta.margin.left +\n      config.bounds.labelProjection\n    contextGroup.attr('transform', `translate(${transBy},0)`)\n    const yMainScale = config.yMainScale\n    // Blob width is margin allowed at right:\n    // NOTE: why am I recalculating? Wasn't once enough?\n    // const blobWidth = this.getBlobMargin() - config.blobs.blobMeta.margin.left;\n    const blobWidth = config.blobs.blobState.blobWidth\n    // Height\n    const blobHeight = this.getBlobHeight(config)\n    const duration = config.duration\n    // Data\n    // Text h-position\n    // NOTE: check all this... NOTE:\n    const leftPos = 0\n    let textXpos = leftPos + blobHeight / 2\n    if (isRect) {\n      textXpos = leftPos + blobWidth / 2\n    }\n    // Text v-position\n    // I need a 'tweak' to blob-centre, then allow for fontsize...\n    let textVtweak = blobHeight / 2\n    textVtweak +=\n      (config.blobs.blobMeta.text.size * config.blobs.blobMeta.text.emVal) / 2\n    // As far as I can see, the data is in the right format:\n    // an array of objects with header:value properties\n    // NOTE: NEED TO DO FORMATTING\n    // Data is a simple array of objects with 2 props:\n    // category & val\n    const mappedData = []\n    for (let iii = 0; iii < config.yMainScale.domain().length; iii++) {\n      const tempO = {\n        category: config.yMainScale.domain()[iii],\n        val: config.blobs.blobState.valsArray[iii],\n      }\n      // Omitting blanks, append to array\n      if (tempO.val.length > 0) {\n        mappedData.push(tempO)\n      }\n    }\n\n    // Scale for proportional circles\n    // Range\n    // const rangeMin = config.blobmeta.minCircleSize;\n    // NOTE: I can't use minCircleSize literally: scale must\n    // be from zero, surely. But if r < minCircleSize I should\n    // move the value string up... or something.\n    const rangeMin = 0\n    // Range max mustn't be less than clusterwidth!\n    const rangeMax = Math.max(rangeMin, blobHeight)\n    // Domain\n    // const domainMin = config.blobmeta.blobMinMaxVals.min;\n    const domainMin = 0\n    const domainMax = config.blobs.blobState.max\n    const blobDomain = [domainMin, domainMax]\n    const blobCircleScale = d3.scale\n      .sqrt()\n      .range([rangeMin, rangeMax])\n      .domain(blobDomain)\n\n    const isThermo = config.chartType.includes('thermo')\n    // Exit\n    // groupBinding.exit()\n    //   .selectAll('.d3-blob-shape')\n    //   .transition().duration(duration)\n    //   .attr('width', 0)\n    //   ;\n    // // Exit\n    // groupBinding.exit()\n    //   .transition().delay(duration)\n    //   .remove()\n    //   ;\n\n    const blobGroupBinding = contextGroup\n      .selectAll('.blob-series-group')\n      .data(mappedData)\n    // ENTER appends group for one rect/text blob\n    const oneBlobGroupEnter = blobGroupBinding\n      .enter()\n      .append('g')\n      .attr({\n        class: 'blob-pair-group',\n        id: 'blob-pair-group',\n      })\n    // Append rect/circle and text\n    if (isRect) {\n      oneBlobGroupEnter.append('rect').attr({\n        class: 'blob-shape',\n        x: leftPos,\n        y: (ddd) => {\n          let yVal = yMainScale(ddd.category)\n          if (isThermo) {\n            yVal -= blobHeight / 2\n          }\n          return yVal\n        },\n        height: 0,\n        width: 0,\n        fill: '#fff',\n        id: () => {\n          let bID = 'blob-shape~~~'\n          const bFill = config.blobs.blobMeta.background.fill\n          bID = `${bID}fill: ${bFill},`\n          const bStr = config.blobs.blobMeta.background.stroke\n          bID = `${bID}stroke: ${bStr},`\n          const bWid = config.blobs.blobMeta.background.strokewidth\n          bID = `${bID}strokewidth: ${bWid}`\n          return bID\n        },\n      })\n    } else {\n      oneBlobGroupEnter.append('circle').attr({\n        class: 'd3-blob-shape',\n        cy: (ddd) => {\n          let yPos = yMainScale(ddd.category)\n          if (!isThermo) {\n            yPos += blobHeight / 2\n          }\n          return yPos\n        },\n        cx: leftPos + blobHeight / 2,\n        r: 0,\n        fill: '#fff',\n        id: () => {\n          let bID = 'blob-shape~~~'\n          const bFill = config.blobs.blobMeta.background.fill\n          bID = `${bID}fill: ${bFill},`\n          const bStr = config.blobs.blobMeta.background.stroke\n          bID = `${bID}stroke: ${bStr},`\n          const bWid = config.blobs.blobMeta.background.strokewidth\n          bID = `${bID}strokewidth: ${bWid}`\n          return bID\n        },\n      })\n    }\n\n    let rememberedID = ''\n    oneBlobGroupEnter\n      .append('text')\n      .style({\n        'font-family': config.blobs.blobMeta.text.font,\n        'font-size': `${config.blobs.blobMeta.text.size}px`,\n        'text-anchor': config.blobs.blobMeta.text.anchor,\n        fill: () => {\n          const fillName = config.blobs.blobMeta.text.fill\n          return config.colourLookup[fillName]\n        },\n      })\n      .attr({\n        id: () => {\n          // Text needs just'n and fill (width, see below)\n          let bId = 'blob-text~~~justification:center,'\n          bId = `${bId} fill:${config.blobs.blobMeta.text.fill},`\n          // For width:\n          rememberedID = bId\n          return bId\n        },\n      })\n\n    // UPDATE\n    if (isRect) {\n      blobGroupBinding\n        .select('rect')\n        .transition()\n        .duration(duration)\n        .attr({\n          // y: ddd => {\n          //   let yPos = 0;\n          //   yPos = yMainScale(ddd.category) - (blobHeight / 2);\n          //   return yPos;\n          // },\n          // x: leftPos,\n          height: blobHeight,\n          width: blobWidth,\n        })\n        .style({\n          fill: () => {\n            const fName = config.blobs.blobMeta.background.fill\n            return config.colourLookup[fName]\n          },\n          stroke: () => {\n            const sName = config.blobs.blobMeta.background.stroke\n            let stroke = 'none'\n            if (sName !== 'none') {\n              stroke = config.colourLookup[sName]\n            }\n            return stroke\n          },\n          'stroke-width': config.blobs.blobMeta.background.strokewidth,\n          opacity: config.blobs.blobMeta.background.opacity,\n        })\n    } else {\n      blobGroupBinding\n        .select('circle')\n        .transition()\n        .duration(duration)\n        .attr({\n          r: (ddd) => {\n            const rad = blobCircleScale(ddd.val) / 2\n            // Negative vals: zero radius\n            return Math.max(rad, 0)\n          },\n        })\n        .style({\n          fill: () => {\n            const fName = config.blobs.blobMeta.background.fill\n            return config.colourLookup[fName]\n          },\n          stroke: () => {\n            const sName = config.blobs.blobMeta.background.stroke\n            let stroke = 'none'\n            if (sName !== 'none') {\n              stroke = config.colourLookup[sName]\n            }\n            return stroke\n          },\n          'stroke-width': config.blobs.blobMeta.background.strokewidth,\n          opacity: config.blobs.blobMeta.background.opacity,\n        })\n    }\n\n    blobGroupBinding\n      .select('text')\n      .text((ddd) => {\n        const format = BlobUtils.formatBlobVal(ddd.val)\n        const myFormatter = d3.format(format)\n        return myFormatter(ddd.val)\n      })\n      .transition()\n      .duration(duration)\n      .attr({\n        x: textXpos,\n        y: (ddd) => {\n          // Vertical pos relative to top-of-blob\n          let yPos = yMainScale(ddd.category) + textVtweak\n          if (isThermo) {\n            yPos -= blobHeight / 2\n          }\n          return yPos\n        },\n      })\n      .each(function(ddd) {\n        ddd.width = this.getBBox().width\n      })\n\n    // Text id-metadata needs width, too... after a timeout\n    setTimeout(() => {\n      this.setTextWidthAttribute(blobGroupBinding, rememberedID)\n    }, duration * 2)\n\n    // NOTE: EXIT isn't right yet...\n    blobGroupBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('height', 0)\n    blobGroupBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // UPDATE BLOBS ends\n\n  // SET TEXT WIDTH ATTRIBUTE\n  // Called by updateLegend after a timeout to allow transition to finish\n  // Args are the binding and a string containing 'remembered' element ID,\n  // complete with metadata attributes to which I can now append width...\n  setTextWidthAttribute(binding, tID) {\n    binding.selectAll('text').attr('id', (ddd) => {\n      const myID = `${tID} width:${ddd.width}`\n      return myID\n    })\n  }\n  // SET TEXT WIDTH ATTRIBUTE ends\n\n  // RENDER blob group\n  render() {\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlining the group\n    const gStyle = { fill: 'none' }\n    const nameA = `blob-series-group-${this.props.config.chartIndex}`\n    const nameB = `blob-header-group-${this.props.config.chartIndex}`\n    return (\n      <g\n        className={this.props.config.groupName}\n        id={this.props.config.groupName}\n        style={gStyle}\n      >\n        <g className={nameA} id={nameA} />\n        <g className={nameB} id={nameB} />\n      </g>\n    )\n  }\n}\n\nSilverYaxisBlobs.propTypes = {\n  // Incoming config\n  config: PropTypes.object,\n  // Callback after tests\n  onReturnRevisedInnerBox: PropTypes.func,\n}\n\nexport default SilverYaxisBlobs\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\nimport * as AxisUtilities from '../axes/axis-utilities'\nimport ConfigXaxisLinear from '../axes/configuration/xaxis-linear-config'\nimport ConfigYaxisOrdinal from '../axes/configuration/yaxis-ordinal-config'\n\n// D3 sub-components:\nimport SilverXaxisLinear from '../axes/live/xaxis-linear'\nimport SilverXaxisLinearTest from '../axes/tests/xaxis-linear-test'\nimport SilverYaxisOrdinal from '../axes/live/yaxis-ordinal'\nimport SilverYaxisOrdinalTest from '../axes/tests/yaxis-ordinal-test'\nimport SilverSeriesBar from './barseries'\nimport SilverYaxisBlobs from '../blobs/yaxis-blobs'\n\nclass SilverBarChart extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      // flags to control subcomponent testing/rendering\n      yaxisTest: true,\n      blobsTest: false,\n      xaxisTest: false,\n      // updated innerBox bounds\n      innerBox: this.props.config.innerBox,\n    }\n    // Callbacks from axis and blobs tests:\n    this.handleYaxisInnerBoxBounds = this.handleYaxisInnerBoxBounds.bind(this)\n    this.handleBlobsInnerBoxBounds = this.handleBlobsInnerBoxBounds.bind(this)\n    this.handleXaxisInnerBoxBounds = this.handleXaxisInnerBoxBounds.bind(this)\n    // Click on bar\n    this.handleBarClick = this.handleBarClick.bind(this)\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Reset state to default...\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      innerBox: newProps.config.innerBox,\n      yaxisTest: true,\n      blobsTest: false,\n      xaxisTest: false,\n    })\n  }\n\n  // Callbacks:\n  // HANDLE Y-AXIS INNER BOX BOUNDS\n  handleYaxisInnerBoxBounds(innerBox) {\n    this.setState({\n      innerBox,\n      // Set flags for render 2 (blobs test)\n      xaxisTest: false,\n      yaxisTest: false,\n      blobsTest: true,\n    })\n  }\n\n  // HANDLE BLOBS INNER BOX BOUNDS\n  handleBlobsInnerBoxBounds(innerBox) {\n    // ...and set state\n    this.setState({\n      innerBox,\n      // Set flags for render 3 (xaxis)\n      xaxisTest: true,\n      yaxisTest: false,\n      blobsTest: false,\n    })\n  }\n\n  // HANDLE X-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox (after axis testing)\n  handleXaxisInnerBoxBounds(innerBox) {\n    this.setState({\n      innerBox,\n      // Set flags for render 4 (final)\n      xaxisTest: false,\n      yaxisTest: false,\n      blobsTest: false,\n    })\n    // const duration = this.props.config.duration;\n    const duration = 0\n    // NOTE: set to zero to prevent visible drop-in from top left...\n    // NOTE: if I'm going to use a zero duration regularly, put it into prefs\n    this.mainDthreeGroupTransition(innerBox, duration)\n  }\n\n  // HANDLE BAR CLICK EVENT\n  // This is potentially useful... maybe...\n  handleBarClick(event) {\n    const barData = event.barData\n    // const index = event.index;\n    const info = `Value is ${barData.y}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n  // HANDLE BAR CLICK EVENT ends\n\n  // MAIN D3 GROUP TRANSITION\n  // Called from handleXaxisInnerBoxBounds\n  // Moves main D3 group into position\n  mainDthreeGroupTransition(innerBox, duration) {\n    const bLeft = innerBox.x\n    const bTop = innerBox.y\n    const transStr = `translate(${bLeft}, ${bTop})`\n    const mainGroupClass = this.getMainGroupClass(true, false)\n    const mainGroup = d3.select(mainGroupClass)\n    mainGroup\n      .transition()\n      .duration(duration)\n      .attr('transform', transStr)\n  }\n  // MAIN D3 GROUP TRANSITION ends\n\n  // GET MAIN GROUP CLASS\n  // Returns class name for main chart group. Arg 1 determines\n  // whether classes are preceded by a dot; arg 2 whether\n  // the general class (which pulls in the CSS) is appended\n  // NOTE: The point is, because all d3 refs are specific, I need\n  // indexed class names throughout. The general class will be used\n  // for CSS (probably n/a for this main group; but important for\n  // axes, at least...)\n  getMainGroupClass(prefixDot, addGeneralClass) {\n    let dot = ''\n    let generalClass = ''\n    if (prefixDot) {\n      dot = '.'\n    }\n    if (addGeneralClass) {\n      generalClass = `${dot}chart-main-group`\n    }\n    return `${generalClass} ${dot}chart-main-group-${this.props.config.chartIndex}`\n  }\n  // GET MAIN GROUP CLASS ends\n\n  // GET AXIS CONFIG\n  // Hands off to function in axis-utilities. 2nd param is a flag\n  // for x- or y-axis.\n  // NOTE: for bar charts, I have no option for x-axis at top or bottom...\n  // NOTE: On bounds, see barchart.render\n  getAxisConfig(chartConfig, isXaxis, bounds) {\n    let axisConfig = {}\n    // Go to state for the innerBox, since that\n    // gets modified by the callback from margin check...\n    let innerBox = JSON.parse(JSON.stringify(this.state.innerBox))\n    if (typeof bounds !== 'undefined') {\n      innerBox = bounds\n    }\n    if (isXaxis) {\n      // Utility fcn; 3rd arg is testFlag\n      axisConfig = ConfigXaxisLinear(\n        chartConfig,\n        innerBox,\n        this.state.xaxisTest\n      )\n    } else {\n      axisConfig = ConfigYaxisOrdinal(\n        chartConfig,\n        innerBox,\n        this.state.yaxisTest\n      )\n    }\n    return axisConfig\n  }\n  // GET AXIS CONFIG ends\n\n  // CONFIG BLOBS\n  // Assembles blob config object for bars (y-axis)\n  configBlobs(chartConfig, projectionBounds) {\n    // Define props required for more than immediate slot-in to config\n    const colourSet = chartConfig.series.bar.colours\n    // Extract blob headers.\n    // headers is complete list\n    const hLen = chartConfig.headers.length\n    // NOTE: dup'd in ColumnChart.configBlobs\n    const blobs = chartConfig.blobs\n    blobs.min = chartConfig.blobs.minVal\n    blobs.max = chartConfig.blobs.maxVal\n    const blobheads = []\n    const bStart = hLen - blobs.blobState.column\n    for (let hhh = bStart; hhh < hLen; hhh++) {\n      blobheads.push(chartConfig.headers[hhh])\n    }\n    const padding = AxisUtilities.getBarThermoGap(chartConfig)\n    // Get side:\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const chartType = chartConfig.scales[side].type\n    const accum = chartConfig.scales[side].stacked\n    // Assemble the config object with 'simple' props\n    let bounds = JSON.parse(JSON.stringify(this.state.innerBox))\n    if (typeof projectionBounds !== 'undefined') {\n      bounds = projectionBounds\n    }\n    const config = {\n      accum,\n      bounds,\n      blobData: chartConfig.chartData,\n      blobheads,\n      // blobmeta: chartConfig.blobmeta,\n      blobs,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      groupName: `blob-group-${chartConfig.chartIndex}`,\n      colourLookup: chartConfig.colourLookup,\n      duration: chartConfig.duration,\n      originalBounds: chartConfig.originalInnerBox,\n      outerWidth: chartConfig.outerWidth,\n      padding,\n      pointCount: chartConfig.pointCount,\n      seriesCount: chartConfig.seriesCount,\n      testFlag: this.state.blobsTest,\n    }\n    // And emVal for blobs:\n    config.blobs.blobMeta.text.emVal = chartConfig.emVal\n    // HEADERS:\n    // NOTE: this is all dup'd in barchart.js...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n\n    // NOTE: do I really need these?\n    const actualHeaders = chartConfig.headers.slice()\n    config.catHead = actualHeaders.shift()\n    config.seriesHeads = actualHeaders\n    // NOTE ends\n\n    // Map blobbed series colours:\n    config.colourMap = ChartUtilities.getColourMap(blobheads, colourSet)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // Y-SCALE:\n    const yDomain = chartConfig.chartData.map((ddd) => ddd[config.catHead])\n    config.yMainScale = d3.scale\n      .ordinal()\n      .rangeBands([0, config.bounds.height + padding, 0, 0])\n      .domain(yDomain)\n    return config\n  }\n  // CONFIG BLOBS ends\n\n  // CONFIG SERIES BARS\n  // Assembles bar series config object\n  configSeriesBars(chartConfig, projectionBounds) {\n    // The default name/value lookup of colours\n    const colourLookup = chartConfig.colourLookup\n    // Colours for this sequence of series\n    const colourSet = chartConfig.series.bar.colours\n    const padding = AxisUtilities.getBarThermoGap(chartConfig)\n    // const padding = chartConfig.series.bar.gap;\n    let bounds = JSON.parse(JSON.stringify(this.state.innerBox))\n    if (typeof projectionBounds !== 'undefined') {\n      bounds = projectionBounds\n    }\n    // Get side:\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const mmO = Object.assign({}, chartConfig.scales[side].minMaxObj.scale)\n    // Broken scale...?\n    let breakScale = false\n    if (mmO.min > 0) {\n      // Bounds have already been adjusted, so comm'd out\n      //   bounds.x += chartConfig.xAxis.brokenScalePadding;\n      //   bounds.width -= chartConfig.xAxis.brokenScalePadding;\n      breakScale = true\n    }\n    const chartType = chartConfig.scales[side].type\n    const accum = chartConfig.scales[side].stacked\n    // Assemble the config object with 'simple' props\n    const config = {\n      accum,\n      bounds,\n      breakScale,\n      brokenScalePadding: chartConfig.xAxis.brokenScalePadding,\n      chartData: chartConfig.chartData,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      className: `d3-bar-series-group d3-bar-series-group-${chartConfig.chartIndex}`,\n      colourLookup,\n      colourSet,\n      duration: chartConfig.duration,\n      // factor: mmO.factor,\n      factor: chartConfig.scales[side].factor,\n      minVal: mmO.min,\n      originalBounds: chartConfig.originalInnerBox,\n      padding,\n      pointCount: chartConfig.pointCount,\n      seriesCount: chartConfig.seriesCount,\n      thermometer: chartConfig.thermometer,\n      tickProjection: chartConfig.yAxis.ticks.projection,\n      zeroPrefs: chartConfig.yAxis.ticks.zero,\n    }\n    // Mixed +/– flag:\n    config.mixedVals = mmO.min < 0 && mmO.max >= 0\n    // X-SCALE (linear)\n    config.xScale = d3.scale\n      .linear()\n      .range([0, config.bounds.width])\n      .domain([mmO.min, mmO.max])\n    // HEADERS:\n    // NOTE: this is all dup'd in barchart.js...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n    config.catHead = chartConfig.headers[0]\n    // Now exclude any blob headers:\n    const actualHeaders = []\n    for (let iii = 1; iii <= chartConfig.seriesCount; iii++) {\n      if (chartConfig.headers[iii] !== chartConfig.blobs.blobState.header) {\n        actualHeaders.push(chartConfig.headers[iii])\n      }\n    }\n    config.seriesHeads = actualHeaders\n    // Map series colours:\n    config.colourMap = ChartUtilities.getColourMap(actualHeaders, colourSet)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // Y-SCALE\n    const yMainDomain = chartConfig.chartData.map((ddd) => ddd[config.catHead])\n    // On use of 'padding' here, see ColumnChart.configSeriesColumns\n    const cwp = ChartUtilities.getSeriesClusterWidthAndPadding(\n      chartConfig,\n      true\n    )\n    const halfClusterWidth = cwp.clusterWidth / 2\n    config.halfClusterWidth = halfClusterWidth\n    config.padding = cwp.padding\n    //\n    config.yMainScale = d3.scale\n      .ordinal()\n      // .rangeBands([0, config.bounds.height + padding], 0, 0)\n      .rangeBands(\n        [\n          // 0 + halfClusterWidth,\n          0,\n          // config.bounds.height, // - halfClusterWidth + config.padding,\n          config.bounds.height + config.padding,\n        ],\n        0,\n        0\n      )\n      .domain(yMainDomain)\n    // Now, cluster scale (n/a for unstacked, but anyway...)\n    config.yClusterScale = d3.scale\n      .ordinal()\n      .domain(actualHeaders)\n      .rangeBands([0, config.yMainScale.rangeBand() - config.padding], 0, 0)\n    return config\n  }\n  // CONFIG SERIES BARS ends\n\n  // RENDER\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Key all subcomponents:\n    const kids = ChartUtilities.getKeysAndIds(chartIndex)\n    // I originally did bounds tests in the order x-axis,\n    // y-axis, blobs.\n    // But I changed this, Nov'20, when I made provision\n    // for projecting bar charts. I do y-axis and blobs\n    // first, to settle the IB width. Then do x-axis\n    // tests...\n    let yaxisJSX = ''\n    let blobsJSX = ''\n    let xaxisJSX = ''\n    let barseriesJSX = ''\n    // Render sequence:\n    if (this.state.yaxisTest) {\n      const yAxisConfig = this.getAxisConfig(config, false)\n      // Render yaxis only, with 'test' flag\n      yaxisJSX = (\n        <SilverYaxisOrdinalTest\n          key={kids.yAxisKey}\n          config={yAxisConfig}\n          onReturnRevisedInnerBox={this.handleYaxisInnerBoxBounds}\n        />\n      )\n    } else if (this.state.blobsTest) {\n      const blobsConfig = this.configBlobs(config)\n      blobsConfig.bounds = Object.assign({}, this.state.innerBox)\n      // Render blobs only, with 'test' flag\n      blobsJSX = (\n        <SilverYaxisBlobs\n          key={kids.blobsKey}\n          config={blobsConfig}\n          onReturnRevisedInnerBox={this.handleBlobsInnerBoxBounds}\n        />\n      )\n    } else if (this.state.xaxisTest) {\n      const xAxisConfig = this.getAxisConfig(config, true)\n      xAxisConfig.bounds = JSON.parse(JSON.stringify(this.state.innerBox))\n      // Test render, with callback\n      xaxisJSX = (\n        <SilverXaxisLinearTest\n          key={kids.xAxisKey}\n          config={xAxisConfig}\n          onReturnRevisedInnerBox={this.handleXaxisInnerBoxBounds}\n        />\n      )\n    } else {\n      const bounds = JSON.parse(JSON.stringify(this.state.innerBox))\n      // NOTE: I don't think I have to reimpose bounds at this stage\n      // Pass the final-tweak bounds to the various config handlers\n      const xAxisConfig = this.getAxisConfig(config, true, bounds)\n      const yAxisConfig = this.getAxisConfig(config, false, bounds)\n      const blobsConfig = this.configBlobs(config, bounds)\n      const seriesConfig = this.configSeriesBars(config, bounds)\n      // 'Live' render: all children\n      xaxisJSX = <SilverXaxisLinear key={kids.xAxisKey} config={xAxisConfig} />\n      yaxisJSX = <SilverYaxisOrdinal key={kids.yAxisKey} config={yAxisConfig} />\n      if (blobsConfig.blobs.blobState.column > 0) {\n        blobsJSX = (\n          <SilverYaxisBlobs\n            key={kids.blobsKey}\n            config={blobsConfig}\n            onReturnRevisedInnerBox={this.handleBlobsInnerBoxBounds}\n          />\n        )\n      }\n      // NOTE: I need to look at event-handling\n      barseriesJSX = (\n        <SilverSeriesBar\n          key={kids.barSeriesKey}\n          config={seriesConfig}\n          onPassBarClick={this.handleBarClick}\n        />\n      )\n    }\n\n    // General and indexed class for main group:\n    const mainGroupClass = this.getMainGroupClass(false, true)\n\n    // NOTE: I can draw a temporary 'inner box'\n    // so I can see what I've got...\n    /*\n    const rectStyle = {\n      fill: '#aa5',\n      width: this.state.innerBox.width,\n      height: this.state.innerBox.height,\n      x: 0,\n      y: 0,\n    };\n    // Next goes to top of JSX stack\n    <rect style={rectStyle} />\n    */\n\n    const chartComponentsJSX = (\n      <g className={mainGroupClass} key={kids.mainGroupKey} id={kids.contentId}>\n        {xaxisJSX}\n        {yaxisJSX}\n        {blobsJSX}\n        {barseriesJSX}\n        <g className={kids.zeroId} id={kids.zeroId} />\n      </g>\n    )\n    return chartComponentsJSX\n  }\n}\n\nSilverBarChart.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverBarChart\n","// GRANULARITY PREFERENCES\n// Basically, this is a lookup kludge. The function is called by\n// getGranularity and returns a set of interval-specific properties\n// (I'd put this in Default Preferences... if it didn't then have to\n// be passed all the way down the chain...)\nexport function granularityPreferences() {\n  return {\n    minutes: {\n      NOTE: '***MINUTES***',\n      testVal: 15,\n      next: {\n        interval: 'unlabelledMinutes',\n        factor: 1,\n      },\n      ticks: {\n        displayInterval: 'minutes',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'minutes',\n        increment: 1,\n        format: '%H:%M',\n        firstLetterOnly: false,\n        showLabel: true,\n      },\n      secondary: {\n        displayInterval: 'days',\n        increment: 1,\n        format: '%b %d',\n        filter: true,\n        showLabel: true,\n      },\n      // NOTE: old 'ticksOn' flag wasn't working. Now I'm\n      // setting tick-levels for comparison in caller...\n      ticksOn: false,\n      tickLevel: 'minutes',\n    },\n    unlabelledMinutes: {\n      NOTE: '***UNLABELLED MINUTES***',\n      testVal: 2,\n      next: {\n        interval: 'hours',\n        factor: 60,\n      },\n      ticks: {\n        displayInterval: 'minutes',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'minutes',\n        increment: 1,\n        format: '%H:%M',\n        firstLetterOnly: false,\n        showLabel: false,\n      },\n      secondary: {\n        displayInterval: 'days',\n        increment: 1,\n        format: '%b %d',\n        filter: true,\n        showLabel: true,\n      },\n      // NOTE: old 'ticksOn' flag wasn't working. Now I'm\n      // setting tick-levels for comparison in caller...\n      ticksOn: false,\n      tickLevel: 'minutes',\n    },\n    hours: {\n      NOTE: '***HOURS***',\n      testVal: 15,\n      next: {\n        interval: 'unlabelledHours',\n        factor: 1,\n      },\n      ticks: {\n        displayInterval: 'hours',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'hours',\n        increment: 1,\n        format: '%H:%M',\n        firstLetterOnly: false,\n        showLabel: true,\n      },\n      secondary: {\n        displayInterval: 'days',\n        increment: 1,\n        format: '%b %d',\n        filter: true,\n        showLabel: true,\n      },\n      // NOTE: old 'ticksOn' flag wasn't working. Now I'm\n      // setting tick-levels for comparison in caller...\n      ticksOn: false,\n      tickLevel: 'hours',\n    },\n    unlabelledHours: {\n      NOTE: '***UNLABELLED HOURS***',\n      testVal: 2,\n      next: {\n        interval: 'days',\n        factor: 24,\n      },\n      ticks: {\n        displayInterval: 'hours',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'hours',\n        increment: 1,\n        format: '%H %M',\n        firstLetterOnly: false,\n        showLabel: false,\n      },\n      secondary: {\n        displayInterval: 'days',\n        increment: 1,\n        format: '%b %d',\n        filter: true,\n        showLabel: true,\n      },\n      // NOTE: old 'ticksOn' flag wasn't working. Now I'm\n      // setting tick-levels for comparison in caller...\n      ticksOn: false,\n      tickLevel: 'hours',\n    },\n    days: {\n      NOTE: '***DAYS***',\n      testVal: 7,\n      next: {\n        interval: 'unlabelledDays',\n        factor: 1,\n      },\n      ticks: {\n        displayInterval: 'days',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'days',\n        increment: 1,\n        format: '%d',\n        firstLetterOnly: false,\n        showLabel: true,\n      },\n      secondary: {\n        displayInterval: 'months',\n        increment: 1,\n        format: '%b',\n        // note: longFormat may be redundant\n        // longFormat: '%B %Y',\n        filter: true,\n        showLabel: true,\n      },\n      // NOTE: old 'ticksOn' flag wasn't working. Now I'm\n      // setting tick-levels for comparison in caller...\n      ticksOn: false,\n      tickLevel: 'days',\n    },\n    unlabelledDays: {\n      NOTE: '***UNLABELLED DAYS***',\n      testVal: 2,\n      next: {\n        interval: 'months',\n        factor: 31,\n      },\n      ticks: {\n        displayInterval: 'days',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'months',\n        increment: 1,\n        format: '%b',\n        firstLetterOnly: false,\n        showLabel: true,\n      },\n      secondary: {\n        displayInterval: 'years',\n        increment: 1,\n        format: '%Y',\n        // longFormat: '%B %Y',\n        filter: true,\n        showLabel: true,\n      },\n      // NOTE: old 'ticksOn' flag wasn't working. Now I'm\n      // setting tick-levels for comparison in caller...\n      ticksOn: false,\n      tickLevel: 'days',\n    },\n    weeks: {\n      NOTE: '***WEEKS***',\n      testVal: 'dd',\n      next: {\n        interval: 'months',\n        factor: 4,\n      },\n      ticks: {\n        displayInterval: 'days',\n        increment: 7,\n      },\n      primary: {\n        displayInterval: 'months',\n        increment: 1,\n        format: '%b',\n        firstLetterOnly: false,\n        showLabel: true,\n      },\n      secondary: {\n        displayInterval: 'years',\n        increment: 1,\n        format: '%Y',\n        filter: true,\n        showLabel: true,\n      },\n      ticksOn: false,\n      tickLevel: 'weeks',\n    },\n    months: {\n      NOTE: '***MONTHS***',\n      testVal: 'May',\n      next: {\n        interval: 'shortMonths',\n        factor: 1,\n      },\n      ticks: {\n        displayInterval: 'months',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'months',\n        increment: 1,\n        format: '%b',\n        firstLetterOnly: false,\n        showLabel: true,\n      },\n      secondary: {\n        displayInterval: 'years',\n        increment: 1,\n        format: '%Y',\n        filter: true,\n        showLabel: true,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n      },\n      ticksOn: false,\n      tickLevel: 'months',\n    },\n    shortMonths: {\n      NOTE: '***SHORT MONTHS***',\n      testVal: 'M',\n      next: {\n        interval: 'unlabelledMonths',\n        factor: 1,\n      },\n      ticks: {\n        displayInterval: 'months',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'months',\n        increment: 1,\n        format: '%b',\n        firstLetterOnly: true,\n        showLabel: true,\n      },\n      secondary: {\n        displayInterval: 'years',\n        increment: 1,\n        format: '%Y',\n        filter: true,\n        showLabel: true,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n      },\n      ticksOn: false,\n      tickLevel: 'months',\n    },\n    unlabelledMonths: {\n      NOTE: '***UNLABELLED MONTHS***',\n      testVal: 3,\n      next: {\n        interval: 'years',\n        factor: 12,\n      },\n      ticks: {\n        displayInterval: 'months',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'months',\n        increment: 1,\n        format: '%b',\n        firstLetterOnly: false,\n        showLabel: false,\n      },\n      secondary: {\n        displayInterval: 'years',\n        increment: 1,\n        format: '%Y',\n        filter: true,\n        showLabel: true,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n      },\n      ticksOn: false,\n      tickLevel: 'months',\n    },\n    quarters: {\n      NOTE: '***QUARTERS***',\n      testVal: 'Q4',\n      next: {\n        interval: 'years',\n        factor: 4,\n      },\n      ticks: {\n        displayInterval: 'months',\n        increment: 3,\n      },\n      primary: {\n        displayInterval: 'months',\n        increment: 3,\n        format: '%b',\n        firstLetterOnly: false,\n        showLabel: true,\n      },\n      secondary: {\n        displayInterval: 'years',\n        increment: 1,\n        format: '%Y',\n        filter: true,\n        showLabel: true,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n      },\n      ticksOn: false,\n      tickLevel: 'quarters',\n    },\n    years: {\n      NOTE: '***YEARS***',\n      testVal: 10,\n      next: {\n        interval: 'years2',\n        factor: 2,\n      },\n      ticks: {\n        displayInterval: 'years',\n        increment: 1,\n      },\n      primary: {\n        displayInterval: 'years',\n        increment: 1,\n        format: '%Y',\n        firstLetterOnly: false,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n        showLabel: true,\n      },\n      ticksOn: true,\n      tickLevel: 'years',\n    },\n    years2: {\n      NOTE: '***YEARS-2***',\n      testVal: 15,\n      next: {\n        interval: 'years5',\n        factor: 2.5,\n      },\n      ticks: {\n        displayInterval: 'years2',\n        increment: 2,\n      },\n      primary: {\n        displayInterval: 'years2',\n        increment: 2,\n        format: '%Y',\n        firstLetterOnly: false,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n        showLabel: true,\n      },\n      ticksOn: true,\n      tickLevel: 'years',\n    },\n    years5: {\n      NOTE: '***YEARS-5***',\n      testVal: 15,\n      next: {\n        interval: 'years10',\n        factor: 2,\n      },\n      ticks: {\n        displayInterval: 'years5',\n        increment: 5,\n      },\n      primary: {\n        displayInterval: 'years5',\n        increment: 5,\n        format: '%Y',\n        firstLetterOnly: false,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n        showLabel: true,\n      },\n      ticksOn: true,\n      tickLevel: 'years',\n    },\n    years10: {\n      NOTE: '***YEARS-10***',\n      testVal: 15,\n      next: {\n        interval: 'years50',\n        factor: 5,\n      },\n      ticks: {\n        displayInterval: 'years10',\n        increment: 10,\n      },\n      primary: {\n        displayInterval: 'years10',\n        increment: 10,\n        format: '%Y',\n        firstLetterOnly: false,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n        showLabel: true,\n      },\n      ticksOn: true,\n      tickLevel: 'years',\n    },\n    years50: {\n      NOTE: '***YEARS-50***',\n      testVal: 15,\n      next: {\n        interval: 'years100',\n        factor: 2,\n      },\n      ticks: {\n        displayInterval: 'years50',\n        increment: 50,\n      },\n      primary: {\n        displayInterval: 'years50',\n        increment: 50,\n        format: '%Y',\n        firstLetterOnly: false,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n        showLabel: true,\n      },\n      ticksOn: true,\n      tickLevel: 'years',\n    },\n    years100: {\n      NOTE: '***YEARS-100***',\n      testVal: 15,\n      next: {\n        interval: 'years100',\n        factor: 1,\n      },\n      ticks: {\n        displayInterval: 'years100',\n        increment: 100,\n      },\n      primary: {\n        displayInterval: 'years100',\n        increment: 100,\n        format: '%Y',\n        firstLetterOnly: false,\n        yyyyOn: 100,\n        yyyyThreshold: 2,\n        showLabel: true,\n      },\n      ticksOn: true,\n      tickLevel: 'years',\n    },\n  }\n}\n// GRANULARITY PREFERENCES ends\n\n// GET TICKS ON\nexport function getTicksOn(tickLevel, rawTickLevel, isThermo) {\n  // By default, ticks are 'on' if time-interval 'level' hasn't changed...\n  let tOn = tickLevel === rawTickLevel\n  // ...but there are overrides.\n  if (isThermo) {\n    // Thermometers force ticks on:\n    tOn = true\n  } else if ('monthsquarters'.includes(tickLevel.toLowerCase())) {\n    // Non-thermo, mths and qs force ticks off\n    tOn = false\n  }\n  return tOn\n}\n// GET TICKS ON ends\n\n// GET DATA POINT WIDTH\n// Returns width of one 'slot' along the axis\nexport function getDataPointWidth(width, config) {\n  // Number of raw data points\n  const pointCount = config.pointCount\n  // Width of one data-point\n  return width / pointCount\n}\n// GET DATA POINT WIDTH ends\n\n// SWITCH TO LONG FORMAT\n// Determines the 2ry axis long date format\n// to use, based upon default format\nexport function switchToLongFormat(format) {\n  let longFormat = format\n  if (format === '%b') {\n    // 'Mmm' to 'Mmmm yyyy'\n    longFormat = '%B %Y'\n  }\n  return longFormat\n}\n// SWITCH TO LONG FORMAT ends\n\n// SECONDARY AXIS NEEDS LONG FORMAT\n// Determines whether the 2ry axis needs\n// to display, say, 'January 2020' instead of merely 'Jan'\nexport function secondaryAxisNeedsLongFormat(config) {\n  let result = false\n  const cData = config.chartData\n  const firstD = cData[0]\n  const lastD = cData[cData.length - 1]\n  // Access by key\n  const dKey = Object.keys(firstD)[0]\n  const dateA = firstD[dKey]\n  const dateZ = lastD[dKey]\n  const rawInterval = config.timeFormats.interval\n  // Inferentially, for now at least\n  // Days: check same month and year\n  if (rawInterval === 'days') {\n    const monthA = new Date(dateA).getMonth()\n    const monthZ = new Date(dateZ).getMonth()\n    const yearA = new Date(dateA).getFullYear()\n    const yearZ = new Date(dateZ).getFullYear()\n    if (monthZ === monthA && yearZ === yearA) {\n      result = true\n    }\n  }\n  return result\n}\n// SECONDARY AXIS NEEDS LONG FORMAT ends\n\n// MAKE GRANULARITY OBJECT FOR STRING AXIS\n// Called from getGranularity. For string axis, creates\n// a simple granularity object\nexport function makeGranularityObjectForStringAxis(gObj) {\n  gObj.pointWidth = gObj.dataPointWidth\n  gObj.primary = { filter: false, showLabel: true }\n  gObj.ticks = { increment: 1 }\n  gObj.ticksOn = true\n  return gObj\n}\n// MAKE GRANULARITY OBJECT FOR STRING AXIS ends\n\n// MAKE GRANULARITY OBJECT FOR TIME AXIS\n// Called from getGranularity. For time-based axis, creates\n// a complex granularity object\nexport function makeGranularityObjectForTimeAxis(\n  gObj,\n  width,\n  config,\n  testText,\n  textPrefs\n) {\n  // Margin between strings (from DPs)\n  const margin = textPrefs.minGapBetweenLabels\n  // Complete set of granularity-interval preferences\n  const granPrefs = granularityPreferences()\n  // Interval, with month adjustment to \"Mmm\" default\n  const rawInterval = config.timeFormats.interval\n  // So start with a raw level:\n  const rawTickLevel = granPrefs[rawInterval].tickLevel\n  // And a dynamic version...\n  let interval = rawInterval\n  // ...and a dynamic copy\n  let pWidth = gObj.dataPointWidth\n  // Flag will be set false when we have a 'fit'\n  let notReady = true\n  // Default primary filter. Primary axis starts 1-to-1 with\n  // raw data; but if granularity coarsens, must filter...\n  let primaryFilter = false\n  // Adjusts value for width testing, for DC scaling\n  const wFactor = config.xAxis.textWidthSizeTestFactor\n  while (notReady) {\n    // Granularity prefs for this interval\n    const thisGran = granPrefs[interval]\n    // testVal may be a string or a number\n    const testVal = +thisGran.testVal * wFactor\n    // If true, slots are wide enough\n    let labelFits = false\n    if (isNaN(testVal)) {\n      // testVal is an interval-specific string (e.g. 'May')\n      // Test on-screen against slot width\n      testText.text(thisGran.testVal)\n      // Will it fit?\n      let testWidth = testText.node().getComputedTextLength()\n      testWidth *= wFactor\n      labelFits = pWidth - margin > testWidth\n    } else {\n      // Check a numeric value against slot width\n      labelFits = pWidth > testVal\n    }\n    // Break the loop if the label will fit...\n    // ...or if I've come to the last available interval\n    // (NOTE: in lookup final interval must set ITSELF as 'next')\n    const lastInterval = interval === thisGran.next.interval\n    if (labelFits || lastInterval) {\n      // Label will fit, so apply values to result\n      gObj.ticks = thisGran.ticks\n      gObj.primary = thisGran.primary\n      gObj.primary.filter = primaryFilter\n      gObj.secondary = thisGran.secondary\n      gObj.pointWidth = pWidth\n      gObj.interval = interval\n      // Reset flag to break\n      notReady = false\n    } else {\n      // Reset for next loop\n      interval = thisGran.next.interval\n      pWidth *= thisGran.next.factor\n      primaryFilter = true\n    }\n  }\n  // Use ticksOn property of raw granularity set\n  gObj.ticksOn = granPrefs[rawTickLevel].ticksOn\n  gObj.pointWidth = pWidth\n  // In some cases I need to revise the 2ry axis label\n  // to a longer format (e.g. 'Mmmm yyyy' on days that fall within a single month)\n  if (secondaryAxisNeedsLongFormat(config)) {\n    gObj.secondary.format = switchToLongFormat(gObj.secondary.format)\n  }\n  // Kludgey override for quarters:\n  if (\n    rawInterval === 'quarters' &&\n    gObj.primary.displayInterval === 'months' &&\n    gObj.primary.increment === 3\n  ) {\n    gObj.primary.filter = true\n  }\n  return gObj\n}\n// MAKE GRANULARITY OBJECT FOR TIME AXIS ends\n\n// GET GRANULARITY\n// Called from xaxis-ordinal-config to work out\n// the granularity for the x-axis\n// Args are:\n//    innerbox width (after yaxis set its margins);\n//    the config object;\n//    a D3 test object to which I can append strings for measuring on-page\n//        (Don't 'remove': caller does that.)\n//    text properties\nexport function getGranularity(width, config, testText, textPrefs) {\n  // 'Slot' width\n  const dataPointWidth = getDataPointWidth(width, config)\n  // Object to return, with raw-data point width. Other props added below\n  const granularityObject = {\n    dataPointWidth,\n  }\n\n  // Categories are strings or time-based\n  // Assemble and return granularityObject\n  if (config.categoryType === 'string') {\n    makeGranularityObjectForStringAxis(granularityObject)\n  } else {\n    makeGranularityObjectForTimeAxis(\n      granularityObject,\n      width,\n      config,\n      testText,\n      textPrefs\n    )\n  }\n  return granularityObject\n}\n// GET GRANULARITY ends\n","// FIX YEAR IN DATE\n// This is a workaround for the fact that Javascript\n// will misinterpret 'yyyy' dates before 1848\n// So, for example:\n// new Date(Date.parse('1847')).getFullYear() = 1846!\n// Fix is to force by appending a month:\n// new Date(Date.parse('Jan 1847')).getFullYear() = 1847\n// Returns a fixed date object\nexport default function(date) {\n  // If date is just year, append 'Jan'\n  if (!isNaN(date)) {\n    date = date.toString()\n    if (date.length === 4) {\n      // Year as 'yyyy' -- force!\n      date = `January 1 ${date}`\n    }\n  }\n  return new Date(date)\n}\n","// X-AXIS FILTERS\n\nimport FixYearInDate from '../chartside-utilities/fix-year'\n\n// NOTE: maybe try to fix this if I ever decide that\n// getAxisFilter is 'finished'...\n\n// DEFAULT FILTER ITEM\n// Returns default element in tick filter array\nexport function defaultFilterItem() {\n  return {\n    label: false,\n    shift: false,\n    // NOTE: might pass in a flag\n    // that sets default tick length\n    tick: 2,\n    duplicate: 0,\n  }\n}\n\n// GET DEFAULT FILTER ARRAY\n// Called from getYearsAxisFilter\n// Passed the length of the categories array, returns an array of falses\n// that can be selectively overwritten\nexport function getDefaultFilterArray(len) {\n  const filterArray = []\n  // Have to do this the hard way, apparently...\n  // label = draw a label\n  // shift = move label left\n  // tick = tick-length (0 = no tick)\n  // duplicate = duplicate last tick to close final slot\n  while (filterArray.length < len) {\n    filterArray.push(defaultFilterItem())\n  }\n  return filterArray\n}\n// GET DEFAULT FILTER ARRAY ends\n\n// ADD YEAR ADJUSTMENT\n// Called from getYearsAxisFilter and getAxisFilter. Adds year\n// adjustment (for pre-1000 years) to each element in categories array\n// NOTE: actually, once I've split off years, this will only be called from\n// getYearsAxisFilter\nexport function addYearAdjustment(catArray, yearsAdjustedBy) {\n  for (let iii = 0; iii < catArray.length; iii++) {\n    const thisCat = catArray[iii]\n    catArray[iii] = parseInt(thisCat, 10) + yearsAdjustedBy\n  }\n}\n// ADD YEAR ADJUSTMENT ends\n\n// FORCE FIRST AND LAST YEARS\n// Called from fillAlternateYears and fillModYears\n// Forces labels and ticks on 1st and last items in years axis\n// NOTE: hard-wired tick lengths\nexport function forceFirstAndLastYears(fArray, tickLengths) {\n  const len = fArray.length\n  fArray[0].label = true\n  if (fArray[0].tick === 0) {\n    fArray[0].tick = tickLengths.default\n  }\n  fArray[len - 1].label = true\n  if (fArray[len - 1].tick === 0) {\n    fArray[len - 1].tick = tickLengths.default\n  }\n}\n// FORCE FIRST AND LAST YEARS ends\n\n// FILL ALL YEARS\n// Called from getYearsAxisFilter to force labels and ticks on all years\n// NOTE: hard-wired tick lengths\nexport function fillAllYears(fArray, isPrimary, tickLengths) {\n  if (isPrimary) {\n    for (let iii = 0; iii < fArray.length; iii++) {\n      const thisYear = fArray[iii]\n      thisYear.label = true\n      thisYear.tick = tickLengths.long\n    }\n  }\n}\n// FILL ALL YEARS ends\n\n// FILL ALTERNATE YEARS\n// Called from getYearsAxisFilter to force labels and ticks every 2 years\n// NOTE: hard-wired tick lengths\nexport function fillAlternateYears(fArray, isPrimary, tickLengths) {\n  const len = fArray.length\n  for (let iii = 0; iii < len; iii++) {\n    const thisYear = fArray[iii]\n    if (iii % 2 === 0) {\n      thisYear.label = true\n      thisYear.tick = tickLengths.long\n    } else {\n      thisYear.tick = tickLengths.default\n    }\n  }\n  // Do I even need to test on isPrimary? Surely this should\n  // only be called on primary axis, anyway. Year+ series don't have\n  // a 2ry axis...\n  if (isPrimary) {\n    forceFirstAndLastYears(fArray, tickLengths)\n  }\n}\n// FILL ALTERNATE YEARS ends\n\n// GET MINOR MOD\nexport function getMinorMod(mainMod) {\n  let minorMod = 1\n  if (mainMod === 10) {\n    minorMod = 5\n  } else if (mainMod === 50) {\n    minorMod = 10\n  } else if (mainMod === 100) {\n    minorMod = 25\n  }\n  return minorMod\n}\n// GET MINOR MOD ends\n\n// FORCE DATE TO YEAR\n// If date to check for year-mod isn't a pure year, returns yyyy\nexport function forceDateToYear(val) {\n  let yDate = val\n  if (isNaN(yDate)) {\n    yDate = new Date(Date.parse(yDate)).getFullYear()\n  }\n  return yDate\n}\n// FORCE DATE TO YEAR\n\n// FILL MOD YEARS\n// Called from getYearsAxisFilter to force labels and ticks every 5/10... years\nexport function fillModYears(\n  fArray,\n  catArray,\n  mainMod,\n  isPrimary,\n  tickLengths\n) {\n  if (!isPrimary) {\n    return\n  }\n  // NOTE: as an expedient, a lookup for minor ticks to display\n  const minorMod = getMinorMod(mainMod)\n  for (let iii = 0; iii < fArray.length; iii++) {\n    // Actual value\n    const thisCat = forceDateToYear(catArray[iii])\n    // Element in the filter array\n    const thisYear = fArray[iii]\n    // This works like fillAlternateYears, above\n    if (thisCat % mainMod === 0) {\n      thisYear.label = true\n      thisYear.tick = tickLengths.long\n    } else if (thisCat % minorMod === 0) {\n      thisYear.tick = tickLengths.default\n    } else {\n      thisYear.tick = 0\n    }\n  }\n  // if (isPrimary) {\n  // No: I think we have to force first and last for both 1ry and 2ry axes\n  // NOTE: really? Surely no 2ry axis on years+\n  forceFirstAndLastYears(fArray, tickLengths)\n  // }\n}\n// FILL MOD YEARS ends\n\n// GET YEARS AXIS FILTER\n// Called for yearly x-axis\nexport function getYearsAxisFilter(config, timeFormats, isPrimary) {\n  // Clone the category array\n  // (Prevents refs back, which increment low numbers for yearsAdjustedBy\n  // e.g. '5' can become '8005'!!)\n  const catArray = JSON.parse(JSON.stringify(config.categories))\n  const len = catArray.length\n  // Set up default filter of falses\n  const filterArray = getDefaultFilterArray(len)\n  // Now selective overwriting, according to timeFormat\n  const displayInterval = timeFormats.displayInterval\n  // Check for year-intervals (1/2/5/10...)\n  const yMod = getYearMod(displayInterval)\n  // tickLengths: default and long\n  const tickLengths = getTickLengths(config)\n  // Now fill in the array selectively.\n  // 'years2' is the special case\n  if (yMod === 1) {\n    fillAllYears(filterArray, isPrimary, tickLengths)\n  } else if (yMod === 2) {\n    fillAlternateYears(filterArray, isPrimary, tickLengths)\n  } else {\n    fillModYears(filterArray, catArray, yMod, isPrimary, tickLengths)\n  }\n  // NOTE: kludging some loose ends. I'm playing fast and loose here,\n  // updating by ref:\n  timeFormats.yearCount = len\n  return filterArray\n}\n// GET YEARS AXIS FILTER ends\n\n// GET CAT ARRAY FOR NON YEARS AXIS FILTER\n// Called from getNonYearsAxisFilter to clone and 1000-adjust array of cats\nexport function getCatArrayForNonYearsAxisFilter(config) {\n  // Cloning the category array prevents refs back, which increment low numbers for yearsAdjustedBy\n  // e.g. '5' can become '8005'!!\n  const catArray = Object.assign([], config.categories)\n  // Allow for 1000-adjustment, so that years/numbers can undergo\n  // a successful Date.parse below...\n  const yearsAdjustedBy = config.yearsAdjustedBy\n  if (yearsAdjustedBy > 0) {\n    addYearAdjustment(catArray, yearsAdjustedBy)\n  }\n  return catArray\n}\n// GET CAT ARRAY FOR NON YEARS AXIS FILTER ends\n\n// GET NO FILTER ARRAY\n// Once called from getNonYearsAxisFilter to create a filter\n// array where no filtering is required. No longer called.\nexport function getNoFilterArray(timeFormats, catLen) {\n  // NOTE: double-kludge: update passed timeFormats object\n  // by ref, with number of year labels!\n  if (timeFormats.displayInterval.includes('years')) {\n    timeFormats.yearCount = catLen\n  }\n  // NOTE: that I'm hard-coding tick lengths for now\n  const anObj = { duplicate: false, label: true, shift: false, tick: 3 }\n  const noFilterArray = Array(catLen).fill(anObj)\n  return noFilterArray\n}\n// GET NO FILTER ARRAY\n\nexport function setDateByInterval(date, interval) {\n  let result = ''\n  if (interval === 'months' || interval === 'quarters') {\n    result = date.getMonth()\n  } else if (interval === 'days' || interval === 'weeks') {\n    result = date.getDate()\n  }\n  // Hours/minutes to come\n  return result\n}\n\n// GET DATE PROPS\n// Called from getNonYearsAxisFilter to determine whether\n// current point is a boundary. Params are:\n//    two dates to compare\n//    raw data interval\n//    display interval on axis\n//    flags for first and last dates\n//    ...\n//    tickLengths added Nov'21\nexport function getDateProps(\n  dateA,\n  dateB,\n  displayInterval,\n  firstDate,\n  lastDate,\n  showLabel,\n  checkTimeChange,\n  forceTick,\n  tickInterval,\n  tickLengths\n) {\n  // Extract tick lengths\n  const longLength = tickLengths.long\n  const defaultLength = tickLengths.default\n  // Defined in prefs but never, AFAIK, used...\n  // const shortLength = tickLengths.short;\n  // Years\n  const yearA = dateA.getFullYear()\n  const yearB = dateB.getFullYear()\n  // Months\n  const monthA = dateA.getMonth()\n  const monthB = dateB.getMonth()\n  // Days\n  const dayA = dateA.getDate()\n  const dayB = dateB.getDate()\n  // Hours\n  const hourA = dateA.getHours()\n  const hourB = dateB.getHours()\n  // Hours\n  const minuteA = dateA.getMinutes()\n  const minuteB = dateB.getMinutes()\n  // NOTE: that I'm assuming, for now, that I want\n  // to plot months->years\n  // Also NOTE: that I've hard-coded ticklengths; but\n  // these should eventually be displayInterval-related and\n  // set in DPs...\n  // There's a threshold below which smallest ticks aren't shown\n  // This is being set on every iteration. Can I move it upstairs?\n  // NOTE: this is all very messy and needs re-examination\n  // Default object to return:\n  const result = {\n    tickLen: 0,\n    label: false,\n    duplicate: 0,\n    isBoundary: false,\n  }\n  if (yearB > yearA) {\n    // Year incremented\n    // NOTE: do I need to check displayInterval,\n    // or are years exempt?\n    if (showLabel && checkTimeChange) {\n      // Don't do this for\n      if (!firstDate) {\n        result.label = true\n      }\n    }\n    // }\n    if (displayInterval.includes('year')) {\n      result.tickLen = longLength // was 3\n    } else {\n      // I'm not wild about this; prev'y was 5, but\n      // I've no recollection of where I got that from...\n      result.tickLen = longLength + defaultLength\n    }\n    result.isBoundary = true\n  } else if (monthB > monthA) {\n    // Month incremented\n    if (displayInterval === 'months' || displayInterval === 'days') {\n      result.tickLen = longLength // was 3\n      if (showLabel && !firstDate) {\n        result.label = true\n        result.isBoundary = true\n      }\n    } else if (firstDate || forceTick) {\n      if (displayInterval.includes('year')) {\n        result.tickLen = defaultLength // was 2\n      } else {\n        result.tickLen = longLength // was 3\n      }\n    }\n  } else if (dayB > dayA) {\n    // Day incremented\n    if (\n      displayInterval === 'days' ||\n      displayInterval === 'hours' ||\n      displayInterval === 'minutes'\n    ) {\n      result.tickLen = defaultLength // was 2\n      if (showLabel && !firstDate) {\n        result.label = true\n        result.isBoundary = true\n      }\n    } else if (firstDate || forceTick) {\n      result.tickLen = defaultLength // was 2\n    }\n    if (displayInterval === 'hours' || displayInterval === 'minutes') {\n      result.tickLen = longLength // was 3\n    }\n    // The logic has gone a bit screwy. This is\n    // to cover unlabelled-days\n    if (tickInterval === 'days') {\n      result.tickLen = defaultLength // was 2\n    }\n  } else if (hourB > hourA) {\n    // Hour incremented\n    if (displayInterval === 'hours' || displayInterval === 'minutes') {\n      result.tickLen = defaultLength // was 2\n      if (showLabel && !firstDate) {\n        result.label = true\n        result.isBoundary = true\n      }\n    } else if (firstDate || forceTick) {\n      result.tickLen = defaultLength // was 2\n    }\n  } else if (minuteB !== minuteA) {\n    // Minute incremented\n    if (displayInterval === 'minutes' || displayInterval === 'hours') {\n      result.tickLen = defaultLength // was 2\n      if (showLabel && !firstDate) {\n        result.label = true\n        result.isBoundary = true\n      }\n    } else if (firstDate || forceTick) {\n      result.tickLen = defaultLength // was 2\n    }\n  }\n  // Last date always labelled\n  if (lastDate && showLabel) {\n    result.label = true\n  }\n  // Label\n  return result\n}\n// GET DATE PROPS ends\n\n// GET VIRTUAL DATES\n// Called from newGetNonYearAxisFilter to calculate\n// 1 date preceding and 2 succeeding...\nexport function getVirtualDates(catArray) {\n  // First date\n  const firstDate = new Date(Date.parse(catArray[0]))\n  // And I want an increment, so...\n  const secondDate = new Date(Date.parse(catArray[1]))\n  // NOTE: don't like next. Apart from anything else, I should've\n  // got the increment while I was parsing the payload...\n  const increment = secondDate - firstDate\n  // I need last date (in ms, so I can add increment)\n  // (firstDate is OK as date obj becos I can subtract an increment --\n  // it's only *adding* an increment in ms to a date obj that goes askew)\n  const lastDate = Date.parse(catArray[catArray.length - 1])\n  // Do I need next?\n  const endDate = new Date(lastDate)\n  // Now get 'virtual' dates preceding and following series:\n  const precedingDate = new Date(firstDate - increment)\n  const succeedingDate = new Date(lastDate + increment)\n  const afterSucceedingDate = new Date(lastDate + increment * 2)\n  return {\n    precedingDate,\n    endDate,\n    succeedingDate,\n    afterSucceedingDate,\n  }\n}\n// GET VIRTUAL DATES ends\n\n// GET INTERVALS LIST\n// Called from getNonYearsAxisFilter to assemble a broad list\n// of 'tickable' intervals in descending order\nexport function getIntervalsList(int) {\n  let broadInts = 'years'\n  if (int.includes('quarter') || int.includes('month')) {\n    broadInts = `broadInts,${'months'}`\n  } else if (int.includes('week') || int.includes('day')) {\n    broadInts = `broadInts,${'days'}`\n  }\n  // Hours, etc, to come\n  return broadInts\n}\n// GET INTERVALS LIST ends\n\n// GET YEAR MOD\n// Called from getYearsAxisFilter and getNonYearsAxisFilter\n// Returns the incremental value of, say, 'years2'\nexport function getYearMod(interval) {\n  let yMod = 1\n  // Non-years stick with default\n  if (interval.includes('years')) {\n    // If we're years + n (e.g. 'years2')\n    if (interval.replace('years', '').length > 0) {\n      yMod = parseInt(interval.replace('years', ''), 10)\n    }\n  }\n  return yMod\n}\n// GET YEAR MOD ends\n\n// GET NON-YEARS AXIS FILTER\nexport function getNonYearsAxisFilter(config, granularity, isPrimary) {\n  // Default timeFormats are 2ry axis\n  let granularityTimeFormats = granularity.secondary\n  if (isPrimary) {\n    granularityTimeFormats = granularity.primary\n  }\n  // Axis labels? (actually always true for 2ry)\n  const showLabel = granularityTimeFormats.showLabel\n  // From the original config.timeFormats\n  const originalInterval = config.timeFormats.interval\n  // Time interval of the actual raw data\n  const displayInterval = granularityTimeFormats.displayInterval\n  // Ticks display interval:\n  const tickInterval = granularity.ticks.displayInterval\n  // Which is, broadly:\n  // NOTE: comm'd out, but this may be useful\n  // const displayIntervalsList = getIntervalsList(displayInterval);\n  // I want year mod\n  const yearMod = getYearMod(displayInterval)\n  // Cloned array of categories with any 1000-year adjustment\n  // NOTE: do I need to convert date strings to date objects now?\n  // For the time being, left as strings\n  const catArray = getCatArrayForNonYearsAxisFilter(config)\n  const catLen = catArray.length\n  // 'Virtual' dates preceding first and following last\n  const virtualDates = getVirtualDates(catArray)\n  const { precedingDate, endDate, succeedingDate } = virtualDates\n  // Added Nov'21: we need tick lengths\n  // (Prev'y hard-coded in getDateProps. Ouch!)\n  const tickLengths = getTickLengths(config)\n  // Set up a counter to track the number of datapoints within whatever\n  // time-interval I'm *plotting* (e.g., to count the number of days in a month)\n  // I use this to count back at the end of the time-interval, to find the\n  // halfway position where I'll actually set the flag to draw a label\n  let clusterCounter = 0\n  let crossedBoundary = false\n  let pointLabelled = false\n  // Array to return:\n  const filterArray = []\n  let filterIndex = 0\n  // Loop through categories\n  for (let catNo = 0; catNo < catLen; catNo++) {\n    // I need to set up prev and next items\n    const filterItem = defaultFilterItem()\n    const thisDate = new Date(catArray[catNo])\n    const lastPoint = catNo === catLen - 1\n    // I want to compare this item with previous\n    let dateA\n    let dateB\n    let firstDate = false\n    let lastDate = false\n    if (catNo === 0) {\n      dateA = precedingDate\n      dateB = thisDate\n      firstDate = true\n    } else if (lastPoint) {\n      dateA = new Date(catArray[catNo - 1])\n      dateB = thisDate\n      lastDate = true\n    } else {\n      dateA = new Date(catArray[catNo - 1])\n      dateB = thisDate\n    }\n    // Flag to prevent year being drawn for first\n    // slot with sub-yearly data\n    // And similarly for other intervals\n    let checkTimeChange = true\n    if (catNo === 0) {\n      if (\n        displayInterval.includes('year') &&\n        !originalInterval.includes('year')\n      ) {\n        checkTimeChange = false\n      }\n    }\n    // So I want to check sequentially at year, month and day levels\n    // I'm oversimplifying now, assuming data are days->months\n    const boundaryObj = getDateProps(\n      dateA,\n      dateB,\n      displayInterval,\n      firstDate,\n      lastDate,\n      showLabel,\n      checkTimeChange,\n      false,\n      tickInterval,\n      tickLengths\n    )\n    filterItem.tick = boundaryObj.tickLen\n    filterItem.duplicate = boundaryObj.duplicate\n    filterItem.isBoundary = boundaryObj.isBoundary\n    crossedBoundary = boundaryObj.isBoundary\n    if (boundaryObj.label) {\n      // If this is last point and it isn't the first\n      // in a new 'cluster' decrement cluster counter\n      if (lastPoint && !crossedBoundary) {\n        clusterCounter--\n      }\n      const stepBack = clusterCounter / 2\n      filterIndex = catNo - Math.ceil(stepBack)\n      const shift = stepBack === Math.ceil(stepBack)\n      // Find slot, either an existing 'back' element\n      // in the array, or use current\n      let labelPoint = filterArray[filterIndex]\n      if (typeof labelPoint === 'undefined') {\n        labelPoint = filterItem\n      }\n      labelPoint.label = true\n      labelPoint.shift = shift\n      // Reset counter to 1, to allow for the fact\n      // that we're at start of next 'cluster'\n      if (!lastPoint) {\n        clusterCounter = 1\n      }\n      pointLabelled = true\n    } else {\n      // Right place to increment?\n      clusterCounter++\n      pointLabelled = false\n    }\n    filterArray.push(filterItem)\n  }\n  // Emerging from the points loop, I have to deal with:\n  //  -- length of the additional 'duplicate' tick\n  //  -- a possible final label\n  // NOTE: incomprehensible props. Objectify! (inside loop, too)\n  const dupBoundaryObj = getDateProps(\n    endDate,\n    succeedingDate,\n    displayInterval,\n    // firstDate\n    false,\n    // lastDate\n    true,\n    showLabel,\n    // checkTimeChange\n    true,\n    // Force duplicate tick\n    true,\n    tickInterval,\n    tickLengths\n  )\n  // Isolate last element in array and set duplicate value\n  const lastEl = filterArray[catLen - 1]\n  lastEl.duplicate = dupBoundaryObj.tickLen\n  // If the last point was the first in a 'cluster', the loop\n  // 'used' this last point to set the label on the previous\n  // 'cluster'. So I have to set the label for *this* point\n  // Kill off non-mod years and adjust ticklengths\n  fixYearMods(filterArray, catArray, yearMod, tickLengths)\n  if (crossedBoundary && pointLabelled) {\n    lastEl.label = true\n    lastEl.shift = false\n  } else {\n    // We have to go back in the cluster for final label:\n    const stepBack = clusterCounter / 2\n    filterIndex = catLen - 1 - Math.ceil(stepBack)\n    const shift = stepBack === Math.ceil(stepBack)\n    const backEl = filterArray[filterIndex]\n    backEl.label = dupBoundaryObj.label\n    backEl.shift = shift\n  }\n  // Number of years for yyyy/yy formatting on axis\n  if (displayInterval.includes('years')) {\n    granularityTimeFormats.yearCount = getYearCount(catArray)\n  }\n  return filterArray\n}\n// GET NON-YEARS AXIS FILTER ends\n\n// CHECK ALTERNATE YEAR MOD\nexport function checkAlternateYearMod(catArray, yearMod) {\n  let altMod = false\n  if (yearMod === 2) {\n    const firstYear = FixYearInDate(catArray[0]).getFullYear()\n    if (firstYear % 2 !== 0) {\n      altMod = true\n    }\n  }\n  return altMod\n}\n// CHECK ALTERNATE YEAR MOD ends\n\n// FIX YEAR MODS\n// Called from getNonYearsAxisFilter. Goes through the\n// filter array and, if we 'mod' the years, kills off\n// the unwanted labels\nexport function fixYearMods(filterArray, catArray, yearMod, tickLengths) {\n  // Extract tick lengths\n  const longLength = tickLengths.long\n  if (yearMod > 1) {\n    const aLen = filterArray.length - 1\n    // Alternate years may be odd or even, depending\n    // upon initial year. altMod is true for even\n    // years, false for odd\n\n    const oddMod = checkAlternateYearMod(catArray, yearMod)\n    // Set the mod val to check for slot-opening point\n    let modCheckA = 0\n    // ...and for closing point\n    let modCheckB = 1\n    if (oddMod) {\n      modCheckA = 1\n      modCheckB = 0\n    }\n    // Flag to preserve first label, mod or not\n    let killYears = false\n    for (let pNo = 1; pNo < aLen; pNo++) {\n      // const thisDate = new Date(catArray[pNo]).getFullYear();\n      const thisDate = FixYearInDate(catArray[pNo]).getFullYear()\n      const thisPoint = filterArray[pNo]\n      if (killYears) {\n        if (thisDate % yearMod !== modCheckA) {\n          // Kill non-mod labels\n          thisPoint.label = false\n          if (thisDate % yearMod === modCheckB) {\n            // But if it's the year-end AFTER the mod,\n            // set the tick long\n            if (thisPoint.tick > 0) {\n              thisPoint.tick = longLength // was 3\n            }\n          }\n        } else if (thisPoint.tick > 0) {\n          // Mod tick:\n          thisPoint.tick = longLength // was 3\n        }\n      } else if (!killYears && filterArray[pNo].label) {\n        // Hit first label\n        // If it's a mod, reset ticklength\n        if (oddMod) {\n          // Alternate years, odd\n          if (thisDate % yearMod > 0) {\n            filterArray[0].tick = longLength // was 3\n          }\n        } else if (thisDate % yearMod === 0) {\n          // Alternate years, even\n          filterArray[0].tick = longLength // was 3\n        }\n        // Preserve it and reset flag\n        killYears = true\n      }\n    }\n  }\n}\n// FIX YEAR MODS ends\n\n// GET YEAR COUNT\n// Called from getNonYearsAxisFilter\n// Get year count by subtracting first from last\nexport function getYearCount(catArray) {\n  const firstYear = FixYearInDate(catArray[0]).getFullYear()\n  const lastCat = catArray[catArray.length - 1]\n  const lastYear = FixYearInDate(lastCat).getFullYear()\n  const yearCount = lastYear - firstYear + 1\n  return yearCount\n}\n// GET YEAR COUNT ends\n\n// GET ANY AXIS FILTER\n// Called from xaxis-ordinal-config to create axis config obj with\n// 1ry and 2ry axis filters on yearly and non-yearly time-based x-axis\n// Args are the axis config object, which will be updated by ref; the general\n// chart config object; and the granularity object\nexport function getAnyAxisFilter(xAxisConfig, chartConfig, granularity) {\n  // Do nothing if not time-based series\n  if (xAxisConfig.categoryType === 'time') {\n    const rawInterval = chartConfig.timeFormats.interval\n    // Years: 1ry and 2ry\n    if (rawInterval.includes('years')) {\n      xAxisConfig.primaryAxisFilter = getYearsAxisFilter(\n        chartConfig,\n        granularity.primary,\n        true\n      )\n      xAxisConfig.secondaryAxisFilter = getYearsAxisFilter(\n        chartConfig,\n        granularity.primary,\n        false\n      )\n    } else {\n      xAxisConfig.primaryAxisFilter = getNonYearsAxisFilter(\n        chartConfig,\n        granularity,\n        true\n      )\n      if (typeof granularity.secondary !== 'undefined') {\n        xAxisConfig.secondaryAxisFilter = getNonYearsAxisFilter(\n          chartConfig,\n          granularity,\n          false\n        )\n      }\n    }\n  }\n}\n\n// GET TICK LENGTHS\n// Variously called to extract tick lengths\nexport function getTickLengths(config) {\n  const lengths = config.xAxis.ticks.default.lengths\n  return {\n    long: lengths.long.end,\n    default: lengths.default.end,\n    short: lengths.short.end,\n  }\n}\n// GET TICK LENGTHS ends\n","// CONFIG X-AXIS ORDINAL\n// Assembles ordinal x-axis config object\n\nimport * as d3 from 'd3'\n// import * as BrokenScale from '../broken-scale';\nimport * as AxisUtilities from '../axis-utilities'\nimport * as Granularity from '../granularity'\nimport * as XaxisFilters from '../xaxis-filters'\nimport FixYearInDate from '../../chartside-utilities/fix-year'\n\n// Params are the chart CO, the inner box, test flag\n// granularity is undefined on first call\nexport default function(chartConfig, bounds, testFlag, granularity) {\n  const xAxis = Object.assign({}, chartConfig.xAxis)\n  const side = AxisUtilities.getSide(chartConfig.scales)\n  const chartType = chartConfig.scales[side].type\n  const isMixed = chartConfig.scales.isMixed\n  const isDouble = chartConfig.scales.isDouble\n  const isIndexed = chartConfig.indexDot.indexFlag\n  const invert = chartConfig.scales[side].invert\n  // TEXT prefs\n  const textPrefs = Object.assign({}, xAxis.text)\n  textPrefs.emVal = chartConfig.emVal\n  // Axis needs to know about broken scale, left or right,\n  // for baseline ends\n  const breakScale = getBreakScaleObj(chartConfig.scales, side)\n  // And original inner box\n  const originalBounds = chartConfig.originalInnerBox\n  // TICK prefs\n  // We start with the defaults\n  const tickPrefs = Object.assign({}, xAxis.ticks.default)\n  // Then overwrite with style-specific prefs, which can be 'line',\n  // 'column', thermohorizontal or, awkwardly, 'mixed'...\n  let styleName = chartType\n  if (isDouble || isMixed) {\n    styleName = 'mixed'\n  }\n  const styleSpecificPrefs = xAxis.ticks[styleName]\n  if (typeof styleSpecificPrefs !== 'undefined') {\n    Object.keys(styleSpecificPrefs).forEach((key) => {\n      tickPrefs[key] = styleSpecificPrefs[key]\n    })\n  }\n  // Granularity is passed in as an empty object on test run. It gets\n  // populated\n  // Test text in main panel group:\n  const grpId = `content-group-${chartConfig.chartIndex}`\n  const testConfig = {\n    textPrefs,\n    hasSecondaryAxis: false,\n  }\n  const testText = AxisUtilities.appendTestText(testConfig, grpId)\n  if (testFlag) {\n    granularity = Granularity.getGranularity(\n      bounds.width,\n      chartConfig,\n      testText,\n      textPrefs\n    )\n  }\n  testText.remove()\n  tickPrefs.ticksOn = granularity.ticksOn\n  tickPrefs.tickCount = chartConfig.pointCount\n  // Granularity insert ends\n  // Axis header\n  const header = chartConfig.axisHeaders.xaxis\n  textPrefs.header = chartConfig.xAxis.header\n  const xAxisConfig = {\n    bounds,\n    // Flag that y-scale breaks\n    breakScale,\n    categories: chartConfig.categories,\n    categoryType: chartConfig.categoryType,\n    chartIndex: chartConfig.chartIndex,\n    chartType,\n    colourLookup: chartConfig.colourLookup,\n    duration: chartConfig.duration,\n    forceTurn: chartConfig.forceTurn,\n    granularity,\n    hasSecondaryAxis: false,\n    header,\n    indexed: chartConfig.indexDot,\n    invert,\n    isDouble,\n    isIndexed,\n    orient: xAxis.orient[chartType],\n    originalBounds,\n    outerWidth: chartConfig.outerWidth,\n    pointCount: chartConfig.pointCount,\n    side,\n    testFlag,\n    textPrefs,\n    thermometer: chartConfig.thermometer,\n    tickPrefs,\n    // Object contains timeFormat/axis-row properties\n    // For string cats, this is an empty object; but at least it exists...\n    timeFormats: chartConfig.timeFormats,\n    yearsAdjustedBy: chartConfig.yearsAdjustedBy,\n  }\n  // For l/r margins, we may need to know thermometer\n  // marker width\n  if (chartConfig.thermometer) {\n    let thermoMargin = chartConfig.series.thermovertical.line.length / 2\n    if (chartConfig.scales.right.thermoDots) {\n      thermoMargin = chartConfig.series.thermovertical.dot.radius\n    }\n    xAxisConfig.thermoMargin = thermoMargin\n  }\n  // NOTE: kludge to see if I can override default time formats\n  // NOTE: nasty check on integrity of 'granularity'. The trouble is,\n  // I'm using this before xAxis-test has actually set it...\n  //\n  //\n  // NOTE: FIX THIS\n  if (typeof granularity.primary !== 'undefined') {\n    xAxisConfig.timeFormats.format = granularity.primary.format\n    // And check if we need to knock months back to \"M\" only...\n    // ...but do I actually use this? I think it got dropped.\n    xAxisConfig.firstLetterOnly = granularity.primary.firstLetterOnly\n    xAxisConfig.timeFormats.yyyyOn = granularity.primary.yyyyOn\n    xAxisConfig.timeFormats.yyyyThreshold = granularity.primary.yyyyThreshold\n  }\n  if (typeof granularity.secondary !== 'undefined') {\n    xAxisConfig.timeFormats.secondFormat = granularity.secondary.format\n    // NOTE: must be a better way to flag 2ndary axis on/off...\n    xAxisConfig.hasSecondaryAxis = true\n    xAxisConfig.timeFormats.yyyyOn = granularity.secondary.yyyyOn\n    xAxisConfig.timeFormats.yyyyThreshold = granularity.secondary.yyyyThreshold\n  }\n  // Array of data: single-scale charts all look in the 'all' node\n  const cData = chartConfig.chartData\n\n  // Set filters on x-axis:\n  XaxisFilters.getAnyAxisFilter(xAxisConfig, chartConfig, granularity)\n\n  // NOTE: this just gets worse and worse!!! NOTE\n  // The value I'm after is the number of labels along any years scale\n  // At the moment, I'm updating 'granularity' by reference in\n  // getAxisFilter, and now I'm passing it to something else! Basically,\n  // I'm just making up properties as I go along. Among other things,\n  // unless these conditions are true, the new properties are undefined...\n  // FIX! (How??)\n  if (typeof granularity.primary !== 'undefined') {\n    xAxisConfig.yearCount = granularity.primary.yearCount\n  }\n  if (typeof granularity.secondary !== 'undefined') {\n    xAxisConfig.yearCount = granularity.secondary.yearCount\n  }\n\n  // NOTE: if categoryType='strings', no filters are created\n  // XaxisOrdinal is on the lookout for this...\n\n  // DOMAIN\n  // Date/category column header, to identify date/string in data:\n  const catHead = chartConfig.headers[0]\n  const xDomain = cData.map((ddd) => {\n    let dataItem = ddd[catHead]\n    if (chartConfig.categoryType === 'time') {\n      // Work round Javascript date parsing issue...\n      if (chartConfig.yearsAdjustedBy === 0) {\n        dataItem = FixYearInDate(dataItem)\n      }\n    }\n    return dataItem\n  })\n  // Column charts only need to allow for cluster width\n  // Mod Apr'18 for mixed charts where one 'side' has columns...\n  // ...hasColumns flag set in Editor.reconcileEditorToChartConfig\n  if (testFlag && chartConfig.hasColumns) {\n    // If chart is too narrow, clusterWidth and padding change\n    const halfClusterWidth = AxisUtilities.getHalfClusterWidthForAxis(\n      chartConfig,\n      bounds,\n      true\n    )\n    // Cluster width for calculating left/right margins:\n    xAxisConfig.halfClusterWidth = halfClusterWidth\n  } else if (testFlag && chartConfig.overallChartType === 'thermovertical') {\n    // FIXME: mostly duplicated in ConfigYaxisOrdinal\n    const thermoDots = chartConfig.scales[side].thermoDots\n    let halfMarker = chartConfig.series.thermovertical.line.length / 2\n    if (thermoDots) {\n      halfMarker = chartConfig.series.thermovertical.dot.radius\n    }\n    xAxisConfig.halfClusterWidth = halfMarker\n  }\n\n  // xShift is half a 'slot'. If axis labels are 'between', this is\n  // the distance that ticks move to the left. I only get this value\n  // during the test-render, when I'm working with the width after allowing\n  // for y-axis labels.\n  // (If I did it on the 'real' render, I'd be calculating on the\n  // width of the inner box after I've allowed for this value....)\n  xAxisConfig.xShift = bounds.halfDataPointWidth\n  xAxisConfig.scaleType = 'ordinal'\n  xAxisConfig.scale = d3.scale\n    .ordinal()\n    .domain(xDomain)\n    .rangePoints([0, bounds.width], 0, 0)\n  return xAxisConfig\n}\n// CONFIG X-AXIS ORDINAL ends\n\n// GET BREAK-SCALE OBJ\n// Returns an object that flags left and right end\n// positions for broken-scale baseline\nexport function getBreakScaleObj(scales, side) {\n  const breakScale = {\n    left: false,\n    right: false,\n  }\n  const breaks = scales[side].minMaxObj.scale.min > 0\n  if (scales.isDouble) {\n    // Doublescale: if either side breaks, both do\n    if (breaks) {\n      breakScale.left = true\n      breakScale.right = true\n    }\n  } else {\n    // Single checks active 'side' only\n    // (So far, this can only be 'right')\n    breakScale[side] = breaks\n  }\n  return breakScale\n}\n// GET BREAK-SCALE OBJ ends\n","// Assembles linear y-axis config object\n\nimport * as d3 from 'd3'\nimport * as BrokenScale from '../broken-scale'\nimport * as AxisUtilities from '../axis-utilities'\n\n// Args are one chart definition from panelArray; and side ('left'/'right')\nexport default function(chartConfig, bounds, testFlag, side) {\n  const yAxis = Object.assign({}, chartConfig.yAxis)\n  const mmO = Object.assign({}, chartConfig.scales[side].minMaxObj.scale)\n  const chartType = chartConfig.scales[side].type\n  // But I need both left and right types\n  const leftType = chartConfig.scales.left.type\n  const rightType = chartConfig.scales.right.type\n  const indexed = chartConfig.indexDot\n  const stacked = chartConfig.scales[side].stacked\n  const isLog = chartConfig.scales[side].log\n  const invert = chartConfig.scales[side].invert\n  const breakScaleObj = BrokenScale.makeBreakScaleObj(chartType, chartConfig)\n  // If not indexed, log-scale or inverted-scale...\n  // if min val > 0, break scale:\n  if (!indexed.indexFlag && !isLog && !invert) {\n    if (mmO.min > 0) {\n      breakScaleObj.break = true\n      bounds.height -= breakScaleObj.padding\n    }\n  }\n  // NOTE: originalBounds was designed for barchart ordinal\n  // y-axis, where I need to move cat strings back to original l/h edge\n  // Maybe redundant, but you never know...\n  const originalBounds = chartConfig.originalInnerBox\n  // TEXT prefs\n  const textPrefs = Object.assign({}, yAxis.text)\n  textPrefs.emVal = chartConfig.emVal\n  textPrefs.textFormat = AxisUtilities.scaleNumberFormat(mmO.increment)\n  const isMixed = chartConfig.scales.isMixed\n  // With double (not mixed) scale, there are some textPrefs overrides\n  const isDouble = chartConfig.scales.isDouble\n  const isScatter = chartConfig.scales[side].type.includes('scatter')\n  const headers = {}\n  if (isDouble) {\n    const dPrefs = yAxis.doubleScale\n    AxisUtilities.setDoubleScaleAxisColours(\n      textPrefs,\n      dPrefs,\n      side,\n      leftType,\n      rightType\n    )\n    // Double scale font prefs\n    AxisUtilities.setDoubleScaleAxisTextProps(textPrefs, dPrefs)\n    // I also need to send in a couple of headers...\n    headers.left = chartConfig.axisHeaders.yaxisleft\n    headers.right = chartConfig.axisHeaders.yaxisright\n  } else if (isScatter) {\n    // Scatters currently using an arbitrary margin\n    // I need something from DPs...\n    textPrefs.headerMargin = yAxis.scatter.headerMargin\n    headers.right = chartConfig.axisHeaders.yaxisright\n    if (side === 'left') {\n      headers.left = chartConfig.axisHeaders.yaxisleft\n    }\n  }\n  // TICK prefs\n  const tickPrefs = Object.assign({}, yAxis.ticks.default)\n\n  // Then overwrite with style-specific prefs, which can be 'line',\n  // 'column' or, awkwardly, 'mixed'...\n  let styleName = chartType\n  if (isDouble || isMixed) {\n    styleName = 'mixed'\n  }\n  const styleSpecificPrefs = yAxis.ticks[styleName]\n  if (typeof styleSpecificPrefs !== 'undefined') {\n    Object.keys(styleSpecificPrefs).forEach((key) => {\n      tickPrefs[key] = styleSpecificPrefs[key]\n    })\n  }\n  // Add'nal prefs not inherited from defaults\n  tickPrefs.tickDensity = mmO.tickDensity\n  tickPrefs.tickValues = mmO.tickValues\n\n  // For double scales, omit ticks on (arbitrary) left side...\n  let drawTicks = true\n  if (isDouble && side === 'left') {\n    drawTicks = false\n  }\n  // Additional baseline\n  const additionalBaseline = AxisUtilities.flagAdditionalBaseline(\n    chartConfig,\n    side\n  )\n  // NOTE: so tickPrefs goes in to the axis component as set out in lookup,\n  // with style-specific overrides...\n  const yAxisConfig = {\n    additionalBaseline,\n    bounds,\n    breakScaleObj,\n    chartIndex: chartConfig.chartIndex,\n    chartType,\n    colourLookup: chartConfig.colourLookup,\n    drawTicks,\n    duration: chartConfig.duration,\n    enabled: true,\n    forceTurn: chartConfig.forceTurn,\n    headers,\n    indexed,\n    innerMargin: yAxis.margins.linearInnerMargin,\n    noScaleInnerMargin: yAxis.margins.noScaleInnerMargin,\n    invert,\n    isDouble,\n    isScatter,\n    minVal: mmO.min,\n    maxVal: mmO.max,\n    orient: side,\n    originalBounds,\n    outerWidth: chartConfig.outerWidth,\n    side,\n    stacked,\n    testFlag,\n    textPrefs,\n    tickPrefs,\n    zeroPrefs: chartConfig.yAxis.ticks.zero,\n  }\n  // Mixed +/– flag:\n  yAxisConfig.mixedVals = mmO.min < 0 && mmO.max >= 0\n  // Assemble the scale object\n  let domainArray = [mmO.min, mmO.max]\n  if (invert) {\n    domainArray = [mmO.max, mmO.min]\n  }\n  if (isLog) {\n    yAxisConfig.scale = d3.scale\n      .log()\n      .range([bounds.height, 0])\n      .domain(domainArray)\n  } else {\n    yAxisConfig.scale = d3.scale\n      .linear()\n      .range([bounds.height, 0])\n      .domain(domainArray)\n  }\n  return yAxisConfig\n}\n","// Disable prefer-reflect, for D3 axis.call()\n/* eslint-disable prefer-reflect, no-invalid-this, func-names */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as AxisUtils from '../axis-utilities'\nimport * as TextWrapping from '../../chartside-utilities/text-wrapping'\nimport * as XaxisHeader from '../xaxis-header'\n\nclass SilverXaxisOrdinal extends Component {\n  // DEFAULT PROPS\n  // I think the same as linear.\n  static get defaultProps() {\n    return {\n      primaryAxis: d3.svg.axis(),\n      secondaryAxis: d3.svg.axis(),\n      grpNames: {\n        outerClass: 'axis-group',\n        outerId: 'xaxis-group-',\n        ticksId: 'xaxis-ticks-group-',\n        labelsId: 'xaxis-labels-group-',\n        secondaryId: 'xaxis-secondary-group-',\n        headerId: 'xaxis-header-group-',\n      },\n    }\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    const config = this.props.config\n    const primaryXaxis = this.setPrimaryXaxisConfig()\n    this.updatePrimaryXaxis(primaryXaxis)\n    // Now check for any secondary axis:\n    if (config.hasSecondaryAxis) {\n      const secondaryXaxis = this.setSecondaryXaxisConfig()\n      this.updateSecondaryXaxis(secondaryXaxis)\n    }\n    // 'Special' baseline for un-indexed, un-inverted, broken scales\n    const breaks = this.checkBreakScale(config)\n    if (breaks) {\n      this.appendBrokenScaleBaseline()\n    }\n    if (config.header.length > 0) {\n      XaxisHeader.updateXaxisHeader(this, config)\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  // Never gets called, in fact\n  componentDidUpdate() {\n    const config = this.props.config\n    const primaryXaxis = this.setPrimaryXaxisConfig()\n    this.updatePrimaryXaxis(primaryXaxis)\n    if (config.hasSecondaryAxis) {\n      const secondaryXaxis = this.setSecondaryXaxisConfig()\n      this.updateSecondaryXaxis(secondaryXaxis)\n    }\n    const breaks = this.checkBreakScale(config)\n    if (breaks) {\n      this.appendBrokenScaleBaseline()\n    }\n    if (config.header.length > 0) {\n      XaxisHeader.updateXaxisHeader(this, config)\n    }\n  }\n\n  // CHECK BREAK SCALE\n  // Called from componentDidMount/Update\n  // Checks whether broken scale baseline is required\n  checkBreakScale(config) {\n    let breaks = false\n    if (config.breakScale.left || config.breakScale.right) {\n      if (!config.isIndexed && !config.invert) {\n        breaks = true\n      }\n    }\n    return breaks\n  }\n  // CHECK BREAK SCALE ends\n\n  // APPEND BROKEN SCALE BASE LINE\n  // Called from componentDidMount/Update\n  // to draw broken scale baseline along the x-axis\n  appendBrokenScaleBaseline() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    const bounds = config.bounds\n    const originalBounds = config.originalBounds\n    let breakLeft = config.breakScale.left\n    let breakRight = config.breakScale.right\n    // Double scale: if either breaks, both do\n    // But cf xaxis-ordinal-config.getBreakScaleObj\n    // These lines should, I think, be redundant; but inconsistencies\n    // in my handling of 'sides' seem to make them necessary...\n    if (config.isDouble) {\n      if (breakLeft || breakRight) {\n        breakLeft = true\n        breakRight = true\n      }\n    }\n    // Half tickwidth tweak\n    const halfTick = config.tickPrefs.width / 2\n    // Default: chart bounds\n    let startPoint = 0\n    if (breakLeft) {\n      startPoint -= halfTick\n    } else {\n      startPoint -= bounds.x - originalBounds.x\n    }\n    // Align right to last tick (including tick-width), unless inverted\n    let endPoint = bounds.width\n    if (breakRight) {\n      endPoint += halfTick\n    } else {\n      endPoint = originalBounds.width\n    }\n    if (!config.granularity.ticksOn) {\n      // 'Between': extend ends to ticks\n      startPoint -= config.xShift\n      endPoint += config.xShift\n    }\n    const lineData = [\n      { x: startPoint, y: 0 },\n      { x: endPoint, y: 0 },\n    ]\n    // NOTE: duplicates code in yaxis-linear.drawBreakSymbol\n    const lineFunction = d3.svg\n      .line()\n      .x((ddd) => ddd.x)\n      .y((ddd) => ddd.y)\n      .interpolate('linear')\n    const grpId = `${this.props.grpNames.ticksId}${chartIndex}`\n    const blGroup = d3.select(`#${grpId}`)\n    blGroup\n      .append('path')\n      .attr({\n        d: lineFunction(lineData),\n        className: 'broken-scale-baseline',\n        id: `broken-scale-baseline~~~stroke:${config.tickPrefs.baseline.stroke}`,\n      })\n      .style({\n        'stroke-width': config.tickPrefs.baseline.width,\n        stroke: config.tickPrefs.baseline.strokeValue,\n      })\n  }\n  // APPEND BROKEN SCALE BASE LINE ends\n\n  // GET TICK FORMAT\n  getTickFormat(config, isPrimary) {\n    // By default, use what you got (string, number)\n    function defaultFormat(ddd) {\n      return ddd\n    }\n    let tickFormat = defaultFormat\n    // If we're non-time, just return that now:\n    if (config.categoryType === 'string') {\n      return tickFormat\n    }\n    // Still here? Time formats...\n    const tFormats = config.timeFormats\n    const interval = tFormats.interval\n    const yearCount = config.yearCount\n    // First year as 'yyyy';\n    const firstYear = tFormats.firstYear\n    // Format for mmm --> quarters\n    function qFormat(ddd) {\n      const mmm = ddd.getMonth()\n      const qOne = 3\n      const qTwo = 6\n      const qThree = 9\n      let result = 'Q4'\n      if (mmm < qOne) {\n        result = 'Q1'\n      } else if (mmm < qTwo) {\n        result = 'Q2'\n      } else if (mmm < qThree) {\n        result = 'Q3'\n      }\n      return result\n    }\n    // Format for years as 'yyyy' or 'yy'\n    function yFormat(ddd) {\n      let year = ddd.getFullYear()\n      // First year stays yyyy\n      // If less than set number of years, all stay yyyy\n      if (yearCount > tFormats.yyyyThreshold) {\n        // Otherwise, subsequent years go 'yy' --\n        // unless it's a 'round' year...\n        if (year !== firstYear) {\n          if (!(year % tFormats.yyyyOn === 0)) {\n            year = year.toString().substr(2, 2)\n          }\n        }\n      }\n      return year\n    }\n    // For 1000-adjusted dates/numbers:\n    if (config.yearsAdjustedBy > 0) {\n      return tickFormat\n    }\n    // ...unless it's a time axis,\n    // when we impose D3 format from lookup, or qFormat\n    if (config.categoryType === 'time') {\n      // Primary axis (i.e. main row of ticks/labels)\n      if (isPrimary) {\n        if (tFormats.format === '%Y') {\n          // Above a minimum number of years, we get format\n          // if (config.)\n          tickFormat = yFormat\n        } else if (interval === 'quarters') {\n          if (tFormats.format === '%b') {\n            tickFormat = qFormat\n          } else {\n            tickFormat = d3.time.format(tFormats.format)\n          }\n        } else {\n          tickFormat = d3.time.format(tFormats.format)\n        }\n        // There may be no 2ndary axis, so...\n      } else if (typeof tFormats.secondFormat !== 'undefined') {\n        if (tFormats.secondFormat === '%Y') {\n          tickFormat = yFormat\n        } else {\n          tickFormat = d3.time.format(tFormats.secondFormat)\n        }\n      }\n    }\n    return tickFormat\n  }\n  // GET TICK FORMAT ends\n\n  // SET PRIMARY X-AXIS CONFIG\n  setPrimaryXaxisConfig() {\n    const xAxis = this.props.primaryAxis\n    const config = this.props.config\n    // Scale function:\n    const xScale = Object.assign({}, config.scale)\n    // Number of ticks\n    const tickCount = config.tickPrefs.tickCount\n    // Padding between labels and IB is rowheight minus\n    // the calculated height of the text\n    let tickPadding = config.textPrefs.rowheight\n    let size = config.textPrefs.size.primaryOnly\n    if (config.hasSecondaryAxis) {\n      size = config.textPrefs.size.primaryIfSecondary\n    }\n    tickPadding -= size * config.textPrefs.emVal\n    // But I have also to allow for tickLength...\n    // Top or bottom:\n    const orient = config.orient\n    // Tick length settings. Default zero:\n    // FIXME: no -- ticklengths are in the filter\n    // (except for string cats)\n    let tickLength = 0\n    // Across?\n    if (config.tickPrefs.across) {\n      // Because, by default, 'across' ticklengths go up from the bottom,\n      // negative val...\n      tickLength = -config.bounds.height\n    } else {\n      // FIXME: I'll have to revisit tick padding\n      const tlPrefs = config.tickPrefs.lengths\n      // Use default here. Gets overwritten by values in filterArray.\n      // I'm setting just length. If start !== 0, that'll\n      // (hopefully) get fixed post-render\n      tickLength = tlPrefs.default.end\n      // And adjust tickPadding (between tick ends and labels)\n      tickPadding -= tickLength\n      tickLength -= tlPrefs.default.start\n    }\n    if (orient === 'top') {\n      tickLength = -tickLength\n    }\n    // Label format\n    const tickFormat = this.getTickFormat(config, true)\n    xAxis\n      .scale(xScale)\n      .orient(orient)\n      // Gap between labels and ticks\n      .tickPadding(tickPadding)\n      // Number of ticks\n      .ticks(tickCount)\n      // Tick length\n      .tickSize(tickLength)\n      // Number format\n      .tickFormat(tickFormat)\n    return xAxis\n  }\n  // SET PRIMARY X-AXIS CONFIG ends\n\n  // SET SECONDARY X-AXIS CONFIG\n  setSecondaryXaxisConfig() {\n    const xAxis = this.props.secondaryAxis\n    const config = this.props.config\n    // Scale function:\n    const xScale = Object.assign({}, config.scale)\n    // Number of ticks\n    const tickCount = config.tickPrefs.tickCount\n    // Padding between labels and IB is rowheight minus\n    // the calculated height of the text\n    let tickPadding = 0\n    if (config.granularity.primary.showLabel) {\n      tickPadding = config.textPrefs.rowheight\n    }\n    // Top or bottom:\n    const orient = config.orient\n    // Secondary axis has zero tickLength (actually not drawn, anyway)\n    const tickLength = 0\n    // Label format\n    const tickFormat = this.getTickFormat(config, false)\n    //\n    xAxis\n      .scale(xScale)\n      .orient(orient)\n      // Gap between labels and ticks\n      .tickPadding(tickPadding)\n      // Number of ticks\n      .ticks(tickCount)\n      // Tick length\n      .tickSize(tickLength)\n      // Number format\n      .tickFormat(tickFormat)\n    return xAxis\n  }\n  // SET SECONDARY X-AXIS CONFIG ends\n\n  // GET AXIS GROUP TRANSFORM STRING\n  // Called from updateXAxis. Returns string that determines\n  // whether axis is drawn top/bottom\n  getAxisGroupTransformString() {\n    let height = 0\n    if (this.props.config.orient === 'bottom') {\n      height = this.props.config.bounds.height\n    }\n    return `translate(0,${height})`\n  }\n  // GET AXIS GROUP TRANSFORM STRING ends\n\n  // UPDATE PRIMARY X-AXIS\n  updatePrimaryXaxis(xAxis) {\n    const globalThis = this\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    const filterArray = config.primaryAxisFilter\n    // Context: primary ticks group\n    const grpId = `${this.props.grpNames.ticksId}${chartIndex}`\n    const axisGroup = d3.select(`#${grpId}`)\n    // Setting duration locally\n    const duration = 0\n    // Top or bottom?\n    const transform = this.getAxisGroupTransformString()\n    const anchor = config.textPrefs.anchor[config.chartType]\n    // NOTE: this has to be wrong, surely -- must be 2ndary axis...\n    // NOTE: how does this get here, anyway...?\n    const textShift = config.xShift\n    let tickShift = 0\n    if (!config.tickPrefs.ticksOn) {\n      tickShift -= config.xShift\n    }\n    if (config.chartType.includes('thermo')) {\n      tickShift = 0\n    }\n    // Non-default tick lengths\n    // Call axis function on the group\n    axisGroup\n      // Transition to scale top/bottom\n      .attr('transform', transform)\n      // Transition on scale values\n      .transition()\n      .duration(duration)\n      .call(xAxis)\n      .selectAll('line')\n      .style({\n        'stroke-width': config.tickPrefs.width,\n        stroke: config.tickPrefs.strokeValue,\n      })\n      // Ideally I'd separate attributes, but that\n      // fails for some reason\n      .attr({\n        class: 'xaxis-line',\n        y1: 0,\n        y2: (ddd, iii) => {\n          // Default tick length\n          let tick = config.tickPrefs.lengths.default.end\n          // For time series, tick length is calc'd for each point\n          // unless scale is 'across':\n          if (config.tickPrefs.across) {\n            tick = xAxis.tickSize()\n          } else if (typeof filterArray !== 'undefined') {\n            tick = filterArray[iii].tick\n          }\n          return tick\n        },\n        transform: `translate(${tickShift}, 0)`,\n        id: (ddd, iii) => {\n          let tickID = `xaxis-tick-${iii}`\n          // And stroke name:\n          const strokeName = config.tickPrefs.stroke\n          tickID = `${tickID}~~~stroke:${strokeName}`\n          return tickID\n        },\n      })\n    // TEXT\n    axisGroup\n      .selectAll('text')\n      // Set a 'shift' boolean on ALL labels. With unfiltered\n      // 'string' categories, shift is just always on since\n      // no filterArray exists\n      .attr('shift', (ddd, iii) => {\n        let shift = false\n        if (typeof filterArray !== 'undefined') {\n          shift = filterArray[iii].shift\n        }\n        return shift\n      })\n      .attr('duplicate', (ddd) => ddd.duplicate)\n      // And set style:\n      .style({\n        'font-family': config.textPrefs.font,\n        'font-size': () => {\n          let size = config.textPrefs.size.primaryOnly\n          if (config.hasSecondaryAxis) {\n            size = config.textPrefs.size.primaryIfSecondary\n          }\n          return `${size}px`\n        },\n        fill: config.textPrefs.fillValue,\n        'text-anchor': anchor,\n      })\n      .attr('class', 'xaxis-label')\n\n    // Remove domain path\n    axisGroup.selectAll('path').remove()\n    // Set ID + metadata\n    axisGroup\n      .selectAll('text')\n      // NOTE: again, I need 'function' for D3...\n      // Linting errors disable at top\n      .each(function(ddd, iii) {\n        const thisLabel = d3.select(this)\n        // If labels display first letter only,\n        // do it now, before before getting width:\n        if (config.firstLetterOnly) {\n          const lText = thisLabel.text()[0]\n          thisLabel.text(lText)\n        }\n        // Add ID attribute, with element name and metadata\n        thisLabel\n          .attr('id', () => {\n            // NOTE: I need to derive all element base ids from... somewhere\n            let labID = `xaxis-primary-label-${iii}`\n            // fill\n            const fillName = config.textPrefs.fill\n            labID = `${labID}~~~fill:${fillName}`\n            labID = `${labID},justification:${anchor}`\n            labID = `${labID},leading:${config.textPrefs.leading}`\n            return labID\n          })\n          .attr('x', 0)\n          .attr('leading', config.textPrefs.leading)\n      })\n    const tickCount = axisGroup.selectAll('line')[0].length\n\n    // 'Between' ticks have a duplicate to complete the set\n    if (!config.tickPrefs.ticksOn) {\n      const lastTick = axisGroup.selectAll('line').filter((d, iii) => {\n        return iii === tickCount - 1\n      })\n      if (typeof filterArray !== 'undefined') {\n        let tickLen = filterArray[filterArray.length - 1].duplicate\n        if (typeof tickLen === 'undefined') {\n          tickLen = filterArray[tickCount - 1].tick\n        }\n        // Time to complete; then duplicate tick (if any)\n        if (tickLen > 0) {\n          setTimeout(() => {\n            this.duplicateTick(lastTick, config, tickLen)\n          }, 50)\n        }\n      }\n    }\n\n    // Attempts to filter labels never worked for me\n    // So I loop through and delete unwanted labels\n    // (SVG conversion kills undisplayed labels; but\n    // transfers their ID to the tick, with hilarious\n    // consequences)\n    // Surviving labels may need to 'shift' a half-slot left\n    const labels = axisGroup.selectAll('text')\n    labels\n      // NOTE: again, I need 'function' for D3...\n      // Linting errors disable at top\n      .each(function(ddd, iii) {\n        const thisLabel = d3.select(this)\n        if (typeof filterArray !== 'undefined') {\n          const filterProps = filterArray[iii]\n          if (filterProps.label) {\n            // If label required, check shift\n            let labShift = 0\n            if (filterProps.shift) {\n              labShift = textShift\n            }\n            thisLabel.attr('transform', `translate(${0 - labShift}, 0)`)\n          } else {\n            // Delete unwanted labels\n            thisLabel.remove()\n          }\n        }\n      })\n\n    // Sep'20: I realise that I forgot to allow for\n    // text-wrapping on ordinal x-axes.\n    // I think I can fork on whether filterArray is defined...\n    if (typeof filterArray === 'undefined') {\n      // So not dates or numbers\n      const wtConfig = {\n        // Arbitrary width\n        wWidth: 1000,\n        forceTurn: config.forceTurn,\n      }\n      labels.call(\n        TextWrapping.wrapAllTextElements,\n        wtConfig,\n        globalThis,\n        globalThis.xAxisOrdinalLabelTweak\n      )\n    } else {\n      // Negative labels have to be re-aligned to centre of\n      // number (ignore '-')\n      setTimeout(() => {\n        AxisUtils.fixNegativeLabels(axisGroup)\n      }, 50)\n    }\n  }\n  // UPDATE PRIMARY X-AXIS ends\n\n  // XAXIS ORDINAL LABEL TWEAK\n  // Called from updatePrimaryXaxis\n  xAxisOrdinalLabelTweak(globalThis) {\n    const config = globalThis.props.config\n    const chartIndex = config.chartIndex\n    const grpId = `${globalThis.props.grpNames.ticksId}${chartIndex}`\n    const axisGroup = d3.select(`#${grpId}`)\n    const labels = axisGroup.selectAll('text')\n    labels.each(function() {\n      const thisLabel = d3.select(this)\n      const lNode = thisLabel.node()\n      const childCount = lNode.childElementCount\n      if (childCount > 1) {\n        const textY = +thisLabel.attr('y')\n        for (let cNo = 1; cNo < childCount; cNo++) {\n          const span = lNode.children[cNo]\n          const newY = +span.getAttribute('y') + textY\n          span.setAttribute('y', newY)\n        }\n      }\n    })\n  }\n  // XAXIS ORDINAL LABEL TWEAK ends\n\n  // DUPLICATE TICK\n  // Called from updatePrimaryXaxis\n  duplicateTick(theTick, config, tickLen) {\n    const myNode = theTick.node()\n    const lastNode = d3.select(\n      myNode.parentNode.insertBefore(myNode.cloneNode(true), myNode.nextSibling)\n    )\n    // Get ID, incrementing tick no. by 1, if possible\n    let idStr = `xaxis-tick-000~~~stroke:${config.tickPrefs.stroke}`\n    const id = theTick.attr('id')\n    if (typeof id === 'string') {\n      const arrayA = theTick.attr('id').split('~~~')\n      const arrayB = arrayA[0].split('-')\n      const tickNo = +arrayB[2] + 1\n      idStr = idStr.replace('000', tickNo)\n    }\n    lastNode\n      .attr({\n        transform: `translate(${config.xShift}, 0)`,\n        y2: tickLen,\n        id: idStr,\n      })\n      .style({\n        'stroke-width': config.tickPrefs.width,\n        stroke: config.tickPrefs.strokeValue,\n      })\n  }\n  // DUPLICATE TICK ends\n\n  /*\n  // This was Bostock's f'rinstance, which I cannibalised above\n  function clone(selector) {\n     var node = d3.select(selector).node();\n     return d3.select(node.parentNode.insertBefore(node.cloneNode(true),\n  node.nextSibling));\n   }\n\n  Then you can say clone(\"#blah\") to select a clone of #blah. You could\n  made a cloneAll, too\n  */\n\n  // UPDATE SECONDARY X-AXIS\n  // Draws labels for 2ry axis only; lengthening of any 'boundary'\n  // ticks is done in updatePrimaryXaxis\n  updateSecondaryXaxis(secondXaxis) {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    const filterArray = config.secondaryAxisFilter\n    // Context: secondary axis group\n    const grpId = `${this.props.grpNames.secondaryId}${chartIndex}`\n    const axisGroup = d3.select(`#${grpId}`)\n    const duration = config.duration\n    const transform = this.getAxisGroupTransformString()\n    const anchor = config.textPrefs.anchor[config.chartType]\n    const yShift = config.textPrefs.rowheight\n    const xShift = config.xShift\n    axisGroup\n      // Transition to scale top/bottom\n      .attr('transform', transform)\n      // One transition on scale values\n      .transition()\n      // .delay(duration)\n      .duration(duration)\n      .call(secondXaxis)\n      // Tick projection\n      .selectAll('text')\n      // Set the x-shift on ALL elements before filter, since\n      // that resets the element index ('iii') to count filtered\n      // elements only. Remember, though: this is relative to\n      // translated tick-group position\n      .attr('x', (ddd, iii) => {\n        let val = 0\n        if (filterArray[iii].shift) {\n          val -= xShift\n        }\n        return val\n      })\n      // Filter to draw only flagged labels\n      .filter((ddd, iii) => filterArray[iii].label)\n      .style({\n        'font-family': config.textPrefs.font,\n        'font-size': `${config.textPrefs.size.secondary}px`,\n        fill: config.textPrefs.fillValue,\n        'text-anchor': anchor,\n      })\n      .attr({\n        dy: yShift,\n      })\n    // Remove domain path and ticks from 2ry axis\n    axisGroup.selectAll('path').remove()\n    axisGroup.selectAll('line').remove()\n    // (Remember: tick 'emphasis' [i.e. length] is handled by 1ry axis)\n\n    // I can move labels to the primary axis group, but\n    // they lose position. For now, at least, defer to Illy\n    // ID and metadata\n    // NOTE: duplicates code in updatePrimaryXaxis...\n    axisGroup.selectAll('text').each(function(ddd, iii) {\n      const thisLabel = d3.select(this)\n      // Add ID attribute, with element name and metadata\n      thisLabel.attr('id', () => {\n        // NOTE: I need to derive all element base ids from... somewhere\n        let labID = `xaxis-secondary-label-${iii}`\n        // fill\n        const fillName = config.textPrefs.fill\n        labID = `${labID}~~~fill:${fillName}`\n        labID = `${labID},justification:${anchor}`\n        // NOTE: *****\n        // I tried to get width here, but D3 hasn't rendered 2ry\n        // labels yet, so this fails\n        return labID\n      })\n    })\n  }\n  // UPDATE SECONDARY X-AXIS ends\n\n  // RENDER axis group\n  // Just draw the axis group\n  render() {\n    const config = this.props.config\n    const grpNames = this.props.grpNames\n    const cIndex = config.chartIndex\n    const gClass = grpNames.outerClass\n    const grpId = `${grpNames.outerId}${cIndex}`\n    const tickId = `${grpNames.ticksId}${cIndex}`\n    const labId = `${grpNames.labelsId}${cIndex}`\n    const secId = `${grpNames.secondaryId}${cIndex}`\n    const headerId = `${grpNames.headerId}${cIndex}`\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlining the group\n    const gStyle = { fill: 'none' }\n    // Inner groups. I think I have to create three groups\n    // since 2ry axis has a separate binding...\n    // But after 2ry labels have moved, that group is deleted\n    let groupJSX = (\n      <g className={gClass} id={grpId} style={gStyle}>\n        <g id={tickId} style={gStyle} />\n        <g id={labId} style={gStyle} />\n        <g id={headerId} style={gStyle} />\n      </g>\n    )\n    // 2ry axis has the additional group\n    if (config.hasSecondaryAxis) {\n      groupJSX = (\n        <g className={gClass} id={grpId} style={gStyle}>\n          <g id={tickId} style={gStyle} />\n          <g id={labId} style={gStyle} />\n          <g id={headerId} style={gStyle} />\n          <g id={secId} style={gStyle} />\n        </g>\n      )\n    }\n    return groupJSX\n  }\n}\n\nSilverXaxisOrdinal.propTypes = {\n  config: PropTypes.object,\n  primaryAxis: PropTypes.func,\n  secondaryAxis: PropTypes.func,\n  grpNames: PropTypes.object,\n}\n\nexport default SilverXaxisOrdinal\n","// Disable prefer-reflect, for D3 axis.call()\n/* eslint-disable prefer-reflect, no-invalid-this, func-names */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as AxisUtils from '../axis-utilities'\nimport * as XaxisHeader from '../xaxis-header'\n\nclass SilverXaxisOrdinal extends Component {\n  static get defaultProps() {\n    return {\n      grpNames: {\n        outerClass: 'axis-group',\n        outerId: 'xaxis-group-',\n      },\n    }\n  }\n\n  componentDidMount() {\n    this.doStringTests()\n  }\n\n  // Never gets called, in fact:\n  componentDidUpdate() {\n    this.doStringTests()\n  }\n\n  // GET TICK FORMAT\n  // Returns\n  getTickFormat(config, isPrimary) {\n    // By default, use what you got (string, number)\n    function defaultFormat(ddd) {\n      return ddd\n    }\n    let tickFormat = defaultFormat\n    // If we're non-time, just return that now:\n    if (config.categoryType === 'string') {\n      return tickFormat\n    }\n    // Still here? Time formats...\n    const tFormats = config.timeFormats\n    const interval = tFormats.interval\n    const yearCount = config.yearCount\n    // First year as 'yyyy';\n    const firstYear = tFormats.firstYear\n    // Format for mmm --> quarters\n    function qFormat(ddd) {\n      const mmm = ddd.getMonth()\n      const qOne = 3\n      const qTwo = 6\n      const qThree = 9\n      let result = 'Q4'\n      if (mmm < qOne) {\n        result = 'Q1'\n      } else if (mmm < qTwo) {\n        result = 'Q2'\n      } else if (mmm < qThree) {\n        result = 'Q3'\n      }\n      return result\n    }\n    // Format for years as 'yyyy' or 'yy'\n    function yFormat(ddd) {\n      let year = ddd.getFullYear()\n      // First year stays yyyy\n      // If less than set number of years, all stay yyyy\n      if (yearCount > tFormats.yyyyThreshold) {\n        // Otherwise, subsequent years go 'yy' --\n        // unless it's a 'round' year...\n        if (year !== firstYear) {\n          if (!(year % tFormats.yyyyOn === 0)) {\n            year = year.toString().substr(2, 2)\n          }\n        }\n      }\n      return year\n    }\n    // For 1000-adjusted dates/numbers:\n    if (config.yearsAdjustedBy > 0) {\n      return tickFormat\n    }\n    // ...unless it's a time axis,\n    // when we impose D3 format from lookup, or qFormat\n    if (config.categoryType === 'time') {\n      // Primary axis (i.e. main row of ticks/labels)\n      if (isPrimary) {\n        if (tFormats.format === '%Y') {\n          // Above a minimum number of years, we get format\n          // if (config.)\n          tickFormat = yFormat\n        } else if (interval === 'quarters') {\n          if (tFormats.format === '%b') {\n            tickFormat = qFormat\n          } else {\n            tickFormat = d3.time.format(tFormats.format)\n          }\n        } else {\n          tickFormat = d3.time.format(tFormats.format)\n        }\n        // There may be no 2ndary axis, so...\n      } else if (typeof tFormats.secondFormat !== 'undefined') {\n        if (tFormats.secondFormat === '%Y') {\n          tickFormat = yFormat\n        } else {\n          tickFormat = d3.time.format(tFormats.secondFormat)\n        }\n      }\n    }\n    return tickFormat\n  }\n  // GET TICK FORMAT ends\n\n  // GET INDEX DOT TWEAK\n  // Called from calcTestForOnTicks and, in due course,\n  // I think, calcTestForBetweenTicks, to return the\n  // tweak for any index dot\n  // NOTE: as of Jul'19, this doesn't get called. See\n  // calcTestForOnTicks\n  getIndexDotTweak(config) {\n    let idTweak = 0\n    // First, are series indexed?\n    if (config.chartType === 'line' && config.isIndexed) {\n      // Where is first point? For 'on' ticks this is, by\n      // definition, zero. But for 'between', can it be\n      // non-zero...? As of Jul'19, I'm not sure.\n      const idPos = config.scale.range()[0]\n      const idRad = config.indexed.radius\n      idTweak = idRad - idPos\n    }\n    return idTweak\n  }\n\n  // CALC TEST FOR 'ON' TICKS\n  // Puts 1ry/2ry formatted axis strings into an on-page text object and\n  // measures their width.\n  calcTestForOnTicks(config, testText, hasSecondaryAxis) {\n    const forceTurn = config.forceTurn\n    let leftTweak = 0\n    let rightTweak = 0\n    // NOTE: following comm'd-out section is just a stub, laid in, Jul'19,\n    // for possible future use. Currently index dot tweaks are handled in\n    // XaxisBlobs. That seems to work there, but it's\n    // inconsistent and frankly daft. This needs an\n    // eventual FIXME:\n    // I need an array of tweaks for index dot; projecting line-end;\n    // thermo markers; point-line dots; label -- if they exist!\n    // I'll pack them all into this array, and use the max\n    // const leftTweaksArray = [];\n    // Index dot\n    // leftTweaksArray.push(this.getIndexDotTweak(config));\n    //\n    const domain = config.scale.domain()\n    const valA = domain[0]\n    const valZ = domain[domain.length - 1]\n    // Are there primary labels?\n    const { showLabel } = config.granularity.primary\n    if (showLabel) {\n      // Format and plonk\n      // Primary axis:\n      const timeFormat = this.getTickFormat(config, true)\n      let formattedPrimaryValA = timeFormat(valA)\n      let formattedPrimaryValZ = timeFormat(valZ)\n      if (config.firstLetterOnly) {\n        formattedPrimaryValA = formattedPrimaryValA[0]\n        formattedPrimaryValZ = formattedPrimaryValZ[0]\n      }\n      leftTweak = AxisUtils.getAxisLabelWidth(\n        testText,\n        formattedPrimaryValA,\n        forceTurn,\n        true\n      )\n      // I'm not overwhelmingly enthusiastic about next... but I need\n      // some sort of test for the final value being in 'yy' format...\n      if (config.timeFormats.interval === 'years') {\n        if (+formattedPrimaryValZ - formattedPrimaryValA > 1) {\n          // More than 2 years in the series...\n          // So provided this isn't a forced yyyy (century, or whatever)\n          if (+formattedPrimaryValZ % config.timeFormats.yyyyOn !== 0) {\n            formattedPrimaryValZ = formattedPrimaryValZ.toString().substr(2, 2)\n          }\n        }\n      }\n      rightTweak = AxisUtils.getAxisLabelWidth(\n        testText,\n        formattedPrimaryValZ,\n        forceTurn,\n        false\n      )\n    }\n    // Secondary axis\n    let sWidthA = 0\n    let sWidthZ = 0\n    if (hasSecondaryAxis) {\n      const timeFormat = this.getTickFormat(config, false)\n      const formattedSecValA = timeFormat(valA)\n      const formattedSecValZ = timeFormat(valZ)\n      // If 2ry axis has a label on the first point:\n      const fArray = config.secondaryAxisFilter\n      if (fArray[0].label) {\n        sWidthA = AxisUtils.getAxisLabelWidth(\n          testText,\n          formattedSecValA,\n          forceTurn,\n          true\n        )\n        if (sWidthA > leftTweak) {\n          leftTweak = sWidthA\n        }\n      }\n      // Label on last point?\n      if (fArray[fArray.length - 1].label) {\n        sWidthZ = AxisUtils.getAxisLabelWidth(\n          testText,\n          formattedSecValZ,\n          forceTurn,\n          false\n        )\n        if (sWidthZ > rightTweak) {\n          rightTweak = sWidthZ\n        }\n      }\n    }\n    // Originally halved string width, but that's now\n    // done by AxisUtils.getAxisLabelWidth\n    // Now left checks against projection of thermometer marker, if any\n    if (config.thermometer) {\n      leftTweak = Math.max(leftTweak, config.thermoMargin)\n    }\n    return {\n      left: leftTweak,\n      right: rightTweak,\n      leftTickFirstElement: false,\n      rightTickLastElement: false,\n    }\n  }\n  // CALC TEST FOR 'ON' TICKS ends\n\n  // GET FIRST AND LAST TICK GAPS\n  // Called from calcTestForBetweenTicks. Returns an object with\n  // indices of the 2nd and last-but-one ticks in the primary or\n  // secondary series filter\n  getFirstAndLastTickGaps(myFilter, granularity) {\n    const gaps = {}\n    // Maybe there are cleverer ways of doing this... but I want the\n    // indices of the 2nd and last-but-one ticks, to get the 'width'\n    // of the first and last 'slots' between ticks\n    for (let iii = 1; iii < myFilter.length; iii++) {\n      if (myFilter[iii].tick) {\n        gaps.leftPts = iii\n        gaps.leftVal = iii * granularity.dataPointWidth\n        break\n      }\n    }\n    for (let iii = myFilter.length - 2; iii >= 0; iii--) {\n      if (myFilter[iii].tick) {\n        gaps.rightPts = myFilter.length - 1 - iii\n        gaps.rightVal = gaps.rightPts * granularity.dataPointWidth\n        break\n      }\n    }\n    return gaps\n  }\n  // GET FIRST AND LAST TICK GAPS ends\n\n  // CALC TEST FOR 'BETWEEN' TICKS\n  // Called from doStringTests\n  calcTestForBetweenTicks(\n    config,\n    granularity,\n    tickWidth,\n    testText,\n    hasSecondaryAxis\n  ) {\n    // Assuming that the granularity fcn has done its stuff,\n    // Distance that first/last datapoints are inside axis\n    // This is default if first tick 'slot' is wider than first label\n    let leftTweak = granularity.dataPointWidth / 2\n    let rightTweak = granularity.dataPointWidth / 2\n    // Flag if ticks are left/rightmost objects on axis\n    // (i.e. labels don't project)\n    let leftTickFirstElement = true\n    let rightTickLastElement = true\n    // May'21: trap 'unlabelled' intervals\n    if (!granularity.interval.includes('unlabelled')) {\n      // Get half string-widths, left and right:\n      // NOTE: may need to revisit if/when calcTestForOnTicks changes...\n      const strW = this.calcTestForOnTicks(config, testText, hasSecondaryAxis)\n      // stringWidths is an obj with props left and right, each half a string's width\n      const gaps = this.getFirstAndLastTickGaps(\n        config.primaryAxisFilter,\n        granularity\n      )\n      // gaps is an object with left and right gap point-counts and widths\n      // NOTE: don't forget 2ry axis!!!\n      // If the first label is wider than its tick-slot...\n      if (strW.left > gaps.leftVal / 2) {\n        // I adjust by the difference between string and slot widths, plus half the\n        // distance from the first tick to the first data point\n        // Seems to work...\n        leftTweak =\n          strW.left - gaps.leftVal / 2 + granularity.dataPointWidth / 2\n        leftTickFirstElement = false\n      }\n      if (strW.right > gaps.rightVal / 2) {\n        rightTweak =\n          strW.right - gaps.rightVal / 2 + granularity.dataPointWidth / 2\n        rightTickLastElement = false\n      }\n    }\n    // But is there a better way of doing all this?\n    return {\n      left: leftTweak,\n      right: rightTweak,\n      leftTickFirstElement,\n      rightTickLastElement,\n    }\n  }\n  // CALC TEST FOR 'BETWEEN' TICKS ends\n\n  // GET EXTRA LINE COUNT\n  // Called from doStringTests. Returns the max number of forced lines\n  // in category strings.\n  // NOTE: this somewhat duplicates xaxis-ordinal.getLongestTurnedStringLength\n  getExtraLineCount(config) {\n    const strArray = config.categories\n    const forceTurn = config.forceTurn\n    let extra = 0\n    for (let sNo = 0; sNo < strArray.length; sNo++) {\n      const len = strArray[sNo].split(forceTurn).length - 1\n      extra = Math.max(extra, len)\n    }\n    return extra\n  }\n  // GET EXTRA LINE COUNT ends\n\n  // ADJUST BOUNDS WIDTH\n  // Called from doStringTests\n  adjustBoundsWidth(bounds, testText, config) {\n    const granularity = Object.assign({}, config.granularity)\n    // Is there a secondary axis?\n    const hasSecondaryAxis = typeof granularity.secondary !== 'undefined'\n    // Object returned\n    let tweaks = {}\n    // Are ticks 'on' or 'between'...?\n\n    if (granularity.ticksOn) {\n      // 'ON' ticks\n      tweaks = this.calcTestForOnTicks(config, testText, hasSecondaryAxis)\n    } else {\n      // 'BETWEEN' ticks\n      const tickW = config.tickPrefs.width\n      tweaks = this.calcTestForBetweenTicks(\n        config,\n        granularity,\n        tickW,\n        testText,\n        hasSecondaryAxis\n      )\n    }\n    // On/between ticks rejoin here...\n    let leftTweak = tweaks.left\n    let rightTweak = tweaks.right\n\n    // Consider clusterwidth, if this is a column chart...\n    // OK, so this is headache-inducing. The 'tweak' is\n    // a distance by which I have to move the inner box in,\n    // left and right, to enclose the columns.\n    // Axis points will come midway along a cluster.\n    // For simplicity, I'll just talk about the left.\n    // If halfclusterwidth > half the width of the first label,\n    // I want to leave left edge of the IB where it is.\n    // But if the first label is wider than a cluster, I need\n    // to bring the IB in by the difference between them.\n    //\n    // I also need to adjust for width of v-thermo markers, so\n    // I'll add the halfClusterWidth property there, too\n    //\n    // Get max of half label- and cluster-width\n    const halfCluster = config.halfClusterWidth\n    if (typeof halfCluster !== 'undefined') {\n      leftTweak = Math.max(leftTweak, halfCluster)\n      rightTweak = Math.max(rightTweak, halfCluster)\n    }\n    // Update bounds\n    bounds.x += leftTweak\n    bounds.width -= leftTweak + rightTweak\n\n    // There's another tweak, of half tick strokewidth,\n    // if 1st or last tick lies exactly on the chart edge\n    if (tweaks.leftTickFirstElement) {\n      bounds.x += config.tickPrefs.width / 2\n      bounds.width -= config.tickPrefs.width\n    }\n    if (tweaks.rightTickLastElement) {\n      bounds.width -= config.tickPrefs.width / 2\n    }\n    // I need half the width of a data-slot, before the bounds change\n    // for the x-axis. This allows me to move ticks\n    // into the correct position, between labels\n    bounds.halfDataPointWidth = granularity.dataPointWidth / 2\n  }\n  // ADJUST BOUNDS WIDTH ends\n\n  // ADJUST BOUNDS HEIGHT\n  // Called from doStringTests\n  adjustBoundsHeight(bounds, config) {\n    const granularity = Object.assign({}, config.granularity)\n    // Is there a secondary axis?\n    const hasSecondaryAxis = typeof granularity.secondary !== 'undefined'\n    // HEIGHT adjustment is based on number of 'lines' of labels.\n    // FIXME: current assumption is that the scale is at bottom of chart\n    // This'll need a fix... eventually\n    let tHeight = 0\n    if (config.categoryType === 'string') {\n      // String axis: check for turned strings\n      // Initially assume one line:\n      tHeight = config.textPrefs.rowheight\n      // Now adjust by leading\n      const leading = config.textPrefs.leading\n      const extraLines = this.getExtraLineCount(config)\n      tHeight += extraLines * leading\n    } else {\n      // Time-series: check for primary and 2ry axes\n      let labelLineCount = 0\n      if (config.granularity.primary.showLabel) {\n        labelLineCount = 1\n      }\n      if (hasSecondaryAxis) {\n        labelLineCount++\n      }\n      tHeight = labelLineCount * config.textPrefs.rowheight\n    }\n    // Either way, adjust height. And a reminder, again, that I'm\n    // assuming scale is at bottom...\n    bounds.height -= tHeight\n    // Allow for any axis header (initially just scatter charts)\n    let headerMargin = 0\n    if (config.header.length > 0) {\n      headerMargin = XaxisHeader.getXaxisHeaderMargin(config)\n    }\n    const isTop = config.orient === 'top'\n    if (isTop) {\n      bounds.y += headerMargin\n    }\n    bounds.height -= headerMargin\n  }\n  // ADJUST BOUNDS HEIGHT ends\n\n  // DO STRING TESTS\n  // Drop text on the wrapper to determine what\n  // extra margins we have to allow for.\n  // Xaxis ordinal tests--\n  //  - Width of first and last axis label\n  //    But there are all sorts of issues regarding WHAT that last label is...\n  //    Should I draw the entire axis with all labels and then see how far it\n  //    projects left and right?\n  //    NOTE: and what about any secondary axis...?\n  //    NOTE: so far, I'm only testing primary axis...\n  doStringTests() {\n    const config = this.props.config\n    // Append a text object to the main axis group\n    const grpId = `${this.props.grpNames.outerId}${config.chartIndex}`\n    const testText = AxisUtils.appendTestText(config, grpId)\n    const bounds = config.bounds\n    // WIDTH adjustments to bounds\n    this.adjustBoundsWidth(bounds, testText, config)\n    // HEIGHT\n    this.adjustBoundsHeight(bounds, config)\n    // Clear the text object...\n    testText.remove()\n    // And fire off the callback. Granularity has been a bit round the houses:\n    //    Set in state as an empty object in a chart component. Populated in\n    //    XaxisOrdinal.configXaxis. Passed here and used, then sent directly\n    //    back up to chart component. A bit unsatisfactory...\n    const result = {\n      bounds,\n      granularity: config.granularity,\n    }\n    this.props.onReturnRevisedInnerBox(result)\n  }\n  // DO STRING TESTS ends\n\n  // RENDER axis group\n  // Just draw the axis group\n  render() {\n    const config = this.props.config\n    const grpNames = this.props.grpNames\n    const cIndex = config.chartIndex\n    const gClass = grpNames.outerClass\n    const grpId = `${grpNames.outerId}${cIndex}`\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlining the group\n    const gStyle = { fill: 'none' }\n    return <g className={gClass} id={grpId} style={gStyle} />\n  }\n}\n\nSilverXaxisOrdinal.propTypes = {\n  config: PropTypes.object,\n  grpNames: PropTypes.object,\n  // Callback after test on stringwidth(s)\n  onReturnRevisedInnerBox: PropTypes.func,\n}\n\nexport default SilverXaxisOrdinal\n","// Disable prefer-reflect, for D3 axis.call()\n/* eslint-disable prefer-reflect,  no-invalid-this,  func-names */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities module\nimport * as AxisUtilities from '../axis-utilities'\nimport * as BrokenScale from '../broken-scale'\nimport * as TextWrapping from '../../chartside-utilities/text-wrapping'\n\nclass SilverYaxisLinear extends Component {\n  // DEFAULT PROPS\n  static get defaultProps() {\n    return {\n      axis: d3.svg.axis(),\n      grpNames: {\n        outerClass: 'axis-group',\n        outerId: 'yaxis-group-',\n        ticksId: 'yaxis-ticks-group-',\n        labelsId: 'yaxis-labels-group-',\n      },\n    }\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    const config = this.props.config\n    if (config.enabled) {\n      const yAxis = this.setYaxisConfig()\n      if (config.isDouble || config.chartType.includes('scatter')) {\n        this.updateYaxisHeader()\n      }\n      this.updateYaxis(yAxis)\n      this.drawBreakSymbol()\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    const config = this.props.config\n    if (config.enabled) {\n      const yAxis = this.setYaxisConfig()\n      if (config.isDouble || config.chartType.includes('scatter')) {\n        this.updateYaxisHeader()\n      }\n      this.updateYaxis(yAxis)\n      this.drawBreakSymbol()\n    }\n  }\n\n  // GET ACTUAL DOUBLE SCALE HEADERS EXTRA LEADING\n  // Called from afterLinearYaxisHeaderWrap to count actual lines\n  // (allows for auto-wrap)\n  // Returns adjustment to top and height of IB\n  getActualDoubleScaleHeadersExtraLeading(config, headArray) {\n    const leading = config.textPrefs.leading\n    let extra = 0\n    for (let hNo = 0; hNo < headArray.length; hNo++) {\n      const head = headArray[hNo]\n      const tweak = TextWrapping.getTextAndTspansMove(head, leading)\n      extra = Math.max(extra, tweak)\n    }\n    return extra\n  }\n  // GET ACTUAL DOUBLE SCALE HEADERS EXTRA LEADING ends\n\n  // SET Y-AXIS CONFIG\n  setYaxisConfig() {\n    const yAxis = this.props.axis\n    const config = this.props.config\n    const tPrefs = config.tickPrefs\n    // Scale function:\n    const yScale = config.scale\n    // 'Hard'tick values:\n    const tickValues = tPrefs.tickValues\n    // Left or right?\n    const orient = config.orient\n    // NOTE: there are a lot of inferential style assumptions here,\n    // based on the current Revamp spec for positioning labels and ticks\n    // Padding between labels and tick-ends: hard-set\n    let tickPadding = 0\n    // Tick length\n    const tlPrefs = tPrefs.lengths\n    let tickLength = 0\n    if (tPrefs.across) {\n      // NOTE: I'm not quite sure why, but it works... for now:\n      tickLength = config.originalBounds.width\n    } else {\n      // Use default here. May be overwritten in post-render\n      // I'm setting just length. If start !== 0, that'll\n      // (hopefully) get fixed post-render\n      // NOTE: I don't understand this. And, btw, if style !== 'bar'\n      // tlPrefs are undefined\n      // NOTE: check this again with bars... which should yield zero...\n      tickLength = tlPrefs.default.end\n      // And adjust tickPadding (between tick ends and labels)\n      tickPadding -= tickLength\n      tickLength -= tlPrefs.default.start\n    }\n    // NOTE: why does this have to be negative?\n    // Anyway, apparently it does...\n    tickLength = -tickLength\n    // Number format\n    const textFormat = config.textPrefs.textFormat\n    yAxis\n      .scale(yScale)\n      .orient(orient)\n      // Position of labels above tick ends, at top\n      .tickPadding(tickPadding)\n      .tickValues(tickValues)\n      // Tick length\n      .tickSize(tickLength)\n      // Number format\n      .tickFormat((ddd) =>\n        AxisUtilities.getLinearAxisTickFormat(ddd, textFormat)\n      )\n    return yAxis\n  }\n  // SET Y-AXIS CONFIG ends\n\n  // GET AXIS GROUP TRANSFORMATION\n  // Called from updateYAxis. Returns string to move the axis to left\n  // or right side of chart.\n  // OK: this is a bit of a fucker. This axis is drawn after the\n  // chart-type component's mainDthreeGroupTransition moved everything\n  // to a coordinate space whose limits are those of the chart and its scales.\n  // But this actual axis lies outside those bounds, so I have to 'revert'\n  // to the original coordinate space where 0,0 is outerbox top left.\n  getAxisGroupTransformation() {\n    // NOTE: is there a quicker or better route back to\n    // the original bounds?\n    // Default for left-aligned...\n    let axisMove = this.props.config.originalBounds.x\n    axisMove -= this.props.config.bounds.x\n    if (this.props.config.orient === 'right') {\n      axisMove += this.props.config.originalBounds.width\n    }\n    return axisMove\n  }\n  // GET AXIS GROUP TRANSFORMATION ends\n\n  // DRAW BREAK SYMBOL\n  // NOTE: broken scale baseline is drawn by XaxisOrdinal.appendBrokenScaleBaseline\n  drawBreakSymbol() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    const side = config.side\n    const breakObj = config.breakScaleObj\n    if (!breakObj.break) {\n      return\n    }\n    // Scale breaks. But do we draw a symbol?\n    const drawSymbol = BrokenScale.checkForBrokenScaleSymbol(\n      config.chartType,\n      breakObj\n    )\n    if (!drawSymbol) {\n      return\n    }\n    // Symbol is drawn halfway down the area of padding\n    // and aligned l/r to scale...\n    // Context: ticks group\n    const grpId = `${this.props.grpNames.outerId}${chartIndex}-${side}`\n    const bsGroup = d3.select(`#${grpId}`)\n    //\n    // R/h symbol moves across\n    const axisMove = this.getAxisGroupTransformation()\n    let xPos = config.textPrefs.x + axisMove\n    // Allow for width of symbol\n    if (side === 'right') {\n      xPos -= breakObj.origin\n    }\n    const yPos = config.bounds.height - breakObj.padding / 2\n    // Create array of coordinates\n    const lineData = breakObj.points.map((onePt) => {\n      const ptObj = {\n        x: xPos + onePt.x,\n        y: yPos + onePt.y,\n      }\n      return ptObj\n    })\n    // NOTE: this is all a straight cannibalisation\n    // and dup'd elsewhere\n    const lineFunction = d3.svg\n      .line()\n      .x((ddd) => ddd.x)\n      .y((ddd) => ddd.y)\n      .interpolate('linear')\n    bsGroup\n      .append('path')\n      .attr({\n        d: lineFunction(lineData),\n        id: `broken-scale-symbol~~~stroke:${breakObj.strokeName}`,\n      })\n      .style({\n        stroke: breakObj.strokeValue,\n        'stroke-width': breakObj.width,\n        'stroke-linejoin': breakObj.linejoin,\n        // 'stroke-linejoin': 'round',\n        fill: 'none',\n      })\n  }\n  // DRAW BREAK SYMBOL ends\n\n  // UPDATE Y-AXIS HEADER\n  updateYaxisHeader() {\n    const yaxisComponentThis = this\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    const side = config.side\n    // Context: ticks group\n    const headId = `${this.props.grpNames.outerId}${chartIndex}-${side}`\n    const headGroup = d3.select(`#${headId}`)\n    const headString = config.headers[side]\n    const hPrefs = config.textPrefs.header\n    // Object to pass to wrapText\n    // I'm setting wWidth -- the width to which the strings will autowrap --\n    // to an implausibly huge value, to ensure that no autowrapping occurs.\n    const wtConfig = {\n      wWidth: 1000,\n      forceTurn: config.forceTurn,\n    }\n    let anchor = 'start'\n    let xPos = config.originalBounds.x - config.bounds.x\n    if (side === 'right') {\n      anchor = 'end'\n      xPos += config.originalBounds.width\n    }\n\n    // Headers move up by the same amount that the IB-top\n    // was moved down...\n    const yPos = 0 - config.textPrefs.headerMargin\n    const headArray = [{ content: headString }]\n    const boundHead = headGroup.selectAll('text').data(headArray)\n    boundHead.enter().append('text')\n    boundHead\n      .attr({\n        class: () => {\n          // Double or single scale header?\n          let name = 'yaxis-header'\n          if (config.isDouble) {\n            name = 'doublescale-header'\n          }\n          return `${name}-${chartIndex}-${side}`\n        },\n        x: xPos,\n        y: yPos,\n        id: (ddd, iii) => {\n          let tID = `doublescale-header-${iii}`\n          tID = `${tID}~~~fill:${config.textPrefs.fill}`\n          tID = `${tID}, justification:${anchor}`\n          tID = `${tID}, leading:${hPrefs.leading}`\n          return tID\n        },\n        leading: hPrefs.leading,\n      })\n      .style({\n        fill: config.textPrefs.fillValue,\n        'font-family': hPrefs.font,\n        'font-size': `${hPrefs.size}px`,\n        'text-anchor': anchor,\n      })\n      .text((ddd) => ddd.content)\n\n    // Text wrapping\n    // (to debug text wrapping, add a 5th param)\n    boundHead.call(\n      TextWrapping.wrapAllTextElements,\n      wtConfig,\n      yaxisComponentThis,\n      yaxisComponentThis.afterLinearYaxisHeaderWrap\n    )\n\n    boundHead.exit().remove()\n  }\n  // UPDATE Y-AXIS HEADER ends\n\n  // MOVE AXIS HEADER\n  // Called from tweakScatterYaxisHeader and tweakDoubleScaleYaxisHeaders\n  // Moves axis header up to allow for wrapping. Args are\n  // the header object (with any tspan children); and\n\n  moveAxisHead(header, move) {\n    // First move the text element:\n    const myHead = header\n    const hPos = +myHead.getAttribute('y') - move\n    myHead.setAttribute('y', hPos)\n    // Then all the child tspans\n    const childCount = myHead.children.length\n    for (let cNo = 0; cNo < childCount; cNo++) {\n      const child = myHead.children[cNo]\n      const yPos = child.getAttribute('y')\n      // 'y' is null if tspan isn't on a new line\n      if (yPos !== null) {\n        const cPos = +yPos - move\n        child.setAttribute('y', cPos)\n      }\n    }\n  }\n  // MOVE AXIS HEADER ends\n\n  // TWEAK SCATTER Y-AXIS HEADER\n  // Called from afterLinearYaxisHeaderWrap to tweak\n  // position of single y-axis header\n  tweakScatterYaxisHeader(originalThis) {\n    const config = originalThis.props.config\n    const leading = config.textPrefs.leading\n    const headName = `.yaxis-header-${config.chartIndex}-${config.side}`\n    const head = d3.select(headName)\n    // First I need to know how for to move the header\n    const tweak = -TextWrapping.getTextAndTspansMove(head, leading)\n    // Then move it\n    setTimeout(() => {\n      TextWrapping.moveTextAndTspans(head, tweak)\n    }, 50)\n  }\n  // TWEAK SCATTER Y-AXIS HEADER ends\n\n  // TWEAK DOUBLE SCALE AXIS HEADERS\n  // Called from afterLinearYaxisHeaderWrap\n  // Finds both double-scale headers, counts lines,\n  // and adjusts position of both to align\n  tweakDoubleScaleYaxisHeaders(originalThis) {\n    const config = originalThis.props.config\n    // This only proceeds when BOTH sides have been drawn\n    if (config.side === 'right') {\n      const allHeaders = []\n      const leftName = `.doublescale-header-${config.chartIndex}-left`\n      allHeaders.push(d3.select(leftName))\n      const rightName = `.doublescale-header-${config.chartIndex}-right`\n      allHeaders.push(d3.select(rightName))\n      const tweak = -originalThis.getActualDoubleScaleHeadersExtraLeading(\n        config,\n        allHeaders\n      )\n      // Move the headers up when we've had time to breathe\n      // NOTE: this may change if I introduce autowrapping for axis headers\n      for (let iii = 0; iii < allHeaders.length; iii++) {\n        const thisHead = allHeaders[iii]\n        setTimeout(() => {\n          TextWrapping.moveTextAndTspans(thisHead, tweak)\n        }, 50)\n      }\n    }\n  }\n  // TWEAK DOUBLE SCALE AXIS HEADERS ends\n\n  // AFTER LINEAR Y-AXIS HEADER WRAP\n  // Callback from wrapText (ignores 2nd param).\n  // When axis headers have been drawn, calls separate\n  // sub-handlers to tweak double-scale and scatter axis headers\n  afterLinearYaxisHeaderWrap(originalThis) {\n    const config = originalThis.props.config\n    // I could be dealing with 2 double-scale headers,\n    // or a single axis header for a scatter chart\n    if (config.isDouble) {\n      originalThis.tweakDoubleScaleYaxisHeaders(originalThis)\n    } else {\n      originalThis.tweakScatterYaxisHeader(originalThis)\n    }\n  }\n  // AFTER LINEAR Y-AXIS HEADER WRAP ends\n\n  // UPDATE Y-AXIS\n  updateYaxis(yAxis) {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    const duration = config.duration\n    const side = config.side\n    const drawTicks = config.drawTicks\n    // Context: ticks group\n    const grpId = `${this.props.grpNames.ticksId}${chartIndex}-${side}`\n    const axisGroup = d3.select(`#${grpId}`)\n    const axisMove = this.getAxisGroupTransformation()\n    const transform = `translate(${axisMove}, 0)`\n    // Highlight zero flag\n    const highlightZero = config.mixedVals\n    // If scale inverts, last tick is baseline\n    let baseNumber = 0\n    if (config.invert) {\n      baseNumber = config.tickPrefs.tickValues.length - 1\n    }\n    axisGroup\n      // And another transition on scale top/bottom\n      // .transition().duration(duration)\n      .attr('transform', transform)\n      // One transition on scale values\n      .transition()\n      .duration(duration)\n      .call(yAxis)\n      .selectAll('line')\n      // Allow separate baseline style\n      .style({\n        'stroke-width': (ddd, iii) => {\n          let sWid = config.tickPrefs.width\n          if (iii === baseNumber) {\n            sWid = config.tickPrefs.baseline.width\n          }\n          // But...\n          if (ddd === 0 && highlightZero) {\n            sWid = config.tickPrefs.zero.width\n          }\n          return sWid\n        },\n        stroke: (ddd, iii) => {\n          let sCol = config.tickPrefs.strokeValue\n          // Baseline unless broken scale\n          if (iii === baseNumber) {\n            if (!config.breakScaleObj.break) {\n              sCol = config.tickPrefs.baseline.strokeValue\n            }\n          }\n          // If scale is indexed, tick behaves like mixed zero\n          if (config.indexed.indexFlag) {\n            if (ddd === config.indexed.value) {\n              sCol = config.tickPrefs.zero.mixedValue\n            }\n          }\n          // But...\n          if (ddd === 0 && highlightZero) {\n            // I think I can go to mixedValue (there's also\n            // a zero.simpleValue, but I think that's redundant...)\n            sCol = config.tickPrefs.zero.mixedValue\n          }\n          return sCol\n        },\n      })\n    // Reselect the labels to apply text-anchor\n    // Anchor by chart type and axis orientation:\n    const anchor = config.textPrefs.anchor[config.chartType][config.orient]\n    axisGroup\n      .selectAll('text')\n      .transition()\n      .delay(0)\n      .duration(duration)\n      .attr({\n        x: config.textPrefs.x,\n        y: () => {\n          // Default y-position centre-aligns text on tick\n          // So I need (text-height / 2) + value set in DPs.\n          // NOTE: because D3 doesn't center *exactly* vertically,\n          // this calculation is out by about 0.25pts,\n          // compensated for in DPs.\n          let yPos = 0\n          yPos -= config.textPrefs.size * (config.textPrefs.emVal / 2)\n          yPos -= config.textPrefs.y\n          return yPos\n        },\n      })\n      .style({\n        'font-family': config.textPrefs.font,\n        'font-size': `${config.textPrefs.size}px`,\n        fill: config.textPrefs.fillValue,\n        'text-anchor': anchor,\n      })\n\n    // Remove domain path\n    axisGroup.selectAll('path').remove()\n\n    // Label IDs with metadata\n    axisGroup\n      .selectAll('text')\n      // NOTE: again, 'function' for D3...\n      // Linting errors disable at top\n      .each(function(ddd, iii) {\n        const thisLabel = d3.select(this)\n        // ID: name and metadata\n        thisLabel.attr('id', () => {\n          // NOTE: I need to derive all element base ids from... somewhere\n          let labID = `yaxis-label-${iii}`\n          // fill\n          const fillName = config.textPrefs.fill\n          labID = `${labID}~~~fill:${fillName}`\n          labID = `${labID},justification:${anchor}`\n          // Width after a timeout, below\n          return labID\n        })\n      })\n\n    const allTicks = axisGroup.selectAll('line')\n    if (drawTicks) {\n      // Tick IDs with metadata\n      // axisGroup.selectAll('line')\n      allTicks\n        // NOTE: again, 'function' for D3...\n        // Linting errors disable at top\n        .each(function(ddd, iii) {\n          const thisTick = d3.select(this)\n          thisTick.attr('id', () => {\n            let tickID = `yaxis-tick-${iii}`\n            // And stroke name\n            // (check baseline / broken scale, tho):\n            let strokeName = config.tickPrefs.stroke\n            if (iii === baseNumber && !config.breakScaleObj.break) {\n              // Baseline stroke -- unless scale breaks\n              strokeName = config.tickPrefs.baseline.stroke\n            }\n            // But...\n            if (ddd === 0 && highlightZero) {\n              strokeName = config.tickPrefs.zero.mixed\n            }\n            if (config.indexed.indexFlag) {\n              if (ddd === config.indexed.value) {\n                strokeName = config.tickPrefs.zero.mixed\n              }\n            }\n            tickID = `${tickID}~~~stroke:${strokeName}`\n            return tickID\n          })\n        })\n    } else {\n      // But if it's a double scale, we delete the ticks anyway\n      allTicks.remove()\n    }\n\n    // If it's a column or stacked-line chart I want an additional 'in-front' baseline\n    if (config.additionalBaseline) {\n      const start = axisMove\n      // NOTE: because I'm moving from D3s axis-orientation space\n      // to a 'higher' space, I need to reset...\n      let end = start - yAxis.tickSize()\n      if (config.orient === 'right') {\n        end = start + yAxis.tickSize()\n      }\n      const points = {\n        start,\n        end,\n        scaleVal: config.scale(0),\n      }\n      AxisUtilities.appendInFrontTick(config, true, points)\n    }\n  }\n  // UPDATE Y-AXIS ends\n\n  // RENDER axis group\n  render() {\n    const config = this.props.config\n    const side = config.side\n    const grpNames = this.props.grpNames\n    const cIndex = config.chartIndex\n    const gClass = grpNames.outerClass\n    const grpId = `${grpNames.outerId}${cIndex}-${side}`\n    const tickId = `${grpNames.ticksId}${cIndex}-${side}`\n    const labId = `${grpNames.labelsId}${cIndex}-${side}`\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlineing the group\n    const gStyle = { fill: 'none' }\n    return (\n      <g className={gClass} id={grpId} style={gStyle}>\n        <g id={tickId} style={gStyle} />\n        <g id={labId} style={gStyle} />\n      </g>\n    )\n  }\n}\n\nSilverYaxisLinear.propTypes = {\n  config: PropTypes.object,\n  // Not passed in; declared here as default prop\n  axis: PropTypes.func,\n  grpNames: PropTypes.object,\n}\n\nexport default SilverYaxisLinear\n","// Disable prefer-reflect, for D3 axis.call()\n/* eslint-disable prefer-reflect, no-invalid-this,\n    no-unused-vars, func-names */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities module\nimport * as AxisUtilities from '../axis-utilities'\n\nclass SilverYaxisLinearTest extends Component {\n  // DEFAULT PROPS\n  static get defaultProps() {\n    return {}\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    const config = this.props.config\n    if (config.enabled) {\n      this.doStringTests()\n    } else {\n      this.doNothing()\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    const config = this.props.config\n    if (config.enabled) {\n      this.doStringTests()\n    } else {\n      this.doNothing()\n    }\n  }\n\n  // DO NOTHING\n  // If 'side' doesn't exist, simply returns\n  // existing IB\n  doNothing() {\n    this.props.onReturnRevisedInnerBox(this.props.config.bounds)\n  }\n\n  // DO STRING TESTS\n  // Drop text on the wrapper to see\n  // what extra margins we have to allow for.\n  // Yaxis tests--\n  //  Width of last axis label\n  //    NOTE: assumes that axis will be labelled right...\n  //    This will have to change eventually and allow for l/r axes... or both!\n  // NOTE: modded Feb'18 for double scale header margin\n  doStringTests() {\n    const config = this.props.config\n    const bounds = config.bounds\n    const side = config.side\n    // Context: just use the existing background group\n    const axisGroup = d3.select('#background-group')\n    // Text object\n    const testText = axisGroup\n      .append('text')\n      .attr('id', 'testText')\n      .style({\n        'font-family': config.textPrefs.font,\n        'font-size': `${config.textPrefs.size}px`,\n        fill: config.textPrefs.fillValue,\n      })\n    // I want width of longest string on the scale...\n    // ...which should, in theory, be min- or maxValue...\n    // Format:\n    const maxStr = AxisUtilities.getLinearAxisTickFormat(\n      config.maxVal,\n      config.textPrefs.textFormat\n    )\n    const minStr = AxisUtilities.getLinearAxisTickFormat(\n      config.minVal,\n      config.textPrefs.tickFormat\n    )\n    // Slap'em both down and get the longest\n    testText.text(maxStr)\n    const maxWidth = testText.node().getComputedTextLength()\n    testText.text(minStr)\n    const minWidth = testText.node().getComputedTextLength()\n    // Use longer string-width, and append inner margin:\n    const tWidth = Math.max(maxWidth, minWidth) + config.innerMargin\n    // Reduce width and, if left-aligned, move over:\n    bounds.width -= tWidth\n    if (config.orient === 'left') {\n      bounds.x += tWidth\n    }\n\n    // apply the margin defined in property 'noScaleInnerMargin'.\n    // It's 0 by default in default_preferences but it can be overriden by any specific preset.\n    // This margin is applied on the left side of the chart, so it modifies two values:\n    // 1. the starting position of the inner box\n    // 2. the final width of the inner box, which is shrinked due to this margin\n    if (config.noScaleInnerMargin > 0) {\n      bounds.x += config.noScaleInnerMargin\n      bounds.width -= config.noScaleInnerMargin\n    }\n\n    // All done: clear the text object...\n    testText.remove()\n    // Adjust for double scale...\n    // As of March'19, also checking for hard '<br>' returns...\n    let tweak = config.textPrefs.headerMargin\n    if (config.isDouble || config.isScatter) {\n      const extraTweak = this.getDsHeadLeadingFromHardReturns(config)\n      tweak += extraTweak\n      if (config.isDouble) {\n        // Divide by 2 because this is done twice, once for each side!\n        tweak /= 2\n      }\n      bounds.y += tweak\n      bounds.height -= tweak\n    }\n    // And fire off the callback\n    this.props.onReturnRevisedInnerBox(bounds)\n  }\n\n  // GET DS HEAD LEADING FROM HARD RETURNS\n  // Called from doStringTests to count lines (from '<br>'')\n  // Returns adjustment to top and height of IB\n  getDsHeadLeadingFromHardReturns(config) {\n    const leading = config.textPrefs.leading\n    const forceTurn = config.forceTurn\n    let extra = 0\n    const headArray = Object.values(config.headers)\n    for (let hNo = 0; hNo < headArray.length; hNo++) {\n      const thisHead = headArray[hNo].split(forceTurn)\n      const thisLeading = (thisHead.length - 1) * leading\n      extra = Math.max(extra, thisLeading)\n    }\n    return extra\n  }\n  // GET DS HEAD LEADING FROM HARD RETURNS ends\n\n  // RENDER nothing\n  render() {\n    return null\n  }\n}\n\nSilverYaxisLinearTest.propTypes = {\n  config: PropTypes.object,\n  // Callback after test on stringwidth(s)\n  onReturnRevisedInnerBox: PropTypes.func,\n}\n\nexport default SilverYaxisLinearTest\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\n\nclass SilverSeriesColumn extends Component {\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateColumns()\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateColumns()\n    }\n  }\n\n  // ======= Event handler ======\n\n  // COLUMN CLICK\n  // Handles column click event. Params are data (cat and value)\n  // and index in overall data.\n  // NOTE: This event currently gets passed back up to\n  // ColumnChart, where I do a console.log. Long-term, I might\n  // use this to set 'emphasis' on the column...\n  columnClick(colData, index) {\n    const clickObj = { colData, index }\n    this.props.onPassColumnClick(clickObj)\n  }\n  // BAR CLICK ends\n\n  // ENTER COL BINDING\n  enterColBinding(groupBinding, config) {\n    // Bind inner (points) data\n    const rectBinding = groupBinding\n      .selectAll('.d3-column-rect')\n      .data((ddd) => ddd)\n    // Enter appends rect on zero, at zero height\n    // Default col width\n    rectBinding\n      .enter()\n      .append('rect')\n      .attr({\n        class: 'd3-column-rect',\n        x: (ddd) => config.xMainScale(ddd.category),\n        // 'width': colWidth,\n        // 'width': Math.max(xMainScale.rangeBand(), 0),\n        width: 0,\n        y: config.yScale(0),\n        height: 0,\n        id: (ddd, iii) => {\n          let idStr = `column-series-${iii}`\n          idStr = `${idStr}~~~fill:${ddd.fillName}`\n          return idStr\n        },\n      })\n      // Set click event on rect\n      .on('click', (ddd, iii) => this.columnClick(ddd, iii))\n      // Crude tooltip (populated in update)\n      // NOTE: can't use '=>' because D3 needs to select 'this'\n      /* eslint-disable func-names, no-invalid-this */\n      .each(function() {\n        d3.select(this)\n          .append('svg:title')\n          .attr('class', 'd3-tooltip')\n      })\n    return rectBinding\n  }\n  // ENTER COL BINDING ends\n\n  // UPDATE COL BINDING\n  // Called from updateColumns to handle the D3 update. Params are the\n  // inner binding (by series), the config object, and an array for\n  // keeping track of stacking\n  updateColBinding(rectBinding, config, baseVals) {\n    // Are both 'sides', if mixed, columns?\n    let bothCols = false\n    if (config.isMixed) {\n      bothCols = config.bothCols\n    }\n    // Cluster and column widths...\n    // I need widths for clusters and for individual columns\n    // (if stacked, these are, of course, the same)\n    let clusterWidth = config.xMainScale.rangeBand() - config.padding\n    let colWidth = config.xClusterScale.rangeBand()\n    if (config.accum) {\n      colWidth = clusterWidth\n    }\n    // Don't be 0\n    clusterWidth = Math.max(clusterWidth, 0.1)\n    colWidth = Math.max(colWidth, 0.1)\n    // Remember:\n    // If stacked, colWidth = clusterWidth = entire stack width\n    // If unstacked, colWidth = clusterWidth / no. of cols\n    //\n    rectBinding\n      .transition()\n      .duration(config.duration)\n      .attr({\n        // Vert ('y') origin\n        y: (ddd, iii) => {\n          // iii is point-counter here\n          // By default, since SVG draws from top, set y to val:\n          // (assumes val is positive; overwrites negative below)\n          let yPos = Number(ddd.val)\n          if (config.accum) {\n            // Stacked bars\n            const val = yPos\n            if (val < 0) {\n              // If val is negative, subtract it from previous loop's\n              // baseline. Baseline increments negatively for next\n              // neg value\n              const baseVal = baseVals[iii].negBase\n              yPos = baseVal\n              baseVals[iii].negBase += val\n            } else {\n              // + val. Use prev baseline, then increment for next +\n              const baseVal = baseVals[iii].posBase\n              yPos += baseVal\n              baseVals[iii].posBase += val\n            }\n          } else if (yPos <= 0) {\n            // But non-accum draw neg vals *from* zero\n            yPos = 0\n          }\n          return config.yScale(yPos)\n        },\n        // Height: force to positive value, subtracting from\n        // scaled zero...\n        height: (ddd) => {\n          let hgt = config.yScale(0) - config.yScale(Math.abs(Number(ddd.val)))\n          // But if scale breaks...\n          if (config.breakScale) {\n            hgt =\n              config.yScale(config.minVal) -\n              config.yScale(Math.abs(Number(ddd.val)))\n            hgt += config.brokenScalePadding\n          }\n          // Don't allow neg height!\n          return Math.max(hgt, 0)\n        },\n        // X position\n        x: (ddd) => {\n          // Default cluster position\n          let xPos = config.xMainScale(ddd.category)\n          // Mixed series, shift r/h series\n          if (bothCols && !config.isLeft) {\n            xPos += clusterWidth / 2\n          }\n          // Stacked cols don't shift within the cluster, but...\n          if (!config.accum) {\n            // Unstacked are in clusters, add internal cluster scaling\n            // And for mixed, /2\n            if (bothCols) {\n              xPos += config.xClusterScale(ddd.header) / 2\n            } else {\n              xPos += config.xClusterScale(ddd.header)\n            }\n          }\n          return xPos\n        },\n        width: () => {\n          let wid = colWidth\n          if (bothCols) {\n            wid /= 2\n          }\n          // Don't be less than zero!\n          return Math.max(wid, 0)\n        },\n      })\n      .style('fill', (ddd) => ddd.fill)\n      // Populate tooltip (set up by 'enter')\n      .each(function(ddd) {\n        const myBar = d3.select(this)\n        myBar\n          .select('title')\n          .text(\n            `Header: ${ddd.header}; category: ${ddd.category}; value: ${ddd.val}`\n          )\n      })\n    // Deleted columns-too-narrow error callback\n  }\n  // UPDATE COL BINDING ends\n\n  // EXIT COL BINDING\n  exitColBinding(colBinding, duration) {\n    colBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('height', 0)\n    colBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // EXIT COL BINDING ends\n\n  // UPDATE COLUMNS\n  updateColumns() {\n    const config = this.props.config\n    // Context (parent group created in render) and duration\n    // (NOTE: In the long term, we'd need more than one group...)\n    const className = config.className.split(' ')[1]\n    const mainSeriesGroup = d3.select(`.${className}`)\n    //\n\n    // Map the actual series data:\n    // As far as I can see, the data is in the right format:\n    // an array of objects with header:value properties\n    const mappedData = ChartUtilities.mapSeriesData(config, false)\n    // Array of +/– base vals for 'opposing' charts\n    const baseVals = ChartUtilities.getSeriesBaseVals(config.pointCount)\n    // mappedData is an array of arrays, each of which represents a series\n    // Each series sub-array consists of <pointCount> objects\n    // defining one data point and with properties...\n    //    category: the category string\n    //    fill: fill colour\n    //    val: the 'internal', *unscaled* value of THIS point\n\n    // Columns\n    // Outer binding\n    const groupBinding = ChartUtilities.makeBarColSeriesGroupBinding(\n      mainSeriesGroup,\n      mappedData,\n      config.duration,\n      'column'\n    )\n    const rectBinding = this.enterColBinding(groupBinding, config)\n    this.updateColBinding(rectBinding, config, baseVals)\n    this.exitColBinding(rectBinding, config.duration)\n  }\n  // UPDATE COLUMNS ends\n\n  // RENDER all-series parent group:\n  render() {\n    return (\n      <g className={this.props.config.className} id=\"series-group:column\" />\n    )\n  }\n}\n\nSilverSeriesColumn.propTypes = {\n  config: PropTypes.object,\n  onPassColumnClick: PropTypes.func,\n}\n\nexport default SilverSeriesColumn\n","// Linting disabled for D3\n/* eslint-disable no-invalid-this, func-names, max-statements */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities module\nimport * as BlobUtils from './blob-utilities'\n\nclass SilverXaxisBlobs extends Component {\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    if (this.props.config.testFlag) {\n      // margin tests, at the end of which we return updated innerbox bounds...\n      this.doBlobTests()\n    } else {\n      this.updateBlobs()\n      BlobUtils.updateBlobHeader(this.props.config)\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    if (this.props.config.testFlag) {\n      // margin tests, at the end of which we return updated innerbox bounds...\n      this.doBlobTests()\n    } else {\n      this.updateBlobs()\n      BlobUtils.updateBlobHeader(this.props.config)\n    }\n  }\n\n  // DO BLOB TESTS\n  // For xaxis (horizontal) blobs, I need to get a height, which can\n  // be calculated without dropping anything on to the wrapper from\n  // fontsize, padding and margin...\n  // ...and I need a blobWidth, based upon\n  doBlobTests() {\n    const config = this.props.config\n    const bounds = config.bounds\n    // By default (see c.10 lines down)\n    bounds.blobWidth = 0\n    // NOTE: but if no blobs, return IB unchanged\n    if (config.blobs.blobState.column > 0) {\n      // Line charts need a horizontal adjustment, which is messy...\n      if (\n        config.chartType.includes('line') ||\n        config.chartType.includes('thermo')\n      ) {\n        const hBlobVals = this.hBlobTweaks(config)\n        // hBlobVals is an object with bounds and blobWidth properties\n        // which are appended to the bounds object:\n        bounds.x = hBlobVals.x\n        bounds.width = hBlobVals.width\n        // Just pack blobWidth in, too...\n        bounds.blobWidth = hBlobVals.blobWidth\n        // Max size:\n        bounds.blobWidth = Math.min(\n          bounds.blobWidth,\n          config.blobs.blobMeta.maxCircleSize\n        )\n      }\n      // The vertical adjustment is relatively simple...\n      // NOTE: Line charts with circular blobs need the\n      // blobWidth to calculate the vertical margin\n      const vMargin = this.getVblobMargin(bounds.blobWidth)\n      // Adjust and return the IB\n      bounds.y += vMargin\n      bounds.height -= vMargin\n    }\n    // And I need to check for a projecting index-blob\n    const iTweak = this.getIndexBlobTweak(config)\n    bounds.x += iTweak\n    bounds.width -= iTweak\n    this.props.onReturnRevisedInnerBox(bounds)\n  }\n  // DO BLOB TESTS ends\n\n  // GET INDEX BLOB TWEAK\n  // Called from doBlobTests. Returns adjustment for left margin\n  // if there's an index blob...\n  getIndexBlobTweak(config) {\n    const iProps = config.indexed\n    let iTweak = 0\n    if (iProps.indexFlag && iProps.indexPoint === 1) {\n      // How far has IB moved in from original left edge?\n      const margin = config.bounds.x - config.originalBounds.x\n      const iRadius = config.indexed.radius\n      if (margin < iRadius) {\n        iTweak = iRadius - margin\n      }\n    }\n    return iTweak\n  }\n  // GET INDEX BLOB TWEAK ends\n\n  hBlobTweaks(config) {\n    // So config contains several bounds objects\n    // Let's check them!\n    // originalBounds (original innerBox, excluding either axis)\n    // postYaxisBounds (chart area after y-axes have reduced width)\n    // bounds (current bounds -- adjusted for x-axis, as well as y-axes)\n    //\n    // Clone current bounds; this is what we'll return, amended or not...\n    const myBounds = config.bounds\n    const postYBounds = config.postYaxisBounds\n    // First, get 3 values...\n    // Bugfix Mar'18: use post-yaxis bounds, not original chart bounds:\n    // const blobWidth = this.getBlobWidth(config, config.originalBounds.width);\n    // const blobWidth = this.getBlobWidth(config, myBounds.width);\n    const blobWidth = this.getBlobWidth(config, postYBounds.width)\n    const halfBlobWidth = blobWidth / 2\n    // existing projections of left and right x-axis cat strings (!)\n    const leftCatProjection = config.bounds.x - postYBounds.x\n    const postYRight = postYBounds.x + postYBounds.width\n    const currentRight = config.bounds.x + config.bounds.width\n    const rightCatProjection = postYRight - currentRight\n    //\n    if (halfBlobWidth > Math.max(leftCatProjection, rightCatProjection)) {\n      // Half-blobWidth > both string projections, so set final bounds to\n      // use half-blobWidth\n      myBounds.x = postYBounds.x + halfBlobWidth\n      myBounds.width = postYBounds.width - blobWidth\n    } else if (\n      halfBlobWidth < Math.min(leftCatProjection, rightCatProjection)\n    ) {\n      // Half-blobWidth < both category projections, so use current bounds, which\n      // x-axis test set to category projections.\n      // So actually, nothing changes! NOTE: really??\n    } else {\n      // Here's the beast! One category projection exceeds half-blobWidth!!\n    }\n    // What do I want to return?\n    // Chart x and width; and a blobWidth value...\n    return {\n      x: myBounds.x,\n      width: myBounds.width,\n      blobWidth,\n    }\n  }\n\n  // GET BLOB WIDTH\n  // Passed any bounds.width, this should return the width of each blob\n  // to fit into it, allowing for gaps between blobs\n  // Calculate blob width to fit into given width\n  getBlobWidth(config, width) {\n    // First, subtract all the inter-blob gaps I'll want from the total width\n    const gaplessWidth = width - (config.pointCount - 1) * config.gap\n    // Width of one half-blob\n    const minBlobWidth = config.blobs.blobMeta.minRectWidth\n    const maxBlobWidth = config.blobs.blobMeta.maxRectWidth\n    let blobWidth = Math.max(gaplessWidth / config.pointCount, minBlobWidth)\n    blobWidth = Math.min(blobWidth, maxBlobWidth)\n    return blobWidth\n  }\n  // GET BLOB WIDTH ends\n\n  // GET BLOB MARGIN\n  // Called from doBlobTests and updateBlobs, returns\n  // the vertical distance allowed for blobs (including margin below)\n  getVblobMargin(blobWidth) {\n    const blobs = this.props.config.blobs\n    const circleMax = blobs.blobMeta.maxCircleSize\n    let bMargin = 0\n    if (blobs.blobState.isRect) {\n      // Use font and internal padding:\n      const textHeight = blobs.blobMeta.text.size * blobs.blobMeta.text.emVal\n      bMargin += textHeight\n      bMargin += blobs.blobMeta.background.padding.vertical * 2\n    } else if (\n      this.props.config.chartType.includes('line') ||\n      this.props.config.chartType.includes('thermo')\n    ) {\n      // Circles: line and thermo charts use passed-in blobWidth or set max\n      bMargin += Math.min(blobWidth, circleMax)\n    } else {\n      // Circles: columns use rangeBand, or set max\n      const rBand = this.props.config.xMainScale.rangeBand()\n      bMargin += Math.min(rBand, circleMax)\n    }\n    // Add margin below and return\n    bMargin += blobs.blobMeta.belowBlobs\n    return bMargin\n  }\n\n  // UPDATE BLOBS\n  updateBlobs() {\n    const config = this.props.config\n    if (config.blobs.blobState.column === 0) {\n      return\n    }\n    // Chart type flag. Mainly determines whether blobs\n    // expect rangePoints (line/thermo) or rangeBands (column)\n    const rpFlag =\n      config.chartType.includes('line') || config.chartType.includes('thermo')\n    const isRect = config.blobs.blobState.isRect\n    // Context (series parent group created in render)\n    const className = `blob-series-group-${config.chartIndex}`\n    const contextGroup = d3.select(`.${className}`)\n    // Passed scales:\n    const xMainScale = config.xMainScale\n    // const xClusterScale = config.xClusterScale;\n    // NOTE: although nothing actually stacks, accum is\n    // a flag that we aren't 'clustering'\n    // const accum = config.accum;\n    // Blob width defaults to that set for lines by doBlobTests\n    let blobWidth = config.bounds.blobWidth\n    // if (!lineFlag) {\n    if (!rpFlag) {\n      //   // Column charts use rangeBands\n      //   blobWidth = xClusterScale.rangeBand();\n      //   if (accum) {\n      //     // Explicitly subtract gap from col width\n      //     // (non-accum: handled in columnchart when rangeBand set)\n      blobWidth = xMainScale.rangeBand() - config.padding\n      //   }\n    }\n    // NOTE: there's some duplication back there, on circles, certainly...\n    // Don't be < 0!\n    blobWidth = Math.max(blobWidth, 0)\n    // Vertical position\n    const transBy = this.getVblobMargin(blobWidth)\n    // Height\n    // NOTE: all provisional -- in particular, what about circles???\n    const blobHeight = transBy - config.blobs.blobMeta.belowBlobs\n    contextGroup.attr('transform', `translate(0,-${transBy})`)\n    // Text vert pos:\n    let textYpos = blobWidth / 2\n    textYpos +=\n      (config.blobs.blobMeta.text.size * config.blobs.blobMeta.text.emVal) / 2\n    if (isRect) {\n      textYpos = blobHeight - config.blobs.blobMeta.background.padding.vertical\n    }\n    // Data is a simple array of objects with 2 props:\n    // category & val\n    const mappedData = []\n    for (let iii = 0; iii < config.xMainScale.domain().length; iii++) {\n      const tempO = {\n        category: config.xMainScale.domain()[iii],\n        val: config.blobs.blobState.valsArray[iii],\n      }\n      // Omitting blanks, append to array\n      if (tempO.val.length > 0) {\n        mappedData.push(tempO)\n      }\n    }\n\n    // Scale for proportional circles\n    // Range\n    // const rangeMin = config.blobmeta.minCircleSize;\n    // NOTE: I can't use minCircleSize literally: scale must\n    // be from zero, surely. But if r < minCircleSize I should\n    // move the value string up... or something.\n    const rangeMin = 0\n    // Range max mustn't be less than clusterwidth!\n    const rangeMax = Math.max(rangeMin, blobWidth)\n    // Domain\n    // const domainMin = config.blobmeta.min;\n    const domainMin = 0\n    // NOTE: prev'y looked for config.blobs.max, which\n    // is undefined. I need to trackk down these rogue\n    // blobs.min and .max properties: whoever's appending them...\n    // stop it!\n    const domainMax = config.blobs.blobState.max\n    const blobDomain = [domainMin, domainMax]\n    const blobCircleScale = d3.scale\n      .sqrt()\n      .range([rangeMin, rangeMax])\n      .domain(blobDomain)\n\n    const blobGroupBinding = contextGroup\n      .selectAll('.blob-series-group')\n      .data(mappedData)\n    // ENTER appends group for one rect/text blob\n    const oneBlobGroupEnter = blobGroupBinding\n      .enter()\n      .append('g')\n      .attr({\n        class: 'blob-pair-group',\n        id: 'blob-pair-group',\n      })\n    // Append rect/circle and text\n    if (isRect) {\n      oneBlobGroupEnter.append('rect').attr({\n        class: 'blob-shape',\n        x: (ddd) => xMainScale(ddd.category) - blobWidth / 2,\n        y: 0,\n        height: 0,\n        width: 0,\n        fill: '#fff',\n        'stroke-width': 0,\n      })\n    } else {\n      oneBlobGroupEnter.append('circle').attr({\n        class: 'blob-shape',\n        cx: (ddd) => {\n          let cxVal = xMainScale(ddd.category)\n          // if (!lineFlag) {\n          if (!rpFlag) {\n            cxVal += blobWidth / 2\n          }\n          return cxVal\n        },\n        cy: blobWidth / 2,\n        r: 0,\n        fill: '#fff',\n        'stroke-width': 0,\n      })\n    }\n    oneBlobGroupEnter\n      .append('text')\n      .style({\n        'font-family': config.blobs.blobMeta.text.font,\n        'font-size': `${config.blobs.blobMeta.text.size}px`,\n        'text-anchor': config.blobs.blobMeta.text.anchor,\n        fill: () => {\n          const fillName = config.blobs.blobMeta.text.fill\n          return config.colourLookup[fillName]\n        },\n      })\n      .attr({\n        id: () => {\n          // Text needs just'n and fill (width, see below)\n          let bId = 'blob-text~~~justification:center,'\n          bId = `${bId} fill:${config.blobs.blobMeta.text.fill}`\n          return bId\n        },\n      })\n\n    // UPDATE\n    if (isRect) {\n      blobGroupBinding\n        .select('rect')\n        .transition()\n        .duration(config.duration)\n        .attr({\n          x: (ddd) => {\n            let xPos = 0\n            // if (lineFlag) {\n            if (rpFlag) {\n              xPos = xMainScale(ddd.category) - blobWidth / 2\n            } else {\n              // Cols (un/stacked)\n              xPos = xMainScale(ddd.category)\n            }\n            return xPos\n          },\n          y: 0,\n          height: blobHeight,\n          width: blobWidth,\n          id: () => {\n            let bID = 'blob-shape~~~'\n            const bFill = config.blobs.blobMeta.background.fill\n            bID = `${bID}fill: ${bFill},`\n            const bStr = config.blobs.blobMeta.background.stroke\n            bID = `${bID}stroke: ${bStr},`\n            const bWid = config.blobs.blobMeta.background.strokewidth\n            bID = `${bID}strokewidth: ${bWid}`\n            return bID\n          },\n        })\n        .style({\n          fill: () => {\n            const fName = config.blobs.blobMeta.background.fill\n            return config.colourLookup[fName]\n          },\n          stroke: () => {\n            const sName = config.blobs.blobMeta.background.stroke\n            let stroke = 'none'\n            if (sName !== 'none') {\n              stroke = config.colourLookup[sName]\n            }\n            return stroke\n          },\n          'stroke-width': config.blobs.blobMeta.background.strokewidth,\n          opacity: config.blobs.blobMeta.background.opacity,\n        })\n    } else {\n      blobGroupBinding\n        .select('circle')\n        .transition()\n        .duration(config.duration)\n        .attr({\n          r: (ddd) => {\n            const rad = blobCircleScale(ddd.val) / 2\n            // Negative vals: zero radius\n            return Math.max(rad, 0)\n          },\n          cy: () => {\n            // NOTE: Matt suggests circular blobs centre-aligned:\n            const centre = blobWidth / 2\n            // But for bottom-aligned blobs, do:\n            // let centre = vPos + blobWidth;\n            // centre -= (blobCircleScale(ddd.val) / 2);\n            return centre\n          },\n          id: () => {\n            let bID = 'blob-shape~~~'\n            const bFill = config.blobs.blobMeta.background.fill\n            bID = `${bID}fill: ${bFill},`\n            const bStr = config.blobs.blobMeta.background.stroke\n            bID = `${bID}stroke: ${bStr},`\n            const bWid = config.blobs.blobMeta.background.strokewidth\n            bID = `${bID}strokewidth: ${bWid}`\n            return bID\n          },\n        })\n        .style({\n          fill: () => {\n            const fName = config.blobs.blobMeta.background.fill\n            return config.colourLookup[fName]\n          },\n          stroke: () => {\n            const sName = config.blobs.blobMeta.background.stroke\n            let stroke = 'none'\n            if (sName !== 'none') {\n              stroke = config.colourLookup[sName]\n            }\n            return stroke\n          },\n          'stroke-width': config.blobs.blobMeta.background.strokewidth,\n          opacity: config.blobs.blobMeta.background.opacity,\n        })\n    }\n\n    blobGroupBinding\n      .select('text')\n      .text((ddd) => {\n        const format = BlobUtils.formatBlobVal(ddd.val)\n        const myFormatter = d3.format(format)\n        return myFormatter(ddd.val)\n      })\n      .transition()\n      .duration(config.duration)\n      .attr({\n        y: () => {\n          let yResult = textYpos\n          if (!isRect) {\n            yResult = blobWidth / 2\n            // If blob-circles are bottom-aligned, see 'cy' for circles, above...\n            // yResult -= (blobCircleScale(ddd.val) / 2);\n            yResult +=\n              (config.blobs.blobMeta.text.size *\n                config.blobs.blobMeta.text.emVal) /\n              2\n          }\n          return yResult\n        },\n        x: (ddd) => {\n          // Line centre-aligns\n          let xPos = xMainScale(ddd.category)\n          // Column\n          // if (!lineFlag) {\n          if (!rpFlag) {\n            // Stacked columns:\n            xPos += blobWidth / 2\n          }\n          return xPos\n        },\n      })\n      .each(function(ddd) {\n        ddd.width = this.getBBox().width\n      })\n\n    // NOTE: EXIT isn't right yet...\n    blobGroupBinding\n      .exit()\n      .transition()\n      .duration(config.duration)\n      .attr('height', 0)\n    blobGroupBinding\n      .exit()\n      .transition()\n      .delay(config.duration * 2)\n      .remove()\n  }\n  // UPDATE BLOBS ends\n\n  // WRAP BLOB HEAD\n  // Called from componentDidMount/Update\n  // Stub for potentially wrapping blob heads. This\n  // would call TextWrapping, with a callback that could\n  // adjust the size of the rect to the dimensions of the text...\n  // wrapBlobHead(blobHeadGroup) {\n  //   const headRect = blobHeadGroup.select('rect');\n  //   const headText = blobHeadGroup.select('text');\n  // }\n  // WRAP BLOB HEAD ends\n\n  // RENDER blob group\n  render() {\n    // Setting no fill prevents the SVG convertor from generating a path\n    // outlining the group\n    const gStyle = { fill: 'none' }\n    const nameA = `blob-series-group-${this.props.config.chartIndex}`\n    const nameB = `blob-header-group-${this.props.config.chartIndex}`\n    return (\n      <g\n        className={this.props.config.groupName}\n        id={this.props.config.groupName}\n        style={gStyle}\n      >\n        <g className={nameA} id={nameA} />\n        <g className={nameB} id={nameB} />\n      </g>\n    )\n  }\n}\n\nSilverXaxisBlobs.propTypes = {\n  // Incoming config\n  config: PropTypes.object,\n  // Callback after tests\n  onReturnRevisedInnerBox: PropTypes.func,\n}\n\nexport default SilverXaxisBlobs\n","// NOTE: while I'm messing around...\n// /* eslint-disable no-unused-vars */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\nimport * as AxisUtilities from '../axes/axis-utilities'\nimport * as BlobUtilities from '../blobs/blob-utilities'\nimport ConfigXaxisOrdinal from '../axes/configuration/xaxis-ordinal-config'\nimport ConfigYaxisLinear from '../axes/configuration/yaxis-linear-config'\n// D3 sub-components:\nimport SilverXaxisOrdinal from '../axes/live/xaxis-ordinal'\nimport SilverXaxisOrdinalTest from '../axes/tests/xaxis-ordinal-test'\nimport SilverYaxisLinear from '../axes/live/yaxis-linear'\nimport SilverYaxisLinearTest from '../axes/tests/yaxis-linear-test'\nimport SilverSeriesColumn from './columnseries'\nimport SilverXaxisBlobs from '../blobs/xaxis-blobs'\n\nclass SilverColumnChart extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      // flags to control subcomponent testing/rendering\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      // updated innerBox bounds\n      innerBox: this.props.config.innerBox,\n      // Default granularity object\n      granularity: {},\n      // Temporary innerBox bounds\n      postYaxisBounds: {},\n    }\n    // Callbacks from axis and blobs tests:\n    this.handleXaxisInnerBoxBounds = this.handleXaxisInnerBoxBounds.bind(this)\n    this.handleYaxisInnerBoxBoundsLeft = this.handleYaxisInnerBoxBoundsLeft.bind(\n      this\n    )\n    this.handleYaxisInnerBoxBoundsRight = this.handleYaxisInnerBoxBoundsRight.bind(\n      this\n    )\n    this.handleBlobsInnerBoxBounds = this.handleBlobsInnerBoxBounds.bind(this)\n    // Click on column\n    this.handleColumnClick = this.handleColumnClick.bind(this)\n  }\n\n  // COMPONENT WILL MOUNT\n  // Puts inherited innerBox into state:\n  UNSAFE_componentWillMount() {\n    this.setState({\n      yaxisTestLeft: true,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      innerBox: this.props.config.innerBox,\n    })\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.mainDthreeGroupTransition(0)\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Reset state to default...\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      innerBox: newProps.config.innerBox,\n      yaxisTestLeft: true,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n    // NOTE: can I set state here?\n  }\n\n  // Callbacks:\n  // HANDLE Y-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox, allowing for axis labels.\n  // It also sets state.postYaxisBounds, which represents the\n  // chart area after allowing for yaxis labels and before the\n  // IB is adjusted for projecting x-axis category strings. This\n  // (hopefully!) allows me to adjust for blobs...\n  handleYaxisInnerBoxBoundsLeft(innerBox) {\n    this.setState({\n      innerBox,\n      postYaxisBounds: Object.assign({}, innerBox),\n      // Set flags for render 3 (blobs test)\n      yaxisTestLeft: false,\n      yaxisTestRight: true,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n  }\n\n  handleYaxisInnerBoxBoundsRight(innerBox) {\n    this.setState({\n      innerBox,\n      postYaxisBounds: Object.assign({}, innerBox),\n      // Set flags for render 3 (blobs test)\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: true,\n      blobsTest: false,\n    })\n  }\n\n  // HANDLE X-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox after calculating axis adjustments\n  handleXaxisInnerBoxBounds(result) {\n    this.setState({\n      innerBox: result.bounds,\n      granularity: result.granularity,\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: true,\n    })\n  }\n\n  // HANDLE BLOBS INNER BOX BOUNDS\n  // ...fields the revised innerBox (after left margin adjusted for cat strings)\n  handleBlobsInnerBoxBounds(innerBox) {\n    // Fire off an error msg if IB is on the small side...\n    // ...deleted Feb'21\n    this.setState({\n      innerBox,\n      // Set flags for render 4 (final)\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n    // const duration = this.props.config.duration;\n    // NOTE: set to zero to prevent visible drop-in from top left...\n    // NOTE: if I'm going to use a zero duration regularly, put it into prefs\n    const duration = 0\n    this.mainDthreeGroupTransition(duration)\n  }\n\n  // HANDLE BAR CLICK EVENT\n  // This is potentially useful... maybe...\n  handleColumnClick(event) {\n    const colData = event.colData\n    // const index = event.index;\n    const info = `Value is ${colData.val}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n  // HANDLE BAR CLICK EVENT ends\n\n  /*\n    The logic is that if I've rendered Sibyl, in order to update\n    Editor status, I don't want to have a re-render here fire\n    off another callback and start it all going round.\n    So actually I want the situation to remain the same, unless\n    Editor has kicked off and forced the flag to true\n    So if the flag is false, I don't want anything to change\n  */\n\n  // MAIN D3 GROUP TRANSITION\n  // Called from handleYaxisInnerBoxBounds\n  // On 2nd render only, after adjustments have been made to the background elements\n  // (strings and legand)\n  // Moves main D3 group into position\n  // NB: This isn't interested in mainGroup *size* -- only in location\n  mainDthreeGroupTransition(duration) {\n    const innerBox = this.state.innerBox\n    const bLeft = innerBox.x\n    const bTop = innerBox.y\n    const transStr = `translate(${bLeft}, ${bTop})`\n    const mainGroupClass = this.getMainGroupClass(true, false)\n    const mainGroup = d3.select(mainGroupClass)\n    mainGroup\n      .transition()\n      .duration(duration)\n      .attr('transform', transStr)\n  }\n  // Because of the double-render, the above can only be called on an update (I think!)\n\n  // GET MAIN GROUP CLASS\n  // Returns class name for main chart group. Arg 1 determines\n  // whether classes are preceded by a dot; arg 2 whether\n  // the general class (which pulls in the CSS) is appended\n  // NOTE: The point is, because all d3 refs are specific, I need\n  // indexed class names throughout. The general class will be used\n  // for CSS (probably n/a for this main group; but important for\n  // axes, at least...)\n  getMainGroupClass(prefixDot, addGeneralClass) {\n    let dot = ''\n    let generalClass = ''\n    if (prefixDot) {\n      dot = '.'\n    }\n    if (addGeneralClass) {\n      generalClass = `${dot}chart-main-group`\n    }\n    return `${generalClass} ${dot}chart-main-group-${this.props.config.chartIndex}`\n  }\n  // GET MAIN GROUP CLASS ends\n\n  //\n  // ==================================\n  // D3 component configuration objects:\n  // ==================================\n\n  // GET X-AXIS CONFIG\n  // Hands off to function in axis-utilities.\n  // Params is CO\n  getXaxisConfig(chartConfig) {\n    const innerBox = Object.assign({}, this.state.innerBox)\n    // Check for test...\n    const testFlag = this.state.xaxisTest\n    const granularity = this.state.granularity\n    const axisConfig = ConfigXaxisOrdinal(\n      chartConfig,\n      innerBox,\n      testFlag,\n      granularity\n    )\n    return axisConfig\n  }\n  // GET X-AXIS CONFIG ends\n\n  // GET Y-AXIS CONFIG\n  // Hands off to function in axis-utilities.\n  // Params are CO, 'left'/'right'...\n  getYaxisConfig(chartConfig, side, testFlag) {\n    const innerBox = Object.assign({}, this.state.innerBox)\n    const axisConfig = ConfigYaxisLinear(chartConfig, innerBox, testFlag, side)\n    return axisConfig\n  }\n  // GET Y-AXIS CONFIG ends\n\n  // GET BLOBS CONFIG\n  // Hands off to function in BlobUtilities\n  getBlobsConfig(chartConfig) {\n    const nowBounds = this.state.innerBox\n    const postYBounds = this.state.postYaxisBounds\n    // Check for test...\n    const testFlag = this.state.blobsTest\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const blobConfig = BlobUtilities.configXBlobs(\n      chartConfig,\n      nowBounds,\n      postYBounds,\n      testFlag,\n      side\n    )\n    return blobConfig\n  }\n  // GET BLOBS CONFIG ends\n\n  // CONFIG SERIES COLUMNS\n  // Assembles column series config object\n  configSeriesColumns(chartConfig) {\n    // The default name/value lookup of colours\n    const colourLookup = chartConfig.colourLookup\n    // Colours for this sequence of series\n    const colourSet = chartConfig.series.column.colours\n    const bounds = Object.assign({}, this.state.innerBox)\n    // Padding may change if col width is unacceptable\n    const padding = chartConfig.series.column.gap\n    const narrowGap = chartConfig.series.column.narrowGap\n    const absoluteMinWidth = chartConfig.series.column.absoluteMinWidth\n    const minWidth = chartConfig.series.column.minWidth\n    const maxWidth = chartConfig.series.column.maxWidth\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const chartType = chartConfig.scales[side].type\n    const accum = chartConfig.scales[side].stacked\n    const mmO = Object.assign({}, chartConfig.scales[side].minMaxObj.scale)\n    // Broken scale...?\n    let breakScale = false\n    const brokenScalePadding = chartConfig.yAxis.brokenScalePadding.default\n    if (mmO.min > 0) {\n      bounds.height -= brokenScalePadding\n      breakScale = true\n    }\n    // Assemble the config object with 'simple' props\n    const config = {\n      absoluteMinWidth,\n      accum,\n      bounds,\n      breakScale,\n      brokenScalePadding,\n      chartData: chartConfig.chartData,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      className: `d3-column-series-group d3-column-series-group-${chartConfig.chartIndex}`,\n      colourLookup,\n      colourSet,\n      duration: chartConfig.duration,\n      // factor: mmO.factor,\n      factor: chartConfig.scales[side].factor,\n      minVal: mmO.min,\n      minWidth,\n      maxWidth,\n      narrowGap,\n      originalBounds: chartConfig.originalInnerBox,\n      padding,\n      pointCount: chartConfig.pointCount,\n      seriesCount: chartConfig.seriesCount,\n      zeroPrefs: chartConfig.xAxis.ticks.zero,\n    }\n    // Mixed +/– flag:\n    config.mixedVals = mmO.min < 0 && mmO.max >= 0\n    // Y-SCALE (linear):\n    config.yScale = d3.scale\n      .linear()\n      .range([bounds.height, 0])\n      .domain([mmO.min, mmO.max])\n    // HEADERS:\n    // NOTE: this is all dup'd in barchart.js...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n    config.catHead = chartConfig.headers[0]\n    // Now exclude any blob headers:\n    const actualHeaders = []\n    for (let iii = 1; iii <= chartConfig.seriesCount; iii++) {\n      if (chartConfig.headers[iii] !== chartConfig.blobs.blobState.header) {\n        actualHeaders.push(chartConfig.headers[iii])\n      }\n    }\n    config.seriesHeads = actualHeaders\n    // Map series colours:\n    config.colourMap = ChartUtilities.getColourMap(actualHeaders, colourSet)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // X-SCALE:\n    const xMainDomain = chartConfig.chartData.map((ddd) => ddd[config.catHead])\n    // On the use of 'padding' here...\n    // In order to set an exact px gap between columns, I ignore the optional\n    // arguments that D3 attaches to the rangeBands method to set inner and\n    // outer gaps. Instead, I set up rangeBands for no gap; then, in\n    // columnseries, I subtract the gap from the width of each column.\n    // And I add the padding to the right of the range, to bring the last\n    // column back into line with the innerbox (i.e. to allow for the\n    // lost width on that last column)\n    // Main scale (by data point)\n\n    // Cluster width & padding\n    const cwp = ChartUtilities.getSeriesClusterWidthAndPadding(\n      chartConfig,\n      false\n    )\n    const halfClusterWidth = cwp.clusterWidth / 2\n    config.halfClusterWidth = halfClusterWidth\n    config.padding = cwp.padding\n    //\n    config.xMainScale = d3.scale\n      .ordinal()\n      .rangeBands(\n        [\n          0 - halfClusterWidth,\n          config.bounds.width + halfClusterWidth + config.padding,\n        ],\n        0,\n        0\n      )\n      .domain(xMainDomain)\n    // Cluster scale\n    // Now, cluster scale (n/a for unstacked, but anyway...)\n    config.xClusterScale = d3.scale\n      .ordinal()\n      .domain(actualHeaders)\n      .rangeBands([0, config.xMainScale.rangeBand() - config.padding], 0, 0)\n    return config\n  }\n  // CONFIG SERIES COLUMNS ends\n\n  // GET Y-AXIS JSX\n  // Ideally, these would be in AxisUtilities, shared by all chart\n  // types. The trouble is, it needs access to state, so unless I'm\n  // going to start passing state around as a param, it has to live\n  // here, and all chart-type components will duplicate this code...\n  getYaxisJsx(config, exists, key, side) {\n    // Check for test...\n    let testFlag = this.state.yaxisTestLeft\n    if (side === 'right') {\n      testFlag = this.state.yaxisTestRight\n    }\n    let axisConfig = { enabled: false }\n    if (exists) {\n      axisConfig = this.getYaxisConfig(config, side, testFlag)\n    }\n    axisConfig.bounds = this.state.innerBox\n    // return axisConfig;\n    // Render left yaxis only, with 'test' flag\n    // to get margin\n    let callbackHandler = this.handleYaxisInnerBoxBoundsRight\n    if (side === 'left') {\n      callbackHandler = this.handleYaxisInnerBoxBoundsLeft\n    }\n    let axisJsx = ''\n    if (testFlag) {\n      axisJsx = (\n        <SilverYaxisLinearTest\n          key={`${key}-test-${side}`}\n          config={axisConfig}\n          onReturnRevisedInnerBox={callbackHandler}\n        />\n      )\n    } else {\n      axisJsx = (\n        <SilverYaxisLinear key={`${key}-test-${side}`} config={axisConfig} />\n      )\n    }\n    return axisJsx\n  }\n  // GET Y-AXIS JSX ends\n\n  // GET X-AXIS JSX\n  // Called from render to assemble x-axis jsx\n  getXaxisJsx(config, key) {\n    // Fcn in this component pulls a couple of strings, then calls\n    // fcn in AxisUtilities... and the result is the axis config obj.\n    const axisConfig = this.getXaxisConfig(config)\n    axisConfig.bounds = this.state.innerBox\n    // Test or live:\n    let xaxisJsx = ''\n    if (this.state.xaxisTest) {\n      // Only send callback for test\n      xaxisJsx = (\n        <SilverXaxisOrdinalTest\n          key={key}\n          config={axisConfig}\n          onReturnRevisedInnerBox={this.handleXaxisInnerBoxBounds}\n        />\n      )\n    } else {\n      xaxisJsx = <SilverXaxisOrdinal key={key} config={axisConfig} />\n    }\n    return xaxisJsx\n  }\n  // GET X-AXIS JSX ends\n\n  // GET BLOBS JSX\n  getBlobsJsx(config, key, isTest) {\n    const blobsConfig = this.getBlobsConfig(config)\n    blobsConfig.bounds = this.state.innerBox\n    const jsxTemplate = (\n      <SilverXaxisBlobs\n        key={key}\n        config={blobsConfig}\n        onReturnRevisedInnerBox={this.handleBlobsInnerBoxBounds}\n      />\n    )\n    let jsx = ''\n    if (isTest) {\n      // If it's a test, always assemble jsx\n      jsx = jsxTemplate\n    } else if (blobsConfig.blobs.blobState.column > 0) {\n      // Not a test, only make up jsx if there ARE blobs\n      jsx = jsxTemplate\n    }\n    return jsx\n  }\n  // GET BLOBS JSX ends\n\n  // RENDER\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Key all subcomponents:\n    const kids = ChartUtilities.getKeysAndIds(chartIndex)\n\n    // Custom config objects for the various d3 components\n    // See linechart.js\n\n    // Y axis can be left/right/both...\n    const enableScale = config.scales.enableScale\n    const yLeft = enableScale.left\n    const yRight = enableScale.right\n    // Default empty jsx\n    let xaxisJSX = ''\n    let yaxisJSXLeft = ''\n    let yaxisJSXRight = ''\n    let blobsJSX = ''\n    let columnseriesJSX = ''\n    // Render sequence:\n    // Either the tests, where we render individual components...\n    if (this.state.yaxisTestLeft) {\n      yaxisJSXLeft = this.getYaxisJsx(config, yLeft, kids.yAxisKey, 'left')\n    } else if (this.state.yaxisTestRight) {\n      yaxisJSXRight = this.getYaxisJsx(config, yRight, kids.yAxisKey, 'right')\n    } else if (this.state.xaxisTest) {\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n    } else if (this.state.blobsTest) {\n      blobsJSX = this.getBlobsJsx(config, kids.blobsKey, this.state.blobsTest)\n    } else {\n      // ...or, when all tests are done, the whole shebang!\n      // Full render, with all children.\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n      if (yLeft) {\n        yaxisJSXLeft = this.getYaxisJsx(config, yLeft, kids, 'left')\n      }\n      if (yRight) {\n        yaxisJSXRight = this.getYaxisJsx(config, yRight, kids, 'right')\n      }\n      blobsJSX = this.getBlobsJsx(config, kids.blobsKey, this.state.blobsTest)\n      const seriesConfig = this.configSeriesColumns(config)\n      seriesConfig.bounds = this.state.innerBox\n      columnseriesJSX = (\n        <SilverSeriesColumn\n          key={kids.colummnSeriesKey}\n          config={seriesConfig}\n          onPassColumnClick={this.handleColumnClick}\n        />\n      )\n    }\n    // General and indexed class for main group:\n    const mainGroupClass = this.getMainGroupClass(false, true)\n\n    /*\n    // NOTE: I can draw a temporary 'inner box'\n    // so I can see what I've got...\n    const rectStyle = {\n      fill: '#ccc',\n      width: this.state.innerBox.width,\n      height: this.state.innerBox.height,\n      x: 0,\n      y: 0,\n    };\n    // Move next into top of JSX definition, below\n    <rect style={rectStyle} />\n    */\n\n    // zeroline-group is in front of yaxis, behind series;\n    // for zero line, if any, and other possible\n    // furniture that has to overlay other elements\n\n    const chartComponentsJSX = (\n      <g className={mainGroupClass} key={kids.mainGroupKey} id={kids.contentId}>\n        {xaxisJSX}\n        {yaxisJSXLeft}\n        {yaxisJSXRight}\n        {blobsJSX}\n        {columnseriesJSX}\n        <g className={kids.zeroId} id={kids.zeroId} />\n      </g>\n    )\n    return chartComponentsJSX\n  }\n}\n\nSilverColumnChart.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverColumnChart\n","/*\n  Functions shared by vertical and horizontal thermometer charts\n*/\n\n// GET POINT MAX / MIN\n// Called from mapSpindleData to get max or min value at one datapoint\n// I had a 'smart-arse' version of this, but it was tripping\n// over empty values. Gone for cheap and cheerful...\nexport function getPointMaxMin(dObj, excludeA, excludeB, isMax) {\n  // Exclude cat and blob headers...\n  const keys = Object.keys(dObj).filter(\n    (obj) => obj !== excludeA && obj !== excludeB\n  )\n  // ...so we're only dealing with series headers\n  // Map all values as an array,then filter out empties\n  const pointVals = keys\n    .map((key) => dObj[key])\n    .filter((point) => {\n      return point.trim() !== ''\n    })\n  let val = 0\n  // Extract max or min\n  // Empty vals always return default zero\n  // However: if there's only one point, leave min at default zero\n  // (Works around issue when there are 2 series, one of which is chart-blobs)\n  if (pointVals.length > 0) {\n    if (isMax) {\n      val = Math.max(...pointVals)\n    } else if (pointVals.length > 1) {\n      val = Math.min(...pointVals)\n    }\n  }\n  return val\n}\n// GET POINT MAX / MIN ends\n\n// MAP SPINDLE DATA\n// Called from updateThermos\nexport function mapSpindleData(config) {\n  const sData = config.chartData\n  // Exclude 2 headers: categories and any blob series\n  // And yes, this is a kludge: really I shouldn't be\n  // triaging the data at this stage...\n  const catHead = config.catHead\n  const blobHead = config.blobHeader\n  // const factor = config.factor;\n  const mappedSpindleData = sData.map((ddd) => {\n    const spindVal = {\n      category: ddd[config.catHead],\n      max: getPointMaxMin(ddd, catHead, blobHead, true) / config.factor,\n    }\n    // If only one series, set min to zero (I suppose this can mean that\n    // spindles get drawn 'upside-down', but does it matter?)\n    if (config.seriesCount === 1) {\n      spindVal.min = 0\n    } else {\n      spindVal.min =\n        getPointMaxMin(ddd, catHead, blobHead, false) / config.factor\n    }\n    return spindVal\n  })\n  return mappedSpindleData\n}\n// MAP SPINDLE DATA ends\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ThermoUtilities from './thermo-utilities'\nimport * as ChartUtilities from '../chart-utilities'\n\nclass SilverThermoVerticalSeries extends Component {\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateThermos()\n      // const context = this.props.config.className.split(' ')[1]\n      // const context = 'zeroline-group';\n      // ChartUtilities.updateAnyZeroLine(this.props.config, context, true);\n      // this.updateZeroLine()\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateThermos()\n      // const context = this.props.config.className.split(' ')[1]\n      // const context = 'zeroline-group';\n      // ChartUtilities.updateAnyZeroLine(this.props.config, context, true);\n      // this.updateZeroLine()\n    }\n  }\n\n  // ======= Event handler ======\n\n  // THERMO CLICK\n  // Handles thermo click event. Params are data (cat and value)\n  // and index in overall data.\n  // NOTE: This event currently gets passed back up to\n  // ThermoChart, where I do a console.log. Long-term, I might\n  // use this to set 'emphasis'...\n  thermoClick(colData, index) {\n    const clickObj = { colData, index }\n    this.props.onPassThermoClick(clickObj)\n  }\n  // BAR CLICK ends\n\n  // ======= Spindles ======\n\n  // ENTER SPINDLES\n  // Called from updateThermos\n  enterSpindles(spindleBinding, config) {\n    const styles = config.styles.spindle\n    spindleBinding\n      .enter()\n      .append('line')\n      .attr({\n        class: 'thermo-spindle',\n        id: (ddd, iii) => {\n          let idStr = `thermo-spindle-${iii}`\n          idStr = `${idStr}~~~stroke:${styles.stroke}`\n          return idStr\n        },\n      })\n      .style({\n        stroke: config.colourLookup[styles.stroke],\n        'stroke-width': styles.width,\n      })\n  }\n  // ENTER SPINDLES ends\n\n  // UPDATE SPINDLES\n  // Called from updateThermos\n  updateSpindles(spindleBinding, config) {\n    spindleBinding.attr({\n      class: 'thermo-spindle',\n      x1: (ddd) => config.xMainScale(ddd.category),\n      x2: (ddd) => config.xMainScale(ddd.category),\n      width: (ddd) => ddd.strokewidth,\n      y1: (ddd) => config.yScale(ddd.max),\n      y2: (ddd) => {\n        let y2 = config.yScale(ddd.min)\n        if (config.isLog) {\n          y2 = config.yScale(config.minVal)\n        } else if (config.seriesCount === 1 && config.breakScale) {\n          y2 = config.yScale(config.minVal) + config.brokenScalePadding\n        }\n        return y2\n      },\n    })\n  }\n  // UPDATE SPINDLES ends\n\n  // EXIT SPINDLES\n  // Called from updateThermos\n  exitSpindles(spindleBinding, duration) {\n    spindleBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('opacity', 0)\n    spindleBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // EXIT SPINDLES ends\n\n  // ======= Line Markers ======\n\n  // ENTER LINE MARKERS\n  // Called from updateThermos\n  enterLineMarkers(markerBinding, config) {\n    const styles = config.styles.line\n    // Enter appends line in place, with zero width\n    markerBinding\n      .enter()\n      .append('line')\n      .attr({\n        class: 'd3-thermo-marker',\n        x1: (ddd) => {\n          let xPos = config.xMainScale(ddd.category)\n          xPos -= styles.length / 2\n          return xPos\n        },\n        x2: (ddd) => {\n          let xPos = config.xMainScale(ddd.category)\n          xPos += styles.length / 2\n          return xPos\n        },\n        'stroke-width': 0,\n        y1: config.bounds.height,\n        y2: config.bounds.height,\n        id: (ddd, iii) => {\n          let idStr = `thermo-vertical-series-${iii}`\n          idStr = `${idStr}~~~stroke:${ddd.strokeName}`\n          return idStr\n        },\n      })\n      // Set click event on rect\n      .on('click', (ddd, iii) => this.thermoClick(ddd, iii))\n      // Crude tooltip (populated in update)\n      // NOTE: can't use '=>' because D3 needs to select 'this'\n      /* eslint-disable func-names, no-invalid-this */\n      .each(function() {\n        d3.select(this)\n          .append('svg:title')\n          .attr('class', 'd3-tooltip')\n      })\n    return markerBinding\n  }\n  // ENTER LINE MARKERS ends\n\n  // UPDATE LINE MARKERS\n  // Called from updateThermos\n  updateLineMarkers(markerBinding, config) {\n    markerBinding\n      .transition(config.duration)\n      .attr({\n        'stroke-width': config.styles.line.width,\n        y1: (ddd) => config.yScale(ddd.val),\n        y2: (ddd) => config.yScale(ddd.val),\n      })\n      .style('stroke', (ddd) => ddd.stroke)\n  }\n  // UPDATE LINE MARKERS ends\n\n  // EXIT LINE MARKERS\n  exitLineMarkers(markerBinding, duration) {\n    markerBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('opacity', 0)\n    markerBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // EXIT LINE MARKERS ends\n\n  // ======= Dot Markers ======\n\n  // ENTER DOT MARKERS\n  // Called from updateThermos\n  enterDotMarkers(markerBinding, config) {\n    // Enter appends line in place, with zero width\n    markerBinding\n      .enter()\n      .append('circle')\n      .attr({\n        class: 'd3-thermo-marker',\n        cx: (ddd) => config.xMainScale(ddd.category),\n        cy: config.yScale(0),\n        r: 0,\n        'stroke-width': 0,\n        id: (ddd, iii) => {\n          let idStr = `thermo-vertical-series-${iii}`\n          idStr = `${idStr}~~~fill:${ddd.fillName}`\n          return idStr\n        },\n      })\n      // Set click event on rect\n      .on('click', (ddd, iii) => this.thermoClick(ddd, iii))\n      // Crude tooltip (populated in update)\n      // NOTE: can't use '=>' because D3 needs to select 'this'\n      /* eslint-disable func-names, no-invalid-this */\n      .each(function() {\n        d3.select(this)\n          .append('svg:title')\n          .attr('class', 'd3-tooltip')\n      })\n    return markerBinding\n  }\n  // ENTER DOT MARKERS ends\n\n  // UPDATE DOT MARKERS\n  // Called from updateThermos\n  updateDotMarkers(markerBinding, config) {\n    const styles = config.styles.dot\n    markerBinding\n      .transition(config.duration)\n      .attr({\n        'stroke-width': styles.strokeWidth,\n        cy: (ddd) => config.yScale(ddd.val),\n        r: styles.radius,\n      })\n      .style('fill', (ddd) => ddd.fill)\n  }\n  // UPDATE DOT MARKERS ends\n\n  // EXIT DOT MARKERS\n  exitDotMarkers(markerBinding, duration) {\n    markerBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('opacity', 0)\n    markerBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // EXIT DOT MARKERS ends\n\n  // ========== MAIN UPDATE FUNCTION ============\n\n  // UPDATE THERMOS\n  updateThermos() {\n    const config = this.props.config\n    // Context (parent group created in render) and duration\n    // (NOTE: In the long term, we'd need more than one group...)\n    const className = config.className.split(' ')[1]\n    const mainSeriesGroup = d3.select(`.${className}`)\n    // SPINDLE\n    // Values for the 'spindle'\n    const spindleData = ThermoUtilities.mapSpindleData(config)\n    // Group\n    // Originally nested spindles with series. As of Jul'20,\n    // in separate group, rendered in parent\n    // const spindleGroup = mainSeriesGroup.append('g').attr({\n    //   class: 'thermo-spindle-group',\n    //   id: 'thermo-spindle-group',\n    // });\n    // Bind\n    const spindleGroupClass = `.${this.props.spindlesId}`\n    const spindleGroup = d3.select(spindleGroupClass)\n    const spindleBinding = spindleGroup\n      .selectAll('.thermo-spindle')\n      .data(spindleData)\n    // Enter\n    this.enterSpindles(spindleBinding, config)\n    // Update\n    this.updateSpindles(spindleBinding, config)\n    // Exit\n    this.exitSpindles(spindleBinding, config.duration)\n\n    // SERIES\n    // Map the actual series data:\n    // As far as I can see, the data is in the right format:\n    // an array of objects with header:value properties\n    const mappedData = ChartUtilities.mapSeriesData(config, false)\n    // mappedData is an array of arrays, each of which represents a series\n    // Each series sub-array consists of <pointCount> objects\n    // defining one data point and with properties...\n    //    category: the category string\n    //    fill: fill colour\n    //    val: the 'internal', *unscaled* value of THIS point\n\n    // Outer binding\n    const groupBinding = ChartUtilities.makeBarColSeriesGroupBinding(\n      mainSeriesGroup,\n      mappedData,\n      config.duration,\n      'thermo'\n    )\n    // Bind inner (points) data\n    const markerBinding = groupBinding\n      .selectAll('.d3-thermo-marker')\n      .data((ddd) => ddd)\n    if (config.dotFlag) {\n      this.enterDotMarkers(markerBinding, config)\n      this.updateDotMarkers(markerBinding, config)\n      this.exitDotMarkers(markerBinding, config.duration)\n    } else {\n      this.enterLineMarkers(markerBinding, config)\n      this.updateLineMarkers(markerBinding, config)\n      this.exitLineMarkers(markerBinding, config.duration)\n    }\n  }\n  // UPDATE THERMOS ends\n\n  // RENDER all-series parent group:\n  render() {\n    return (\n      <g\n        className={this.props.config.className}\n        id=\"series-group:thermo-vertical\"\n      />\n    )\n  }\n}\n\nSilverThermoVerticalSeries.propTypes = {\n  spindlesId: PropTypes.string,\n  config: PropTypes.object,\n  onPassThermoClick: PropTypes.func,\n}\nexport default SilverThermoVerticalSeries\n","// NOTE: while I'm messing around...\n// /* eslint-disable no-unused-vars */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\nimport * as AxisUtilities from '../axes/axis-utilities'\nimport ConfigXaxisOrdinal from '../axes/configuration/xaxis-ordinal-config'\nimport ConfigYaxisLinear from '../axes/configuration/yaxis-linear-config'\nimport * as BrokenScale from '../axes/broken-scale'\nimport * as BlobUtilities from '../blobs/blob-utilities'\n// D3 sub-components:\nimport SilverXaxisOrdinal from '../axes/live/xaxis-ordinal'\nimport SilverXaxisOrdinalTest from '../axes/tests/xaxis-ordinal-test'\nimport SilverYaxisLinear from '../axes/live/yaxis-linear'\nimport SilverYaxisLinearTest from '../axes/tests/yaxis-linear-test'\nimport SilverThermoVerticalSeries from './thermoverticalseries'\nimport SilverXaxisBlobs from '../blobs/xaxis-blobs'\n\nclass SilverThermoVerticalChart extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      // flags to control subcomponent testing/rendering\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      // updated innerBox bounds\n      innerBox: this.props.config.innerBox,\n      // Default granularity object\n      granularity: {},\n      // Temporary innerBox bounds\n      postYaxisBounds: {},\n    }\n    // Callbacks from axis and blobs tests:\n    this.handleXaxisInnerBoxBounds = this.handleXaxisInnerBoxBounds.bind(this)\n    this.handleYaxisInnerBoxBoundsLeft = this.handleYaxisInnerBoxBoundsLeft.bind(\n      this\n    )\n    this.handleYaxisInnerBoxBoundsRight = this.handleYaxisInnerBoxBoundsRight.bind(\n      this\n    )\n    this.handleBlobsInnerBoxBounds = this.handleBlobsInnerBoxBounds.bind(this)\n    // Click on thermo marker\n    this.handleThermoClick = this.handleThermoClick.bind(this)\n  }\n\n  // COMPONENT WILL MOUNT\n  // Puts inherited innerBox into state:\n  UNSAFE_componentWillMount() {\n    this.setState({\n      yaxisTestLeft: true,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      innerBox: this.props.config.innerBox,\n    })\n  }\n\n  // COMPONENT DID MOUNT\n  UNSAFE_componentDidMount() {\n    this.mainDthreeGroupTransition(0)\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Reset state to default...\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      innerBox: newProps.config.innerBox,\n      yaxisTestLeft: true,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n  }\n\n  // Callbacks:\n  // HANDLE Y-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox, allowing for axis labels.\n  // It also sets state.postYaxisBounds, which represents the\n  // chart area after allowing for yaxis labels and before the\n  // IB is adjusted for projecting x-axis category strings. This\n  // (hopefully!) allows me to adjust for blobs...\n  handleYaxisInnerBoxBoundsLeft(innerBox) {\n    this.setState({\n      innerBox,\n      postYaxisBounds: Object.assign({}, innerBox),\n      yaxisTestLeft: false,\n      yaxisTestRight: true,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n  }\n\n  handleYaxisInnerBoxBoundsRight(innerBox) {\n    this.setState({\n      innerBox,\n      postYaxisBounds: Object.assign({}, innerBox),\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: true,\n      blobsTest: false,\n    })\n  }\n\n  // HANDLE X-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox after calculating axis adjustments\n  handleXaxisInnerBoxBounds(result) {\n    this.setState({\n      innerBox: result.bounds,\n      granularity: result.granularity,\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: true,\n    })\n  }\n\n  // HANDLE BLOBS INNER BOX BOUNDS\n  // ...fields the revised innerBox\n  handleBlobsInnerBoxBounds(innerBox) {\n    // Firing off an error msg if IB is on the small side...\n    // ...deleted Feb'21\n    // Simply set state\n    this.setState({\n      innerBox,\n      // Set flags for render 4 (final)\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n    // const duration = this.props.config.duration;\n    // NOTE: set to zero to prevent visible drop-in from top left...\n    // NOTE: if I'm going to use a zero duration regularly, put it into prefs\n    const duration = 0\n    this.mainDthreeGroupTransition(duration)\n  }\n\n  // HANDLE THERMO CLICK EVENT\n  // This is potentially useful... maybe...\n  handleThermoClick(event) {\n    const thermoData = event.colData\n    // const index = event.index;\n    const info = `Value is ${thermoData.category}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n  // HANDLE THERMO CLICK EVENT ends\n\n  /*\n    The logic is that if I've rendered Sibyl, in order to update\n    Editor status, I don't want to have a re-render here fire\n    off another callback and start it all going round.\n    So actually I want the situation to remain the same, unless\n    Editor has kicked off and forced the flag to true\n    So if the flag is false, I don't want anything to change\n  */\n\n  // MAIN D3 GROUP TRANSITION\n  // After adjustments have been made to the background elements\n  // Moves main D3 group into position\n  // NB: This isn't interested in mainGroup *size* -- only in location\n  mainDthreeGroupTransition(duration) {\n    const innerBox = this.state.innerBox\n    const bLeft = innerBox.x\n    const bTop = innerBox.y\n    const transStr = `translate(${bLeft}, ${bTop})`\n    const mainGroupClass = this.getMainGroupClass(true, false)\n    const mainGroup = d3.select(mainGroupClass)\n    mainGroup\n      .transition()\n      .duration(duration)\n      .attr('transform', transStr)\n  }\n\n  // GET MAIN GROUP CLASS\n  // Returns class name for main chart group. Arg 1 determines\n  // whether classes are preceded by a dot; arg 2 whether\n  // the general class (which pulls in the CSS) is appended\n  // NOTE: The point is, because all d3 refs are specific, I need\n  // indexed class names throughout. The general class will be used\n  // for CSS (probably n/a for this main group; but important for\n  // axes, at least...)\n  getMainGroupClass(prefixDot, addGeneralClass) {\n    let dot = ''\n    let generalClass = ''\n    if (prefixDot) {\n      dot = '.'\n    }\n    if (addGeneralClass) {\n      generalClass = `${dot}chart-main-group`\n    }\n    return `${generalClass} ${dot}chart-main-group-${this.props.config.chartIndex}`\n  }\n  // GET MAIN GROUP CLASS ends\n\n  //\n  // ==================================\n  // D3 component configuration objects:\n  // ==================================\n\n  // GET X-AXIS CONFIG\n  // Hands off to function in axis-utilities.\n  // Params is CO\n  getXaxisConfig(chartConfig) {\n    const innerBox = Object.assign({}, this.state.innerBox)\n    // Check for test...\n    const testFlag = this.state.xaxisTest\n    const granularity = this.state.granularity\n    const axisConfig = ConfigXaxisOrdinal(\n      chartConfig,\n      innerBox,\n      testFlag,\n      granularity\n    )\n    // NOTE: force ticks ON for thermometers\n    axisConfig.tickPrefs.ticksOn = true\n    return axisConfig\n  }\n  // GET X-AXIS CONFIG ends\n\n  // GET Y-AXIS CONFIG\n  // Hands off to function in axis-utilities.\n  // Params are CO and either 'left' or 'right'\n  getYaxisConfig(chartConfig, side, testFlag) {\n    const innerBox = Object.assign({}, this.state.innerBox)\n    const axisConfig = ConfigYaxisLinear(chartConfig, innerBox, testFlag, side)\n    return axisConfig\n  }\n  // GET Y-AXIS CONFIG ends\n\n  // GET BLOBS CONFIG\n  // Hands off to function in BlobUtilities\n  getBlobsConfig(chartConfig) {\n    const nowBounds = this.state.innerBox\n    const postYBounds = this.state.postYaxisBounds\n    // Check for test...\n    const testFlag = this.state.blobsTest\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const blobConfig = BlobUtilities.configXBlobs(\n      chartConfig,\n      nowBounds,\n      postYBounds,\n      testFlag,\n      side\n    )\n    return blobConfig\n  }\n  // GET BLOBS CONFIG ends\n\n  getMinMaxWidth(config) {\n    return {\n      minWidth: config.series.thermovertical.minWidth,\n      maxWidth: config.series.thermovertical.maxWidth,\n    }\n  }\n\n  // CONFIG SERIES THERMOS\n  // Assembles thermo series config object\n  configSeriesThermos(chartConfig) {\n    // The default name/value lookup of colours\n    const colourLookup = chartConfig.colourLookup\n    // Colours for this sequence of series\n    const colourSet = chartConfig.series.thermovertical.colours\n    const bounds = Object.assign({}, this.state.innerBox)\n    const padding = chartConfig.series.thermovertical.gap\n    const mmw = this.getMinMaxWidth(chartConfig)\n    const minWidth = mmw.minWidth\n    const maxWidth = mmw.maxWidth\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const chartType = chartConfig.scales[side].type\n    const isLog = chartConfig.scales[side].log\n    const mmO = Object.assign({}, chartConfig.scales[side].minMaxObj.scale)\n    // Broken scale...?\n    const brokenScalePadding = BrokenScale.getYaxisBrokenScalePadding(\n      chartType,\n      chartConfig\n    )\n    let breakScale = false\n    if (mmO.min > 0 && !isLog) {\n      // Reset range\n      bounds.height -= brokenScalePadding\n      breakScale = true\n    }\n    // Dot markers?\n    let dotFlag = chartConfig.scales[side].thermoDots\n    if (typeof dotFlag === 'undefined') {\n      dotFlag = false\n    }\n    // Assemble the config object with 'simple' props\n    const config = {\n      dotFlag,\n      blobHeader: chartConfig.blobs.blobState.header,\n      bounds,\n      breakScale,\n      brokenScalePadding,\n      chartData: chartConfig.chartData,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      className: `d3-thermo-series-group d3-thermo-series-group-${chartConfig.chartIndex}`,\n      colourLookup,\n      colourSet,\n      duration: chartConfig.duration,\n      factor: chartConfig.scales[side].factor,\n      isLog,\n      minVal: mmO.min,\n      minWidth,\n      maxWidth,\n      originalBounds: chartConfig.originalInnerBox,\n      padding,\n      pointCount: chartConfig.pointCount,\n      seriesCount: chartConfig.seriesCount,\n      styles: chartConfig.series.thermovertical,\n      thermometer: chartConfig.thermometer,\n      zeroPrefs: chartConfig.xAxis.ticks.zero,\n    }\n    // Mixed +/– flag:\n    config.mixedVals = mmO.min < 0 && mmO.max >= 0\n    // Y-SCALE (linear):\n    if (isLog) {\n      config.yScale = d3.scale\n        .log()\n        .range([bounds.height, 0])\n        .domain([mmO.min, mmO.max])\n    } else {\n      config.yScale = d3.scale\n        .linear()\n        .range([bounds.height, 0])\n        .domain([mmO.min, mmO.max])\n    }\n    // HEADERS:\n    // NOTE: this is all dup'd in barchart.js...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n    config.catHead = chartConfig.headers[0]\n    // Now exclude any blob headers:\n    const actualHeaders = []\n    for (let iii = 1; iii <= chartConfig.seriesCount; iii++) {\n      if (chartConfig.headers[iii] !== chartConfig.blobs.blobState.header) {\n        actualHeaders.push(chartConfig.headers[iii])\n      }\n    }\n    config.seriesHeads = actualHeaders\n    // Map series colours:\n    config.colourMap = ChartUtilities.getColourMap(actualHeaders, colourSet)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // X-SCALE:\n    const xMainDomain = chartConfig.chartData.map((ddd) => ddd[config.catHead])\n    config.xMainScale = d3.scale\n      .ordinal()\n      .domain(xMainDomain)\n      .rangePoints([0, config.bounds.width], 0, 0)\n    return config\n  }\n  // CONFIG SERIES THERMOS ends\n\n  // GET Y-AXIS JSX\n  // Ideally, these would be in AxisUtilities, shared by all chart\n  // types. The trouble is, it needs access to state, so unless I'm\n  // going to start passing state around as a param, it has to live\n  // here, and all chart-type components will duplicate this code...\n  getYaxisJsx(config, exists, key, side) {\n    let axisConfig = { enabled: false }\n    // Check for test...\n    let testFlag = this.state.yaxisTestLeft\n    if (side === 'right') {\n      testFlag = this.state.yaxisTestRight\n    }\n    if (exists) {\n      axisConfig = this.getYaxisConfig(config, side, testFlag)\n    }\n    axisConfig.bounds = this.state.innerBox\n    // return axisConfig;\n    // Render left yaxis only, with 'test' flag\n    // to get margin\n    let callbackHandler = this.handleYaxisInnerBoxBoundsRight\n    if (side === 'left') {\n      callbackHandler = this.handleYaxisInnerBoxBoundsLeft\n    }\n    let axisJsx = ''\n    if (testFlag) {\n      axisJsx = (\n        <SilverYaxisLinearTest\n          key={`${key}-test-${side}`}\n          config={axisConfig}\n          onReturnRevisedInnerBox={callbackHandler}\n        />\n      )\n    } else {\n      axisJsx = (\n        <SilverYaxisLinear key={`${key}-test-${side}`} config={axisConfig} />\n      )\n    }\n    return axisJsx\n  }\n  // GET Y-AXIS JSX ends\n\n  // GET X-AXIS JSX\n  // Called from render to assemble x-axis jsx\n  getXaxisJsx(config, key) {\n    // Fcn in this component pulls a couple of strings, then calls\n    // fcn in AxisUtilities... and the result is the axis config obj.\n    const axisConfig = this.getXaxisConfig(config)\n    axisConfig.bounds = this.state.innerBox\n    // Test or live:\n    let xaxisJsx = ''\n    if (this.state.xaxisTest) {\n      // Only send callback for test\n      xaxisJsx = (\n        <SilverXaxisOrdinalTest\n          key={key}\n          config={axisConfig}\n          onReturnRevisedInnerBox={this.handleXaxisInnerBoxBounds}\n        />\n      )\n    } else {\n      xaxisJsx = <SilverXaxisOrdinal key={key} config={axisConfig} />\n    }\n    return xaxisJsx\n  }\n  // GET X-AXIS JSX ends\n\n  // GET BLOBS JSX\n  getBlobsJsx(config, key, isTest) {\n    const blobsConfig = this.getBlobsConfig(config)\n    blobsConfig.bounds = this.state.innerBox\n    const jsxTemplate = (\n      <SilverXaxisBlobs\n        key={key}\n        config={blobsConfig}\n        onReturnRevisedInnerBox={this.handleBlobsInnerBoxBounds}\n      />\n    )\n    let jsx = ''\n    if (isTest) {\n      // If it's a test, always assemble jsx\n      jsx = jsxTemplate\n    } else if (blobsConfig.blobs.blobState.column > 0) {\n      // Not a test, only make up jsx if there ARE blobs\n      jsx = jsxTemplate\n    }\n    return jsx\n  }\n  // GET BLOBS JSX ends\n\n  // RENDER\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Key all subcomponents:\n    const kids = ChartUtilities.getKeysAndIds(chartIndex)\n\n    // Custom config objects for the various d3 components\n    // See linechart.js\n\n    // Y axis can be left/right/both...\n    const enableScale = config.scales.enableScale\n    const yLeft = enableScale.left\n    const yRight = enableScale.right\n    // Default empty jsx\n    let xaxisJSX = ''\n    let yaxisJSXLeft = ''\n    let yaxisJSXRight = ''\n    let blobsJSX = ''\n    let thermoseriesJSX = ''\n    // Render sequence:\n    // Either the tests, where we render individual components...\n    if (this.state.yaxisTestLeft) {\n      yaxisJSXLeft = this.getYaxisJsx(config, yLeft, kids.yAxisKey, 'left')\n    } else if (this.state.yaxisTestRight) {\n      yaxisJSXRight = this.getYaxisJsx(config, yRight, kids.yAxisKey, 'right')\n    } else if (this.state.xaxisTest) {\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n    } else if (this.state.blobsTest) {\n      blobsJSX = this.getBlobsJsx(config, kids.blobsKey, this.state.blobsTest)\n    } else {\n      // ...or, when all tests are done, the whole shebang!\n      // Full render, with all children.\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n      if (yLeft) {\n        yaxisJSXLeft = this.getYaxisJsx(config, yLeft, kids, 'left')\n      }\n      if (yRight) {\n        yaxisJSXRight = this.getYaxisJsx(config, yRight, kids, 'right')\n      }\n      blobsJSX = this.getBlobsJsx(config, kids.blobsKey, this.state.blobsTest)\n      const seriesConfig = this.configSeriesThermos(config)\n      seriesConfig.bounds = this.state.innerBox\n      thermoseriesJSX = (\n        <SilverThermoVerticalSeries\n          spindlesId={kids.thermoSpindlesId}\n          seriesKeyey={kids.thermoSeriesKey}\n          config={seriesConfig}\n          onPassThermoClick={this.handleThermoClick}\n        />\n      )\n    }\n    // General and indexed class for main group:\n    const mainGroupClass = this.getMainGroupClass(false, true)\n\n    // NOTE: I can draw a temporary 'inner box'\n    // so I can see what I've got...\n    // const rectStyle = {\n    //   fill: '#aa5',\n    //   width: this.state.innerBox.width,\n    //   height: this.state.innerBox.height,\n    //   x: 0,\n    //   y: 0,\n    // };\n    // <rect style={rectStyle} />\n\n    // zeroline-group is in front of yaxis, behind series;\n    // for zero line, if any, and other possible\n    // furniture that has to overlay other elements\n\n    // Structure changes according to number of series\n    let sCount = config.seriesCount\n    if (config.blobs.hasBlobs) {\n      sCount--\n    }\n    // Default is more than one series:\n    let chartComponentsJSX = (\n      <g className={mainGroupClass} key={kids.mainGroupKey} id={kids.contentId}>\n        {xaxisJSX}\n        {yaxisJSXLeft}\n        {yaxisJSXRight}\n        {blobsJSX}\n        <g className={kids.zeroId} id={kids.zeroId} />\n        <g className={kids.thermoSpindlesId} id={kids.thermoSpindlesId} />\n        {thermoseriesJSX}\n      </g>\n    )\n    // But if only one series, zeroline is in front of spindles\n    if (sCount < 2) {\n      chartComponentsJSX = (\n        <g\n          className={mainGroupClass}\n          key={kids.mainGroupKey}\n          id={kids.contentId}\n        >\n          {xaxisJSX}\n          {yaxisJSXLeft}\n          {yaxisJSXRight}\n          {blobsJSX}\n          <g className={kids.thermoSpindlesId} id={kids.thermoSpindlesId} />\n          <g className={kids.zeroId} id={kids.zeroId} />\n          {thermoseriesJSX}\n        </g>\n      )\n    }\n    return chartComponentsJSX\n  }\n}\n\nSilverThermoVerticalChart.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverThermoVerticalChart\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ThermoUtilities from './thermo-utilities'\nimport * as ChartUtilities from '../chart-utilities'\n\nclass SilverThermoHorizontalSeries extends Component {\n  // COMPONENT DID MOUNT\n\n  componentDidMount() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateThermos()\n      // const context = this.props.config.className.split(' ')[1]\n      // const context = 'zeroline-group';\n      // ChartUtilities.updateAnyZeroLine(this.props.config, context, true);\n      // this.updateZeroLine()\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateThermos()\n      // const context = this.props.config.className.split(' ')[1]\n      // const context = 'zeroline-group';\n      // ChartUtilities.updateAnyZeroLine(this.props.config, context, true);\n      // this.updateZeroLine()\n    }\n  }\n\n  // ======= Event handler ======\n\n  // THERMO CLICK\n  // Handles thermo click event. Params are data (cat and value)\n  // and index in overall data.\n  // NOTE: This event currently gets passed back up to\n  // ThermoChart, where I do a console.log. Long-term, I might\n  // use this to set 'emphasis'...\n  thermoClick(colData, index) {\n    const clickObj = { colData, index }\n    this.props.onPassThermoClick(clickObj)\n  }\n  // BAR CLICK ends\n\n  // ======= Spindles ======\n\n  // ENTER SPINDLES\n  // Called from updateThermos\n  enterSpindles(spindleBinding, config) {\n    const styles = config.styles.spindle\n    spindleBinding\n      .enter()\n      .append('line')\n      .attr({\n        class: 'thermo-spindle',\n        id: (ddd, iii) => {\n          let idStr = `thermo-spindle-${iii}`\n          idStr = `${idStr}~~~stroke:${styles.stroke}`\n          return idStr\n        },\n      })\n      .style({\n        stroke: config.colourLookup[styles.stroke],\n        'stroke-width': styles.width,\n      })\n  }\n  // ENTER SPINDLES ends\n\n  // UPDATE SPINDLES\n  // Called from updateThermos\n  updateSpindles(spindleBinding, config) {\n    spindleBinding.attr({\n      class: 'thermo-spindle',\n      y1: (ddd) => config.yMainScale(ddd.category),\n      y2: (ddd) => config.yMainScale(ddd.category),\n      width: (ddd) => ddd.strokewidth,\n      x1: (ddd) => {\n        let x1 = config.xScale(ddd.min)\n        if (config.isLog) {\n          x1 = config.xScale(config.minVal)\n        } else if (config.seriesCount === 1 && config.breakScale) {\n          x1 = config.xScale(config.minVal) - config.brokenScalePadding\n        }\n        return x1\n      },\n      x2: (ddd) => config.xScale(ddd.max),\n    })\n  }\n  // UPDATE SPINDLES ends\n\n  // EXIT SPINDLES\n  // Called from updateThermos\n  exitSpindles(spindleBinding, duration) {\n    spindleBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('opacity', 0)\n    spindleBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // EXIT SPINDLES ends\n\n  // ======= Line Markers ======\n\n  // ENTER LINE MARKERS\n  // Called from updateThermos\n  enterLineMarkers(markerBinding, config) {\n    const styles = config.styles.line\n    // Enter appends line in place, with zero width\n    markerBinding\n      .enter()\n      .append('line')\n      .attr({\n        class: 'd3-thermo-marker',\n        y1: (ddd) => {\n          let yPos = config.yMainScale(ddd.category)\n          yPos -= styles.length / 2\n          return yPos\n        },\n        y2: (ddd) => {\n          let yPos = config.yMainScale(ddd.category)\n          yPos += styles.length / 2\n          return yPos\n        },\n        'stroke-width': 0,\n        x1: 0,\n        x2: 0,\n        id: (ddd, iii) => {\n          let idStr = `thermo-horizontal-series-${iii}`\n          idStr = `${idStr}~~~stroke:${ddd.strokeName}`\n          return idStr\n        },\n      })\n      // Set click event on rect\n      .on('click', (ddd, iii) => this.thermoClick(ddd, iii))\n      // Crude tooltip (populated in update)\n      // NOTE: can't use '=>' because D3 needs to select 'this'\n      /* eslint-disable func-names, no-invalid-this */\n      .each(function() {\n        d3.select(this)\n          .append('svg:title')\n          .attr('class', 'd3-tooltip')\n      })\n    return markerBinding\n  }\n  // ENTER LINE MARKERS ends\n\n  // UPDATE LINE MARKERS\n  // Called from updateThermos\n  updateLineMarkers(markerBinding, config) {\n    markerBinding\n      .transition(config.duration)\n      .attr({\n        'stroke-width': config.styles.line.width,\n        x1: (ddd) => config.xScale(ddd.val),\n        x2: (ddd) => config.xScale(ddd.val),\n      })\n      .style('stroke', (ddd) => ddd.stroke)\n  }\n  // UPDATE LINE MARKERS ends\n\n  // EXIT LINE MARKERS\n  exitLineMarkers(markerBinding, duration) {\n    markerBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('opacity', 0)\n    markerBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // EXIT LINE MARKERS ends\n\n  // ======= Dot Markers ======\n\n  // ENTER DOT MARKERS\n  // Called from updateThermos\n  enterDotMarkers(markerBinding, config) {\n    // Enter appends line in place, with zero width\n    markerBinding\n      .enter()\n      .append('circle')\n      .attr({\n        class: 'd3-thermo-marker',\n        cx: config.xScale(0),\n        cy: (ddd) => config.yMainScale(ddd.category),\n        fill: 'red',\n        r: 0,\n        'stroke-width': 0,\n        id: (ddd, iii) => {\n          let idStr = `thermo-horizontal-series-${iii}`\n          idStr = `${idStr}~~~fill:${ddd.fillName}`\n          return idStr\n        },\n      })\n      // Set click event on rect\n      .on('click', (ddd, iii) => this.thermoClick(ddd, iii))\n      // Crude tooltip (populated in update)\n      // NOTE: can't use '=>' because D3 needs to select 'this'\n      /* eslint-disable func-names, no-invalid-this */\n      .each(function() {\n        d3.select(this)\n          .append('svg:title')\n          .attr('class', 'd3-tooltip')\n      })\n    return markerBinding\n  }\n  // ENTER DOT MARKERS ends\n\n  // UPDATE DOT MARKERS\n  // Called from updateThermos\n  updateDotMarkers(markerBinding, config) {\n    const styles = config.styles.dot\n    markerBinding\n      .transition(config.duration)\n      .attr({\n        'stroke-width': styles.strokeWidth,\n        cx: (ddd) => config.xScale(ddd.val),\n        r: styles.radius,\n      })\n      .style('fill', (ddd) => ddd.fill)\n  }\n  // UPDATE DOT MARKERS ends\n\n  // EXIT DOT MARKERS\n  exitDotMarkers(markerBinding, duration) {\n    markerBinding\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('opacity', 0)\n    markerBinding\n      .exit()\n      .transition()\n      .delay(duration * 2)\n      .remove()\n  }\n  // EXIT DOP MARKERS ends\n\n  // ========== MAIN UPDATE FUNCTION ============\n\n  // UPDATE THERMOS\n  updateThermos() {\n    const config = this.props.config\n    // Context (parent group created in render) and duration\n    // (NOTE: In the long term, we'd need more than one group...)\n    const className = config.className.split(' ')[1]\n    const mainSeriesGroup = d3.select(`.${className}`)\n\n    // SPINDLE\n    // Values for the 'spindle'\n    const spindleData = ThermoUtilities.mapSpindleData(config)\n    // Group\n    // Originally nested spindles with series. As of Jul'20,\n    // in separate group, rendered in parent\n    // const spindleGroup = mainSeriesGroup.append('g').attr({\n    //   class: 'thermo-spindle-group',\n    //   id: 'thermo-spindle-group',\n    // });\n    // Bind\n    const spindleGroupClass = `.${this.props.spindlesId}`\n    const spindleGroup = d3.select(spindleGroupClass)\n    const spindleBinding = spindleGroup\n      .selectAll('.thermo-spindle')\n      .data(spindleData)\n    // Enter (NOTE: will it want 'config'?)\n    this.enterSpindles(spindleBinding, config)\n    // Update\n    this.updateSpindles(spindleBinding, config)\n    // Exit\n    this.exitSpindles(spindleBinding, config.duration)\n\n    // SERIES\n    // Map the actual series data:\n    // As far as I can see, the data is in the right format:\n    // an array of objects with header:value properties\n    const mappedData = ChartUtilities.mapSeriesData(config, false)\n    // mappedData is an array of arrays, each of which represents a series\n    // Each series sub-array consists of <pointCount> objects\n    // defining one data point and with properties...\n    //    category: the category string\n    //    fill: fill colour\n    //    val: the 'internal', *unscaled* value of THIS point\n\n    // Outer binding\n    const groupBinding = ChartUtilities.makeBarColSeriesGroupBinding(\n      mainSeriesGroup,\n      mappedData,\n      config.duration,\n      'thermo'\n    )\n    // Bind inner (points) data\n    const markerBinding = groupBinding\n      .selectAll('.d3-thermo-marker')\n      .data((ddd) => ddd)\n    if (config.dotFlag) {\n      this.enterDotMarkers(markerBinding, config)\n      this.updateDotMarkers(markerBinding, config)\n      this.exitDotMarkers(markerBinding, config.duration)\n    } else {\n      this.enterLineMarkers(markerBinding, config)\n      this.updateLineMarkers(markerBinding, config)\n      this.exitLineMarkers(markerBinding, config.duration)\n    }\n  }\n  // UPDATE THERMOS ends\n\n  // RENDER all-series parent group:\n  render() {\n    return (\n      <g\n        className={this.props.config.className}\n        id=\"series-group:thermo-horizontal\"\n      />\n    )\n  }\n}\n\nSilverThermoHorizontalSeries.propTypes = {\n  spindlesId: PropTypes.string,\n  config: PropTypes.object,\n  onPassThermoClick: PropTypes.func,\n}\n\nexport default SilverThermoHorizontalSeries\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\nimport * as AxisUtilities from '../axes/axis-utilities'\nimport ConfigXaxisLinear from '../axes/configuration/xaxis-linear-config'\nimport ConfigYaxisOrdinal from '../axes/configuration/yaxis-ordinal-config'\nimport SilverXaxisLinear from '../axes/live/xaxis-linear'\nimport SilverXaxisLinearTest from '../axes/tests/xaxis-linear-test'\nimport SilverYaxisOrdinal from '../axes/live/yaxis-ordinal'\nimport SilverYaxisOrdinalTest from '../axes/tests/yaxis-ordinal-test'\nimport SilverThermoHorizontalSeries from './thermohorizontalseries'\nimport SilverYaxisBlobs from '../blobs/yaxis-blobs'\n\nclass SilverThermoHorizontalChart extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      // flags to control subcomponent testing/rendering\n      xaxisTest: true,\n      yaxisTest: false,\n      blobsTest: false,\n      // updated innerBox bounds\n      innerBox: this.props.config.innerBox,\n    }\n    // Callbacks from axis and blobs tests:\n    this.handleXaxisInnerBoxBounds = this.handleXaxisInnerBoxBounds.bind(this)\n    this.handleYaxisInnerBoxBounds = this.handleYaxisInnerBoxBounds.bind(this)\n    this.handleBlobsInnerBoxBounds = this.handleBlobsInnerBoxBounds.bind(this)\n    // Click on thermo\n    this.handleThermoClick = this.handleThermoClick.bind(this)\n  }\n\n  // COMPONENT WILL MOUNT\n  // Puts inherited innerBox into state:\n  // componentWillMount() {\n  //   this.setState({ innerBox: this.props.config.innerBox });\n  // }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.mainDthreeGroupTransition(0)\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Reset state to default...\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      innerBox: newProps.config.innerBox,\n      xaxisTest: true,\n      yaxisTest: false,\n      blobsTest: false,\n    })\n  }\n\n  // Callbacks:\n  // HANDLE X-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox (after axis testing)\n  handleXaxisInnerBoxBounds(innerBox) {\n    this.setState({\n      innerBox,\n      // Set flags for render 2 (y-axis test)\n      xaxisTest: false,\n      yaxisTest: true,\n      blobsTest: false,\n    })\n  }\n\n  // HANDLE Y-AXIS INNER BOX BOUNDS\n  handleYaxisInnerBoxBounds(innerBox) {\n    this.setState({\n      innerBox,\n      // Set flags for render 3 (blobs test)\n      xaxisTest: false,\n      yaxisTest: false,\n      blobsTest: true,\n    })\n  }\n\n  // HANDLE BLOBS INNER BOX BOUNDS\n  handleBlobsInnerBoxBounds(innerBox) {\n    this.setState({\n      innerBox,\n      // Set flags for render 4 (final)\n      xaxisTest: false,\n      yaxisTest: false,\n      blobsTest: false,\n    })\n    // const duration = this.props.config.duration;\n    // NOTE: set to zero to prevent visible drop-in from top left...\n    // NOTE: if I'm going to use a zero duration regularly, put it into prefs\n    const duration = 0\n    this.mainDthreeGroupTransition(duration)\n  }\n\n  // HANDLE THERMO CLICK EVENT\n  // This is potentially useful... maybe...\n  handleThermoClick(event) {\n    const thermoData = event.colData\n    // const index = event.index;\n    const info = `Value is ${thermoData.category}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n  // HANDLE THERMO CLICK EVENT ends\n  /*\n    The logic is that if I've rendered Sibyl, in order to update\n    Editor status, I don't want to have a re-render here fire\n    off another callback and start it all going round.\n    So actually I want the situation to remain the same, unless\n    Editor has kicked off and forced the flag to true\n    So if the flag is false, I don't want anything to change\n  */\n\n  // MAIN D3 GROUP TRANSITION\n  // Called from handleYaxisInnerBoxBounds\n  // On 2nd render only, after adjustments have been made to the background elements\n  // (strings and legand)\n  // Moves main D3 group into position\n  // NB: This isn't interested in mainGroup *size* -- only in location\n  mainDthreeGroupTransition(duration) {\n    const innerBox = this.state.innerBox\n    const bLeft = innerBox.x\n    const bTop = innerBox.y\n    const transStr = `translate(${bLeft}, ${bTop})`\n    const mainGroupClass = this.getMainGroupClass(true, false)\n    const mainGroup = d3.select(mainGroupClass)\n    mainGroup\n      .transition()\n      .duration(duration)\n      .attr('transform', transStr)\n  }\n  // Because of the double-render, the above can only be called on an update (I think!)\n\n  // GET MAIN GROUP CLASS\n  // Returns class name for main chart group. Arg 1 determines\n  // whether classes are preceded by a dot; arg 2 whether\n  // the general class (which pulls in the CSS) is appended\n  // NOTE: The point is, because all d3 refs are specific, I need\n  // indexed class names throughout. The general class will be used\n  // for CSS (probably n/a for this main group; but important for\n  // axes, at least...)\n  getMainGroupClass(prefixDot, addGeneralClass) {\n    let dot = ''\n    let generalClass = ''\n    if (prefixDot) {\n      dot = '.'\n    }\n    if (addGeneralClass) {\n      generalClass = `${dot}chart-main-group`\n    }\n    return `${generalClass} ${dot}chart-main-group-${this.props.config.chartIndex}`\n  }\n  // GET MAIN GROUP CLASS ends\n\n  //\n  // ==================================\n  // D3 component configuration objects:\n  // ==================================\n\n  // GET AXIS CONFIG\n  // Hands off to function in axis-utilities. 2nd param is a flag\n  // for x- or y-axis.\n  // NOTE: for horizontal thermo charts, I have no option for x-axis at top or bottom...\n  getAxisConfig(chartConfig, isXaxis) {\n    let axisConfig = {}\n    // Go to state for the innerBox, since that\n    // gets modified by the callback from margin check...\n    const innerBox = Object.assign({}, this.state.innerBox)\n    if (isXaxis) {\n      // Utility fcn; 3rd arg is testFlag\n      axisConfig = ConfigXaxisLinear(\n        chartConfig,\n        innerBox,\n        this.state.xaxisTest\n      )\n    } else {\n      axisConfig = ConfigYaxisOrdinal(\n        chartConfig,\n        innerBox,\n        this.state.yaxisTest\n      )\n    }\n    return axisConfig\n  }\n  // GET AXIS CONFIG ends\n\n  // CONFIG BLOBS\n  // Assembles blob config object for horizontal thermos (y-axis)\n  // Dangerously close to a dupe of barchart\n  configBlobs(chartConfig) {\n    // Define props required for more than immediate slot-in to config\n    const colourSet = chartConfig.series.thermohorizontal.colours\n    // Extract blob headers.\n    // headers is complete list\n    const hLen = chartConfig.headers.length\n    const blobs = chartConfig.blobs\n    blobs.min = chartConfig.blobs.minVal\n    blobs.max = chartConfig.blobs.maxVal\n    const blobheads = []\n    const bStart = hLen - blobs.blobState.column\n    for (let hhh = bStart; hhh < hLen; hhh++) {\n      blobheads.push(chartConfig.headers[hhh])\n    }\n    const padding = AxisUtilities.getBarThermoGap(chartConfig)\n    // Get side:\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const chartType = chartConfig.scales[side].type\n    const accum = chartConfig.scales[side].stacked\n    // Dot markers: bar or circle?\n    let dotFlag = chartConfig.scales[side].thermoDots\n    if (typeof dotFlag === 'undefined') {\n      dotFlag = false\n    }\n    // Assemble the config object with 'simple' props\n    const config = {\n      accum,\n      bounds: this.state.innerBox,\n      blobData: chartConfig.chartData,\n      blobheads,\n      // blobmeta: chartConfig.blobmeta,\n      blobs,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      groupName: `blob-group-${chartConfig.chartIndex}`,\n      colourLookup: chartConfig.colourLookup,\n      duration: chartConfig.duration,\n      originalBounds: chartConfig.originalInnerBox,\n      outerWidth: chartConfig.outerWidth,\n      padding,\n      pointCount: chartConfig.pointCount,\n      seriesCount: chartConfig.seriesCount,\n      testFlag: this.state.blobsTest,\n    }\n    // And emVal for blobs:\n    config.blobs.blobMeta.text.emVal = chartConfig.emVal\n    // HEADERS:\n    // NOTE: this is all dup'd elsewhere...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n\n    // NOTE: do I really need these?\n    const actualHeaders = chartConfig.headers.slice()\n    config.catHead = actualHeaders.shift()\n    config.seriesHeads = actualHeaders\n    // NOTE ends\n\n    // Map blobbed series colours:\n    config.colourMap = ChartUtilities.getColourMap(blobheads, colourSet)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // Y-SCALE:\n    const yDomain = chartConfig.chartData.map((ddd) => ddd[config.catHead])\n    // Offset from IB top and bottom:\n    let tickOffset = 0\n    // if (chartConfig.thermometer) {\n    if (dotFlag) {\n      tickOffset = chartConfig.series.thermohorizontal.dot.radius\n    } else {\n      tickOffset = chartConfig.series.thermohorizontal.line.length / 2\n    }\n    // } else {\n    //   const gap = AxisUtilities.getBarThermoGap(chartConfig);\n    //   tickOffset =\n    //     AxisUtilities.getClusterWidth(bounds.height, config.pointCount, gap) /\n    //     2;\n    // }\n    config.yMainScale = d3.scale\n      .ordinal()\n      // .rangeBands([0, config.bounds.height + padding, 0, 0])\n      .rangePoints([tickOffset, config.bounds.height - tickOffset], 0, 0)\n      .domain(yDomain)\n    return config\n  }\n  // CONFIG BLOBS ends\n\n  // CONFIG SERIES THERMO\n  // Assembles bar series config object\n  configSeriesThermos(chartConfig) {\n    // The default name/value lookup of colours\n    const colourLookup = chartConfig.colourLookup\n    // Colours for this sequence of series\n    const colourSet = chartConfig.series.thermohorizontal.colours\n    const bounds = Object.assign({}, this.state.innerBox)\n    const padding = chartConfig.series.thermohorizontal.gap\n    // Get side:\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const mmO = Object.assign({}, chartConfig.scales[side].minMaxObj.scale)\n    const isLog = chartConfig.scales[side].log\n    // Broken scale...?\n    // It seems that I don't have to do anything, since\n    // bounds were adjusted somewhere up the line (presumably\n    // in y-axis...)\n    // NOTE: if you ever have time, check this\n    let breakScale = false\n    if (mmO.min > 0 && !isLog) {\n      // bounds.x += chartConfig.xAxis.brokenScalePadding;\n      // bounds.width -= chartConfig.xAxis.brokenScalePadding;\n      breakScale = true\n    }\n    const chartType = chartConfig.scales[side].type\n    // Dot markers?\n    let dotFlag = chartConfig.scales[side].thermoDots\n    if (typeof dotFlag === 'undefined') {\n      dotFlag = false\n    }\n    // Assemble the config object with 'simple' props\n    const config = {\n      dotFlag,\n      blobHeader: chartConfig.blobs.blobState.header,\n      bounds,\n      breakScale,\n      brokenScalePadding: chartConfig.yAxis.brokenScalePadding.thermoHorizontal,\n      chartData: chartConfig.chartData,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      className: `d3-thermo-series-group d3-thermo-series-group-${chartConfig.chartIndex}`,\n      colourLookup,\n      colourSet,\n      duration: chartConfig.duration,\n      factor: chartConfig.scales[side].factor,\n      isLog,\n      minVal: mmO.min,\n      originalBounds: chartConfig.originalInnerBox,\n      padding,\n      pointCount: chartConfig.pointCount,\n      seriesCount: chartConfig.seriesCount,\n      styles: chartConfig.series.thermohorizontal,\n      thermometer: chartConfig.thermometer,\n      tickProjection: chartConfig.yAxis.ticks.projection,\n      zeroPrefs: chartConfig.yAxis.ticks.zero,\n    }\n    // Mixed +/– flag:\n    config.mixedVals = mmO.min < 0 && mmO.max >= 0\n    // X-SCALE (linear)\n    if (isLog) {\n      config.xScale = d3.scale\n        .log()\n        .range([0, bounds.width])\n        .domain([mmO.min, mmO.max])\n    } else {\n      config.xScale = d3.scale\n        .linear()\n        .range([0, bounds.width])\n        .domain([mmO.min, mmO.max])\n    }\n    // HEADERS:\n    // NOTE: this is all dup'd in barchart.js...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n    config.catHead = chartConfig.headers[0]\n    // Now exclude any blob headers:\n    const actualHeaders = []\n    for (let iii = 1; iii <= chartConfig.seriesCount; iii++) {\n      if (chartConfig.headers[iii] !== chartConfig.blobs.blobState.header) {\n        actualHeaders.push(chartConfig.headers[iii])\n      }\n    }\n    config.seriesHeads = actualHeaders\n    // Map series colours:\n    config.colourMap = ChartUtilities.getColourMap(actualHeaders, colourSet)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // Y-SCALE\n    const yMainDomain = chartConfig.chartData.map((ddd) => ddd[config.catHead])\n    // Offset from IB top and bottom:\n    let tickOffset = 0\n    if (chartConfig.thermometer) {\n      if (dotFlag) {\n        tickOffset = config.styles.dot.radius\n      } else {\n        tickOffset = config.styles.line.length / 2\n      }\n    }\n    /*\n     else {\n      // FIXME: actually this fork is surely redundant...\n      // ...and some sort of leftover from bar charts, or something\n      // NOTE: I've comm'd this out. Does anything in\n      // this fork actually do anything useful?\n      // const gap = AxisUtilities.getBarThermoGap(chartConfig);\n      // tickOffset =\n      //   AxisUtilities.getClusterWidth(bounds.height, config.pointCount, gap) /\n      //   2;\n      tickOffset = AxisUtilities.getHalfClusterWidthForAxis(config, false);\n      // NOTE: really? Surely, for thermos:\n      // NOTE: well, this is arbitrary; does it do anything useful?\n      tickOffset = 0;\n    }\n    */\n    config.yMainScale = d3.scale\n      .ordinal()\n      .rangePoints([tickOffset, config.bounds.height - tickOffset], 0, 0)\n      .domain(yMainDomain)\n    return config\n  }\n  // CONFIG SERIES THERMO ends\n\n  // RENDER\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Key all subcomponents:\n    const kids = ChartUtilities.getKeysAndIds(chartIndex)\n\n    let xaxisJSX = ''\n    let yaxisJSX = ''\n    let blobsJSX = ''\n    let thermoseriesJSX = ''\n    // Render sequence:\n    if (this.state.xaxisTest) {\n      const xAxisConfig = this.getAxisConfig(config, true)\n      // Render xaxis only, with 'test' flag\n      xaxisJSX = (\n        <SilverXaxisLinearTest\n          key={kids.xAxisKey}\n          config={xAxisConfig}\n          onReturnRevisedInnerBox={this.handleXaxisInnerBoxBounds}\n        />\n      )\n    } else if (this.state.yaxisTest) {\n      const yAxisConfig = this.getAxisConfig(config, false)\n      yAxisConfig.bounds = this.state.innerBox\n      // Render yaxis only, with 'test' flag\n      yaxisJSX = (\n        <SilverYaxisOrdinalTest\n          key={kids.yAxisKey}\n          config={yAxisConfig}\n          onReturnRevisedInnerBox={this.handleYaxisInnerBoxBounds}\n        />\n      )\n    } else if (this.state.blobsTest) {\n      const blobsConfig = this.configBlobs(config)\n      blobsConfig.bounds = this.state.innerBox\n      // Render blobs only, with 'test' flag\n      blobsJSX = (\n        <SilverYaxisBlobs\n          key={kids.blobsKey}\n          config={blobsConfig}\n          onReturnRevisedInnerBox={this.handleBlobsInnerBoxBounds}\n        />\n      )\n    } else {\n      // Update config objects with 'latest' bounds:\n      const xAxisConfig = this.getAxisConfig(config, true)\n      xAxisConfig.bounds = this.state.innerBox\n      const yAxisConfig = this.getAxisConfig(config, false)\n      yAxisConfig.bounds = this.state.innerBox\n      const blobsConfig = this.configBlobs(config)\n      blobsConfig.bounds = this.state.innerBox\n      const seriesConfig = this.configSeriesThermos(config)\n      seriesConfig.bounds = this.state.innerBox\n      // Full render: all children\n      // NOTE: do I need events on IB bounds this time?\n      xaxisJSX = <SilverXaxisLinear key={kids.xAxisKey} config={xAxisConfig} />\n      yaxisJSX = <SilverYaxisOrdinal key={kids.yAxisKey} config={yAxisConfig} />\n      if (blobsConfig.blobs.blobState.column > 0) {\n        blobsJSX = (\n          <SilverYaxisBlobs\n            key={kids.blobsKey}\n            config={blobsConfig}\n            onReturnRevisedInnerBox={this.handleBlobsInnerBoxBounds}\n          />\n        )\n      }\n      // NOTE: I need to look at event-handling\n      thermoseriesJSX = (\n        <SilverThermoHorizontalSeries\n          spindlesId={kids.thermoSpindlesId}\n          seriesKey={kids.thermoSeriesKey}\n          config={seriesConfig}\n          onPassThermoClick={this.handleThermoClick}\n        />\n      )\n    }\n\n    // General and indexed class for main group:\n    const mainGroupClass = this.getMainGroupClass(false, true)\n\n    // NOTE: I can draw a temporary 'inner box'\n    // so I can see what I've got...\n    // const rectStyle = {\n    //   fill: '#aa5',\n    //   width: this.state.innerBox.width,\n    //   height: this.state.innerBox.height,\n    //   x: 0,\n    //   y: 0,\n    // };\n    // <rect style={rectStyle} />\n\n    // Structure changes according to number of series\n    let sCount = config.seriesCount\n    if (config.blobs.hasBlobs) {\n      sCount--\n    }\n    // Default is more than one series:\n    let chartComponentsJSX = (\n      <g className={mainGroupClass} key={kids.mainGroupKey} id={kids.contentId}>\n        {yaxisJSX}\n        {xaxisJSX}\n        {blobsJSX}\n        <g className={kids.zeroId} id={kids.zeroId} />\n        <g className={kids.thermoSpindlesId} id={kids.thermoSpindlesId} />\n        {thermoseriesJSX}\n      </g>\n    )\n    // But if only one series, zeroline is in front of spindles\n    if (sCount < 2) {\n      chartComponentsJSX = (\n        <g\n          className={mainGroupClass}\n          key={kids.mainGroupKey}\n          id={kids.contentId}\n        >\n          {yaxisJSX}\n          {xaxisJSX}\n          {blobsJSX}\n          <g className={kids.thermoSpindlesId} id={kids.thermoSpindlesId} />\n          <g className={kids.zeroId} id={kids.zeroId} />\n          {thermoseriesJSX}\n        </g>\n      )\n    }\n    return chartComponentsJSX\n  }\n}\n\nSilverThermoHorizontalChart.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverThermoHorizontalChart\n","/* eslint-disable no-invalid-this, func-names */\n/* eslint-disable */\n/* global document: false */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\n\nclass SilverSeriesLine extends Component {\n  static get defaultProps() {\n    return {\n      elementNames: {\n        outerGroup: 'all-line-series-outer-group',\n        seriesGroup: 'line-series-group',\n        pointsGroup: 'line-points-group',\n        line: 'line-path',\n        topLine: 'top-line-path',\n        fill: 'fill-path',\n        dot: 'line-point',\n      },\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    // LINE FCN to draw trace\n    this.lineFcn = d3.svg\n      .line()\n      .x((ddd) => props.config.xMainScale(ddd.category))\n      .y((ddd) => props.config.yScale(ddd.val))\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.updateLines()\n    this.updateIndexDot()\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    this.updateLines()\n    this.updateIndexDot()\n  }\n\n  // ======= Event handler ======\n\n  // LINE CLICK\n  // Handles line click event. Params are data (cat and value)\n  // and index in overall data.\n  // NOTE: This event currently gets passed back up to\n  // LineChart, where I do a console.log. Long-term, I might\n  // use this to set 'emphasis' on the line... or something.\n  // And NOTE that index is series-index (i.e. not point)\n  // Comm'd out until this does something useful (e.g. setting date markers)\n  // lineClick(pointData) {\n  //   this.props.onPassLineClick(pointData);\n  // }\n  // LINE CLICK ends\n\n  updateIndexDot() {\n    const config = this.props.config\n    const indexed = config.indexed\n    if (indexed.indexFlag) {\n      let className = this.props.elementNames.outerGroup\n      const cIndex = config.chartIndex\n      className = `${className}-${cIndex}`\n      const iGrp = d3.select(`#${className}`)\n      iGrp.append('circle').attr({\n        fill: indexed.fillValue,\n        'stroke-width': 0,\n        r: indexed.radius,\n        id: () => {\n          let dId = `index-dot-${config.chartIndex}~~~`\n          dId = `${dId}fill: ${indexed.fillName}`\n          return dId\n        },\n        cx: config.xMainScale(indexed.indexCat),\n        cy: config.yScale(indexed.value),\n      })\n    }\n  }\n\n  // UPDATE LINE POINTS\n  // Called from updateLines to append groups for\n  // point-line dots.\n  updateLinePoints(asBinding) {\n    const globalThis = this\n    const className = this.props.elementNames.pointsGroup\n    // By series\n    asBinding.each(function() {\n      const thisPointGroup = d3.select(this)\n      // Append group\n      const pg = thisPointGroup\n        .append('g')\n        .attr({ class: className })\n        .selectAll('circle')\n        .data((ddd) => ddd)\n        .enter()\n      // Append dots\n      globalThis.updateCircles(pg)\n    })\n  }\n  // UPDATE LINE POINTS ends\n\n  // UPDATE CIRCLES\n  // Called from updateLinePoints,to draw individual\n  // dots on pointline series\n  updateCircles(pGroup) {\n    const config = this.props.config\n    const radius = config.pointRadius\n    const dotName = this.props.elementNames.dot\n    pGroup\n      .append('circle')\n      .attr({\n        class: dotName,\n        id: (ddd, iii) => {\n          let idStr = `${dotName}-${iii}`\n          idStr = `${idStr}~~~fill:${ddd.strokeName}`\n          return idStr\n        },\n        r: radius,\n        cx: (ddd) => {\n          const xPos = config.xMainScale(ddd.category)\n          return xPos\n        },\n        cy: (ddd) => {\n          const yPos = config.yScale(ddd.val)\n          return yPos\n        },\n      })\n      .style({\n        fill: (ddd) => ddd.stroke,\n      })\n  }\n  // UPDATE CIRCLES ends\n\n  // ENTER ALL SERIES BINDING\n  // Called from updateLines to bind data to series groups, with\n  // enter and exit\n  enterAllSeriesBinding(outerWrapper, mappedData) {\n    const config = this.props.config\n    const sgClass = this.props.elementNames.seriesGroup\n    const cIndex = config.chartIndex\n    const sgID = `${sgClass}-${cIndex}`\n    const groupBinding = outerWrapper.selectAll('g').data(mappedData)\n    groupBinding\n      .enter()\n      .append('g')\n      .attr({\n        class: sgClass,\n        // ID suffixed with chartIndex + seriesIndex\n        id: (ddd, iii) => `${sgID}-${iii}`,\n      })\n    // No update\n    // Exit\n    groupBinding.exit().remove()\n    return groupBinding\n  }\n  // ENTER ALL SERIES BINDING ends\n\n  // MAP LINE SERIES DATA\n  mapLineSeriesData(config) {\n    // Factor\n    const factor = config.factor\n    // Data\n    const chartData = config.chartData\n    // First header string is key to category strings\n    const catStr = config.catHead\n    // Colours\n    const colours = config.colourMap\n    // As far as I can see, the data is in the right format:\n    // an array of objects with header:value properties\n    // Map data (iii is a series index):\n    const mappedData = colours.domain().map((header, iii) => {\n      const objA = chartData.map((ddd) => {\n        const objB = {\n          val: ddd[header],\n          category: ddd[catStr],\n          strokeName: colours(header),\n          stroke: config.colourLookup[colours(header)],\n          header,\n          seriesNo: iii,\n        }\n        return objB\n      })\n      // Originally:\n      //    unstacked line series remove null values from the series\n      //    layer cakes set them to zero\n      // But that's idiotic: all missing points now skipped\n      const dataLen = objA.length - 1\n      for (let jjj = dataLen; jjj >= 0; jjj--) {\n        if (objA[jjj].val === '') {\n          if (config.accum && config.hasHoles) {\n            objA[jjj].val = 0\n          } else {\n            objA.splice(jjj, 1)\n          }\n        } else {\n          // Survivors convert to number,\n          // which is divided by the scale factor\n          // (factors were disabled, Oct'20; but anyway...)\n          objA[jjj].val = Number(objA[jjj].val) / factor\n        }\n      }\n      // Stepline duplicates each point, except last, setting\n      // category to that of next point (final horizontal spur\n      // is appended below)\n      if (config.isStepline) {\n        // Get filtered length\n        const filteredLen = objA.length - 1\n        for (let jjj = filteredLen - 1; jjj >= 0; jjj--) {\n          const newItem = Object.assign([], objA[jjj])\n          const nextJ = jjj + 1\n          newItem.category = objA[nextJ].category\n          objA.splice(nextJ, 0, newItem)\n        }\n      }\n      return objA\n    })\n    // Line series in reverse order? Maybe not...\n    // return mappedData.reverse();\n    return mappedData\n  }\n  // MAP LINE SERIES DATA ends\n\n  // APPEND FILL\n  appendFill(asBinding) {\n    const className = this.props.elementNames.fill\n    asBinding.each(function() {\n      const thisSeries = d3.select(this)\n      thisSeries\n        .append('path')\n        .attr({ class: className })\n        .style('stroke-width', 0)\n    })\n  }\n  // APPEND FILL ends\n\n  // APPEND LINE\n  appendLine(asBinding) {\n    const className = this.props.elementNames.line\n    asBinding.each(function() {\n      const thisSeries = d3.select(this)\n      thisSeries\n        .append('path')\n        .attr({ class: className })\n        .style('stroke-width', 0)\n    })\n  }\n  // APPEND LINE ends\n\n  // UPDATE FILL\n  updateFill(fBinding, config) {\n    const className = this.props.elementNames.fill\n    fBinding\n      .select(`.${className}`)\n      .attr({\n        id: (ddd, iii) =>\n          `${className}-${config.chartIndex}-${iii}~~~fill:${ddd[0].strokeName}`,\n        d: (ddd) => this.lineFcn(ddd),\n        opacity: 0,\n      })\n      .style({\n        'stroke-width': 0,\n        // Layercake fills use the lineseries 'stroke' property\n        fill: (ddd) => ddd[0].stroke,\n      })\n  }\n  // UPDATE FILL ends\n\n  // UPDATE LINE\n  // Called from updateLines\n  updateLine(lBinding, config, topLineIndex) {\n    const className = this.props.elementNames.line\n    const stroke = config.stroke\n    lBinding\n      .select(`.${className}`)\n      .attr({\n        d: (ddd) => this.lineFcn(ddd),\n        // ID uses stroke-name of first item in points array\n        id: (ddd, iii) => {\n          // By default, use colour for unstacked series\n          let sName = ddd[0].strokeName\n          // But if stacked:\n          if (config.accum) {\n            if (iii === topLineIndex.pos || iii === topLineIndex.neg) {\n              // Top line\n              sName = stroke.topcolour\n              sName += ',topline:true'\n            } else {\n              // Separator\n              sName = stroke.defaultcolour\n            }\n          }\n          return `${className}-${config.chartIndex}-${iii}~~~stroke:${sName}`\n          // return `${className}-${iii}~~~stroke:${sName}`\n        },\n      })\n      .style({\n        stroke: (ddd, iii) => {\n          // Default is series-specific line stroke-colour\n          let stk = ddd[0].stroke\n          if (config.accum) {\n            stk = config.colourLookup[stroke.defaultcolour]\n            if (iii === topLineIndex.pos || iii === topLineIndex.neg) {\n              stk = config.colourLookup[stroke.topcolour]\n            }\n          }\n          return stk\n        },\n        'stroke-width': (ddd, iii) => {\n          // Default is series-specific line stroke-width\n          let stw = stroke.width\n          if (config.accum) {\n            stw = stroke.width\n            if (iii === topLineIndex.pos || iii === topLineIndex.neg) {\n              stw = stroke.topwidth\n            }\n          }\n          return stw\n        },\n        'stroke-linecap': stroke.linecap,\n        'stroke-linejoin': stroke.linejoin,\n        'stroke-miterlimit': stroke.miterlimit,\n        fill: 'none',\n      })\n  }\n  // UPDATE LINE ends\n\n  // ACCUMULATE DATA\n  // Called from updateLines to accumulate positive and negative\n  // values for layer cakes\n  accumulateData(mappedLineData) {\n    // Array consists of 1 element per point. Each element is an object\n    // with props posBase and negBase, each set to zero by default.\n    // (Blobbed series has been excluded by now)\n    // NOTE: assumption is that stacked line data can have\n    // gaps (all series missing a val for one point), but\n    // not holes (one series missing a val for one point)\n    // Count points:\n    const pLen = mappedLineData[0].length\n    const baseArray = ChartUtilities.getSeriesBaseVals(pLen)\n    for (let sCount = 0; sCount < mappedLineData.length; sCount++) {\n      const series = mappedLineData[sCount]\n      const hasNeg = series.some((point) => point.val < 0)\n      let lookup = 'posBase'\n      if (hasNeg) {\n        lookup = 'negBase'\n      }\n      for (let pCount = 0; pCount < pLen; pCount++) {\n        mappedLineData[sCount][pCount].val += baseArray[pCount][lookup]\n        baseArray[pCount][lookup] = mappedLineData[sCount][pCount].val\n      }\n    }\n  }\n  // ACCUMULATE DATA ends\n\n  // EXTEND ALL LAYER FILLS\n  // Called from updateLines. Loops through all series groups,\n  // isolates fills and calls fcn to extend them to zero baseline\n  extendAllLayerFills(allSeriesBinding, config) {\n    const className = this.props.elementNames.fill\n    const scaleZero = config.yScale(0)\n    allSeriesBinding.each(function() {\n      const seriesGrp = d3.select(this)\n      // This is the fill in the series group:\n      const fill = seriesGrp.select(`.${className}`)\n      // In ChartUtilities to work round D3-this\n      ChartUtilities.extendLayerFill(fill, scaleZero, config.duration)\n    })\n  }\n  // EXTEND ALL LAYER FILLS ends\n\n  // ADD ALL STEPLINE SPURS\n  // Called from updateLines. Loops through all series groups,\n  // isolates steplines/fills and calls fcn to append spur at end\n  addAllSteplineSpurs(allSeriesBinding, spur, accum) {\n    const lineName = this.props.elementNames.line\n    const fillName = this.props.elementNames.fill\n    allSeriesBinding.each(function() {\n      const seriesGrp = d3.select(this)\n      // This is the line in the series group:\n      const line = seriesGrp.select(`.${lineName}`)\n      // In ChartUtilities to work round D3-this\n      ChartUtilities.addSteplineSpur(line, spur)\n      // Fills if stacked\n      if (accum) {\n        const fill = seriesGrp.select(`.${fillName}`)\n        ChartUtilities.addSteplineSpur(fill, spur)\n      }\n    })\n  }\n  // ADD ALL STEPLINE SPURS ends\n\n  // MOVE TOP LINE TO FRONT\n  // Called from updateLines. Since the layers of the cake have been\n  // restacked in reverse order, the top line must be moved to front\n  // (so that, if there's a zero value, it eclipses other lines)\n  moveTopLineToFront(asb) {\n    const lineName = this.props.elementNames.line\n    const topLineName = this.props.elementNames.topLine\n    const config = this.props.config\n    // Series ID: name + chartIndex + seriesIndex\n    const cIndex = config.chartIndex\n    // Last series is 'top'. Can't use seriesCount, in case\n    // blobs have eaten a series. But count series headers.\n    const sIndex = config.seriesHeads.length - 1\n    let sgID = this.props.elementNames.seriesGroup\n    sgID = `${sgID}-${cIndex}-${sIndex}`\n    let myPath\n    asb.each(function() {\n      const seriesGrp = d3.select(this)\n      if (seriesGrp.attr('id') === sgID) {\n        // Line (i.e. not fill) of layer\n        myPath = seriesGrp.select(`.${lineName}`)\n      }\n    })\n    // Duplicate to front\n    const myNode = myPath.node()\n    const dupNode = d3.select(\n      myNode.parentNode.parentNode.insertBefore(\n        myNode.cloneNode(true),\n        myNode.nextSibling\n      )\n    )\n    // ID changes: first part changes, but colour name retained\n    // for Joxer\n    const oldId = dupNode.attr('id')\n    dupNode.attr({\n      id: () => {\n        const splitId = oldId.split('~~~')\n        let newId = topLineName\n        newId = `${newId}~~~${splitId[1]}`\n        return newId\n      },\n    })\n    // Delete the original path\n    myPath.remove()\n  }\n  // MOVE TOP LINE TO FRONT ends\n\n  // INVERT LAYER CAKE\n  // Called from updateLines to invert layer cake stacking, so that lower\n  // layers are in front...\n  invertLayerCake(className, seriesCount) {\n    const parent = document.getElementById(className)\n    const kids = parent.children\n    const kidsCount = kids.length\n    for (let iii = kidsCount - 1; iii >= 0; iii--) {\n      parent.appendChild(kids[iii])\n    }\n    // This may no longer (Jun'21) be relevant, but in the past a\n    // double-render from Monteux was leaving us with duplicates. This isn't\n    // anything to do with this function, as far as I can make out; but\n    // it seems like as good a place as any to catch it...\n    if (kidsCount > seriesCount) {\n      for (let iii = kidsCount - 1; iii >= seriesCount; iii--) {\n        parent.childNodes[iii].remove()\n      }\n    }\n  }\n  // INVERT LAYER CAKE ends\n\n  // GET TOP LINE INDEX\n  // Called from updateLines. Returns indices of top and (if neg) bottom series\n  getTopLineIndex(mappedLineData) {\n    const getSum = (total, oneVal) => total + oneVal\n    // Default\n    const topLineObj = {\n      pos: -1,\n      neg: -1,\n    }\n    let posVal = 0\n    let negVal = 0\n    // Loop through series. I add up all vals in the series. The series\n    // with the highest or lowest accum'd total are the top and bottom.\n    for (let serNo = 0; serNo < mappedLineData.length; serNo++) {\n      const thisSer = mappedLineData[serNo]\n      // Add up all vals for this series\n      const serTotal = thisSer.map((ser) => ser.val).reduce(getSum)\n      if (serTotal >= posVal) {\n        topLineObj.pos = serNo\n        posVal = serTotal\n      }\n      if (serTotal <= negVal) {\n        topLineObj.neg = serNo\n        negVal = serTotal\n      }\n    }\n    return topLineObj\n  }\n  // GET TOP LINE INDEX ends\n\n  // UPDATE LINES\n  updateLines() {\n    const config = this.props.config\n    // Context:\n    // Outer line-series group, created in render\n    // Use ID, which is numbered by chartIndex\n    let gID = `#${this.props.elementNames.outerGroup}-${config.chartIndex}`\n    // And append left/right marker for mixed/double\n    gID = `${gID}${config.mixedID}`\n    const outerWrapper = d3.select(gID)\n    // Style options\n    const accum = config.accum\n    const isPointline = config.isPointline\n    const isStepline = config.isStepline\n    // Map the actual series data:\n    // As far as I can see, the data is in the right format:\n    // an array of objects with header:value properties\n    const mappedLineData = this.mapLineSeriesData(config)\n    // mappedData is an array of arrays, each of which represents a series\n    // Each series sub-array consists of <pointCount> objects\n    // defining one data point and with properties...\n    //    category: the category string\n    //    fill: fill colour\n    //    val: the 'internal', *unscaled*, *unstacked* value of THIS point\n    // For layer cakes, I'd have to prefix first and last elements to\n    // each sub-array, with zero values...\n\n    // Accumulate values for layer cake\n    // (NOTE: may need revisit if actual values are required...\n    // ...in which case I'd need a separate 'accumVal' property)\n    let topLineIndex = {}\n    if (accum) {\n      this.accumulateData(mappedLineData)\n      // I need to know which are the top lines (+/-)\n      topLineIndex = this.getTopLineIndex(mappedLineData)\n    }\n    // Bind data to outer group\n    const allSeriesBinding = this.enterAllSeriesBinding(\n      outerWrapper,\n      mappedLineData\n    )\n\n    if (accum) {\n      this.appendFill(allSeriesBinding)\n      this.updateFill(allSeriesBinding, config)\n      this.appendLine(allSeriesBinding)\n      this.updateLine(allSeriesBinding, config, topLineIndex)\n    } else if (isPointline) {\n      this.appendLine(allSeriesBinding)\n      this.updateLine(allSeriesBinding, config, topLineIndex)\n      this.updateLinePoints(allSeriesBinding)\n    } else {\n      this.appendLine(allSeriesBinding)\n      this.updateLine(allSeriesBinding, config, topLineIndex)\n    }\n    // Steplines: extra points were added when data was mapped\n\n    // Steplines add a horizontal spur at the end\n    if (isStepline) {\n      const spur = config.steplineSpur\n      // So I can turn off spur by setting to zero in DPs\n      // (which is the case, Jun'21)\n      if (spur > 0) {\n        this.addAllSteplineSpurs(allSeriesBinding, spur, accum)\n      }\n    }\n\n    // Layer cake tweaks need a moment for everything to draw...\n    if (accum) {\n      setTimeout(() => {\n        this.tweakLayerCake(allSeriesBinding)\n      }, 100)\n    }\n  }\n  // UPDATE LINES ends\n\n  // TWEAK LAYER CAKE\n  // Called from updateLines. Layer cake:\n  //      inverts stacking;\n  //      extends fills to zero line;\n  //      moves top line to front\n  tweakLayerCake(asBinding) {\n    const config = this.props.config\n    let className = this.props.elementNames.outerGroup\n    className = `${className}-${config.chartIndex}${config.mixedID}`\n    this.invertLayerCake(className, config.seriesCount)\n    this.extendAllLayerFills(asBinding, config)\n    this.moveTopLineToFront(asBinding)\n  }\n  // TWEAK LAYER CAKE ends\n\n  // MAKE SERIES JSX\n  // Called from render to assemble JSX for the\n  // line series outer wrapper\n  // Other elements are appended on the fly\n  makeSeriesJSX(config) {\n    const eNames = this.props.elementNames\n    const outerGroupClass = eNames.outerGroup\n    const cIndex = config.chartIndex\n    let outerGroupId = `${eNames.outerGroup}-${cIndex}`\n    outerGroupId = `${outerGroupId}${config.mixedID}`\n    return <g className={outerGroupClass} id={outerGroupId} />\n  }\n\n  // RENDER\n  render() {\n    const config = this.props.config\n    const jsx = this.makeSeriesJSX(config)\n    return jsx\n  }\n}\n// MAKE SERIES JSX\n\nSilverSeriesLine.propTypes = {\n  config: PropTypes.object,\n  elementNames: PropTypes.object,\n  // onPassLineClick is never tripped, but may return...\n  // onPassLineClick: PropTypes.func,\n}\n\nexport default SilverSeriesLine\n","// NOTE: while I'm messing around...\n// /* eslint-disable no-unused-vars */\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\nimport * as AxisUtilities from '../axes/axis-utilities'\nimport ConfigXaxisOrdinal from '../axes/configuration/xaxis-ordinal-config'\nimport ConfigYaxisLinear from '../axes/configuration/yaxis-linear-config'\nimport * as BlobUtilities from '../blobs/blob-utilities'\n// D3 sub-components:\nimport SilverXaxisOrdinal from '../axes/live/xaxis-ordinal'\nimport SilverXaxisOrdinalTest from '../axes/tests/xaxis-ordinal-test'\nimport SilverYaxisLinear from '../axes/live/yaxis-linear'\nimport SilverYaxisLinearTest from '../axes/tests/yaxis-linear-test'\nimport SilverSeriesLine from './lineseries'\nimport SilverXaxisBlobs from '../blobs/xaxis-blobs'\n\nclass SilverLineChart extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      // flags to control subcomponent testing/rendering\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      // updated innerBox bounds\n      innerBox: this.props.config.innerBox,\n      // Default granularity object. This gets populated when the\n      // test callback returns from xaxis-ordinal.doStringTests\n      granularity: {},\n      // Temporary innerBox bounds\n      postYaxisBounds: {},\n    }\n    // Callbacks from axis and blobs tests:\n    this.handleXaxisInnerBoxBounds = this.handleXaxisInnerBoxBounds.bind(this)\n    this.handleYaxisInnerBoxBoundsLeft = this.handleYaxisInnerBoxBoundsLeft.bind(\n      this\n    )\n    this.handleYaxisInnerBoxBoundsRight = this.handleYaxisInnerBoxBoundsRight.bind(\n      this\n    )\n    this.handleBlobsInnerBoxBounds = this.handleBlobsInnerBoxBounds.bind(this)\n    // Click on line\n    this.handleLineClick = this.handleLineClick.bind(this)\n  }\n\n  // COMPONENT WILL MOUNT\n  // Puts inherited innerBox into state:\n  UNSAFE_componentWillMount() {\n    this.setState({\n      yaxisTestLeft: true,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      innerBox: this.props.config.innerBox,\n    })\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    const duration = 0\n    this.mainDthreeGroupTransition(duration)\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Reset state to default...\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      innerBox: newProps.config.innerBox,\n      yaxisTestLeft: true,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      granularity: {},\n    })\n  }\n\n  // Callbacks:\n  // HANDLE Y-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox, allowing for axis labels.\n  // It also sets state.postYaxisBounds, which represents the\n  // chart area after allowing for yaxis labels and before the\n  // IB is adjusted for projecting x-axis category strings. This\n  // (hopefully!) allows me to adjust for blobs...\n  handleYaxisInnerBoxBoundsLeft(innerBox) {\n    this.setState({\n      innerBox,\n      postYaxisBounds: Object.assign({}, innerBox),\n      // Set flags for render 2 (x-axis test)\n      yaxisTestLeft: false,\n      yaxisTestRight: true,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n  }\n\n  handleYaxisInnerBoxBoundsRight(innerBox) {\n    this.setState({\n      innerBox,\n      postYaxisBounds: Object.assign({}, innerBox),\n      // Set flags for render 2 (x-axis test)\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: true,\n      blobsTest: false,\n    })\n  }\n\n  // HANDLE X-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox after calculating axis adjustments\n  handleXaxisInnerBoxBounds(result) {\n    this.setState({\n      innerBox: result.bounds,\n      granularity: result.granularity,\n      // Set flags for render 2 (blobs test)\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: true,\n    })\n  }\n\n  // HANDLE BLOBS INNER BOX BOUNDS\n  // ...fields the revised innerBox\n  handleBlobsInnerBoxBounds(innerBox) {\n    // Fire off an error msg if IB is on the small side...\n    // ...deleted Feb'21\n    this.setState({\n      innerBox,\n      // Set flags for render 4 (final)\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n    // const duration = this.props.config.duration;\n    // NOTE: set to zero to prevent visible drop-in from top left...\n    // NOTE: if I'm going to use a zero duration regularly, put it into prefs\n    const duration = 0\n    this.mainDthreeGroupTransition(duration)\n  }\n\n  // HANDLE LINE CLICK EVENT\n  // This is potentially useful... maybe...\n  // Param event has 3 args: series name, category (date) and value of point clicked\n  handleLineClick(event) {\n    const header = event.header\n    const cat = event.category\n    const val = event.val\n    const info = `You clicked on series: ${header}; category: ${cat} and value ${val}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n  // HANDLE LINE CLICK EVENT ends\n\n  // MAIN D3 GROUP TRANSITION\n  // Called from handleBlobsInnerBoxBounds and componentDidMount\n  // On 2nd render only, after adjustments have been made to the background elements\n  // (strings and legend)\n  // Moves main D3 group into position\n  // NB: This isn't interested in mainGroup *size* -- only in location\n  mainDthreeGroupTransition(duration) {\n    const innerBox = this.state.innerBox\n    const bLeft = innerBox.x\n    const bTop = innerBox.y\n    const transStr = `translate(${bLeft}, ${bTop})`\n    const mainGroupClass = this.getMainGroupClass(true, false)\n    const mainGroup = d3.select(mainGroupClass)\n    mainGroup\n      .transition()\n      .duration(duration)\n      .attr('transform', transStr)\n  }\n  // Because of the double-render, the above can only be called on an update (I think!)\n\n  // GET MAIN GROUP CLASS\n  // Returns class name for main chart group. Arg 1 determines\n  // whether classes are preceded by a dot; arg 2 whether\n  // the general class (which pulls in the CSS) is appended\n  // NOTE: The point is, because all d3 refs are specific, I need\n  // indexed class names throughout. The general class will be used\n  // for CSS (probably n/a for this main group; but important for\n  // axes, at least...)\n  getMainGroupClass(prefixDot, addGeneralClass) {\n    let dot = ''\n    let generalClass = ''\n    if (prefixDot) {\n      dot = '.'\n    }\n    if (addGeneralClass) {\n      generalClass = `${dot}chart-main-group`\n    }\n    return `${generalClass} ${dot}chart-main-group-${this.props.config.chartIndex}`\n  }\n  // GET MAIN GROUP CLASS ends\n\n  //\n  // ==================================\n  // D3 component configuration objects:\n  // ==================================\n\n  // GET X-AXIS CONFIG\n  // Hands off to function in axis-utilities.\n  // Params is CO\n  getXaxisConfig(chartConfig) {\n    const innerBox = Object.assign({}, this.state.innerBox)\n    // Check for test...\n    const testFlag = this.state.xaxisTest\n    const granularity = this.state.granularity\n    const axisConfig = ConfigXaxisOrdinal(\n      chartConfig,\n      innerBox,\n      testFlag,\n      granularity\n    )\n    return axisConfig\n  }\n  // GET X-AXIS CONFIG ends\n\n  // GET Y-AXIS CONFIG\n  // Hands off to function in axis-utilities.\n  // Params are CO and either 'left' or 'right'\n  getYaxisConfig(chartConfig, side, testFlag) {\n    const innerBox = Object.assign({}, this.state.innerBox)\n    const axisConfig = ConfigYaxisLinear(chartConfig, innerBox, testFlag, side)\n    return axisConfig\n  }\n  // GET Y-AXIS CONFIG ends\n\n  // GET BLOBS CONFIG\n  // Hands off to function in BlobUtilities\n  getBlobsConfig(chartConfig) {\n    const nowBounds = this.state.innerBox\n    const postYBounds = this.state.postYaxisBounds\n    // Check for test...\n    const testFlag = this.state.blobsTest\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const blobConfig = BlobUtilities.configXBlobs(\n      chartConfig,\n      nowBounds,\n      postYBounds,\n      testFlag,\n      side\n    )\n    return blobConfig\n  }\n  // GET BLOBS CONFIG ends\n\n  // CONFIG SERIES LINES\n  // Assembles line series config object\n  configSeriesLines(chartConfig) {\n    // Colours and other line-stroke properties\n    // The default name/value lookup of colours\n    const colourLookup = chartConfig.colourLookup\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const chartType = chartConfig.scales[side].type\n    // Colours for this sequence of series\n    const colourSet = chartConfig.series[chartType].colours\n    const stroke = chartConfig.series[chartType].stroke\n    const pointRadius = ((chartConfig.series || {}).pointline || {}).radius\n    const mmO = Object.assign({}, chartConfig.scales[side].minMaxObj.scale)\n    const bounds = Object.assign({}, this.state.innerBox)\n    const isLog = chartConfig.scales[side].log\n    const invert = chartConfig.scales[side].invert\n    // Index dot object:\n    const indexed = chartConfig.indexDot\n    // If not indexed, log or inverted...\n    // ...break scale?\n    if (!indexed.indexFlag && !isLog && !invert) {\n      if (mmO.min > 0) {\n        bounds.height -= chartConfig.yAxis.brokenScalePadding.default\n      }\n    }\n    const accum = chartConfig.scales[side].stacked\n    // Append styling\n    indexed.fillName = chartConfig.indexDot.fillName\n    indexed.fillValue = chartConfig.indexDot.fillValue\n    indexed.radius = chartConfig.indexDot.radius\n    indexed.value = chartConfig.indexDot.value\n    indexed.factor = 1\n    const idFactor = chartConfig.series[chartType].indexDotFactor\n    if (typeof idFactor !== 'undefined') {\n      indexed.radius *= idFactor\n    }\n    // Stepline or pointline?\n    const isStepline = chartConfig.scales[side].type === 'stepline'\n    const isPointline = chartConfig.scales[side].type === 'pointline'\n    // Assemble the config object with 'simple' props\n    const config = {\n      accum,\n      bounds,\n      chartData: chartConfig.chartData,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      // Classnames are panel-indexed ---- not used any more (Jun'21)\n      // linesGroupClassName: `line-series-group-${chartConfig.chartIndex}`,\n      // pointsGroupClassName: `line-points-group-${chartConfig.chartIndex}`,\n      colourLookup,\n      colourSet,\n      duration: chartConfig.duration,\n      // factor: mmO.factor,\n      factor: chartConfig.scales[side].factor,\n      hasHoles: chartConfig.hasHoles,\n      indexed,\n      isPointline,\n      isStepline,\n      mixedID: '',\n      originalBounds: chartConfig.originalInnerBox,\n      pointCount: chartConfig.pointCount,\n      pointRadius,\n      seriesCount: chartConfig.seriesCount,\n      steplineSpur: chartConfig.steplineSpur,\n      stroke,\n      zeroPrefs: chartConfig.yAxis.ticks.zero,\n    }\n    // Mixed +/– flag:\n    config.mixedVals = mmO.min < 0 && mmO.max >= 0\n    // Y-SCALE (linear):\n    let domainArray = [mmO.min, mmO.max]\n    if (invert) {\n      domainArray = [mmO.max, mmO.min]\n    }\n    if (isLog) {\n      config.yScale = d3.scale\n        .log()\n        .range([bounds.height, 0])\n        .domain(domainArray)\n    } else {\n      config.yScale = d3.scale\n        .linear()\n        .range([bounds.height, 0])\n        .domain(domainArray)\n    }\n    // HEADERS:\n    // NOTE: this is all dup'd in barchart.js...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n    config.catHead = chartConfig.headers[0]\n    // Now exclude any blob headers:\n    const actualHeaders = []\n    for (let iii = 1; iii <= chartConfig.seriesCount; iii++) {\n      if (chartConfig.headers[iii] !== chartConfig.blobs.blobState.header) {\n        actualHeaders.push(chartConfig.headers[iii])\n      }\n    }\n    config.seriesHeads = actualHeaders\n    // Map series colours:\n    config.colourMap = ChartUtilities.getColourMap(actualHeaders, colourSet)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // X-SCALE:\n    const xDomain = chartConfig.chartData.map((ddd) => ddd[config.catHead])\n    // config.xScale = d3.scale.ordinal()\n    //   .rangeBands([ 0, (config.bounds.width + padding), 0, 0 ])\n    //   .domain(xDomain);\n    // rangePoints are complete IB width...\n    config.xMainScale = d3.scale\n      .ordinal()\n      .domain(xDomain)\n      .rangePoints([0, config.bounds.width], 0, 0)\n    return config\n  }\n  // CONFIG SERIES LINES ends\n\n  // GET Y-AXIS JSX\n  // Ideally, this would be in AxisUtilities, shared by all chart\n  // types. The trouble is, it needs access to state, so unless I'm\n  // going to start passing state around as a param, it has to live\n  // here, and all chart-type components will duplicate this code...\n  getYaxisJsx(config, exists, key, side) {\n    // Check for test...\n    let testFlag = this.state.yaxisTestLeft\n    if (side === 'right') {\n      testFlag = this.state.yaxisTestRight\n    }\n    let axisConfig = { enabled: false }\n    if (exists) {\n      axisConfig = this.getYaxisConfig(config, side, testFlag)\n    }\n    axisConfig.bounds = this.state.innerBox\n    // return axisConfig;\n    // Render left yaxis only, with 'test' flag\n    // to get margin\n    let callbackHandler = this.handleYaxisInnerBoxBoundsRight\n    if (side === 'left') {\n      callbackHandler = this.handleYaxisInnerBoxBoundsLeft\n    }\n    let axisJsx = ''\n    if (testFlag) {\n      axisJsx = (\n        <SilverYaxisLinearTest\n          key={`${key}-test-${side}`}\n          config={axisConfig}\n          onReturnRevisedInnerBox={callbackHandler}\n        />\n      )\n    } else {\n      axisJsx = (\n        <SilverYaxisLinear key={`${key}-test-${side}`} config={axisConfig} />\n      )\n    }\n    return axisJsx\n  }\n  // GET Y-AXIS JSX ends\n\n  // GET X-AXIS JSX\n  // Called from render to assemble x-axis jsx\n  getXaxisJsx(config, key) {\n    // Fcn in this component pulls a couple of strings, then calls\n    // fcn in AxisUtilities... and the result is the axis config obj.\n    const axisConfig = this.getXaxisConfig(config)\n    axisConfig.bounds = this.state.innerBox\n    // Test or live:\n    let xaxisJsx = ''\n    if (this.state.xaxisTest) {\n      // Only send callback for test\n      xaxisJsx = (\n        <SilverXaxisOrdinalTest\n          key={key}\n          config={axisConfig}\n          onReturnRevisedInnerBox={this.handleXaxisInnerBoxBounds}\n        />\n      )\n    } else {\n      xaxisJsx = <SilverXaxisOrdinal key={key} config={axisConfig} />\n    }\n    return xaxisJsx\n  }\n  // GET X-AXIS JSX ends\n\n  // GET BLOBS JSX\n  getBlobsJsx(config, key, isTest) {\n    const blobsConfig = this.getBlobsConfig(config)\n    blobsConfig.bounds = this.state.innerBox\n    const jsxTemplate = (\n      <SilverXaxisBlobs\n        key={key}\n        config={blobsConfig}\n        onReturnRevisedInnerBox={this.handleBlobsInnerBoxBounds}\n      />\n    )\n    let jsx = ''\n    if (isTest) {\n      // If it's a test, always assemble jsx\n      jsx = jsxTemplate\n    } else if (blobsConfig.blobs.blobState.column > 0) {\n      // Not a test, only make up jsx if there ARE blobs\n      jsx = jsxTemplate\n    }\n    return jsx\n  }\n  // GET BLOBS JSX ends\n\n  // RENDER\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Key all subcomponents:\n    const kids = ChartUtilities.getKeysAndIds(chartIndex)\n\n    // Custom config objects for the various d3 components:\n    // NOTE: prev'y, each function was called\n    // whether or not the corresponding sub-component\n    // actually rendered. Now I'm selective, reducing the number\n    // of times each child is rendered to 1: test and 2: for real\n\n    // Y axis can be left/right/both... I only want to test\n    // or draw axis if it's enabled\n    const enableScale = config.scales.enableScale\n    const yLeft = enableScale.left\n    const yRight = enableScale.right\n    // By default, left/right config has 1 prop: false\n    // If config is created, flag is set true\n    // JSX for all children defaults to empty string\n    let xaxisJSX = ''\n    let yaxisJSXLeft = ''\n    let yaxisJSXRight = ''\n    let blobsJSX = ''\n    let lineseriesJSX = ''\n    // Render sequence\n    // Either the tests, where we render individual components...\n    if (this.state.yaxisTestLeft) {\n      yaxisJSXLeft = this.getYaxisJsx(config, yLeft, kids.yAxisKey, 'left')\n    } else if (this.state.yaxisTestRight) {\n      yaxisJSXRight = this.getYaxisJsx(config, yRight, kids.yAxisKey, 'right')\n    } else if (this.state.xaxisTest) {\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n    } else if (this.state.blobsTest) {\n      blobsJSX = this.getBlobsJsx(config, kids.blobsKey, this.state.blobsTest)\n    } else {\n      // ...or, when all tests are done, the whole shebang!\n      // Full render, with all children.\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n      if (yLeft) {\n        yaxisJSXLeft = this.getYaxisJsx(config, yLeft, kids, 'left')\n      }\n      if (yRight) {\n        yaxisJSXRight = this.getYaxisJsx(config, yRight, kids, 'right')\n      }\n      const seriesConfig = this.configSeriesLines(config)\n      seriesConfig.bounds = this.state.innerBox\n      blobsJSX = this.getBlobsJsx(config, kids.blobsKey, this.state.blobsTest)\n      lineseriesJSX = (\n        <SilverSeriesLine\n          key={kids.lineSeriesKey}\n          config={seriesConfig}\n          onPassLineClick={this.handleLineClick}\n        />\n        // NOTE: onPassLineClick is currently never tripped,\n        // but may prove useful later...\n      )\n    }\n    // General and indexed class for main group:\n    const mainGroupClass = this.getMainGroupClass(false, true)\n\n    // NOTE: I can draw a temporary 'inner box'\n    // so I can see what I've got...\n\n    // const rectStyle = {\n    //   fill: '#aa5',\n    //   width: this.state.innerBox.width,\n    //   height: this.state.innerBox.height,\n    //   x: 0,\n    //   y: 0,\n    // };\n    // // If comm'd in, next mmoves down into JSX\n    // <rect style={rectStyle} />\n\n    // If unstacked, zeroline-group is in front of yaxis, behind series\n    let chartComponentsJSX = (\n      <g className={mainGroupClass} key={kids.mainGroupKey} id={kids.contentId}>\n        {xaxisJSX}\n        {yaxisJSXLeft}\n        {yaxisJSXRight}\n        {blobsJSX}\n        <g className={kids.zeroId} id={kids.zeroId} />\n        {lineseriesJSX}\n      </g>\n    )\n    // But if stacked, zeroline-group is in front\n    if (config.scales.left.stacked || config.scales.right.stacked) {\n      chartComponentsJSX = (\n        <g\n          className={mainGroupClass}\n          key={kids.mainGroupKey}\n          id={kids.contentId}\n        >\n          {xaxisJSX}\n          {yaxisJSXLeft}\n          {yaxisJSXRight}\n          {blobsJSX}\n          {lineseriesJSX}\n          <g className={kids.zeroId} id={kids.zeroId} />\n        </g>\n      )\n    }\n    return chartComponentsJSX\n  }\n}\n\nSilverLineChart.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverLineChart\n","// NOTE: while I'm messing around...\n\nimport * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\nimport * as AxisUtilities from '../axes/axis-utilities'\nimport ConfigXaxisOrdinal from '../axes/configuration/xaxis-ordinal-config'\nimport ConfigYaxisLinear from '../axes/configuration/yaxis-linear-config'\nimport * as BrokenScale from '../axes/broken-scale'\n// D3 sub-components:\nimport SilverXaxisOrdinal from '../axes/live/xaxis-ordinal'\nimport SilverXaxisOrdinalTest from '../axes/tests/xaxis-ordinal-test'\nimport SilverYaxisLinear from '../axes/live/yaxis-linear'\nimport SilverYaxisLinearTest from '../axes/tests/yaxis-linear-test'\nimport SilverXaxisBlobs from '../blobs/xaxis-blobs'\nimport SilverSeriesColumn from '../columnchart/columnseries'\nimport SilverSeriesLine from '../linechart/lineseries'\n\nclass SilverMixedChart extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      // flags to control subcomponent testing/rendering\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      // updated innerBox bounds\n      innerBox: this.props.config.innerBox,\n      // Default granularity object\n      granularity: {},\n      // Temporary innerBox bounds\n      postYaxisBounds: {},\n    }\n    // Callbacks from axis and blobs tests:\n    this.handleXaxisInnerBoxBounds = this.handleXaxisInnerBoxBounds.bind(this)\n    this.handleYaxisInnerBoxBoundsLeft = this.handleYaxisInnerBoxBoundsLeft.bind(\n      this\n    )\n    this.handleYaxisInnerBoxBoundsRight = this.handleYaxisInnerBoxBoundsRight.bind(\n      this\n    )\n    this.handleBlobsInnerBoxBounds = this.handleBlobsInnerBoxBounds.bind(this)\n    // Click on column\n    this.handleColumnClick = this.handleColumnClick.bind(this)\n    // Click on line\n    this.handleLineClick = this.handleLineClick.bind(this)\n  }\n\n  // COMPONENT WILL MOUNT\n  // Puts inherited innerBox into state:\n  UNSAFE_componentWillMount() {\n    this.setState({\n      yaxisTestLeft: true,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n      innerBox: this.props.config.innerBox,\n    })\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.mainDthreeGroupTransition(0)\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Reset state to default...\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      innerBox: newProps.config.innerBox,\n      yaxisTestLeft: true,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n    // NOTE: can I set state here?\n  }\n\n  // Callbacks:\n  // HANDLE Y-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox, allowing for axis labels.\n  // It also sets state.postYaxisBounds, which represents the\n  // chart area after allowing for yaxis labels and before the\n  // IB is adjusted for projecting x-axis category strings. This\n  // (hopefully!) allows me to adjust for blobs...\n  handleYaxisInnerBoxBoundsLeft(innerBox) {\n    this.setState({\n      innerBox,\n      postYaxisBounds: Object.assign({}, innerBox),\n      // Set flags for render 3 (blobs test)\n      yaxisTestLeft: false,\n      yaxisTestRight: true,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n  }\n\n  handleYaxisInnerBoxBoundsRight(innerBox) {\n    this.setState({\n      innerBox,\n      postYaxisBounds: Object.assign({}, innerBox),\n      // Set flags for render 3 (blobs test)\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: true,\n      blobsTest: false,\n    })\n  }\n\n  // HANDLE X-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox after calculating axis adjustments\n  handleXaxisInnerBoxBounds(result) {\n    this.setState({\n      innerBox: result.bounds,\n      granularity: result.granularity,\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: true,\n    })\n  }\n\n  // HANDLE BLOBS INNER BOX BOUNDS\n  // ...fields the revised innerBox (after left margin adjusted for cat strings)\n  handleBlobsInnerBoxBounds(innerBox) {\n    // Fire off an error msg if IB is on the small side...\n    // ...deleted Feb'21\n    this.setState({\n      innerBox,\n      // Set flags for render 4 (final)\n      yaxisTestLeft: false,\n      yaxisTestRight: false,\n      xaxisTest: false,\n      blobsTest: false,\n    })\n    // const duration = this.props.config.duration;\n    // NOTE: set to zero to prevent visible drop-in from top left...\n    // NOTE: if I'm going to use a zero duration regularly, put it into prefs\n    const duration = 0\n    this.mainDthreeGroupTransition(duration)\n  }\n\n  // HANDLE COLUMN CLICK EVENT\n  // This is potentially useful... maybe...\n  handleColumnClick(event) {\n    const colData = event.colData\n    // const index = event.index;\n    const info = `Value is ${colData.val}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n  // HANDLE COLUMN CLICK EVENT ends\n\n  // HANDLE LINE CLICK EVENT\n  // This is potentially useful... maybe...\n  // NOTE: both column and line click handlers are duplicated\n  // in Columnchart and Linechart respectively\n  handleLineClick(event) {\n    // const dataPt = event.seriesData[event.index];\n    const header = event.header\n    const cat = event.category\n    const val = event.val\n    const info = `You clicked on series: ${header}; category: ${cat} and value ${val}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n  // HANDLE LINE CLICK EVENT ends\n\n  // MAIN D3 GROUP TRANSITION\n  // Called from handleYaxisInnerBoxBounds\n  // On 2nd render only, after adjustments have been made to the background elements\n  // (strings and legand)\n  // Moves main D3 group into position\n  // NB: This isn't interested in mainGroup *size* -- only in location\n  mainDthreeGroupTransition(duration) {\n    const innerBox = this.state.innerBox\n    const bLeft = innerBox.x\n    const bTop = innerBox.y\n    const transStr = `translate(${bLeft}, ${bTop})`\n    const mainGroupClass = this.getMainGroupClass(true, false)\n    const mainGroup = d3.select(mainGroupClass)\n    mainGroup\n      .transition()\n      .duration(duration)\n      .attr('transform', transStr)\n  }\n  // Because of the double-render, the above can only be called on an update (I think!)\n\n  // GET MAIN GROUP CLASS\n  // Returns class name for main chart group. Arg 1 determines\n  // whether classes are preceded by a dot; arg 2 whether\n  // the general class (which pulls in the CSS) is appended\n  // NOTE: The point is, because all d3 refs are specific, I need\n  // indexed class names throughout. The general class will be used\n  // for CSS (probably n/a for this main group; but important for\n  // axes, at least...)\n  getMainGroupClass(prefixDot, addGeneralClass) {\n    let dot = ''\n    let generalClass = ''\n    if (prefixDot) {\n      dot = '.'\n    }\n    if (addGeneralClass) {\n      generalClass = `${dot}chart-main-group`\n    }\n    return `${generalClass} ${dot}chart-main-group-${this.props.config.chartIndex}`\n  }\n  // GET MAIN GROUP CLASS ends\n\n  //\n  // ==================================\n  // D3 component configuration objects:\n  // ==================================\n\n  // GET X-AXIS CONFIG\n  // Hands off to function in axis-utilities.\n  // Params is CO\n  getXaxisConfig(chartConfig) {\n    const innerBox = this.state.innerBox\n    // Check for test...\n    const testFlag = this.state.xaxisTest\n    const granularity = this.state.granularity\n    const axisConfig = ConfigXaxisOrdinal(\n      chartConfig,\n      innerBox,\n      testFlag,\n      granularity\n    )\n    return axisConfig\n  }\n  // GET X-AXIS CONFIG ends\n\n  // GET Y-AXIS CONFIG\n  getYaxisConfig(chartConfig, side, testFlag) {\n    const innerBox = Object.assign({}, this.state.innerBox)\n    const axisConfig = ConfigYaxisLinear(chartConfig, innerBox, testFlag, side)\n    return axisConfig\n  }\n  // GET Y-AXIS CONFIG ends\n\n  // CONFIG BLOBS\n  // Assembles blob config object for columns (x-axis)\n  // NOTE: I updated this to 'match' other chart-types, Nov 2017\n  // NOTE: But since the restyle doesn't implement mixed yet,\n  //        this is untested...\n  configBlobs(chartConfig) {\n    // Define props required for more than immediate slot-in to config\n    // const colourSet = chartConfig.series.colours;\n    // Extract blob headers.\n    // headers is complete list\n    // const hLen = chartConfig.headers.length;\n    // Neither of the above is used, so why defined?\n    // blobmeta.columns is number from end\n    // NOTE: dup'd in Line/Barchart.configBlobs\n    const blobs = chartConfig.blobs\n    const padding = chartConfig.series.gap\n    // Get side:\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const chartType = chartConfig.scales[side].type\n    const accum = chartConfig.scales[side].stacked\n    // Assemble the config object with 'simple' props\n    const config = {\n      accum,\n      blobs,\n      blobData: chartConfig.chartData,\n      bounds: this.state.innerBox,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      colourLookup: chartConfig.colourLookup,\n      duration: chartConfig.duration,\n      indexed: chartConfig.indexDot,\n      groupName: `blob-group-${chartConfig.chartIndex}`,\n      originalBounds: chartConfig.originalInnerBox,\n      padding,\n      pointCount: chartConfig.pointCount,\n      postYaxisBounds: this.state.postYaxisBounds,\n      seriesCount: chartConfig.seriesCount,\n      testFlag: this.state.blobsTest,\n    }\n    // And append emVal for text:\n    config.blobs.blobMeta.text.emVal = chartConfig.emVal\n    // HEADERS:\n    // NOTE: this is all dup'd in barchart.js...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n\n    // NOTE: do I really need these?\n    const actualHeaders = chartConfig.headers.slice()\n    config.catHead = actualHeaders.shift()\n    config.seriesHeads = actualHeaders\n    // NOTE ends\n\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // X-SCALE:\n    const xDomain = chartConfig.categories\n    // On the use of 'padding' here...\n    // In order to set an exact px gap between columns, I ignore the optional\n    // arguments that D3 attaches to the rangeBands method to set inner and\n    // outer gaps. Instead, I set up rangeBands for no gap; then, in\n    // columnseries, I subtract the gap from the width of each column.\n    // And I add the padding to the right of the range, to bring the last\n    // column back into line with the innerbox (i.e. to allow for the\n    // lost width on that last column)\n    // Main scale (by data point)\n    config.xMainScale = d3.scale\n      .ordinal()\n      .rangeBands([0, config.bounds.width + padding, 0, 0])\n      .domain(xDomain)\n    return config\n  }\n  // CONFIG BLOBS ends\n\n  // Sub-handlers to reduce complexity of configSeriesMixed\n  getSeriesType(chartConfig, isLeft) {\n    let seriesType = chartConfig.scales.right.type\n    if (isLeft) {\n      seriesType = chartConfig.scales.left.type\n    }\n    return seriesType\n  }\n\n  getMinWidth(chartConfig, seriesType) {\n    const isLine = seriesType.includes('line')\n    return isLine ? 0 : chartConfig.series[seriesType].minWidth\n  }\n\n  getSide(isLeft) {\n    return isLeft ? 'left' : 'right'\n  }\n\n  getChartType(leftType, rightType, isLeft) {\n    return isLeft ? leftType : rightType\n  }\n\n  getAccum(scales, isLeft) {\n    return isLeft ? scales.left.stacked : scales.right.stacked\n  }\n\n  getInvert(scales, isLeft) {\n    return isLeft ? scales.left.invert : scales.right.invert\n  }\n\n  getGroupID(isLeft) {\n    return isLeft ? '-A' : '-B'\n  }\n\n  // APPEND CONFIG CLASS-NAMES\n  appendConfigClassNames(config, groupID) {\n    const cIndex = config.chartIndex\n    // As of Jun'21, the line series class names are no longer\n    // picked up in lineseries.js...\n    // if (config.isLine) {\n    //   let linesGroupClassName = `line-series-group-`;\n    //   linesGroupClassName = `${linesGroupClassName}${cIndex}${groupID}`;\n    //   config.linesGroupClassName = linesGroupClassName;\n    //   let pointsGroupClassName = `point-series-group-`;\n    //   pointsGroupClassName = `${pointsGroupClassName}${cIndex}${groupID}`;\n    //   config.pointsGroupClassName = pointsGroupClassName;\n    // } else {\n    // ...so for columns only\n    if (!config.isLine) {\n      let className = `d3-column-series-group d3-column-series-group-`\n      className = `${className}${cIndex}${groupID}`\n      config.className = className\n    }\n  }\n  // APPEND CONFIG CLASS-NAMES ends\n\n  setDomainArray(mmO, invert) {\n    const dArray = [mmO.min, mmO.max]\n    if (invert) {\n      dArray.reverse()\n    }\n    return dArray\n  }\n\n  getsplitHeadColObj(chartConfig, isLeft) {\n    let splitAt = chartConfig.scales.splitDataAtCol\n    // Trap zero (this should have been trapped in Datafold)\n    if (splitAt === 0) {\n      splitAt = 1\n    }\n    let start = splitAt + 1\n    let end = chartConfig.seriesCount\n    if (isLeft) {\n      start = 1\n      end = splitAt\n    }\n    // Get the specific headers:\n    const splitHeaders = []\n    const splitColours = []\n    // So now we have an array of series-headers, excluding blob-headers\n    // Create specific arrays of headers and colours\n    for (let iii = start; iii <= end; iii++) {\n      splitHeaders.push(chartConfig.headers[iii])\n      splitColours.push(chartConfig.series.colours[iii - 1])\n    }\n    return {\n      splitHeaders,\n      splitColours,\n    }\n  }\n\n  getClusterPadding(config) {\n    let clusterPadding = config.padding\n    if (config.xMainScale.rangeBand() - config.padding < 0) {\n      clusterPadding = config.xMainScale.rangeBand() / 2\n    }\n    return clusterPadding\n  }\n\n  // INITIALISE BASIC CONFIG SERIES MIXED\n  // To reduce length and complexity of configSeriesMixed, it calls\n  // this function to assemble the basic config object.\n  // The properties worked out and assigned here are those\n  // that aren't required during subsequent operations in configSeriesMixed\n  initialiseBasicConfigSeriesMixed(chartConfig, isLeft, side, seriesType) {\n    const stroke = chartConfig.series[seriesType].stroke\n    // NOTE: there's some redundancy in the properties sent to the\n    // series components... pointRadius, e.g., is irrelevant to\n    // column series...\n    const pointRadius = ((chartConfig.series || {}).pointline || {}).radius\n    const minWidth = this.getMinWidth(chartConfig, seriesType)\n    // Series type\n    const scales = chartConfig.scales\n    const leftType = scales.left.type\n    const rightType = scales.right.type\n    const chartType = this.getChartType(leftType, rightType, isLeft)\n    const accum = this.getAccum(scales, isLeft)\n    const invert = this.getInvert(scales, isLeft)\n    // Are both 'sides' column series?\n    const bcCheck = -1\n    const bothCols =\n      leftType.search('line') + rightType.search('line') < bcCheck\n    const isLine = chartType.includes('line')\n    // Step / Pointline check:\n    const isStepline = chartConfig.scales[side].type === 'stepline'\n    const isPointline = chartConfig.scales[side].type === 'pointline'\n    // Line series need the 'indexed' object. The flag should (!)\n    // be false, so don't append styling props from DPs\n    const indexed = chartConfig.indexDot\n    // Colours for this sequence of series\n    const seriesCount = chartConfig.seriesCount\n    const brokenScalePadding = BrokenScale.getYaxisBrokenScalePadding(\n      chartType,\n      chartConfig\n    )\n    return {\n      accum,\n      bothCols,\n      brokenScalePadding,\n      chartData: chartConfig.chartData,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      // Default name/value lookup of colours\n      colourLookup: chartConfig.colourLookup,\n      colourSet: chartConfig.series.colours,\n      duration: chartConfig.duration,\n      factor: scales[side].factor,\n      indexed,\n      invert,\n      isLeft,\n      // isLine attached becos required by caller\n      isLine,\n      isMixed: true,\n      isPointline,\n      isStepline,\n      minWidth,\n      originalBounds: chartConfig.originalInnerBox,\n      pointCount: chartConfig.pointCount,\n      pointRadius,\n      seriesCount,\n      steplineSpur: chartConfig.steplineSpur,\n      stroke,\n      // Can be undefined:\n      zeroPrefs: chartConfig.xAxis.ticks.zero,\n    }\n  }\n  // INITIALISE BASIC CONFIG SERIES MIXED ends\n\n  // CONFIG SERIES MIXED\n  // Assembles series config object\n  // Param 2 is left/right flag\n  configSeriesMixed(chartConfig, isLeft) {\n    // To reduce complexity, construction of the basic config object\n    // is farmed out...\n    const side = this.getSide(isLeft)\n    const seriesType = this.getSeriesType(chartConfig, isLeft)\n    const config = this.initialiseBasicConfigSeriesMixed(\n      chartConfig,\n      isLeft,\n      side,\n      seriesType\n    )\n    // Define other config props\n\n    // Left/right outer groups must be distinguished, A or B.\n    const groupID = this.getGroupID(isLeft)\n    // But this works differently for...\n    // ...lines, which handle it on the fly...\n    config.mixedID = groupID\n    // ...and columns, which expect to inherit\n    this.appendConfigClassNames(config, groupID)\n    // (this is an anomaly created Jun'21, when I refactored lines)\n\n    const scales = chartConfig.scales\n    const mmO = Object.assign({}, scales[side].minMaxObj.scale)\n    const bounds = Object.assign({}, this.state.innerBox)\n    // NOTE: next gets overridden anyway\n    let padding = chartConfig.series[seriesType].gap\n    // Broken scale...?\n    const brokenScalePadding = BrokenScale.getYaxisBrokenScalePadding(\n      'mixed',\n      chartConfig\n    )\n    let breakScale = false\n    if (mmO.min > 0) {\n      bounds.height -= brokenScalePadding\n      breakScale = true\n    }\n    // Append additional props to config:\n    config.bounds = bounds\n    config.breakScale = breakScale\n    // config.colourSet = colourSet;\n    config.minVal = mmO.min\n    config.padding = padding\n    // Mixed +/– flag:\n    config.mixedVals = mmO.min < 0 && mmO.max >= 0\n    // NOTE: the de-complexification could be taken further...\n    // Y-SCALE (linear):\n    const domainArray = this.setDomainArray(\n      mmO,\n      chartConfig.scales[side].invert\n    )\n    config.yScale = d3.scale\n      .linear()\n      .range([bounds.height, 0])\n      .domain(domainArray)\n    // HEADERS:\n    // NOTE: this is all dup'd in barchart.js...\n    // and there's redundancy in header-extraction, too...\n    // Separate first (category) column header from subsequent headers:\n    config.catHead = chartConfig.headers[0]\n    // I need to isolate the relevant headers...\n    // chartConfig.headers is an array of ALL headers, including blob-headers\n    // NOTE: This could be all wrong, but it's roughly what other types do...\n    // Let's get rid of any blobs header:\n    // Actually, this never seems to get used...\n    // const nonBlobHeaders = this.getNonBlobHeaders(chartConfig);\n    // NOTE: blob exclusion ends -- but is this premature here?\n    // Now split the complete array of non-blob\n    // headers into column and line sets\n    // I need start and end for columns; ditto for lines\n    // And left or right could be cols or lines! So...\n    // ...split at:\n    const splitHeadColObj = this.getsplitHeadColObj(chartConfig, isLeft)\n    const splitHeaders = splitHeadColObj.splitHeaders\n    const splitColours = splitHeadColObj.splitColours\n    config.seriesHeads = splitHeaders\n    // Map series colours:\n    config.colourMap = ChartUtilities.getColourMap(splitHeaders, splitColours)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      seriesHeads: all subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps headers to series colours\n    // X-SCALE:\n    const xMainDomain = chartConfig.chartData.map((ddd) => ddd[config.catHead])\n\n    // Cluster width & padding\n    let halfClusterWidth = 0\n    padding = 0\n    if (chartConfig.hasColumns) {\n      const cwp = ChartUtilities.getSeriesClusterWidthAndPadding(\n        chartConfig,\n        false\n      )\n      halfClusterWidth = cwp.clusterWidth / 2\n      config.halfClusterWidth = halfClusterWidth\n      padding = cwp.padding\n      config.padding = padding\n    }\n    // Scale object, depending on line/col\n    if (config.isLine) {\n      // Line goes right across IB\n      config.xMainScale = d3.scale\n        .ordinal()\n        .domain(xMainDomain)\n        .rangePoints([0, config.bounds.width], 0, 0)\n    } else {\n      // On the use of 'padding' here...\n      // In order to set an exact px gap between columns, I ignore the optional\n      // arguments that D3 attaches to the rangeBands method to set inner and\n      // outer gaps. Instead, I set up rangeBands for no gap; then, in\n      // columnseries, I subtract the gap from the width of each column.\n      // And I add the padding to the right of the range, to bring the last\n      // column back into line with the innerbox (i.e. to allow for the\n      // lost width on that last column)\n      // Main scale (by data point)\n      config.xMainScale = d3.scale\n        .ordinal()\n        // .rangeBands([0, config.bounds.width + config.padding, 0, 0])\n        .rangeBands(\n          [\n            0 - halfClusterWidth,\n            config.bounds.width + halfClusterWidth + config.padding,\n          ],\n          0,\n          0\n        )\n        .domain(xMainDomain)\n      // There's a problem with D3 and clusters...\n      // If the xMainScale rangeBands are so narrow that subtracting\n      // padding, for xClusterScale, yields a negative value...\n      // ...D3 does some sort of Math.abs on it, which results in\n      // bonkers wide columns. So crude trap: if allowing for the padding\n      // would result in a negative rangeBand, make padding just half\n      // of cluster-width...\n      // NOTE: in the longer term, would default and narrow series.gap\n      // values be helpful...?\n      const clusterPadding = this.getClusterPadding(config)\n      // Now, cluster scale (n/a for unstacked, but anyway...)\n      config.xClusterScale = d3.scale\n        .ordinal()\n        .domain(splitHeaders)\n        .rangeBands([0, config.xMainScale.rangeBand() - clusterPadding], 0, 0)\n    }\n    return config\n  }\n  // CONFIG SERIES MIXED ends\n\n  // GET Y-AXIS JSX\n  // Ideally, this would be in AxisUtilities, shared by all chart\n  // types. The trouble is, it needs access to state, so unless I'm\n  // going to start passing state around as a param, it has to live\n  // here, and all chart-type components will duplicate this code...\n  getYaxisJsx(config, exists, key, side) {\n    // Check for test...\n    let testFlag = this.state.yaxisTestLeft\n    if (side === 'right') {\n      testFlag = this.state.yaxisTestRight\n    }\n    let axisConfig = { enabled: false }\n    if (exists) {\n      axisConfig = this.getYaxisConfig(config, side, testFlag)\n    }\n    axisConfig.bounds = this.state.innerBox\n    // return axisConfig;\n    // Render left yaxis only, with 'test' flag\n    // to get margin\n    let callbackHandler = this.handleYaxisInnerBoxBoundsRight\n    if (side === 'left') {\n      callbackHandler = this.handleYaxisInnerBoxBoundsLeft\n    }\n    let axisJsx = ''\n    if (testFlag) {\n      axisJsx = (\n        <SilverYaxisLinearTest\n          key={`${key}-test-${side}`}\n          config={axisConfig}\n          onReturnRevisedInnerBox={callbackHandler}\n        />\n      )\n    } else {\n      axisJsx = (\n        <SilverYaxisLinear key={`${key}-test-${side}`} config={axisConfig} />\n      )\n    }\n    return axisJsx\n  }\n  // GET Y-AXIS JSX ends\n\n  // GET X-AXIS JSX\n  // Called from render to assemble x-axis jsx\n  getXaxisJsx(config, key) {\n    // Fcn in this component pulls a couple of strings, then calls\n    // fcn in AxisUtilities... and the result is the axis config obj.\n    const axisConfig = this.getXaxisConfig(config)\n    axisConfig.bounds = this.state.innerBox\n    // Test or live:\n    let xaxisJsx = ''\n    if (this.state.xaxisTest) {\n      // Only send callback for test\n      xaxisJsx = (\n        <SilverXaxisOrdinalTest\n          key={key}\n          config={axisConfig}\n          onReturnRevisedInnerBox={this.handleXaxisInnerBoxBounds}\n        />\n      )\n    } else {\n      xaxisJsx = <SilverXaxisOrdinal key={key} config={axisConfig} />\n    }\n    return xaxisJsx\n  }\n  // GET X-AXIS JSX ends\n\n  // GET BLOBS JSX\n  getBlobsJsx(config, key, isTest) {\n    const blobsConfig = this.configBlobs(config)\n    blobsConfig.bounds = this.state.innerBox\n    const jsxTemplate = (\n      <SilverXaxisBlobs\n        key={key}\n        config={blobsConfig}\n        onReturnRevisedInnerBox={this.handleBlobsInnerBoxBounds}\n      />\n    )\n    let jsx = ''\n    if (isTest) {\n      // If it's a test, always assemble jsx\n      jsx = jsxTemplate\n    } else if (blobsConfig.blobs.blobState.column > 0) {\n      // Not a test, only make up jsx if there ARE blobs\n      jsx = jsxTemplate\n    }\n    return jsx\n  }\n  // GET BLOBS JSX en;ds\n\n  // GET BACK OR FRONT SERIES\n  // Called from render; returns front/back column/line series JSX\n  getBackOrFrontSeriesJsx(backConfig, frontConfig, keys, isBack) {\n    // Back or front?\n    let seriesConfig = frontConfig\n    let keyPrefix = 'front'\n    if (isBack) {\n      seriesConfig = backConfig\n      keyPrefix = 'back'\n    }\n    // Line or column?\n    // (NOTE: var must start U/C)\n    let SeriesComponent = SilverSeriesColumn\n    let seriesKey = `${keyPrefix}-${keys.columnSeriesKey}`\n    if (seriesConfig.chartType.includes('line')) {\n      SeriesComponent = SilverSeriesLine\n      seriesKey = `${keyPrefix}-${keys.lineSeriesKey}`\n    }\n    return (\n      <SeriesComponent\n        key={seriesKey}\n        config={seriesConfig}\n        onPassLineClick={this.handleLineClick}\n      />\n    )\n  }\n  // GET BACK OR FRONT SERIES ends\n\n  // RENDER\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Key all subcomponents:\n    const kids = ChartUtilities.getKeysAndIds(chartIndex)\n\n    // Custom config objects for the various d3 components:\n    // See linechart.js\n\n    // Y axis can be left/right/both...\n    const enableScale = config.scales.enableScale\n    const yLeft = enableScale.left\n    const yRight = enableScale.right\n    // Default empty jsx\n    let xaxisJSX = ''\n    let yaxisJSXLeft = ''\n    let yaxisJSXRight = ''\n    let blobsJSX = ''\n    let backseriesJSX = ''\n    let frontseriesJSX = ''\n    // Render sequence\n    // Either the tests, where we render individual components...\n    if (this.state.yaxisTestLeft) {\n      yaxisJSXLeft = this.getYaxisJsx(config, yLeft, kids.yAxisKey, 'left')\n    } else if (this.state.yaxisTestRight) {\n      yaxisJSXRight = this.getYaxisJsx(config, yRight, kids.yAxisKey, 'right')\n    } else if (this.state.xaxisTest) {\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n    } else if (this.state.blobsTest) {\n      // (NOTE: blobs are disabled in Editor on mixed charts, anyway)\n      blobsJSX = this.getBlobsJsx(config, kids.blobsKey, this.state.blobsTest)\n    } else {\n      // The series config objects will be shuffled back/front later\n      // (Each has a chartType property to identify col/line)\n      const seriesConfigLeft = this.configSeriesMixed(config, true)\n      const seriesConfigRight = this.configSeriesMixed(config, false)\n      // Default back and front. This will be OK if:\n      //    Left is stacked cols\n      //    Left is cols and right is cols or lines\n      //    Left and right are both lines\n      let seriesConfigBack = seriesConfigLeft\n      let seriesConfigFront = seriesConfigRight\n      // Correct if l/r sequence is:\n      //    Left:line / Right:!line\n      //    Left:cols / Right:stacked\n\n      const linesOnlyBack =\n        seriesConfigBack.chartType.includes('line') &&\n        !seriesConfigFront.chartType.includes('line')\n      const columnsStackedFront =\n        seriesConfigBack.chartType === 'columns' &&\n        seriesConfigFront.chartType === 'stackedcolumn'\n      // if (seriesConfigBack.chartType.includes('line')) {\n      //   if (!seriesConfigFront.chartType.includes('line')) {\n      if (linesOnlyBack) {\n        seriesConfigBack = seriesConfigRight\n        seriesConfigFront = seriesConfigLeft\n        // } else if (seriesConfigBack.chartType === 'columns') {\n        //   if (seriesConfigFront.chartType === 'stackedcolumn') {\n      } else if (columnsStackedFront) {\n        seriesConfigBack = seriesConfigRight\n        seriesConfigFront = seriesConfigLeft\n      }\n\n      // So now I have front and back COs\n      // Update all config objects with 'latest' bounds:\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n      if (yLeft) {\n        yaxisJSXLeft = this.getYaxisJsx(config, yLeft, kids, 'left')\n      }\n      if (yRight) {\n        yaxisJSXRight = this.getYaxisJsx(config, yRight, kids, 'right')\n      }\n      blobsJSX = this.getBlobsJsx(config, kids.blobsKey, this.state.blobsTest)\n      // Conditional back/front jsx objects\n      backseriesJSX = this.getBackOrFrontSeriesJsx(\n        seriesConfigBack,\n        seriesConfigFront,\n        kids,\n        true\n      )\n      frontseriesJSX = this.getBackOrFrontSeriesJsx(\n        seriesConfigBack,\n        seriesConfigFront,\n        kids,\n        false\n      )\n    }\n\n    // Zero line stacking. Defaults to back:\n    let zeroStackPos = 'back'\n    // Test when JSX objs exist:\n    if (\n      typeof backseriesJSX === 'object' &&\n      typeof frontseriesJSX === 'object'\n    ) {\n      const backType = backseriesJSX.props.config.chartType\n      const frontType = frontseriesJSX.props.config.chartType\n      // If front is column, back must be too. Zero line at front\n      if (frontType.includes('column')) {\n        zeroStackPos = 'front'\n      } else if (backType.includes('column')) {\n        // Front is line (by implication); if back is columns,\n        // zero line is sandwiched\n        zeroStackPos = 'sandwich'\n      }\n    }\n\n    // General and indexed class for main group:\n    const mainGroupClass = this.getMainGroupClass(false, true)\n\n    // NOTE: I can draw a temporary 'inner box'\n    // so I can see what I've got...\n    // const rectStyle = {\n    //   fill: '#aa5',\n    //   width: this.state.innerBox.width,\n    //   height: this.state.innerBox.height,\n    //   x: 0,\n    //   y: 0,\n    // };\n    // <rect style={rectStyle} />\n\n    // Group for zero line, if any\n    const zeroGrpJSX = (\n      <g className={kids.zeroId} id={kids.zeroId} key=\"zero-group\" />\n    )\n    // Components whose position in the stack is fixed:\n    const jsxArray = [xaxisJSX, yaxisJSXLeft, yaxisJSXRight, blobsJSX]\n    // Stacking of front and back series, and of zero, depends upon chart types:\n    let extraItems = [backseriesJSX, frontseriesJSX, zeroGrpJSX]\n    if (zeroStackPos === 'back') {\n      extraItems = [zeroGrpJSX, backseriesJSX, frontseriesJSX]\n    } else if (zeroStackPos === 'sandwich') {\n      extraItems = [backseriesJSX, zeroGrpJSX, frontseriesJSX]\n    }\n    jsxArray.push(...extraItems)\n\n    const chartComponentsJSX = (\n      <g className={mainGroupClass} key={kids.mainGroupKey} id={kids.contentId}>\n        {jsxArray}\n      </g>\n    )\n    return chartComponentsJSX\n  }\n}\n\nSilverMixedChart.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverMixedChart\n","// Called from ScatterSeries to add trendlines\n\n// ADD TRENDLINE GROUP\n// Called from controlTrendlines to create group\nexport function addTrendlineGroup(parentGroup, grpIndex) {\n  const trendlineGroup = parentGroup.append('g').attr({\n    id: `trendline-group-${grpIndex}`,\n    className: `trendline-group-${grpIndex}`,\n  })\n  return trendlineGroup\n}\n// ADD TRENDLINE GROUP ends\n\n// LEAST SQUARES COEFFICIENT\n// Called from getTrendData\n// Lifted from: https://www.mathsisfun.com/data/least-squares-regression.html\nexport function leastSquares(vals) {\n  const pointCount = vals.length\n  // Step 1: For each (x,y) calculate x**2 and x*y\n  // forming array of objects\n  const step1 = vals.map((point) => {\n    return {\n      x: point[0],\n      y: point[1],\n      xSq: point[0] ** 2,\n      xy: point[0] * point[1],\n    }\n  })\n  // Step 2: Sum x, y, x**2 and x*y\n  const reducer = (accum, current) => {\n    const x = accum.x + current.x\n    const y = accum.y + current.y\n    const xSq = accum.xSq + current.xSq\n    const xy = accum.xy + current.xy\n    const iam = { x, y, xSq, xy }\n    return iam\n  }\n  const sumUp = step1.reduce(reducer, {\n    x: 0,\n    y: 0,\n    xSq: 0,\n    xy: 0,\n  })\n  // Calculate slope\n  const numer = pointCount * sumUp.xy - sumUp.x * sumUp.y\n  const denom = pointCount * sumUp.xSq - sumUp.x ** 2\n  const slope = numer / denom\n  // Intercept\n  const intercept = (sumUp.y - slope * sumUp.x) / pointCount\n  // Formula is y = slope * x + intercept\n  const result = vals.map((point) => {\n    const yVal = slope * point[0] + intercept\n    return [point[0], yVal]\n  })\n  return result\n}\n// LEAST SQUARES COEFFICIENT ends\n\n// GET TREND DATA\n// Called from appendTrendLine to dig out the start\n// and end points for the trendline\nexport function getTrendData(chartData, tHeaders, xFactor, yFactor) {\n  const { xHead, yHead } = tHeaders\n  // Values as numbers, arrayifing points, filtering out blanks\n  const valsArray = chartData\n    .filter((point) => {\n      return point[xHead].length > 0 && point[yHead].length > 0\n    })\n    .map((point) => {\n      // Apply any factor to values:\n      return [+point[xHead] / xFactor, +point[yHead] / yFactor]\n    })\n  // Sort\n  valsArray.sort((a, b) => parseFloat(a[0]) - parseFloat(b[0]))\n  // Get complete array of regression point values\n  const leastSquaresCoeff = leastSquares(valsArray)\n  const lscLen = leastSquaresCoeff.length\n  // Array as x1, y1, x2, y2\n  // Use first and last elements only, and wrap\n  // the array inside an array, for D3\n  return [\n    // [\n    leastSquaresCoeff[0][0],\n    leastSquaresCoeff[0][1],\n    leastSquaresCoeff[lscLen - 1][0],\n    leastSquaresCoeff[lscLen - 1][1],\n    // ],\n  ]\n}\n// GET TREND DATA ends\n\n// UPDATE TREND-LINES\n// Called from appendAllTrendlines to draw lines\n// Args are the config object; the data array to bind,\n// and the group to bind to\nexport function updateTrendlines(config, tDataArray, trendlineGroup) {\n  const xScale = config.xScale\n  const yScale = config.yScale\n  const tlProps = config.seriesPrefs.trendline\n  const trendLines = trendlineGroup.selectAll('line').data(tDataArray)\n  trendLines\n    .enter()\n    .append('line')\n    .attr({\n      class: 'trendline',\n      x1: (ddd) => xScale(ddd.tData[0]),\n      y1: (ddd) => yScale(ddd.tData[1]),\n      x2: (ddd) => xScale(ddd.tData[2]),\n      y2: (ddd) => yScale(ddd.tData[3]),\n      id: (ddd, iii) => {\n        let idStr = `scatter-trendline-${iii}`\n        idStr = `${idStr}~~~stroke:${ddd.tColour}`\n        return idStr\n      },\n    })\n    .style({\n      stroke: (ddd) => config.colourLookup[ddd.tColour],\n      'stroke-width': tlProps.strokewidth,\n      'stroke-dasharray': tlProps.dash,\n    })\n}\n// UPDATE TREND-LINES ends\n\n// GET HEADERS ARRAY\n// Called from appendAllTrendlines to assemble an\n// array of x/y header pairs\nexport function getHeadersArray(config) {\n  const clusterNo = config.clusterNo\n  const headers = config.headers\n  const trendHeadArray = []\n  for (let hNo = 0; hNo < headers.length; hNo += clusterNo) {\n    trendHeadArray.push({\n      xHead: headers[hNo],\n      yHead: headers[hNo + 1],\n    })\n  }\n  return trendHeadArray\n}\n// GET HEADERS ARRAY ends\n\n// APPEND ALL TRENDLINES\n// Called from controlTrendlines\nexport function appendAllTrendlines(config, trendlineGroup) {\n  // Get an array of x/y headers for each series\n  const trendHeadArray = getHeadersArray(config)\n  // Assemble array of series-specific trendline data\n  const tDataArray = trendHeadArray.map((tHeads, tNo) => {\n    return {\n      tColour: config.seriesPrefs.colours[tNo],\n      // Calculate coords for trendline\n      tData: getTrendData(\n        config.chartData,\n        tHeads,\n        config.xFactor,\n        config.yFactor\n      ),\n    }\n  })\n  // Draw trendlines\n  updateTrendlines(config, tDataArray, trendlineGroup)\n}\n// APPEND ALL TRENDLINES ends\n\n// CONTROL TRENDLINES\n// Called from scatterSeries.updateScatter\nexport function controlTrendlines(config, outerGroup) {\n  const trendlineGroup = addTrendlineGroup(outerGroup, config.chartIndex)\n  appendAllTrendlines(config, trendlineGroup)\n}\n// CONTROL TRENDLINES ends\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as ChartUtilities from '../chart-utilities'\nimport * as ScatterTrendline from './scattertrendline'\nimport * as ScatterZKey from './scatterzkey'\n\nclass SilverScatterSeries extends Component {\n  componentDidMount() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateScatter()\n    }\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    // To guarantee that we only update on 2nd render:\n    if (!this.props.config.firstRender) {\n      this.updateScatter()\n    }\n  }\n\n  // DOT CLICK\n  // Handles bar click event. Params are data (cat and value)\n  // and index in overall data.\n  // NOTE: This event currently gets passed back up to\n  // ScatterChart, where I do a console.log. Long-term, I might\n  // use this to set 'emphasis'...\n  dotClick(dotData, index) {\n    const clickObj = { dotData, index }\n    this.props.onPassDotClick(clickObj)\n  }\n  // DOT CLICK ends\n\n  // GET OUTER GROUP\n  // Called from updateScatter\n  getOuterGroup(config) {\n    const className = config.className.split(' ')[1]\n    const grp = d3.select(`.${className}`)\n    return grp\n  }\n  // GET OUTER GROUP ends\n\n  // MAKE OUTER BINDING\n  // Called from updateScatter. Binds data to outer group\n  makeOuterBinding(outerGroup, mappedData) {\n    const outerBinding = outerGroup\n      .attr({ class: 'outer-group' })\n      .selectAll('circle')\n      .data(mappedData)\n      .enter()\n    return outerBinding\n  }\n  // MAKE OUTER BINDING ends\n\n  // BIND SERIES GROUPS\n  // Called from updateScatter. Binds data to series groups\n  bindSeriesGroups(outerBinding) {\n    const seriesGroup = outerBinding\n      .append('g')\n      .attr({ class: (ddd, iii) => `series-group-${iii}` })\n      .selectAll('circle')\n      .data(function(d) {\n        return d\n      })\n      .enter()\n    return seriesGroup\n  }\n  // BIND SERIES GROUPS ends\n\n  // BIND POINT GROUPS\n  // Called from updateScatter. Binds data to point groups\n  bindPointGroups(seriesGroups) {\n    const pointGroups = seriesGroups\n      .append('g')\n      .attr('class', 'point-group')\n      .selectAll('.dot')\n      .data((ddd) => ddd)\n      .enter()\n    return pointGroups\n  }\n  // BIND POINT GROUPS ends\n\n  // LABEL FILTER\n  // Called from appendLine and appendText to determine\n  // whether point is labelled. If forceLabel is true, all\n  // points are labelled, otherwise checks the category string\n  labelFilter(ddd, forceLabel, labelMarker) {\n    let label = false\n    const cat = ddd.category\n    if (typeof cat !== 'undefined') {\n      if (forceLabel || cat.endsWith(labelMarker)) {\n        label = true\n      }\n    }\n    return label\n  }\n  // LABEL FILTER\n\n  // APPEND LINE\n  // Called from populatePoints to draw link-line\n  appendLine(config, pointGroups) {\n    const lPrefs = config.seriesPrefs.links\n    const forceLabel = config.labels\n    const labelMarker = config.seriesPrefs.labelMarker\n    pointGroups\n      .append('line')\n      .filter((ddd) => this.labelFilter(ddd, forceLabel, labelMarker))\n      .attr({\n        class: 'scatter-link',\n        x1: (ddd) => config.xScale(ddd.valX),\n        x2: (ddd) => config.xScale(ddd.valX),\n        y1: (ddd) => config.yScale(ddd.valY),\n        y2: (ddd) => config.yScale(ddd.valY) - lPrefs.length,\n        id: () => {\n          let idStr = `scatter-link`\n          idStr = `${idStr}~~~stroke:${lPrefs.stroke}`\n          return idStr\n        },\n      })\n      .style({\n        'stroke-width': lPrefs.width,\n        stroke: config.colourLookup[lPrefs.stroke],\n      })\n  }\n  // APPEND LINE ends\n\n  // APPEND TEXT\n  // Called from populatePoints\n  appendText(config, pointGroups) {\n    const tPrefs = config.seriesPrefs.text\n    const textY = config.seriesPrefs.links.length - tPrefs.y\n    const forceLabel = config.labels\n    const labelMarker = config.seriesPrefs.labelMarker\n    pointGroups\n      .append('text')\n      .filter((ddd) => this.labelFilter(ddd, forceLabel, labelMarker))\n      .attr({\n        class: 'scatter-label',\n        x: (ddd) => config.xScale(ddd.valX) + tPrefs.x,\n        y: (ddd) => config.yScale(ddd.valY) - textY,\n        fill: config.colourLookup[tPrefs.fill],\n        id: () => {\n          // Note that I never revisit id to set width, since text remains left-aligned\n          let tID = `scatter-label`\n          tID = `${tID}~~~fill:${tPrefs.fill}`\n          tID = `${tID}, justification:${tPrefs.anchor}`\n          return tID\n        },\n      })\n      .style({\n        'font-size': `${tPrefs.size}px`,\n        'font-family': tPrefs.font,\n        // Not currently set\n        // leading: tPrefs.leading,\n      })\n      .text((ddd) => {\n        let cat = ddd.category\n        if (cat.endsWith(labelMarker)) {\n          cat = cat.slice(0, -1)\n        }\n        return cat\n      })\n  }\n  // APPEND TEXT ends\n\n  // APPEND DOT\n  // Called from populatePoints\n  appendDot(config, pointGroups) {\n    const dPrefs = config.seriesPrefs.dots\n    const dotCircleScale = ScatterZKey.getSizedDotScale(config)\n    pointGroups\n      .append('circle')\n      .attr({\n        class: 'scatter-dot',\n        cx: (ddd) => config.xScale(ddd.valX),\n        cy: (ddd) => config.yScale(ddd.valY),\n        r: (ddd) => {\n          let rad = dPrefs.fixedRadius\n          if (config.isSized) {\n            rad = dotCircleScale(ddd.valZ) / 2\n            rad = Math.max(rad, 0.5)\n          }\n          return rad\n        },\n        id: (ddd) => {\n          let idStr = `scatter-dot`\n          idStr = `${idStr}~~~fill:${ddd.fillName}`\n          idStr = `${idStr},name:${ddd.category.replace(/,/g, '')}`\n          return idStr\n        },\n      })\n      .style({\n        fill: (ddd) => config.colourLookup[ddd.fillName],\n        opacity: () => {\n          let opac = dPrefs.fixedOpacity\n          if (config.isSized) {\n            opac = dPrefs.sizedOpacity\n          }\n          return opac\n        },\n      })\n      // Set click event on dot\n      .on('click', (ddd, iii) => this.dotClick(ddd, iii))\n  }\n  // APPEND DOT ends\n\n  // POPULATE POINTS\n  // Called from updateScatter. Calls sub-handlers to append\n  // elements to datapoint group\n  // FIXME: appending line and text will be optional\n  populatePoints(config, pointGroups) {\n    // if (config.labels) {\n    this.appendLine(config, pointGroups)\n    this.appendText(config, pointGroups)\n    // }\n    this.appendDot(config, pointGroups)\n  }\n  // POPULATE POINTS ends\n\n  // UPDATE SCATTER\n  // Called from componentDidMount/Update, to do the main business\n  updateScatter() {\n    const config = this.props.config\n    // Context: outer group, created in render, contains all series\n    const outerGroup = this.getOuterGroup(config)\n    // Get the data in D3-friendly shape (see note in function\n    // on array structure)\n    const mappedData = ChartUtilities.mapScatterSeriesData(config)\n    // Outer binding\n    const outerBinding = this.makeOuterBinding(outerGroup, mappedData)\n    // Series groups\n    const seriesGroups = this.bindSeriesGroups(outerBinding)\n    // Groups for individual data points\n    const pointGroups = this.bindPointGroups(seriesGroups)\n    // Each point group contains a dotmarker and (optional)\n    // linking-line and text\n    this.populatePoints(config, pointGroups)\n    // Trend line?\n    if (config.trendline) {\n      ScatterTrendline.controlTrendlines(config, outerGroup)\n    }\n    // And if there's a z-axis, we need a header:\n    if (config.isSized) {\n      ScatterZKey.addZKey(config, outerGroup)\n    }\n  }\n\n  // RENDER all-series parent group:\n  render() {\n    return (\n      <g className={this.props.config.className} id=\"series-group:scatter\" />\n    )\n  }\n}\n\nSilverScatterSeries.propTypes = {\n  config: PropTypes.object.isRequired,\n  onPassDotClick: PropTypes.func,\n}\n\nexport default SilverScatterSeries\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtilities from '../chart-utilities'\n// import * as AxisUtilities from '../axes/axis-utilities';\nimport * as BrokenScale from '../axes/broken-scale'\nimport ConfigXaxisLinear from '../axes/configuration/xaxis-linear-config'\nimport ConfigYaxisLinear from '../axes/configuration/yaxis-linear-config'\n// D3 sub-components:\nimport SilverXaxisLinear from '../axes/live/xaxis-linear'\nimport SilverXaxisLinearTest from '../axes/tests/xaxis-linear-test'\nimport SilverYaxisLinear from '../axes/live/yaxis-linear'\nimport SilverYaxisLinearTest from '../axes/tests/yaxis-linear-test'\nimport SilverScatterSeries from './scatterseries'\n\nclass SilverScatterChart extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      // flags to control subcomponent testing/rendering\n      yaxisTest: false,\n      // NOTE: assumption that x-axis is at bottom\n      xaxisTest: false,\n      // updated innerBox bounds\n      innerBox: this.props.config.innerBox,\n    }\n    // Callbacks from axis tests:\n    this.handleXaxisInnerBoxBounds = this.handleXaxisInnerBoxBounds.bind(this)\n    this.handleYaxisInnerBoxBounds = this.handleYaxisInnerBoxBounds.bind(this)\n    // Click on any scatter-dot\n    // this.handleScatterDotClick = this.handleScatterDotClick.bind(this);\n  }\n\n  // COMPONENT WILL MOUNT\n  // Puts inherited innerBox into state:\n  UNSAFE_componentWillMount() {\n    this.setState({\n      yaxisTest: true,\n      xaxisTest: false,\n      innerBox: this.props.config.innerBox,\n    })\n  }\n\n  // COMPONENT DID MOUNT\n  UNSAFE_componentDidMount() {\n    this.mainDthreeGroupTransition(0)\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Reset state to default...\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      innerBox: newProps.config.innerBox,\n      yaxisTest: true,\n      xaxisTest: false,\n    })\n  }\n\n  // Callbacks:\n  // HANDLE Y-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox, allowing for axis labels.\n  // It also sets state.postYaxisBounds, which represents the\n  // chart area after allowing for yaxis labels and before the\n  // IB is adjusted for projecting x-axis category strings.\n  handleYaxisInnerBoxBounds(innerBox) {\n    this.setState({\n      innerBox,\n      // postYaxisBounds: Object.assign({}, innerBox),\n      yaxisTest: false,\n      xaxisTest: true,\n    })\n  }\n\n  // HANDLE X-AXIS INNER BOX BOUNDS\n  // ...fields the revised innerBox after calculating axis adjustments\n  handleXaxisInnerBoxBounds(innerBox) {\n    // Firing off an error msg if IB is on the small side...\n    // ...deleted Feb'21\n    // ...and set state. All test-flags are false, so 'real' render\n    this.setState({\n      innerBox,\n      yaxisTest: false,\n      xaxisTest: false,\n    })\n    // NOTE: set to zero to prevent visible drop-in from top left...\n    const duration = 0\n    this.mainDthreeGroupTransition(duration)\n  }\n\n  handleDotClick(event) {\n    const dotData = event.dotData\n    // const index = event.index;\n    const info = `You clicked on ${dotData.category}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n\n  // MAIN D3 GROUP TRANSITION\n  // After adjustments have been made to the background elements,\n  // moves main D3 group into position\n  // NB: This isn't interested in mainGroup *size* -- only in location\n  // NOTE: dup'ed in every chart-type component. Surely can go\n  // somewhere shared...\n  mainDthreeGroupTransition(duration) {\n    const innerBox = this.state.innerBox\n    const bLeft = innerBox.x\n    const bTop = innerBox.y\n    const transStr = `translate(${bLeft}, ${bTop})`\n    const mainGroupClass = this.getMainGroupClass(true, false)\n    const mainGroup = d3.select(mainGroupClass)\n    mainGroup\n      .transition()\n      .duration(duration)\n      .attr('transform', transStr)\n  }\n\n  // GET MAIN GROUP CLASS\n  // Returns class name for main chart group. Arg 1 determines\n  // whether classes are preceded by a dot; arg 2 whether\n  // the general class (which pulls in the CSS) is appended\n  // NOTE: The point is, because all d3 refs are specific, I need\n  // indexed class names throughout. The general class will be used\n  // for CSS (probably n/a for this main group; but important for\n  // axes, at least...)\n  getMainGroupClass(prefixDot, addGeneralClass) {\n    let dot = ''\n    let generalClass = ''\n    if (prefixDot) {\n      dot = '.'\n    }\n    if (addGeneralClass) {\n      generalClass = `${dot}chart-main-group`\n    }\n    return `${generalClass} ${dot}chart-main-group-${this.props.config.chartIndex}`\n  }\n  // GET MAIN GROUP CLASS ends\n\n  //\n  // ==================================\n  // D3 component configuration objects:\n  // ==================================\n\n  // GET AXIS CONFIG\n  // Hands off to function in axis-utilities.\n  // Params: config object, flag for x/y-axis, flag for y-axis side (left/right)\n  getAxisConfig(chartConfig, isXaxis, yAxisSide) {\n    let axisConfig = {}\n    const innerBox = Object.assign({}, this.state.innerBox)\n    if (isXaxis) {\n      // Check for test...\n      const testFlag = this.state.xaxisTest\n      axisConfig = ConfigXaxisLinear(chartConfig, innerBox, testFlag)\n    } else {\n      const testFlag = this.state.yaxisTest\n      axisConfig = ConfigYaxisLinear(chartConfig, innerBox, testFlag, yAxisSide)\n    }\n    return axisConfig\n  }\n  // GET AXIS CONFIG ends\n\n  getSeriesConfig(chartConfig) {\n    // The default name/value lookup of colours\n    const colourLookup = chartConfig.colourLookup\n    const chartType = chartConfig.scales.left.type\n    // Series preferences\n    const seriesPrefs = chartConfig.series[chartType]\n    // Colours for this sequence of series\n    const colourSet = seriesPrefs.colours\n    const bounds = Object.assign({}, this.state.innerBox)\n    // Is this a simple or 'sized' scatter\n    const isSized = chartConfig.scales.left.type.includes('sized')\n    const leftLog = chartConfig.scales.left.log\n    const rightLog = chartConfig.scales.right.log\n    // Label points? Trendline:\n    const labels = chartConfig.scales.left.scatterLabels\n    const trendline = chartConfig.scales.left.scatterTrendline\n    const mmoX = Object.assign({}, chartConfig.scales.left.minMaxObj.scale)\n    const mmoY = Object.assign({}, chartConfig.scales.right.minMaxObj.scale)\n    const mmoZ = chartConfig.scales.z\n    // Min and max dot *size*:\n    const zAxisBounds = {\n      min: mmoZ.min,\n      max: mmoZ.max,\n    }\n    const brokenScalePadding = BrokenScale.getYaxisBrokenScalePadding(\n      chartType,\n      chartConfig\n    )\n    // Fix, 27.6.23: previously tested leftLog (i.e. the x-axis), which is ludicrous\n    // Subtract padding if y-axis is (a) unlogged and (b) broken\n    if (!rightLog && mmoY.min > 0) {\n      bounds.height -= brokenScalePadding\n    }\n\n    const config = {\n      bounds,\n      chartData: chartConfig.chartData,\n      chartIndex: chartConfig.chartIndex,\n      className: `d3-scatter-series-group d3-scatter-series-group-${chartConfig.chartIndex}`,\n      colourLookup,\n      colourSet,\n      emVal: chartConfig.emVal,\n      forceTurn: chartConfig.forceTurn,\n      isSized,\n      labels,\n      leftLog,\n      rightLog,\n      maxXval: mmoX.max,\n      minXval: mmoY.min,\n      maxYval: mmoX.max,\n      minYval: mmoY.min,\n      maxZval: mmoZ.actualMax,\n      minZval: mmoZ.actualMin,\n      originalBounds: chartConfig.originalInnerBox,\n      outerWidth: chartConfig.outerWidth,\n      pointCount: chartConfig.pointCount,\n      seriesCount: chartConfig.seriesCount,\n      seriesPrefs,\n      trendline,\n      xFactor: chartConfig.scales.left.factor,\n      yFactor: chartConfig.scales.right.factor,\n      zeroPrefs: chartConfig.yAxis.ticks.zero,\n      zAxisBounds,\n      zAxisHeader: chartConfig.axisHeaders.zaxis,\n    }\n    // Map series colours, excluding cats column. But scatter headers\n    // are by cluster...\n    // FIXME: this duplicates code in legends.assembleLegendSets\n    // (and, I suspect, elsewhere)\n    // Number of data-'columns' per series. Default (non-scatters) is 1\n    let clusterNo = 2\n    if (config.isSized) {\n      clusterNo = 3\n    }\n    config.clusterNo = clusterNo\n    const headers = Object.assign([], chartConfig.headers)\n    // Extract cat header\n    config.catHead = headers.shift()\n    config.headers = headers\n    // Filter to first header in each cluster\n    const clusterHeaders = headers.filter((head, iii) => iii % clusterNo === 0)\n    config.colourMap = ChartUtilities.getColourMap(clusterHeaders, colourSet)\n    // So, to be clear, the config obj includes properties--\n    //      catHead: the category column header\n    //      headers: ALL subsequent (col 2 etc...) header strings\n    //      colourMap: a D3 scale object that maps the first header in each cluster to series colours\n    // X-scale object\n    const invertX = false\n    let xDomainArray = [mmoX.min, mmoX.max]\n    if (invertX) {\n      xDomainArray = [mmoX.max, mmoX.min]\n    }\n    if (leftLog) {\n      config.xScale = d3.scale\n        .log()\n        .range([0, bounds.width])\n        .domain(xDomainArray)\n    } else {\n      config.xScale = d3.scale\n        .linear()\n        .range([0, bounds.width])\n        .domain(xDomainArray)\n    }\n    // Y-scale object\n    // Assemble the scale object\n    let yDomainArray = [mmoY.min, mmoY.max]\n    const invertY = false\n    if (invertY) {\n      yDomainArray = [mmoY.max, mmoY.min]\n    }\n    if (rightLog) {\n      config.yScale = d3.scale\n        .log()\n        .range([bounds.height, 0])\n        .domain(yDomainArray)\n    } else {\n      config.yScale = d3.scale\n        .linear()\n        .range([bounds.height, 0])\n        .domain(yDomainArray)\n    }\n    return config\n  }\n\n  // GET SCATTER SERIES JSX\n  getScatterSeriesJsx(config, key) {\n    const seriesConfig = this.getSeriesConfig(config)\n    const seriesJsx = (\n      <SilverScatterSeries\n        key={key}\n        config={seriesConfig}\n        onPassDotClick={this.handleDotClick}\n      />\n    )\n    return seriesJsx\n  }\n  // GET SCATTER SERIES JSX ends\n\n  // GET Y-AXIS JSX\n  // Ideally, these would be in AxisUtilities, shared by all chart\n  // types. The trouble is, it needs access to state, so unless I'm\n  // going to start passing state around as a param, it has to live\n  // here, and all chart-type components will duplicate this code...\n  // FIXME: that's bollocks. I need the IB, which is in state, but that\n  // can be passed into a shared function...\n  getYaxisJsx(config, key) {\n    // FIXME: I really need to refactor this 'left'/'right' side shit\n    // Axes need to be x or y.\n    // BUT FOR NOW...\n    // Scatters read 'left' as the x-axis and 'right' as the y-axis\n    // But they can draw the y-axis to the left or right of the chart!\n    // So there's a flag to tell us which:\n    const side = config.yAxis.orient.scatter\n    const axisConfig = this.getAxisConfig(config, false, side)\n    axisConfig.bounds = this.state.innerBox\n    // Render yaxis, with 'test' flag to get margin\n    const callbackHandler = this.handleYaxisInnerBoxBounds\n    let axisJsx = ''\n    if (this.state.yaxisTest) {\n      axisJsx = (\n        <SilverYaxisLinearTest\n          key={`${key}-test-${side}`}\n          config={axisConfig}\n          onReturnRevisedInnerBox={callbackHandler}\n        />\n      )\n    } else {\n      axisJsx = (\n        <SilverYaxisLinear key={`${key}-test-${side}`} config={axisConfig} />\n      )\n    }\n    return axisJsx\n  }\n  // GET Y-AXIS JSX ends\n\n  // GET X-AXIS JSX\n  // Called from render to assemble x-axis jsx\n  getXaxisJsx(config, key) {\n    // Fcn in this component pulls a couple of strings, then calls\n    // fcn in AxisUtilities... and the result is the axis config obj.\n    const axisConfig = this.getAxisConfig(config, true)\n    axisConfig.bounds = this.state.innerBox\n    let xaxisJsx = ''\n    if (this.state.xaxisTest) {\n      xaxisJsx = (\n        <SilverXaxisLinearTest\n          key={key}\n          config={axisConfig}\n          onReturnRevisedInnerBox={this.handleXaxisInnerBoxBounds}\n        />\n      )\n    } else {\n      xaxisJsx = <SilverXaxisLinear key={key} config={axisConfig} />\n    }\n    return xaxisJsx\n  }\n  // GET X-AXIS JSX ends\n\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Key strings for all subcomponents:\n    const kids = ChartUtilities.getKeysAndIds(chartIndex)\n\n    // Custom config objects for the various d3 components\n    // See linechart.js\n    // Default empty jsx\n    let xaxisJSX = ''\n    let yaxisJSX = ''\n    let scatterSeriesJSX = ''\n    // Render sequence:\n    // Either the tests, where we render individual components...\n    if (this.state.yaxisTest) {\n      yaxisJSX = this.getYaxisJsx(config, kids.yAxisKey)\n    } else if (this.state.xaxisTest) {\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n    } else {\n      // ...or, when all tests are done, full render, with all children\n      xaxisJSX = this.getXaxisJsx(config, kids.xAxisKey)\n      yaxisJSX = this.getYaxisJsx(config, kids.yAxisKey)\n      scatterSeriesJSX = this.getScatterSeriesJsx(config, kids.scatterSeriesKey)\n      // seriesConfig.bounds = this.state.innerBox;\n    }\n    // General and indexed class for main group:\n    const mainGroupClass = this.getMainGroupClass(false, true)\n\n    // NOTE: I can draw a temporary 'inner box'\n    // so I can see what I've got...\n    // const rectStyle = {\n    //   fill: '#aa5',\n    //   width: this.state.innerBox.width,\n    //   height: this.state.innerBox.height,\n    //   x: 0,\n    //   y: 0,\n    // };\n    // <rect style={rectStyle} />\n\n    // zeroline-group is in front of yaxis, behind series;\n    // for zero line, if any, and other possible\n    // furniture that has to overlay other elements\n\n    const chartComponentsJSX = (\n      <g className={mainGroupClass} key={kids.mainGroupKey} id={kids.contentId}>\n        {xaxisJSX}\n        {yaxisJSX}\n        <g className={kids.zeroId} id={kids.zeroId} />\n        {scatterSeriesJSX}\n      </g>\n    )\n    return chartComponentsJSX\n  }\n}\n\nSilverScatterChart.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverScatterChart\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// Utilities modules\nimport * as ChartUtils from '../chart-utilities'\nimport * as TextWrapping from '../chartside-utilities/text-wrapping'\n\nclass SilverPieSeries extends Component {\n  constructor(props) {\n    super(props)\n    // ARC FCN to draw trace\n    this.arcFcn = d3.svg\n      .arc()\n      // .outerRadius(props.config.outerRad)\n      // .innerRadius(props.config.innerRad);\n      .outerRadius(40)\n      .innerRadius(0)\n    // KEY -- used???\n    this.keyFcn = (ddd) => ddd.data.label\n    // PIE: position of each wedge\n    this.pie = d3.layout\n      .pie()\n      .sort(null)\n      .value((ddd) => ddd.val)\n    // HALF PIE\n    this.halfpie = d3.layout\n      .pie()\n      .startAngle(-90 * (Math.PI / 180))\n      .endAngle(90 * (Math.PI / 180))\n      .sort(null)\n      .value((ddd) => ddd.val)\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.updatePies()\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    this.updatePies()\n  }\n\n  // AFTER PIE HEADER WRAP\n  // Callback after header wraps. Adjusts position to\n  // align vertically on centre of pie.\n  afterPieHeaderWrap(globalThis, lineCountArray, textWrapConfig) {\n    const config = globalThis.props.config\n    const hPrefs = config.piePrefs.header\n    const hSize = hPrefs.size\n    const hLeading = hPrefs.leading\n    const emVal = config.emVal\n    const hCount = textWrapConfig.index\n    const head = d3.select(`.pie-header-${hCount}`)\n    // Initially, the header baseline is aligned to pie centre\n    // Half pie will simply move down by leading\n    let tweak = hLeading\n    if (!textWrapConfig.isHalfPie) {\n      // Full pie is more complicated. Initial tweak moves down, so mid of top line is aligned to pie centre\n      tweak = (hSize * emVal) / 2\n      // ...then up, to align centre of block\n      const lineCount = lineCountArray[0]\n      tweak -= ((lineCount - 1) * hLeading) / 2\n    }\n    // First move the overall text element\n    let yPos = +head.attr('y') + tweak\n    head.attr('y', yPos)\n    // Now each tSpan\n    const tSpans = head.selectAll('tspan')\n    tSpans.each(function() {\n      const tSpan = d3.select(this)\n      yPos = tSpan.attr('y')\n      if (yPos !== null) {\n        // Only adjust if tSpan has a 'y' value,\n        // indicating a new line. tSpans with no\n        // explicit position are italics or bold,\n        // continuing same line as prev tSpan\n        yPos = +yPos + tweak\n        tSpan.attr('y', yPos)\n      }\n    })\n  }\n  // AFTER PIE HEADER WRAP ends\n\n  // BIND PIE GROUPS\n  // Called from updatePies. Binds data for individual pies\n  // to a series of appended groups, which are\n  // translated to the centre position for each pie\n  bindPieGroups(config) {\n    // Parent group, named in parent component\n    const parentGrp = d3.select(`.${config.className}`)\n    // Get the data in D3-friendly shape (see note in function\n    // on array structure)\n    const mappedData = ChartUtils.mapSeriesData(config, true)\n    // Array of bounds and positions for each pie\n    const pbArray = config.pieBoundsArray\n\n    const pieGrps = parentGrp\n      .selectAll('g')\n      .data(mappedData)\n      .enter()\n      .append('g')\n      .attr({\n        class: (ddd, iii) => `single-pie-group-${iii}`,\n        transform: (ddd, iii) => {\n          const cx = pbArray[iii].cx\n          const cy = pbArray[iii].cy\n          return `translate(${cx},${cy})`\n        },\n      })\n    return pieGrps\n  }\n  // BIND PIE GROUPS ends\n\n  // DRAW PIE WEDGES\n  // Called from updatePies to draw pies\n  drawPieWedges(pieGrps, wedgeProps) {\n    const config = this.props.config\n    let pieFcn = this.pie\n    if (config.chartType === 'halfpie') {\n      pieFcn = this.halfpie\n    }\n    // Default prefs:\n    // (wedgeProps are specific; pwPrefs are default style preferences)\n    const pwPrefs = config.piePrefs.wedges\n    pieGrps\n      .selectAll('path')\n      .data(pieFcn)\n      .enter()\n      .append('path')\n      .attr({\n        d: d3.svg\n          .arc()\n          .innerRadius(wedgeProps.innerRad)\n          .outerRadius(wedgeProps.outerRad),\n        id: (ddd) => `pie-wedge~~~fill:${ddd.data.fillName}`,\n      })\n      .style({\n        fill: (ddd) => ddd.data.fill,\n        stroke: config.colourLookup[pwPrefs.stroke],\n        'stroke-width': pwPrefs.strokeWidth,\n      })\n  }\n  // DRAW PIE WEDGES ends\n\n  // ADD HEADER WIDTH TO ID\n  // Called from appendPieHeaders. Timeout gives elements\n  // time to draw before width is calculated and appended to ID\n  addHeaderWidthToID(pieGrps) {\n    pieGrps.each(function() {\n      const thisGrp = d3.select(this)\n      const thisHead = thisGrp.select('text')\n      let hID = thisHead.attr('id')\n      const hWidth = thisHead.node().getBBox().width\n      hID = `${hID}, width:${hWidth}`\n      thisHead.attr('id', hID)\n    })\n  }\n  // ADD HEADER WIDTH TO ID ends\n\n  // APPEND PIE HEADERS\n  appendPieHeaders(pieGrps) {\n    const globalThis = this\n    const config = this.props.config\n    const hPrefs = config.piePrefs.header\n    const isHalfPie = config.chartType.includes('half')\n    pieGrps.each(function(ddd, iii) {\n      const thisPieGrp = d3.select(this)\n      // Binding is to wedges, so just use first:\n      const hString = ddd[0].header\n      const pieHeadText = thisPieGrp\n        .append('text')\n        // 'y' is provisional and will change with text-wrapping\n        .attr({\n          x: 0,\n          y: 0,\n          leading: hPrefs.leading,\n          class: `pie-header-${iii}`,\n          id: () => {\n            const id = `pie-header-${iii}`\n            const fill = hPrefs.fill\n            const leading = hPrefs.leading\n            const justification = hPrefs.anchor\n            const hID = ChartUtils.getTextID(id, fill, justification, leading)\n            return hID\n          },\n        })\n        .style({\n          'font-family': hPrefs.font,\n          'font-size': `${hPrefs.size}px`,\n          'text-anchor': hPrefs.anchor,\n          fill: config.colourLookup[hPrefs.fill],\n        })\n        .text(hString)\n      // Wrapping\n      const wtConfig = {\n        wWidth: config.bounds.width,\n        forceTurn: config.forceTurn,\n        index: iii,\n        isHalfPie,\n      }\n      pieHeadText.call(\n        TextWrapping.wrapAllTextElements,\n        wtConfig,\n        globalThis,\n        globalThis.afterPieHeaderWrap\n      )\n    })\n    // Give text strings a moment to draw, then append width to id metadata\n    // setTimeout(() => {\n    //   this.addHeaderWidthToID(pieGrps);\n    // }, 100);\n  }\n  // APPEND PIE HEADERS ends\n\n  // MAKE WEDGE PROPS\n  // Called from updatePies to set case-specific wedge properties,\n  // specifically arc inner/outer radii\n  makeWedgeProps(config) {\n    // All 'panels' have same height and width, so just\n    // use the first 'panel' definition\n    const width = config.pieBoundsArray[0].width\n    const height = config.pieBoundsArray[0].height\n    // By default, for full pies, outer radius is lesser of width/height, minus margin\n    let outerRad = Math.min(width, height) / 2\n    // But for half pies:\n    // (this is a bit crude, btw)\n    if (config.chartType.includes('half')) {\n      outerRad = Math.min(width / 2, height)\n    }\n    // Radius props from DPs\n    const wedges = config.piePrefs.wedges\n    outerRad -= wedges.outerMargin\n    const innerRad = outerRad * wedges.innerRadius\n    return {\n      height,\n      innerRad,\n      outerRad,\n      width,\n    }\n  }\n  // MAKE WEDGE PROPS ends\n\n  // UPDATE PIES\n  // The data for each pie-group is an array of objects,\n  // each representing a point:\n  //    category: <Category string>\n  //    fill: \"#00919e\"\n  //    fillName: \"green1\"\n  //    header: <Header string>\n  //    seriesNo: 4\n  //    stroke: \"#00919e\"\n  //    strokeName: \"green1\"\n  //    val: 5\n  // We pass that to\n  // d3.layout.pie to compute the angles for each arc.\n  // These start and end angles are passed to d3.svg.arc\n  // to draw arcs.\n  // Both functions are constructed as props\n  updatePies() {\n    const config = this.props.config\n    // Append pie groups, each translated to pie centre\n    // One 'row' of data is bound to each\n    const pieGrps = this.bindPieGroups(config)\n    // Wedges\n    // Each pie group has a central origin; but now\n    // I need height and width, and inner and outer\n    // radii. Note that wedgeProps are the specific-case values,\n    // while piePrefs (passim) are default definitions of pie prefs from DPs\n    const wedgeProps = this.makeWedgeProps(config)\n    this.drawPieWedges(pieGrps, wedgeProps)\n    // Append central (series) header to each pie group\n    this.appendPieHeaders(pieGrps)\n  }\n\n  // RENDER all-series parent group:\n  render() {\n    return <g className={this.props.config.className} id=\"series-group:pie\" />\n  }\n}\n\nSilverPieSeries.propTypes = {\n  config: PropTypes.object,\n  // onPassWedgeClick: PropTypes.func,\n}\n\nexport default SilverPieSeries\n","// NOTE: while I'm messing around...\n// /* eslint-disable no-unused-vars */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as AxisUtilities from '../axes/axis-utilities'\nimport * as ChartUtilities from '../chart-utilities'\nimport SilverPieSeries from './pieseries'\n\nclass SilverPieChart extends Component {\n  // CONSTRUCTOR\n  constructor(props) {\n    super(props)\n    this.state = {\n      innerBox: this.props.config.innerBox,\n    }\n    // Click on wedge\n    this.handleWedgeClick = this.handleWedgeClick.bind(this)\n  }\n\n  // COMPONENT WILL MOUNT\n  // Puts inherited innerBox into state:\n  UNSAFE_componentWillMount() {\n    this.setState({\n      innerBox: this.props.config.innerBox,\n    })\n  }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    // this.mainDthreeGroupTransition(0);\n  }\n\n  // COMPONENT WILL RECEIVE PROPS\n  // Reset state to default...\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      innerBox: newProps.config.innerBox,\n    })\n  }\n\n  // HANDLE WEDGE CLICK\n  // This is potentially useful... maybe...\n  handleWedgeClick(event) {\n    const wedgeData = event.wedgeData\n    // const index = event.index;\n    const info = `Value is ${wedgeData.val}`\n    /* eslint-disable no-console */\n    console.log(info)\n    /* eslint-enable no-console */\n  }\n  // HANDLE WEDGE CLICK ends\n\n  // BUILD PB ARRAY\n  // Called from getPieBoundsArray. Assembles an array of\n  // pie-panel properties, based on number of rows and cols\n  buildPbArray(bounds, rows, cols, isHalfPie) {\n    const myBounds = Object.assign({}, bounds)\n    const pWidth = myBounds.width / cols\n    const pHeight = myBounds.height / rows\n    const left = myBounds.x\n    const top = myBounds.y\n    const pieArray = []\n    for (let rNo = 0; rNo < rows; rNo++) {\n      for (let cNo = 0; cNo < cols; cNo++) {\n        const pObj = {}\n        pObj.width = pWidth\n        pObj.height = pHeight\n        pObj.x = left + pWidth * cNo\n        pObj.y = top + pHeight * rNo\n        // Centre points\n        pObj.cx = left + pWidth * cNo + pWidth / 2\n        pObj.cy = top + pHeight * rNo + pHeight / 2\n        // But half pies align to bottom, with an\n        // arbitrary allowance for the series header\n        if (isHalfPie) {\n          pObj.cy = top + pHeight * rNo + pHeight - 10\n        }\n        pieArray.push(pObj)\n      }\n    }\n    return pieArray\n  }\n  // BUILD PB ARRAY ends\n\n  // GET PIE BOUNDS ARRAY\n  // Called from configSeriesPies to work out how\n  // pie panels should be arranged in chart inner box\n  getPieBoundsArray(bounds, sCount, chartType) {\n    const isHalfPie = chartType.includes('half')\n    // Start by getting the w/h ratio of the inner box\n    const boundsRatio = bounds.width / bounds.height\n    // Default is one pie:\n    let pbArray = [Object.assign({}, bounds)]\n    let rows = 1\n    let cols = 1\n    // Threshold is a ratio that determines whether we draw\n    // a horizontal or vertical stack\n    // NOTE: there's a lot of redundancy here; and\n    // half-pies are a bit... approximate\n    let threshold = 1\n    if (sCount === 2) {\n      // TWO *****\n      if (isHalfPie) {\n        threshold = 2\n      }\n      if (boundsRatio > threshold) {\n        cols = 2\n      } else {\n        rows = 2\n      }\n    } else if (sCount === 3) {\n      // THREE*****\n      if (boundsRatio > 1.5) {\n        cols = 3\n      } else if (boundsRatio < 0.75) {\n        rows = 3\n      } else {\n        cols = 2\n        rows = 2\n      }\n    } else if (sCount === 4) {\n      // FOUR *****\n      if (boundsRatio > 1.5) {\n        cols = 4\n      } else if (boundsRatio < 0.75) {\n        rows = 4\n      } else {\n        cols = 2\n        rows = 2\n      }\n    } else if (sCount === 5) {\n      // FIVE *****\n      if (boundsRatio > 1.5) {\n        cols = 5\n      } else if (boundsRatio < 0.75) {\n        rows = 5\n      } else {\n        cols = 3\n        rows = 2\n      }\n    } else if (sCount === 6) {\n      // SIX *****\n      if (boundsRatio > 1) {\n        cols = 3\n        rows = 2\n      } else {\n        cols = 2\n        rows = 3\n      }\n    } else if (sCount === 7) {\n      // SEVEN *****\n      if (boundsRatio > 1) {\n        cols = 4\n        rows = 2\n      } else {\n        cols = 2\n        rows = 4\n      }\n    } else if (sCount >= 8) {\n      // EIGHT *****\n      if (boundsRatio > 1) {\n        cols = 4\n        rows = 2\n      } else {\n        cols = 2\n        rows = 4\n      }\n    }\n    pbArray = this.buildPbArray(bounds, rows, cols, isHalfPie)\n    return pbArray\n  }\n  // GET PIE BOUNDS ARRAY ends\n\n  // CONFIG SERIES PIES\n  // Called from render to assemble config object\n  // to pass to PieSeries\n  configSeriesPies(chartConfig) {\n    // The default name/value lookup of colours\n    const colourLookup = chartConfig.colourLookup\n    // Colours for this sequence of series\n    const bounds = Object.assign({}, this.state.innerBox)\n    const side = AxisUtilities.getSide(chartConfig.scales)\n    const chartType = chartConfig.scales[side].type\n    const colourSet = chartConfig.series[chartType].colours\n    // There will be 2 bounds objects:\n    //    1. A single object defining the entire inner box\n    //    2. An array of objects defining seriesCount\n    //       inner boxes -- one for each pie\n    // NOTE: hard-coded to max 8 pies\n    const seriesCount = Math.min(chartConfig.seriesCount, 8)\n    const pieBoundsArray = this.getPieBoundsArray(\n      bounds,\n      seriesCount,\n      chartType\n    )\n    const config = {\n      bounds,\n      catHead: chartConfig.headers[0],\n      chartData: chartConfig.chartData,\n      chartIndex: chartConfig.chartIndex,\n      chartType,\n      className: `pie-series-group-${chartConfig.chartIndex}`,\n      colourLookup,\n      colourSet,\n      emVal: chartConfig.emVal,\n      factor: 1,\n      forceTurn: chartConfig.forceTurn,\n      pieBoundsArray,\n      pointCount: chartConfig.pointCount,\n      seriesCount,\n      piePrefs: chartConfig.series[chartType],\n    }\n    // Now exclude any blob headers:\n    const actualHeaders = []\n    for (let iii = 1; iii <= config.seriesCount; iii++) {\n      actualHeaders.push(chartConfig.headers[iii])\n    }\n    config.seriesHeads = actualHeaders\n    // Map colours (for pies, by categories):\n    config.colourMap = ChartUtilities.getColourMap(actualHeaders, colourSet)\n    const cats = chartConfig.categories\n    config.catsColourMap = ChartUtilities.getColourMap(cats, colourSet)\n    return config\n  }\n  // CONFIG SERIES PIES ends\n\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Key all subcomponents:\n    const kids = ChartUtilities.getKeysAndIds(chartIndex)\n    // Config obj to go to PieSeries\n    const seriesConfig = this.configSeriesPies(config)\n    const pieSeriesJsx = (\n      <SilverPieSeries\n        key={kids.pieSeriesKey}\n        config={seriesConfig}\n        // onPassWedgeClick={this.handleWedgeClick}\n      />\n    )\n    // Name parent group:\n    const chartComponentsJSX = (\n      <g className=\"outer-pie-group\" id={kids.contentId}>\n        {pieSeriesJsx}\n      </g>\n    )\n    return chartComponentsJSX\n  }\n}\n\nSilverPieChart.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverPieChart\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass TableText extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.updateText()\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    this.updateText()\n  }\n\n  // APPEND ROW\n  // Called from addTableContent to append a row tSpen to the text element\n  appendRow(tableText, rowContent, config, isHeader) {\n    let x = config.innerBox.x\n    const contentPrefs = config.tableProperties.text.content\n    x += contentPrefs.padding.left\n    // Row anchor uses paragraph (leading is ignored pending further development)\n    let dy = contentPrefs.paragraph\n    let fill = contentPrefs.fill\n    // Similarly: pending further devel, use paragraph for leading\n    let leading = contentPrefs.paragraph\n    if (isHeader) {\n      dy = 0\n    }\n    const thisRow = tableText\n      .append('tspan')\n      .text(rowContent)\n      .attr({\n        x,\n        dy,\n        id: `table-tspan~~~fill:${fill}, leading:${leading}`,\n      })\n      .style({\n        leading,\n      })\n    // Headers overwrite style, and id:fill\n    if (isHeader) {\n      const headPrefs = config.tableProperties.text.header\n      const { size, font } = headPrefs\n      fill = headPrefs.fill\n      leading = headPrefs.paragraph\n      thisRow.attr({ id: `table-tspan~~~fill:${fill}` }).style({\n        'font-family': font,\n        'font-size': `${size}px`,\n        fill: config.colourLookup[fill],\n        leading,\n      })\n    }\n  }\n  // APPEND ROW ends\n\n  // ADD TABLE CONTENT\n  // Called from updateText\n  addTableContent(tableText, config, contentArray) {\n    const cLen = contentArray.length\n    for (let rowNo = 0; rowNo < cLen; rowNo++) {\n      const rowText = contentArray[rowNo]\n      const isHeader = rowNo === 0\n      this.appendRow(tableText, rowText, config, isHeader)\n    }\n  }\n  // ADD TABLE CONTENT ends\n\n  // MAKE INITIAL TEXT ELEMENT\n  makeInitialTextElement(config) {\n    // Group\n    const idName = this.props.idName\n    const textGrp = d3.select(`#${idName}`)\n    // Attributes:\n    const textProps = config.tableProperties.text.content\n    const { size, font, fill } = textProps\n    // For now...\n    const leading = textProps.paragraph\n    const xPos = config.innerBox.x\n    // NOTE: up for refinement...\n    const yPos = config.innerBox.y\n    const tableText = textGrp\n      .append('text')\n      .attr({\n        x: xPos,\n        y: yPos,\n        id: `table-text~~~fill:${fill},justification:start,leading:${leading},width:10`,\n      })\n      .style({\n        'font-family': font,\n        'font-size': `${size}px`,\n        fill: config.colourLookup[fill],\n        leading,\n      })\n      .text('')\n    return tableText\n  }\n  // MAKE INITIAL TEXT ELEMENT ends\n\n  // ARRAYIFY CONTENT\n  // Called from updateText. Combines header and content into\n  // an array, by rows\n  // NOTE: for now, items in any one row are\n  // joined with '___'. Eventually, I'll create a 2D array\n  arrayifyContent(config) {\n    // Headers:\n    // SVG doesn't recognise tabs (converts to space chars)\n    // so use a string for Illy to find\n    const headers = config.headers.join('___')\n    // Dig out the table content\n    const rawContent = config.chartData\n    // This is an array of ojbects, each representing one line:\n    //  {\n    //   \"Column one\": \"China\",\n    //   \"Column 2\": \"Something about China\",\n    // }\n    // What we want is a 1D array of strings\n    // const contentArray = this.arrayifyContent(rawContent);\n    const tableArray = rawContent.map((oneElement) => {\n      const keys = Object.keys(oneElement)\n      const lineArray = []\n      for (const thisKey in keys) {\n        lineArray.push(oneElement[keys[thisKey]])\n      }\n      // FIXME: this join is a temp subterfuge\n      return lineArray.join('___')\n    })\n    // Prefix headers and return\n    tableArray.unshift(headers)\n    return tableArray\n  }\n  // ARRAYIFY CONTENT ends\n\n  // UPDATE TEXT\n  // Called upon component mount/update\n  updateText() {\n    const config = this.props.config\n    // Assemble the complete array of data (headers and content)\n    const contentArray = this.arrayifyContent(config)\n    // Put the basic text element on the page\n    const tableText = this.makeInitialTextElement(config)\n    // Append tSpans\n    this.addTableContent(tableText, config, contentArray)\n  }\n  // UPDATE TEXT ENDS\n\n  // RENDER:\n  render() {\n    return <g className={this.props.config.className} id={this.props.idName} />\n  }\n}\n\nTableText.propTypes = {\n  config: PropTypes.object,\n  idName: PropTypes.string,\n}\n\nexport default TableText\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass TableRules extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.updateRules()\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    this.updateRules()\n  }\n\n  getContentHeight(config) {\n    const contentLength = config.chartData.length\n    const linespacing = config.tableProperties.text.content.paragraph\n    return contentLength * linespacing\n  }\n\n  drawRule(rProps, rGrp) {\n    rGrp\n      .append('line')\n      .attr({\n        class: 'top-rule',\n        x1: rProps.x1,\n        x2: rProps.x2,\n        y1: rProps.y,\n        y2: rProps.y,\n        id: `${rProps.id}~~~stroke:${rProps.strokeName}`,\n      })\n      .style({\n        'stroke-width': rProps.width,\n        stroke: rProps.stroke,\n      })\n  }\n\n  prepareTopRule(config, rGrp) {\n    const rPrefs = config.tableProperties.rules.top\n    const iBox = config.innerBox\n    const x1 = iBox.x\n    const x2 = x1 + iBox.width\n    const y = iBox.y + rPrefs.belowText\n    const rProps = {\n      x1,\n      x2,\n      y,\n      width: rPrefs.width,\n      strokeName: rPrefs.stroke,\n      stroke: config.colourLookup[rPrefs.stroke],\n      id: 'table-top-rule',\n    }\n    this.drawRule(rProps, rGrp)\n  }\n\n  prepareBottomRule(config, rGrp) {\n    const rPrefs = config.tableProperties.rules.bottom\n    const iBox = config.innerBox\n    const x1 = iBox.x\n    const x2 = x1 + iBox.width\n    let y = iBox.y + this.getContentHeight(config)\n    y += rPrefs.belowText\n    const rProps = {\n      x1,\n      x2,\n      y,\n      width: rPrefs.width,\n      strokeName: rPrefs.stroke,\n      stroke: config.colourLookup[rPrefs.stroke],\n      id: 'table-bottom-rule',\n    }\n    this.drawRule(rProps, rGrp)\n  }\n\n  // UPDATE RULES\n  updateRules() {\n    const config = this.props.config\n    // Group\n    const idName = this.props.idName\n    const rulesGrp = d3.select(`#${idName}`)\n    const rules = config.tableProperties.rules\n    if (rules.top.drawn) {\n      this.prepareTopRule(config, rulesGrp)\n    }\n    if (rules.bottom.drawn) {\n      this.prepareBottomRule(config, rulesGrp)\n    }\n  }\n  // UPDATE RULES ends\n\n  // RENDER:\n  render() {\n    return <g className={this.props.config.className} id={this.props.idName} />\n  }\n}\n\nTableRules.propTypes = {\n  config: PropTypes.object,\n  idName: PropTypes.string,\n}\n\nexport default TableRules\n","import * as d3 from 'd3'\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass TableFills extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  // COMPONENT DID MOUNT\n  componentDidMount() {\n    this.updateFills()\n  }\n\n  // COMPONENT DID UPDATE\n  componentDidUpdate() {\n    this.updateFills()\n  }\n\n  getContentHeight(config) {\n    const contentLength = config.chartData.length\n    const linespacing = config.tableProperties.text.content.paragraph\n    return contentLength * linespacing\n  }\n\n  drawRule(rProps, rGrp) {\n    rGrp\n      .append('line')\n      .attr({\n        class: 'top-rule',\n        x1: rProps.x1,\n        x2: rProps.x2,\n        y1: rProps.y,\n        y2: rProps.y,\n        id: `${rProps.id}~~~stroke:${rProps.stroke}`,\n      })\n      .style({\n        'stroke-width': rProps.width,\n        stroke: rProps.stroke,\n      })\n  }\n\n  prepareTopRule(config, rGrp) {\n    const rPrefs = config.tableProperties.rules.top\n    const iBox = config.innerBox\n    const x1 = iBox.x\n    const x2 = x1 + iBox.width\n    const y = iBox.y + rPrefs.belowText\n    const rProps = {\n      x1,\n      x2,\n      y,\n      width: rPrefs.width,\n      strokeName: rPrefs.stroke,\n      stroke: config.colourLookup[rPrefs.stroke],\n      id: 'table-top-rule',\n    }\n    this.drawRule(rProps, rGrp)\n  }\n\n  prepareBottomRule(config, rGrp) {\n    const rPrefs = config.tableProperties.rules.bottom\n    const iBox = config.innerBox\n    const x1 = iBox.x\n    const x2 = x1 + iBox.width\n    let y = iBox.y + this.getContentHeight(config)\n    y += rPrefs.belowText\n    const rProps = {\n      x1,\n      x2,\n      y,\n      width: rPrefs.width,\n      strokeName: rPrefs.stroke,\n      stroke: config.colourLookup[rPrefs.stroke],\n      id: 'table-bottom-rule',\n    }\n    this.drawRule(rProps, rGrp)\n  }\n\n  appendFill(fGrp, fProps) {\n    fGrp.append('rect').attr({\n      x: fProps.x,\n      y: fProps.y,\n      width: fProps.width,\n      height: fProps.height,\n      fill: fProps.fill,\n      id: `table-tint~~~fill:${fProps.fillName}`,\n    })\n  }\n\n  drawFills(config, fillsGrp) {\n    // Number of rows\n    const cLen = config.chartData.length\n    // From top of inner box (header baseline)\n    const topY = config.innerBox.y\n    const height = config.tableProperties.text.content.paragraph\n    const fillName = config.tableProperties.tint.fill\n    const fill = config.colourLookup[fillName]\n    const belowText = config.tableProperties.tint.belowText\n    const rectProps = {\n      x: config.innerBox.x,\n      y: topY,\n      width: config.innerBox.width,\n      height,\n      fill,\n      fillName,\n      belowText,\n    }\n    for (let rowNo = 0; rowNo < cLen; rowNo++) {\n      if (rowNo % 2 === 0) {\n        rectProps.y = topY + rowNo * height + belowText\n        this.appendFill(fillsGrp, rectProps)\n      }\n    }\n  }\n\n  // UPDATE RULES\n  updateFills() {\n    const config = this.props.config\n    // Group\n    const idName = this.props.idName\n    const fillsGrp = d3.select(`#${idName}`)\n    this.drawFills(config, fillsGrp)\n  }\n  // UPDATE RULES ends\n\n  // RENDER:\n  render() {\n    return <g className={this.props.config.className} id={this.props.idName} />\n  }\n}\n\nTableFills.propTypes = {\n  config: PropTypes.object,\n  idName: PropTypes.string,\n}\n\nexport default TableFills\n","// NOTE: while I'm messing around...\n// /* eslint-disable no-unused-vars */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport TableText from './tabletext'\nimport TableRules from './tablerules'\nimport TableFills from './tablefills'\n\nclass SilverTable extends Component {\n  render() {\n    const config = this.props.config\n    const chartIndex = config.chartIndex\n    // Name parent group:\n    const outerId = `table-outer-group-${chartIndex}`\n    const textId = `table-text-group-${chartIndex}`\n    const rulesId = `table-rules-group-${chartIndex}`\n    const fillsId = `table-fills-group-${chartIndex}`\n    const tableTextJsx = <TableText config={config} idName={textId} />\n    const tableRulesJsx = <TableRules config={config} idName={rulesId} />\n    const tableFillsJsx = <TableFills config={config} idName={fillsId} />\n\n    // const { width, height, x, y } = this.props.config.innerBox;\n    // NOTE: I can draw a temporary 'inner box'\n    // so I can see what I've got...\n    // const rectStyle = {\n    //   fill: '#aa5',\n    //   width,\n    //   height,\n    //   x,\n    //   y,\n    //   opacity: 0.25,\n    // };\n    // If comm'd in, next moves down to top of JSX\n    // <rect style={rectStyle} />\n\n    // <g className=\"table-fills\" id={fillsId}>\n    //   {tableFillsJsx}\n    // </g>\n\n    const chartComponentsJSX = (\n      <g className=\"outer-table-group\" id={outerId}>\n        {tableFillsJsx}\n        {tableRulesJsx}\n        {tableTextJsx}\n      </g>\n    )\n    return chartComponentsJSX\n  }\n}\n\nSilverTable.propTypes = {\n  config: PropTypes.object.isRequired,\n}\n\nexport default SilverTable\n","/* global document: false */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n// Background components\nimport SilverBackground from './background/background'\nimport SilverPanels from './background/panels'\nimport SilverLegends from './legend/legends'\n// Chart type components\nimport SilverBarChart from './barchart/barchart'\nimport SilverColumnChart from './columnchart/columnchart'\nimport SilverThermoVerticalChart from './thermochart/thermoverticalchart'\nimport SilverThermoHorizontalChart from './thermochart/thermohorizontalchart'\nimport SilverLineChart from './linechart/linechart'\nimport SilverMixedChart from './mixedchart/mixedchart'\nimport SilverScatterChart from './scatterchart/scatterchart'\nimport SilverPieChart from './piechart/piechart'\nimport SilverTable from './table/table'\n// Axis and Chart Utilities\nimport * as AxisUtilities from './axes/axis-utilities'\nimport * as ChartUtilities from './chart-utilities'\n\n// Fonts as base64 strings\nimport EconSansReg from './font/econsans-reg'\nimport EconSansBol from './font/econsans-bol'\nimport EconSansLig from './font/econsans-lig'\nimport EconSansBolIta from './font/econsans-bol-ita'\nimport EconSansCndReg from './font/econsanscnd-reg'\nimport EconSansCndRegIta from './font/econsanscnd-reg-ita'\nimport EconSansCndLig from './font/econsanscnd-lig'\nimport EconSansCndLigIta from './font/econsanscnd-lig-ita'\nimport EconSansCndMed from './font/econsanscnd-med'\nimport EconSansCndMedIta from './font/econsanscnd-med-ita'\nimport MiloTEBold from './font/milo-primary-bd'\nimport MiloTEMedium from './font/milo-primary-md'\nimport MiloTERegular from './font/milo-primary-rg'\nimport MiloTERegularItalic from './font/milo-primary-rg-it'\n\nclass SilverChartWrapper extends Component {\n  static get defaultProps() {\n    return {\n      chartJsxLookup: {\n        bar: {\n          chartType: SilverBarChart,\n          thermometer: false,\n        },\n        column: {\n          chartType: SilverColumnChart,\n          thermometer: false,\n        },\n        thermohorizontal: {\n          chartType: SilverThermoHorizontalChart,\n          thermometer: true,\n        },\n        thermovertical: {\n          chartType: SilverThermoVerticalChart,\n          thermometer: true,\n        },\n        // thermometer is undefined in other chart types\n        line: { chartType: SilverLineChart },\n        mixed: { chartType: SilverMixedChart },\n        pointline: { chartType: SilverLineChart },\n        stepline: { chartType: SilverLineChart },\n        scatter: { chartType: SilverScatterChart },\n        sizedscatter: { chartType: SilverScatterChart },\n        pie: { chartType: SilverPieChart },\n        halfpie: { chartType: SilverPieChart },\n        table: { chartType: SilverTable },\n      },\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      // By default, innerbox is an empty array\n      innerboxes: [],\n      renderPanels: false,\n      renderLegends: false,\n    }\n    // Callback from Background returns first global innerbox definition\n    this.handleBackgroundInnerBoxBounds = this.handleBackgroundInnerBoxBounds.bind(\n      this\n    )\n    // Callback from Panels returns array of panel-specific innerbox definitions\n    this.handlePanelInnerBoxBounds = this.handlePanelInnerBoxBounds.bind(this)\n    // Callback from Legend returns array of further-revised innerbox bounds\n    this.handleLegendInnerBoxBounds = this.handleLegendInnerBoxBounds.bind(this)\n  }\n\n  // When new props arrive AFTER initial render\n  UNSAFE_componentWillReceiveProps() {\n    // Set innerbox back to empty array\n    this.setState({\n      innerboxes: [],\n      renderPanels: false,\n      renderLegends: false,\n    })\n    return true\n  }\n  // COMPONENT WILL RECEIVE PROPS ends\n\n  shouldComponentUpdate(newProps) {\n    const canRender = true // newProps.chartTypeComponentCanRender\n    return canRender\n  }\n\n  // GET ONE PADDING VALUE\n  // Called from getPaddingBelowTitleCluster &\n  // getPaddingBelowPanelHeaderBaselines\n  // pLookup is title-cluster or panel-header padding lookup\n  getOnePaddingValue(pConfig, pLookup) {\n    // What's below? Could be legends,\n    // blobs or top of chart\n    const hasBlobs = pConfig.blobs.hasBlobs\n    const hasLegend = pConfig.seriesCount > 1 && pConfig.legend.value > 0\n    let chartType = pConfig.overallChartType\n    // Belt and braces:\n    if (typeof chartType === 'undefined') {\n      if (pConfig.categoryType === 'string') {\n        chartType = 'bar'\n      } else {\n        chartType = 'line'\n      }\n    }\n    let padding = pLookup.toTopOfChart.default\n    if (hasBlobs) {\n      padding = pLookup.toBlobTop\n    } else if (hasLegend) {\n      padding = pLookup.toLegendBaseline\n    } else if (typeof pLookup.toTopOfChart[chartType] !== 'undefined') {\n      padding = pLookup.toTopOfChart[chartType]\n    }\n    return padding\n  }\n  // GET ONE PADDING VALUE ends\n\n  // GET PADDING BELOW TITLE CLUSTER\n  // Called from handleBackgroundInnerBoxBounds. Returns\n  // padding below the title cluster\n  getPaddingBelowTitleCluster(config) {\n    const pLookup = config.background.topPadding.belowTitleClusterBaseline\n    const pConfig = config.panelArray[0]\n    const pVal = this.getOnePaddingValue(pConfig, pLookup)\n    return pVal\n  }\n  // GET PADDING BELOW TITLE CLUSTER ends\n\n  // GET PADDING BELOW PANEL HEADER BASELINES\n  // Called from handlePanelInnerBoxBounds. Returns\n  // paddings below panel-headers in a multipanel chart\n  getPaddingBelowPanelHeaderBaselines(config) {\n    const pLookup = config.background.topPadding.belowPanelHeaderBaseline\n    const pCount = config.metadata.panels.total\n    const pArray = []\n    for (let pNo = 0; pNo < pCount; pNo++) {\n      const pConfig = config.panelArray[pNo]\n      pArray.push(this.getOnePaddingValue(pConfig, pLookup))\n    }\n    return pArray\n  }\n  // GET PADDING BELOW PANEL HEADER BASELINES ends\n\n  // GET PADDING BELOW CHART\n  // Called from handleBackgroundInnerBoxBounds\n  // A bit redundant... unless padding becomes different\n  // with or without panels...\n  getPaddingBelowChart(config) {\n    const belowChart = config.background.chartPadding.below\n    return belowChart\n  }\n  // GET PADDING BELOW CHART\n\n  // HANDLE BACKGROUND INNER BOX BOUNDS\n  // Handles callback from Background, which returns inner box\n  // after background shapes and strings have been drawn\n  handleBackgroundInnerBoxBounds(innerBox) {\n    const config = this.props.config\n    // Are there any panels?\n    const pCount = config.metadata.panels.total\n    // Jul'20: always *call* panels, even if none\n    const renderPanels = true\n    let renderLegends = true\n    if (pCount > 1) {\n      renderLegends = false\n    } else {\n      // No panels, so get padding above chart now\n      const tcPadding = this.getPaddingBelowTitleCluster(config)\n      innerBox.y += tcPadding\n      innerBox.height -= tcPadding\n    }\n    // In either case, get padding above source/footnote\n    const bPadding = this.getPaddingBelowChart(config)\n    innerBox.height -= bPadding\n    this.setState({\n      innerboxes: [innerBox],\n      renderPanels,\n      renderLegends,\n    })\n  }\n  // HANDLE BACKGROUND INNER BOX BOUNDS\n\n  // HANDLE PANEL INNER BOX BOUNDS\n  // Listens out for the callback from Panels, which returns\n  // an array of innerbox definitions (x, y, height, width)\n  // after all panel-header elements have been drawn.\n  // IBs.y is baseline of each panel's header\n  // Precipitates re-render with Legends flag...\n  handlePanelInnerBoxBounds(innerboxes) {\n    const config = this.props.config\n    // I'm after the padding below panel headers...\n    const pCount = config.metadata.panels.total\n    if (pCount > 1) {\n      const paddingArray = this.getPaddingBelowPanelHeaderBaselines(config)\n      for (let pNo = 0; pNo < pCount; pNo++) {\n        const myIB = innerboxes[pNo]\n        myIB.y += paddingArray[pNo]\n        myIB.height -= paddingArray[pNo]\n      }\n    }\n    this.setState({ innerboxes, renderPanels: false, renderLegends: true })\n  }\n  // HANDLE PANEL INNER BOX BOUNDS ends\n\n  // HANDLE LEGEND INNER BOX BOUNDS\n  // Listens out for the callback from Legend, which returns\n  // revised array of innerbox definitions (x, y, height, width).\n  // One element in the array of innerbox definitions will be attached to\n  // each element in config.panelArray, to be bequeathed to individual\n  // charts...\n  handleLegendInnerBoxBounds(innerboxes) {\n    this.setState({ innerboxes, renderLegends: false })\n  }\n  // HANDLE LEGEND INNER BOX BOUNDS ends\n\n  // GET CHART JSX ARRAY\n  getChartJsxArray(cdArray, outerWidth) {\n    // Lookup of child components and (bar/col only) thermo flags\n    const chartJsxLookup = this.props.chartJsxLookup\n    // Array of JSX objects...\n    const chartJsxArray = cdArray.map((oneChart, index) => {\n      let typeJSX = ''\n      if (oneChart.headers.length > 0) {\n        oneChart.chartIndex = index\n        const key = `chart-${index}`\n        // By default:\n        let ChartType = SilverLineChart\n        if (oneChart.overallChartType.includes('table')) {\n          ChartType = SilverTable\n        } else if (oneChart.scales.isDouble) {\n          // Double and mixed both use the 'mixed' component\n          ChartType = SilverMixedChart\n        } else if (oneChart.scales.isMixed) {\n          ChartType = SilverMixedChart\n        } else {\n          // Get side:\n          const side = AxisUtilities.getSide(oneChart.scales)\n          // Now look up chart-type child component and, for bars and cols,\n          // get thermo flag.\n          const chartTypeDef = oneChart.scales[side].type\n          ChartType = chartJsxLookup[chartTypeDef].chartType\n          oneChart.thermometer = chartJsxLookup[chartTypeDef].thermometer\n          // FIXME: kludge for bar/hThermo padding. This needs mending as\n          // part of a general refactoring of vertical padding\n          if (chartTypeDef === 'bar' || chartTypeDef === 'thermohorizontal') {\n            oneChart.innerBox.y += 2\n            oneChart.innerBox.height -= 2\n          }\n          // Chart outer width\n          oneChart.outerWidth = outerWidth\n        }\n        // By definition:\n        const drawChart = true\n        typeJSX = (\n          <ChartType\n            config={oneChart}\n            key={key}\n            drawChart={drawChart}\n            chartTypeComponentCanRender={true} // {this.props.chartTypeComponentCanRender}\n          />\n        )\n      }\n      return typeJSX\n    })\n    return chartJsxArray\n  }\n  // GET CHART JSX ARRAY ends\n\n  // RENDER\n  render() {\n    const config = Object.assign({}, this.props.config)\n    config.originalInnerBox = Object.assign({}, config.innerBox)\n    // Colour lookup:\n    const colourLookup = config.metadata.colours\n    // This component now has 4 children:\n    //    Background renders background shapes and strings\n    //    Panels renders panel flashes and headers\n    //    Legend renders any legend(s)\n    //    Chart is triaged by type, then renders all chart content in\n    //      the innerboxes as modified by the Background and Legend\n\n    // Render can be precipitated by 3 events:\n    // 1) new props, in which case innerboxes is an empty array\n    // 2) update to state, after Background returns callback that\n    //    defines a global inner box...\n    //    ...and the renderPanels flag is true\n    // 3) update to state, after Panels returns callback that\n    //    defines the innerbox structure, in which case innerboxes\n    //    is an array of those definitions...\n    //    ...and the renderLegends flag is true\n    // 4) update to state, after Legend returns callback that\n    //    defines the innerbox structure, in which case innerboxes\n    //    is an array of those revised definitions...\n    //    ...but renderLegends has been set back to false\n\n    // Do we have inner boxes?\n    const innerboxes = this.state.innerboxes\n    // Flags and default JSX...\n    // I only want to actually DRAW the background if there are no innerboxes\n    // And I only want to draw legends if background has been drawn and\n    // the renderLegends flag = true...\n    let drawBackground = false\n    let drawPanels = false\n    let drawLegends = false\n    let drawChart = false\n    // NOTE: this is a bit crap, but I'm getting a headache...\n    if (innerboxes.length === 0) {\n      drawBackground = true\n    } else if (this.state.renderPanels) {\n      drawPanels = true\n    } else if (this.state.renderLegends) {\n      drawLegends = true\n    } else {\n      drawChart = true\n    }\n\n    // Custom fonts\n    // This is the only pattern that worked reliably for both PNG and SVG export\n    // https://vijayt.com/post/save-svg-element-with-custom-font-as-image/\n    const defs = (\n      <defs>\n        <style\n          type=\"text/css\"\n          // eslint-disable-next-line react/no-danger\n          dangerouslySetInnerHTML={{\n            __html: `\n              @font-face {\n                font-family: EconSansReg;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansReg})\n              }\n              @font-face {\n                font-family: EconSansBol;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansBol})\n              }\n              @font-face {\n                font-family: EconSansLig;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansLig})\n              }\n              @font-face {\n                font-family: EconSansBolIta;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansBolIta})\n              }\n              @font-face {\n                font-family: EconSansCndLig;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansCndLig})\n              }\n              @font-face {\n                font-family: EconSansCndLigIta;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansCndLigIta})\n              }\n              @font-face {\n                font-family: EconSansCndReg;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansCndReg})\n              }\n              @font-face {\n                font-family: EconSansCndRegIta;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansCndRegIta})\n              }\n              @font-face {\n                font-family: EconSansCndMed;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansCndMed})\n              }\n              @font-face {\n                font-family: EconSansCndMedIta;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${EconSansCndMedIta})\n              }\n              @font-face {\n                font-family: MiloTE-Bold;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${MiloTEBold})\n              }\n              @font-face {\n                font-family: MiloTE-Medium;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${MiloTEMedium})\n              }\n              @font-face {\n                font-family: MiloTE-RegularItalic;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${MiloTERegularItalic})\n              }\n              @font-face {\n                font-family: MiloTE-Regular;\n                src: url(data:application/x-font-woff2;charset=utf-8;base64,${MiloTERegular})\n              }`,\n          }}\n        />\n      </defs>\n    )\n\n    // Background: shapes and strings\n    // with flag to prevent it updating if unnecessary\n    // and callback for returned global chart innerbox\n    const backgroundJSX = (\n      <SilverBackground\n        config={config}\n        drawBackground={drawBackground}\n        onGetGlobalInnerBox={this.handleBackgroundInnerBoxBounds}\n      />\n    )\n\n    // Panels\n    // Pass in IBs as single element\n    const panelJSX = (\n      <SilverPanels\n        config={config}\n        drawPanels={drawPanels}\n        innerbox={innerboxes[0]}\n        onGetInnerBoxes={this.handlePanelInnerBoxBounds}\n      />\n    )\n\n    // Legends\n    const legendJSX = (\n      <SilverLegends\n        config={config}\n        drawLegends={drawLegends}\n        innerboxes={innerboxes}\n        onGetInnerBoxes={this.handleLegendInnerBoxBounds}\n      />\n    )\n\n    // Default is no data\n    let chartJSX = ''\n    if (drawChart) {\n      // Background returned an array of innerbox definitions, which\n      // I append to the array of chart definitions, which gets passed\n      // to the chart constructor\n      // NOTE: will I need to verify that there are the same number of\n      // innerboxes as chart definitions? Seems redundant...\n      // Isolate the array of chartData objects\n      const cdArray = config.panelArray\n      const cLen = cdArray.length\n      // Assign matching innerbox bounds\n      for (let cNo = 0; cNo < cLen; cNo++) {\n        cdArray[cNo].innerBox = innerboxes[cNo]\n        // Reserve an *original* innerbox def (since\n        // downstream components will mangle the original)\n        // (Used, e.g. to position left-anchored barchart yAxis labels)\n        cdArray[cNo].originalInnerBox = Object.assign({}, innerboxes[cNo])\n        // And pass in an emVal, for calculating text height...\n        cdArray[cNo].emVal = config.metadata.emVal\n        // ...and the hard-return tag\n        cdArray[cNo].forceTurn = config.metadata.forceTurn\n        cdArray[cNo].colourLookup = colourLookup\n      }\n      // So now I've got an array of chart definitions that include\n      // innerbox bounds. Create as many instances of the chartJSX\n      // as we have charts...\n      // We need outer chart width:\n      const outerWidth = config.background.outerbox.dimensions.width\n      chartJSX = this.getChartJsxArray(cdArray, outerWidth)\n    }\n\n    // Hard-set chart outerbox width and height\n    const divStyle = ChartUtilities.getSilverChartwrapperStyle(config)\n    const wrapperClass = 'silver-chartwrapper'\n    const whatsRendered = (\n      <div className={wrapperClass} style={divStyle}>\n        <svg className=\"svg-wrapper\" style={{ width: '100%', height: '100%' }}>\n          {defs}\n          {backgroundJSX}\n          {panelJSX}\n          {legendJSX}\n          {chartJSX}\n        </svg>\n      </div>\n    )\n    return typeof window === 'undefined' || typeof document === 'undefined'\n      ? null\n      : whatsRendered\n  }\n  // RENDER ends\n}\n\nSilverChartWrapper.propTypes = {\n  chartJsxLookup: PropTypes.object,\n  config: PropTypes.object,\n  // chartTypeComponentCanRender: PropTypes.bool,\n}\n\nexport default SilverChartWrapper\n","const EconSansReg =\n  ''\n\nexport default EconSansReg\n","const EconSansBol =\n  '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'\n\nexport default EconSansBol\n","const EconSansLig =\n  'AAEAAAAQAQAABAAAQkFTRT9iT9EAAdIMAAAANEZGVE2FBEcmAAHSQAAAABxHREVGJAkm1AABX4wAAAC2R1BPU4w6wAQAAXTQAABdPEdTVUJMLvVeAAFgRAAAFIxPUy8ye2VmbwAAAYgAAABgY21hcO1cexgAAA2IAAADzmdhc3D//wADAAFfhAAAAAhnbHlmMiQpqgAAFywAAO54aGVhZA0bzKcAAAEMAAAANmhoZWEHwQWkAAABRAAAACRobXR4fIl0qAAAAegAAAugbG9jYXo2PwoAABFYAAAF0m1heHADMQBbAAABaAAAACBuYW1loDUK/QABBaQAAD5YcG9zdKMsWHoAAUP8AAAbhgABAAAAARmZg9hHBF8PPPUACwPoAAAAANTsxKkAAAAA1Tiqt/9p/uIEbgPnAAAACAACAAAAAAAAAAEAAAPn/rsAAASX/2n/aQRuAAEAAAAAAAAAAAAAAAAAAALoAAEAAALoAFgABwAAAAAAAgAAAAEAAQAAAEAAAAAAAAAABAIGASwABQAAArwCigAAAIwCvAKKAAAB3QAyAPoAAAIABQMAAAACAASgAAAvUAAgOwAAAAAAAAAASE9GVAGAAA37BALu/wYBRAPnAUUgAACTAAAAAAHxAsIAAAAgAAQA0wAAAAAAAAFNAAAAAAAAANMAAADTAAABBQBgAT0ANQIaAC4CHgBJAxkAGwKZACwAqgA1AS4AKQEu//4BoAAmAr0AZADbAA8BWgAuAMkAOQFT//ICFQAjAhUAcQIVACQCFQA3AhUAJAIVAD4CFQAxAhUAKwIVAC4CFQAlAN0ATQDdABwCvQB1Ar0AZAK9AIQBjAAoAxUALgJzAAUCZgBeAokALgLDAF4CEgBeAfgAXgLEAC4CwwBeAQUAXgEG/+ECUQBeAf8AXgMjAF4C1gBeAvkALgI8AF4C+QAuAlYAXgIMADACNwAeAswAVQJyAAUDvAALAo4ACgJfAAQCWAAIAPkASwFT//sA+QAOAsMAhQG9AAAAs//2Ae0AMQIpAFIBzgArAikAJwH2ACsBNwAgAesAFwIdAFIA5gBGAOb/7gHhAFIA5gBSA0gAUgIfAFICIQArAigAUgIuACcBZwBSAZMAKQFWAB4CHwBPAd8ABALiAA0B4AAIAd8ABAHGAAkBKwAXAMcASwErAAkCvQBZAQUAPwHoAEkCcgBEAh0AMQJrABUAygBLAbMAKACz/+IDPAAvATkAIAGXABcCvQBWAVoALgM8AC8ArP/aATgAFgK9AGQBYgAXAWIAJgCz//YCMwBXAfwAJwDJADkArP/8AWIATAFYABwBlwAZAxEATAMRAD4DEQA3AYwAHgJzAAUCcwAFAnMABQJzAAMCcwAFAnMABQPQAAACiQAuAhIAXgISAF4CEgBeAhIAXgEF/+MBBQA5AQX/6QEFAAcCwwALAtYAXgL5AC4C+QAuAvkALgL5AC4C+QAuAr0AjAL5AC4CzABVAswAVQLMAFUCzABVAl8ABAI8AF4CJQBSAe0AMQHtADEB7QAxAe0AMQHtADEB7QAxAyoAMQHOACsB9gArAfYAKwH2ACsB9gArAOb/6wDmADcA5v/kAOb/+gIoACsCHwBSAiEAKwIhACsCIQArAiEAKwIhACsCvQBkAiEAKwIfAE8CHwBPAh8ATwIfAE8B4gAEAigAUgHiAAQCcwADAe0AMQJzAAMB7QAxAnMABQHtADECiQAuAc4AKwKJAC4BzgArAokALgHOACsCiQAuAc4AKwLDAF4CKQAnAsMACwIpACcCEgBeAfYAKwISAF4B9gArAhIAXgH2ACsCEgBeAfYAKwISAF4B9gArAsQALgHrABcCxAAuAesAFwLEAC4B6wAXAsQALgHrABcCwwBeAh3/7ALDAAwCHQAMAQX/6ADm/94BBQABAOb/9QEF//oA5v/wAQUABgDm//UBBQBaAOYAUgIMAF4BywBGAQb/4QDm/+YCUQBeAeEAUgHhAFIB/wBAAOYAMAH/AF4A5gATAf8AXgDmAFIB/wBeASkAUgH/AAoA5gAFAtYAXgIfAFIC1gBeAh8AUgLWAF4CHwBSAh8AIgLWAF0CHwBSAvkALgIhACsC+QAuAiEAKwL5AC4CIQArA8YALgN7ACsCVgBeAWcAUgJWAF4BZwAVAlYAXgFnADcCDAAwAZMAKQIMADABkwApAgwAMAGTACkCDAAwAZMAKQI3AB4BVgAeAjcAGAFWAB4CNwAeAVYAHgLMAFUCHwBPAswAVQIfAE8CzABVAh8ATwLMAFUCHwBPAswAVQIfAE8CzABVAh8ATwO8AAsC4gANAl8ABAHiAAQCXwAEAlgACAHGAAkCWAAIAcYACQJYAAgBxgAJAQIAUgHSABECcwAFAe0AMQPQAAADKgAxAvkALgIhACsCDAAwAZMAKQI3ABgBVgAeAKz/yQCs/8kArP/UAKwALQCs//sArP/6ALP/xgCs/7ECuwAJAsQAOQIzAFcCQgA1A7wACwLiAA0DvAALAuIADQO8AAsC4gANAl8ABAHiAAQCFgAuA1IALgCTABUAk//5AJP/+QEiABUBIv/5ASL/+QHiAB4B4gAeAUgALwNFAGQEiQAbAO4AFwDuABkAWf9pAWIAHAFiABgBYgAqAWIAIAFiAB4BYgAfAWIAGQDPACIAzwAGAVoAMgFiABwBYgBMAWIAFwFiACYBYgAYAWIAKgFiACABYgAeAWIAHwFiABkAzwAiAM8ABgKeAFABvgAmA18APwLEADkDYgAqAxEATAMRACgDEQA9AxEAOgMRADEDEQA0Aw8AHAMPACoDDwAiAw8AKgMPAIsDDwBwAw8AcAMPAIsCKABAArsACQKyAFkCNwAWAr0AZABZ/2kAyQA5AoMASgLaADcBRgAoAr0AWQK9AGQCvQB1Ar0AhALDAJEAqAAXAm4AIAIcACACHQAgA1MAIANUACABBQBeAbEAOAGxADgBsQA4AowAVwGxADgCjABeBBgAMAE5ACAAs//lAV4AMgErABcBKwAJAPkASwD5AA4As//RAUgALwCrABYAs//BALP//QFCADQBQgA0AUIANAHlAE8BQgA0ALP/wQCSAAUAkgAFAJIABACSAAUBXwAaALP/3gFjADMBYwAzAWMAMwICAEABYwAzALMAMAE8ABwBPwAcAWIAHwFiAB8B/gAqAf4AKgNSAC4CFgAuA0kARwEFAD8DYAAgBJcAIASUACADUwAgBE4AIANdACACHAAgAxcAIAFiACoBYgAqAeAAKAH+AEABLwANAS8ADQEvAA0BzQAYAS8ADQFiABgBYgAYAg0AHAH+ABwDEQAcALP/5QGXABcBlwAZAO4AFwDwABkBWgAyALP/nwFaAC4A3wAgAN8AIADfACAA3wAgAJgALQDmAEYAmAAyAhQAMgCz/9gBYgAZAWIAGQIIAC0B/gAkAgoAKgFYABwAs//6AWIATAFiAEwBagAiAf4AVQMRAE8BLgApAM8AIgDPACIBLv//AM8ABgDPAAYDCgAYAIcAJQCHACUAhwAnAIcAJQDJADUEZwAYAYwAHgDrADIAswADAQsAHAFiAB4BYgAeAc8AEAH+ACcBYgAgAWIAIAIIADIB/gAsAZEAMAGRADABkQAwAjwAQwGRADAA3gATAWIAJgFiACYB2wAmAf4APAMRAD0As//BAWIAFwFiABcB4gAUAf4AKwMRACABmQATAZkAEwGZABMCTwAYAZkAEwFiABwBYgAcAf4AIgH+ACIAs//2AKz/1ACs/8kArP/8AKz/yQCoABcAs//iAKwALQCz//YArP+xAKz/2gCs//oArP/7ALP/xgHyAAQB8ABTAgMALAI7AFMBrgBTAZwAUwI0ACwCQwBTAOkAUwDp//EB4ABTAaUAUwKPAFMCUgBTAmIALAHXAFMCYgAsAeYAUwGpAC0BwgAaAkgATQHwAAQC7QAIAgQACAHiAAQB2wAGAkcALgI7AA8BpQAKAakALQHiAAQB1wBSAdsABgMFAAACYgAsAvkALAHiAAQChQBTA0IAUwDbAEcBTgAhANsALwFOAB4DUQAtAfIABAHyAAQB8gAEAfIABAHyAAQB8gAEAgMALAGuAFMBrgBTAa4AUwGuAFMA6ABAAOj/5gDo/+YA6P/8AlEAUwJiACwCYgAsAmIALAJiACwCYgAsAkgATQJIAE0CSABNAkgATQHyAAQB8gAEAfIABAIDACwCAwAsAgMALAIDACwCOwBTAjsADwGuAFMBrgBTAa4AUwGuAFMBrgBTAjQALAI0ACwCNAAsAjQALAJCAA8CQgBTAOj/4ADo//gA6P/xAOj/+wDoAEoBugBTAOj/6AHgAFMBpQBKAaUAUwGlAFMBpQBTAlEAUwJRAFMCUQBTAlEAUgJiACwCYgAsAmIALAHkAFMB5ABTAeQAUwGpAC0BqQAtAakALQHCABoBwgAaAcIAGgJIAE0CSABNAkgATQJIAE0CSABNAkgATQLtAAgC7QAIAu0ACALtAAgB4gAEAeIABAHbAAYB2wAGAfIABAMFAAACYgAsAakALQHCABoCHgBTAOkAUwIVACMBiQAkAgAAFAIAACsCJQAoAf8ANQIgADgB6wAQAhUALgIgACcAAAADAAAAAwAAABwAAQAAAAABxAADAAEAAAAcAAQBqAAAAGYAQAAFACYAAAANAH4BfwGSAf8CGwLHAt0DlAOpA7wDwB6FHvMgFCAaIB4gIiAmIDAgOiBEIHAgeSCJII4grCETISIhJiEuIVQhXiGTIZkiAiIGIg8iEiIVIhoiHiIrIkgiYCJlJcr2w/sE//8AAAAAAA0AIAChAZIB+gIYAsYC2AOUA6kDvAPAHoAe8iATIBggHCAgICYgMCA5IEQgcCB0IH0gjSCsIRMhIiEmIS4hUyFbIZAhliICIgYiDyIRIhUiGSIeIisiSCJgImQlyvbD+wD//wAD//f/5f/D/7H/Sv8y/oj+eP3C/a79nP2Z4tribuFP4UzhS+FK4UfhPuE24S3hAuD/4Pzg+eDc4HbgaOBl4F7gOuA04APgAd+Z35bfjt+N34vfiN+F33nfXd9G30Pb3wrnBqsAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAgoAAAAAAQAAAwAAAAAAAAAAAAAAAAAAAAEAAgAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAUABgAHAAgACQAKAAsADAANAA4ADwAQABEAEgATABQAFQAWABcAGAAZABoAGwAcAB0AHgAfACAAIQAiACMAJAAlACYAJwAoACkAKgArACwALQAuAC8AMAAxADIAMwA0ADUANgA3ADgAOQA6ADsAPAA9AD4APwBAAEEAQgBDAEQARQBGAEcASABJAEoASwBMAE0ATgBPAFAAUQBSAFMAVABVAFYAVwBYAFkAWgBbAFwAXQBeAF8AYABhAGIAYwAAAIcAiACKAIwAlACZAJ8ApACjAKUApwCmAKgAqgCsAKsArQCuALAArwCxALIAtAC2ALUAtwC5ALgAvQC8AL4AvwFqAHMAZQBmAGoBbAB5AKIAcQBsAYoAdwBrAaYAiQCbAaMAdAGnAagAaAB4AZsBngGdAVkBpABtAH0BVwCpALsAggBkAG8BogFDAaUBnABuAH4BbQAAAIMAhgCYARUBFgFiAWMBZwFoAWQBZQC6AakAwgE7AXEBiAFvAXABrAGtAWsAegFmAWkBbgCFAI0AhACOAIsAkACRAJIAjwCWAJcAAACVAJ0AngCcAPQBTgFUAHIBUAFRAVIAewFVAVMBTwAAAAAAAAAAAAAAAAAAAAAAHgA4AGgAtAD6AUgBWAFuAYQBtAHIAdgB5AH6AggCPAJMAnICrALKAvIDJgM2A3oDsAPUA/IEBgQaBC4EYgSwBMwFBgUoBU4FZgV6BaAFuAXEBdwF+AYIBiwGSAZuBpgGygb6BzAHQgdqB4AHpgfMB+QIBggYCCYIOAhMCFgIZgicCMQI5gkQCToJXgm4CdoJ9AoaCjQKQAp2CpoKvgrqCxYLLgtgC4QLqAu+C+IMAgwYDDYMdAyADL4M4Az+DS4NWg2WDcAN1A4wDlAOkg7IDuIO8g7+D04PWg+AD5wPwA/2EAQQKBBCEFgQfhCOELAQyhD6ETARhhG8Ed4SABImEl4SlBLOEvITMhNQE24TkhPEE9YT6BP+FCQUUhSKFLYU4hUSFVQVlBWuFeoWGhZKFn4WwhbiFwwXSBeEF8AYABhQGJ4Y8hlIGYgZuBnoGhwaXhpyGoYanBrCGv4bPBtmG5Abvhv+HDocZByeHMgc8h0gHVwdeB2kHdQd+B40HmIeqh7YHyAfSB9yH54fzB/8ICwgWCCGILYg6iEYIUohaiGaIcQiACImIlwiiCLIIuojHiNQI7Qj7iRaJI4k9CUkJYYlqCXUJfomJCZMJnQmhiaaJrgm1ib2JyInPCdIJ2YnnifAJ+IoBigoKD4oVihoKIAolCisKMAo4Cj8KRgpMClSKXwpoCnMKfQqIipOKnYqpCrQKvorMitqK5wrzCv+LEQseiyYLNIs8i0sLU4tii3CLgIuPi6SLuIvIi9eL44v0i/uMBwwNjBiMKYw5DEUMT4xeDGwMfgyOjJuMp4y1jMOMz4zbDOQM7Iz5jQONDI0YDSMNLg04DT8NTQ1dDXQNfo2VjaYNtg3FjdQN2o3mDeqN7w31DfoOA44KjhMOGA4eDimOMo45jkSOT45ajmWOdY6FDo0OlA6XjpsOnw6jDqcOrY60DrqOwA7HDs0O2g7yjvaO+o7+DwaPDo8YjyWPKY86D0cPTA9RD1kPYY9lj26PfA+ED42Pmo+ej68PvA/BD8YP1Q/iD+0P+JAGkBgQLxBEEGKQfRCSEJmQoJCoEK+QtxC/EMaQzhDcEOIQ5xDtkPEQ9JD6EP+REBEcESuRM5E6EUERR5FLkVwRahF0kYoRnBGfEa0RuxHJkdgR5pHwEgmSFxIakiSSNBJDkkgSTJJSkliSXJJhEmqSdZKAkouSl5KikqcSqpKuErGStZK/ksgS2ZLrEvyTDpMgkyWTL5M7E0uTXBNtk38TgpOGE5I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dABhAG4AZABhAHIAZAAgAEwAaQBjAGUAbgBzAGUADQANAEIAeQAgAGIAdQB5AGkAbgBnACAAdABoAGkAcwAgAGYAbwBuAHQAIAB5AG8AdQAgAGEAcgBlACAAYQBnAHIAZQBlAGkAbgBnACAAdABvACAAYgBlACAAYgBvAHUAbgBkACAAYgB5ACAAdABoAGUAIAB0AGUAcgBtAHMAIABvAGYAIAB0AGgAaQBzACAAQQBnAHIAZQBlAG0AZQBuAHQALgAgAFQAaABpAHMAIABBAGcAcgBlAGUAbQBlAG4AdAAsACAAaQBuACAAYwBvAG4AagB1AG4AYwB0AGkAbwBuACAAdwBpAHQAaAAgAHQAaABlACAAcgBlAGMAZQBpAHAAdAAgAHQAaABhAHQAIABhAGMAYwBvAG0AcABhAG4AaQBlAHMAIABlAGEAYwBoACAAcAB1AHIAYwBoAGEAcwBlACAAZgByAG8AbQAgAEgAbwBmAHQAeQBwAGUALAAgAGMAbwBuAHMAdABpAHQAdQB0AGUAcwAgAHQAaABlACAAYwBvAG0AcABsAGUAdABlACAAYQBnAHIAZQBlAG0AZQBuAHQAIABiAGUAdAB3AGUAZQBuACAAeQBvAHUAIABhAG4AZAAgAEgAbwBmAHQAeQBwAGUALgANAA0AMQAuACAAQQBsAGwAbwB3AGUAZAAgAHUAcwBlAHMADQBZAG8AdQAgAG0AYQB5ACAAdQBzAGUAIAB0AGgAZQAgAGwAaQBjAGUAbgBzAGUAZAAgAGYAbwBuAHQAcwAgAHQAbwAgAGMAcgBlAGEAdABlACAAaQBtAGEAZwBlAHMAIABvAG4AIABhAG4AeQAgAHMAdQByAGYAYQBjAGUAIABzAHUAYwBoACAAYQBzACAAYwBvAG0AcAB1AHQAZQByACAAcwBjAHIAZQBlAG4AcwAsACAAcABhAHAAZQByACwAIAB3AGUAYgAgAHAAYQBnAGUAcwAsACAAcABoAG8AdABvAGcAcgBhAHAAaABzACwAIABtAG8AdgBpAGUAIABjAHIAZQBkAGkAdABzACwAIABwAHIAaQBuAHQAZQBkACAAbQBhAHQAZQByAGkAYQBsACwAIABUAC0AcwBoAGkAcgB0AHMALAAgAGEAbgBkACAAbwB0AGgAZQByACAAcwB1AHIAZgBhAGMAZQBzACAAdwBoAGUAcgBlACAAdABoAGUAIABpAG0AYQBnAGUAIABpAHMAIABhACAAZgBpAHgAZQBkACAAcwBpAHoAZQAuAA0AWQBvAHUAIABtAGEAeQAgAHUAcwBlACAAdABoAGUAIABsAGkAYwBlAG4AcwBlAGQAIABmAG8AbgB0AHMAIAB0AG8AIABjAHIAZQBhAHQAZQAgAEUAUABTACAAZgBpAGwAZQBzACAAbwByACAAbwB0AGgAZQByACAAcwBjAGEAbABhAGIAbABlACAAZAByAGEAdwBpAG4AZwBzACAAcAByAG8AdgBpAGQAZQBkACAAdABoAGEAdAAgAHMAdQBjAGgAIABmAGkAbABlAHMAIABhAHIAZQAgAG8AbgBsAHkAIAB1AHMAZQBkACAAYgB5ACAAdABoAGUAIABoAG8AdQBzAGUAaABvAGwAZAAgAG8AcgAgAGMAbwBtAHAAYQBuAHkAIABsAGkAYwBlAG4AcwBpAG4AZwAgAHQAaABlACAAZgBvAG4AdAAuAA0ADQAyAC4AIABOAHUAbQBiAGUAcgAgAG8AZgAgAHUAcwBlAHIAcwANAFQAaABlACAAbQBhAHgAaQBtAHUAbQAgAG4AdQBtAGIAZQByACAAbwBmACAAcwBpAG0AdQBsAHQAYQBuAGUAbwB1AHMAIAB1AHMAZQByAHMAIABpAHMAIABzAHAAZQBjAGkAZgBpAGUAZAAgAGkAbgAgAHQAaABlACAAYQBwAHAAbABpAGMAYQBiAGwAZQAgAHIAZQBjAGUAaQBwAHQALgAgAEEAbABsACAAdQBzAGUAcgBzACAAbQB1AHMAdAAgAGIAZQBsAG8AbgBnACAAdABvACAAdABoAGUAIABzAGEAbQBlACAAYwBvAG0AcABhAG4AeQAgAG8AcgAgAGgAbwB1AHMAZQBoAG8AbABkACAAcAB1AHIAYwBoAGEAcwBpAG4AZwAgAHQAaABlACAAZgBvAG4AdAAuAA0ADQAzAC4AIABUAGgAaQByAGQAIABwAGEAcgB0AGkAZQBzAA0AWQBvAHUAIABtAGEAeQAgAHAAcgBvAHYAaQBkAGUAIAB0AGgAZQAgAGYAbwBuAHQAIAB0AG8AIABhACAAZwByAGEAcABoAGkAYwAgAGQAZQBzAGkAZwBuAGUAcgAsACAAcAByAGkAbgB0AGUAcgAgAG8AcgAgAG8AdABoAGUAcgAgAHMAZQByAHYAaQBjAGUAIABiAHUAcgBlAGEAdQAgAHQAaABhAHQAIABpAHMAIAB3AG8AcgBrAGkAbgBnACAAbwBuACAAeQBvAHUAcgAgAGIAZQBoAGEAbABmACAAbwBuAGwAeQAgAGkAZgAgAHQAaABlAHkAIABhAGcAcgBlAGUAIAB0AG8AIAB1AHMAZQAgAHQAaABlACAAZgBvAG4AdAAgAGUAeABjAGwAdQBzAGkAdgBlAGwAeQAgAGYAbwByACAAeQBvAHUAcgAgAHcAbwByAGsALAAgAGEAZwByAGUAZQAgAHQAbwAgAHQAaABlACAAdABlAHIAbQBzACAAbwBmACAAdABoAGkAcwAgAGwAaQBjAGUAbgBzAGUALAAgAGEAbgBkACAAcgBlAHQAYQBpAG4AIABuAG8AIABjAG8AcABpAGUAcwAgAG8AZgAgAHQAaABlACAAZgBvAG4AdAAgAG8AbgAgAGMAbwBtAHAAbABlAHQAaQBvAG4AIABvAGYAIAB0AGgAZQAgAHcAbwByAGsALgANAFkAbwB1ACAAbQBhAHkAIABuAG8AdAAgAHAAcgBvAHYAaQBkAGUAIAB0AGgAZQAgAGYAbwBuAHQAIABvAHIAIABtAGEAawBlACAAaQB0ACAAYQBjAGMAZQBzAHMAaQBiAGwAZQAgAHQAbwAgAGEAbgB5ACAAbwB0AGgAZQByACAAdABoAGkAcgBkACAAcABhAHIAdABpAGUAcwAuAA0ADQA0AC4AIABFAG0AYgBlAGQAZABpAG4AZwANAFkAbwB1ACAAbQBhAHkAIABlAG0AYgBlAGQAIAB0AGgAZQAgAGwAaQBjAGUAbgBzAGUAZAAgAGYAbwBuAHQAcwAgAGkAbgB0AG8AIABhAG4AeQAgAGQAbwBjAHUAbQBlAG4AdAAgAHkAbwB1ACAAcwBlAG4AZAAgAHQAbwAgAHQAaABpAHIAZAAgAHAAYQByAHQAaQBlAHMAIABwAHIAbwB2AGkAZABlAGQAIABzAHUAYwBoACAAZQBtAGIAZQBkAGQAaQBuAGcAIABpAHMAIAByAGUAcwB0AHIAaQBjAHQAZQBkACAAdABvACAAdgBpAGUAdwBpAG4AZwAgAGEAbgBkACAAcAByAGkAbgB0AGkAbgBnACAAdABoAGEAdAAgAGQAbwBjAHUAbQBlAG4AdAAuAA0AWQBvAHUAIABtAGEAeQAgAG4AbwB0ACAAZQBtAGIAZQBkACAAdABoAGUAIABsAGkAYwBlAG4AcwBlAGQAIABmAG8AbgB0AHMAIABpAG4AdABvACAAcwBvAGYAdAB3AGEAcgBlACAAbwByACAAaABhAHIAZAB3AGEAcgBlACAAcAByAG8AZAB1AGMAdABzACAAaQBuACAAdwBoAGkAYwBoACAAdABoAGUAIABmAG8AbgB0AHMAIAB3AGkAbABsACAAYgBlACAAdQBzAGUAZAAgAGIAeQAgAHQAaABlACAAcAB1AHIAYwBoAGEAcwBlAHIAcwAgAG8AZgAgAHMAdQBjAGgAIABwAHIAbwBkAHUAYwB0AHMALgAgAFMAdQBjAGgAIAB1AHMAZQAgAHIAZQBxAHUAaQByAGUAcwAgAGEAIABkAGkAZgBmAGUAcgBlAG4AdAAgAGwAaQBjAGUAbgBzAGUAIAAoAE8ARQBNACkALgAgAFAAbABlAGEAcwBlACAAYwBvAG4AdABhAGMAdAAgAGcAQABIAG8AZgB0AHkAcABlAC4AZABlACAAZgBvAHIAIABpAG4AZgBvAHIAbQBhAHQAaQBvAG4AIABvAG4AIABPAEUATQAgAGwAaQBjAGUAbgBzAGUAcwAuAA0ADQA1AC4AIABNAG8AZABpAGYAaQBjAGEAdABpAG8AbgBzAA0AWQBvAHUAIABtAGEAeQAgAGkAbQBwAG8AcgB0ACAAYwBoAGEAcgBhAGMAdABlAHIAcwAgAGYAcgBvAG0AIAB0AGgAZQAgAGYAbwBuAHQAIABhAHMAIABnAHIAYQBwAGgAaQBjAGEAbAAgAG8AYgBqAGUAYwB0AHMAIABpAG4AdABvACAAYQAgAGQAcgBhAHcAaQBuAGcAIABwAHIAbwBnAHIAYQBtACAAYQBuAGQAIABtAG8AZABpAGYAeQAgAHMAdQBjAGgAIABnAHIAYQBwAGgAaQBjAGEAbAAgAG8AYgBqAGUAYwB0AHMALgANAFkAbwB1ACAAbQBhAHkAIABuAG8AdAAgAG0AbwBkAGkAZgB5ACwAIABhAGQAYQBwAHQALAAgAHQAcgBhAG4AcwBsAGEAdABlACwAIAByAGUAdgBlAHIAcwBlACAAZQBuAGcAaQBuAGUAZQByACwAIABkAGUAYwBvAG0AcABpAGwAZQAsACAAZABpAHMAYQBzAHMAZQBtAGIAbABlACwAIABvAHIAIABjAHIAZQBhAHQAZQAgAGQAZQByAGkAdgBhAHQAaQB2AGUAIAB3AG8AcgBrAHMAIABiAGEAcwBlAGQAIABvAG4AIAB0AGgAZQAgAGwAaQBjAGUAbgBzAGUAZAAgAGYAbwBuAHQAIABpAHQAcwBlAGwAZgAgAHcAaQB0AGgAbwB1AHQAIABIAG8AZgB0AHkAcABlACcAIABwAHIAaQBvAHIAIAB3AHIAaQB0AHQAZQBuACAAYwBvAG4AcwBlAG4AdAAuAA0ADQA2AC4AIABDAG8AcAB5AHIAaQBnAGgAdAANAFQAaABlACAAZgBvAG4AdAAgAGEAbgBkACAAdABoAGUAIABhAGMAYwBvAG0AcABhAG4AeQBpAG4AZwAgAG0AYQB0AGUAcgBpAGEAbABzACAAYQByAGUAIABjAG8AcAB5AHIAaQBnAGgAdABlAGQAIABhAG4AZAAgAGMAbwBuAHQAYQBpAG4AIABwAHIAbwBwAHIAaQBlAHQAYQByAHkAIABpAG4AZgBvAHIAbQBhAHQAaQBvAG4AIABhAG4AZAAgAHQAcgBhAGQAZQAgAHMAZQBjAHIAZQB0AHMAIABiAGUAbABvAG4AZwBpAG4AZwAgAHQAbwAgAHQAaABlACAAZgBvAHUAbgBkAHIAeQAgAG8AdwBuAGkAbgBnACAAdABoAGUAIABmAG8AbgB0AC4AIABVAG4AYQB1AHQAaABvAHIAaQB6AGUAZAAgAGMAbwBwAHkAaQBuAGcAIABvAGYAIAB0AGgAZQAgAFAAcgBvAGQAdQBjAHQAIABlAHYAZQBuACAAaQBmACAAbQBvAGQAaQBmAGkAZQBkACwAIABtAGUAcgBnAGUAZAAsACAAbwByACAAaQBuAGMAbAB1AGQAZQBkACAAdwBpAHQAaAAgAG8AdABoAGUAcgAgAHMAbwBmAHQAdwBhAHIAZQAsACAAbwByACAAbwBmACAAdABoAGUAIAB3AHIAaQB0AHQAZQBuACAAbQBhAHQAZQByAGkAYQBsAHMALAAgAGkAcwAgAGUAeABwAHIAZQBzAHMAbAB5ACAAZgBvAHIAYgBpAGQAZABlAG4ALgAgAFkAbwB1ACAAbQBhAHkAIABiAGUAIABoAGUAbABkACAAbABlAGcAYQBsAGwAeQAgAHIAZQBzAHAAbwBuAHMAaQBiAGwAZQAgAGYAbwByACAAYQBuAHkAIABpAG4AZgByAGkAbgBnAGUAbQBlAG4AdAAgAG8AZgAgAHQAaABlACAAZgBvAHUAbgBkAHIAeQDiAIAAmQBzACAAaQBuAHQAZQBsAGwAZQBjAHQAdQBhAGwAIABwAHIAbwBwAGUAcgB0AHkAIAByAGkAZwBoAHQAcwAgAHQAaABhAHQAIABpAHMAIABjAGEAdQBzAGUAZAAgAG8AcgAgAGUAbgBjAG8AdQByAGEAZwBlAGQAIABiAHkAIAB5AG8AdQByACAAZgBhAGkAbAB1AHIAZQAgAHQAbwAgAGEAYgBpAGQAZQAgAGIAeQAgAHQAaABlACAAdABlAHIAbQBzACAAbwBmACAAdABoAGkAcwAgAEEAZwByAGUAZQBtAGUAbgB0AC4ADQANADcALgAgAFQAZQByAG0AaQBuAGEAdABpAG8AbgANAFQAaABpAHMAIABBAGcAcgBlAGUAbQBlAG4AdAAgAGkAcwAgAGUAZgBmAGUAYwB0AGkAdgBlACAAdQBuAHQAaQBsACAAdABlAHIAbQBpAG4AYQB0AGUAZAAuACAAVABoAGkAcwAgAEEAZwByAGUAZQBtAGUAbgB0ACAAdwBpAGwAbAAgAHQAZQByAG0AaQBuAGEAdABlACAAYQB1AHQAbwBtAGEAdABpAGMAYQBsAGwAeQAgAHcAaQB0AGgAbwB1AHQAIABuAG8AdABpAGMAZQAgAGYAcgBvAG0AIABIAG8AZgB0AHkAcABlACAAaQBmACAAeQBvAHUAIABmAGEAaQBsACAAdABvACAAYwBvAG0AcABsAHkAIAB3AGkAdABoACAAYQBuAHkAIABwAHIAbwB2AGkAcwBpAG8AbgAgAGMAbwBuAHQAYQBpAG4AZQBkACAAaABlAHIAZQBpAG4ALgAgAFUAcABvAG4AIAB0AGUAcgBtAGkAbgBhAHQAaQBvAG4ALAAgAHkAbwB1ACAAbQB1AHMAdAAgAGQAZQBzAHQAcgBvAHkAIAB0AGgAZQAgAHcAcgBpAHQAdABlAG4AIABtAGEAdABlAHIAaQBhAGwAcwAsACAAdABoAGUAIABQAHIAbwBkAHUAYwB0ACwAIABhAG4AZAAgAGEAbABsACAAYwBvAHAAaQBlAHMAIABvAGYAIAB0AGgAZQBtACwAIABpAG4AIABwAGEAcgB0ACAAYQBuAGQAIABpAG4AIAB3AGgAbwBsAGUALAAgAGkAbgBjAGwAdQBkAGkAbgBnACAAbQBvAGQAaQBmAGkAZQBkACAAYwBvAHAAaQBlAHMALAAgAGkAZgAgAGEAbgB5AC4ADQANADgALgAgAFAAcgBvAGQAdQBjAHQAIABVAHAAZwByAGEAZABlAHMADQBIAG8AZgB0AHkAcABlACAAbQBhAHkALAAgAGYAcgBvAG0AIAB0AGkAbQBlACAAdABvACAAdABpAG0AZQAsACAAdQBwAGQAYQB0AGUAIAB0AGgAZQAgAFAAcgBvAGQAdQBjAHQALgAgAFAAcgBvAGQAdQBjAHQAIAB1AHAAZwByAGEAZABlACAAcAByAGkAYwBpAG4AZwAgAG0AYQB5ACAAYQBwAHAAbAB5AC4ADQANADkALgAgAEQAaQBzAGMAbABhAGkAbQBlAHIAIABhAG4AZAAgAEwAaQBtAGkAdABlAGQAIABXAGEAcgByAGEAbgB0AHkADQBIAG8AZgB0AHkAcABlACAAdwBhAHIAcgBhAG4AdABzACAAdABoAGUAIABQAHIAbwBkAHUAYwB0ACAAdABvACAAYgBlACAAZgByAGUAZQAgAGYAcgBvAG0AIABkAGUAZgBlAGMAdABzACAAaQBuACAAbQBhAHQAZQByAGkAYQBsAHMAIABhAG4AZAAgAHcAbwByAGsAbQBhAG4AcwBoAGkAcAAgAHUAbgBkAGUAcgAgAG4AbwByAG0AYQBsACAAdQBzAGUAIABmAG8AcgAgAGEAIABwAGUAcgBpAG8AZAAgAG8AZgAgAHQAdwBlAG4AdAB5ACAAbwBuAGUAIAAoADIAMQApACAAZABhAHkAcwAgAGYAcgBvAG0AIAB0AGgAZQAgAGQAYQB0AGUAIABvAGYAIABkAGUAbABpAHYAZQByAHkAIABhAHMAIABzAGgAbwB3AG4AIABvAG4AIAB5AG8AdQByACAAcgBlAGMAZQBpAHAAdAAuACAASABvAGYAdAB5AHAAZQAnACAAZQBuAHQAaQByAGUAIABsAGkAYQBiAGkAbABpAHQAeQAgAGEAbgBkACAAeQBvAHUAcgAgAGUAeABjAGwAdQBzAGkAdgBlACAAcgBlAG0AZQBkAHkAIABhAHMAIAB0AG8AIABhACAAZABlAGYAZQBjAHQAaQB2AGUAIABwAHIAbwBkAHUAYwB0ACAAcwBoAGEAbABsACAAYgBlACwAIABhAHQAIABIAG8AZgB0AHkAcABlACcAIABvAHAAdABpAG8AbgAsACAAZQBpAHQAaABlAHIAIAByAGUAdAB1AHIAbgAgAG8AZgAgAHAAdQByAGMAaABhAHMAZQAgAHAAcgBpAGMAZQAgAG8AcgAgAHIAZQBwAGwAYQBjAGUAbQBlAG4AdAAgAG8AZgAgAGEAbgB5ACAAcwB1AGMAaAAgAHAAcgBvAGQAdQBjAHQAIAB0AGgAYQB0ACAAaQBzACAAcgBlAHQAdQByAG4AZQBkACAAdABvACAASABvAGYAdAB5AHAAZQAgAHcAaQB0AGgAIABhACAAYwBvAHAAeQAgAG8AZgAgAHQAaABlACAAaQBuAHYAbwBpAGMAZQAuACAASABvAGYAdAB5AHAAZQAgAHMAaABhAGwAbAAgAGgAYQB2AGUAIABuAG8AIAByAGUAcwBwAG8AbgBzAGkAYgBpAGwAaQB0AHkAIAB0AG8AIAByAGUAcABsAGEAYwBlACAAdABoAGUAIABwAHIAbwBkAHUAYwB0ACAAbwByACAAcgBlAGYAdQBuAGQAIAB0AGgAZQAgAHAAdQByAGMAaABhAHMAZQAgAHAAcgBpAGMAZQAgAGkAZgAgAGYAYQBpAGwAdQByAGUAIAByAGUAcwB1AGwAdABzACAAZgByAG8AbQAgAGEAYwBjAGkAZABlAG4AdAAsACAAYQBiAHUAcwBlACAAbwByACAAbQBpAHMAYQBwAHAAbABpAGMAYQB0AGkAbwBuACwAIABvAHIAIABpAGYAIABhAG4AeQAgAHAAcgBvAGQAdQBjAHQAIABpAHMAIABsAG8AcwB0ACAAbwByACAAZABhAG0AYQBnAGUAZAAgAGQAdQBlACAAdABvACAAdABoAGUAZgB0ACwAIABmAGkAcgBlACwAIABvAHIAIABuAGUAZwBsAGkAZwBlAG4AYwBlAC4AIABBAG4AeQAgAHIAZQBwAGwAYQBjAGUAbQBlAG4AdAAgAHAAcgBvAGQAdQBjAHQAIAB3AGkAbABsACAAYgBlACAAdwBhAHIAcgBhAG4AdABlAGQAIABmAG8AcgAgAHQAdwBlAG4AdAB5ACAAbwBuAGUAIAAoADIAMQApACAAZABhAHkAcwAuACAAVABoAGkAcwAgAHcAYQByAHIAYQBuAHQAeQAgAGcAaQB2AGUAcwAgAHkAbwB1ACAAcwBwAGUAYwBpAGYAaQBjACAAbABlAGcAYQBsACAAcgBpAGcAaAB0AHMALgAgAFkAbwB1ACAAbQBhAHkAIABoAGEAdgBlACAAbwB0AGgAZQByACAAcgBpAGcAaAB0AHMALAAgAHcAaABpAGMAaAAgAHYAYQByAHkAIABmAHIAbwBtACAAcwB0AGEAdABlACAAdABvACAAcwB0AGEAdABlAC4ADQBFAFgAQwBFAFAAVAAgAEEAUwAgAEUAWABQAFIARQBTAFMATABZACAAUABSAE8AVgBJAEQARQBEACAAQQBCAE8AVgBFACwAIABUAEgARQAgAFAAUgBPAEQAVQBDAFQALAAgAEkAUwAgAFAAUgBPAFYASQBEAEUARAAgAOIAgACcAEEAUwAgAEkAUwDiAIAAnQAuACAASABvAGYAdAB5AHAAZQAgAEQATwBFAFMAIABOAE8AVAAgAE0AQQBLAEUAIABBAE4AWQAgAFcAQQBSAFIAQQBOAFQAWQAgAE8ARgAgAEEATgBZACAASwBJAE4ARAAsACAARQBJAFQASABFAFIAIABFAFgAUABSAEUAUwBTAEUARAAgAE8AUgAgAEkATQBQAEwASQBFAEQALAAgAEkATgBDAEwAVQBEAEkATgBHACwAIABCAFUAVAAgAE4ATwBUACAATABJAE0ASQBUAEUARAAgAFQATwAgAFQASABFACAASQBNAFAATABJAEUARAAgAFcAQQBSAFIAQQBOAFQASQBFAFMAIABPAEYAIABNAEUAUgBDAEgAQQBOAFQAQQBCAEkATABJAFQAWQAgAEEATgBEACAARgBJAFQATgBFAFMAUwAgAEYATwBSACAAQQAgAFAAQQBSAFQASQBDAFUATABBAFIAIABQAFUAUgBQAE8AUwBFAC4ADQBUAGgAZQAgAGUAbgB0AGkAcgBlACAAcgBpAHMAawAgAGEAcwAgAHQAbwAgAHQAaABlACAAcQB1AGEAbABpAHQAeQAgAGEAbgBkACAAcABlAHIAZgBvAHIAbQBhAG4AYwBlACAAbwBmACAAdABoAGUAIABQAHIAbwBkAHUAYwB0ACAAcgBlAHMAdABzACAAdQBwAG8AbgAgAHkAbwB1AC4AIABIAG8AZgB0AHkAcABlACAAZABvAGUAcwAgAG4AbwB0ACAAdwBhAHIAcgBhAG4AdAAgAHQAaABhAHQAIAB0AGgAZQAgAGYAdQBuAGMAdABpAG8AbgBzACAAYwBvAG4AdABhAGkAbgBlAGQAIABpAG4AIAB0AGgAZQAgAFAAcgBvAGQAdQBjAHQAIAB3AGkAbABsACAAbQBlAGUAdAAgAHkAbwB1AHIAIAByAGUAcQB1AGkAcgBlAG0AZQBuAHQAcwAgAG8AcgAgAHQAaABhAHQAIAB0AGgAZQAgAG8AcABlAHIAYQB0AGkAbwBuACAAbwBmACAAdABoAGUAIABzAG8AZgB0AHcAYQByAGUAIAB3AGkAbABsACAAYgBlACAAdQBuAGkAbgB0AGUAcgByAHUAcAB0AGUAZAAgAG8AcgAgAGUAcgByAG8AcgAgAGYAcgBlAGUALgANAEgAbwBmAHQAeQBwAGUAIABTAEgAQQBMAEwAIABOAE8AVAAgAEIARQAgAEwASQBBAEIATABFACAARgBPAFIAIABBAE4AWQAgAEQASQBSAEUAQwBUACwAIABJAE4ARABJAFIARQBDAFQALAAgAEMATwBOAFMARQBRAFUARQBOAFQASQBBAEwALAAgAE8AUgAgAEkATgBDAEkARABFAE4AVABBAEwAIABEAEEATQBBAEcARQBTACAAKABJAE4AQwBMAFUARABJAE4ARwAgAEQAQQBNAEEARwBFAFMAIABGAFIATwBNACAATABPAFMAUwAgAE8ARgAgAEIAVQBTAEkATgBFAFMAUwAgAFAAUgBPAEYASQBUAFMALAAgAEIAVQBTAEkATgBFAFMAUwAgAEkATgBUAEUAUgBSAFUAUABUAEkATwBOACwAIABMAE8AUwBTACAATwBGACAAQgBVAFMASQBOAEUAUwBTACAASQBOAEYATwBSAE0AQQBUAEkATwBOACwAIABBAE4ARAAgAFQASABFACAATABJAEsARQApACAAQQBSAEkAUwBJAE4ARwAgAE8AVQBUACAATwBGACAAVABIAEUAIABVAFMARQAgAE8ARgAgAE8AUgAgAEkATgBBAEIASQBMAEkAVABZACAAVABPACAAVQBTAEUAIABUAEgARQAgAFAAUgBPAEQAVQBDAFQAIABFAFYARQBOACAASQBGACAASABvAGYAdAB5AHAAZQAgAEgAQQBTACAAQgBFAEUATgAgAEEARABWAEkAUwBFAEQAIABPAEYAIABUAEgARQAgAFAATwBTAFMASQBCAEkATABJAFQAWQAgAE8ARgAgAFMAVQBDAEgAIABEAEEATQBBAEcARQBTAC4ADQBCAGUAYwBhAHUAcwBlACAAcwBvAG0AZQAgAHMAdABhAHQAZQBzACAAZABvACAAbgBvAHQAIABhAGwAbABvAHcAIAB0AGgAZQAgAGUAeABjAGwAdQBzAGkAbwBuACAAbwByACAAbABpAG0AaQB0AGEAdABpAG8AbgAgAG8AZgAgAGwAaQBhAGIAaQBsAGkAdAB5ACAAZgBvAHIAIABjAG8AbgBzAGUAcQB1AGUAbgB0AGkAYQBsACAAbwByACAAaQBuAGMAaQBkAGUAbgB0AGEAbAAgAGQAYQBtAGEAZwBlAHMALAAgAHQAaABlACAAYQBiAG8AdgBlACAAbABpAG0AaQB0AGEAdABpAG8AbgAgAG0AYQB5ACAAbgBvAHQAIABhAHAAcABsAHkAIAB0AG8AIAB5AG8AdQAuAA0ADQAxADAALgAgAEcAbwB2AGUAcgBuAGkAbgBnACAATABhAHcADQBUAGgAaQBzACAAYQBnAHIAZQBlAG0AZQBuAHQAIABpAHMAIABnAG8AdgBlAHIAbgBlAGQAIABiAHkAIAB0AGgAZQAgAGwAYQB3AHMAIABvAGYAIABHAGUAcgBtAGEAbgB5AC4AAEhvZnR5cGUgU3RhbmRhcmQgTGljZW5zZQ0NQnkgYnV5aW5nIHRoaXMgZm9udCB5b3UgYXJlIGFncmVlaW5nIHRvIGJlIGJvdW5kIGJ5IHRoZSB0ZXJtcyBvZiB0aGlzIEFncmVlbWVudC4gVGhpcyBBZ3JlZW1lbnQsIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIHJlY2VpcHQgdGhhdCBhY2NvbXBhbmllcyBlYWNoIHB1cmNoYXNlIGZyb20gSG9mdHlwZSwgY29uc3RpdHV0ZXMgdGhlIGNvbXBsZXRlIGFncmVlbWVudCBiZXR3ZWVuIHlvdSBhbmQgSG9mdHlwZS4NDTEuIEFsbG93ZWQgdXNlcw1Zb3UgbWF5IHVzZSB0aGUgbGljZW5zZWQgZm9udHMgdG8gY3JlYXRlIGltYWdlcyBvbiBhbnkgc3VyZmFjZSBzdWNoIGFzIGNvbXB1dGVyIHNjcmVlbnMsIHBhcGVyLCB3ZWIgcGFnZXMsIHBob3RvZ3JhcGhzLCBtb3ZpZSBjcmVkaXRzLCBwcmludGVkIG1hdGVyaWFsLCBULXNoaXJ0cywgYW5kIG90aGVyIHN1cmZhY2VzIHdoZXJlIHRoZSBpbWFnZSBpcyBhIGZpeGVkIHNpemUuDVlvdSBtYXkgdXNlIHRoZSBsaWNlbnNlZCBmb250cyB0byBjcmVhdGUgRVBTIGZpbGVzIG9yIG90aGVyIHNjYWxhYmxlIGRyYXdpbmdzIHByb3ZpZGVkIHRoYXQgc3VjaCBmaWxlcyBhcmUgb25seSB1c2VkIGJ5IHRoZSBob3VzZWhvbGQgb3IgY29tcGFueSBsaWNlbnNpbmcgdGhlIGZvbnQuDQ0yLiBOdW1iZXIgb2YgdXNlcnMNVGhlIG1heGltdW0gbnVtYmVyIG9mIHNpbXVsdGFuZW91cyB1c2VycyBpcyBzcGVjaWZpZWQgaW4gdGhlIGFwcGxpY2FibGUgcmVjZWlwdC4gQWxsIHVzZXJzIG11c3QgYmVsb25nIHRvIHRoZSBzYW1lIGNvbXBhbnkgb3IgaG91c2Vob2xkIHB1cmNoYXNpbmcgdGhlIGZvbnQuDQ0zLiBUaGlyZCBwYXJ0aWVzDVlvdSBtYXkgcHJvdmlkZSB0aGUgZm9udCB0byBhIGdyYXBoaWMgZGVzaWduZXIsIHByaW50ZXIgb3Igb3RoZXIgc2VydmljZSBidXJlYXUgdGhhdCBpcyB3b3JraW5nIG9uIHlvdXIgYmVoYWxmIG9ubHkgaWYgdGhleSBhZ3JlZSB0byB1c2UgdGhlIGZvbnQgZXhjbHVzaXZlbHkgZm9yIHlvdXIgd29yaywgYWdyZWUgdG8gdGhlIHRlcm1zIG9mIHRoaXMgbGljZW5zZSwgYW5kIHJldGFpbiBubyBjb3BpZXMgb2YgdGhlIGZvbnQgb24gY29tcGxldGlvbiBvZiB0aGUgd29yay4NWW91IG1heSBub3QgcHJvdmlkZSB0aGUgZm9udCBvciBtYWtlIGl0IGFjY2Vzc2libGUgdG8gYW55IG90aGVyIHRoaXJkIHBhcnRpZXMuDQ00LiBFbWJlZGRpbmcNWW91IG1heSBlbWJlZCB0aGUgbGljZW5zZWQgZm9udHMgaW50byBhbnkgZG9jdW1lbnQgeW91IHNlbmQgdG8gdGhpcmQgcGFydGllcyBwcm92aWRlZCBzdWNoIGVtYmVkZGluZyBpcyByZXN0cmljdGVkIHRvIHZpZXdpbmcgYW5kIHByaW50aW5nIHRoYXQgZG9jdW1lbnQuDVlvdSBtYXkgbm90IGVtYmVkIHRoZSBsaWNlbnNlZCBmb250cyBpbnRvIHNvZnR3YXJlIG9yIGhhcmR3YXJlIHByb2R1Y3RzIGluIHdoaWNoIHRoZSBmb250cyB3aWxsIGJlIHVzZWQgYnkgdGhlIHB1cmNoYXNlcnMgb2Ygc3VjaCBwcm9kdWN0cy4gU3VjaCB1c2UgcmVxdWlyZXMgYSBkaWZmZXJlbnQgbGljZW5zZSAoT0VNKS4gUGxlYXNlIGNvbnRhY3QgZ0BIb2Z0eXBlLmRlIGZvciBpbmZvcm1hdGlvbiBvbiBPRU0gbGljZW5zZXMuDQ01LiBNb2RpZmljYXRpb25zDVlvdSBtYXkgaW1wb3J0IGNoYXJhY3RlcnMgZnJvbSB0aGUgZm9udCBhcyBncmFwaGljYWwgb2JqZWN0cyBpbnRvIGEgZHJhd2luZyBwcm9ncmFtIGFuZCBtb2RpZnkgc3VjaCBncmFwaGljYWwgb2JqZWN0cy4NWW91IG1heSBub3QgbW9kaWZ5LCBhZGFwdCwgdHJhbnNsYXRlLCByZXZlcnNlIGVuZ2luZWVyLCBkZWNvbXBpbGUsIGRpc2Fzc2VtYmxlLCBvciBjcmVhdGUgZGVyaXZhdGl2ZSB3b3JrcyBiYXNlZCBvbiB0aGUgbGljZW5zZWQgZm9udCBpdHNlbGYgd2l0aG91dCBIb2Z0eXBlJyBwcmlvciB3cml0dGVuIGNvbnNlbnQuDQ02LiBDb3B5cmlnaHQNVGhlIGZvbnQgYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBjb3B5cmlnaHRlZCBhbmQgY29udGFpbiBwcm9wcmlldGFyeSBpbmZvcm1hdGlvbiBhbmQgdHJhZGUgc2VjcmV0cyBiZWxvbmdpbmcgdG8gdGhlIGZvdW5kcnkgb3duaW5nIHRoZSBmb250LiBVbmF1dGhvcml6ZWQgY29weWluZyBvZiB0aGUgUHJvZHVjdCBldmVuIGlmIG1vZGlmaWVkLCBtZXJnZWQsIG9yIGluY2x1ZGVkIHdpdGggb3RoZXIgc29mdHdhcmUsIG9yIG9mIHRoZSB3cml0dGVuIG1hdGVyaWFscywgaXMgZXhwcmVzc2x5IGZvcmJpZGRlbi4gWW91IG1heSBiZSBoZWxkIGxlZ2FsbHkgcmVzcG9uc2libGUgZm9yIGFueSBpbmZyaW5nZW1lbnQgb2YgdGhlIGZvdW5kcnmJcyBpbnRlbGxlY3R1YWwgcHJvcGVydHkgcmlnaHRzIHRoYXQgaXMgY2F1c2VkIG9yIGVuY291cmFnZWQgYnkgeW91ciBmYWlsdXJlIHRvIGFiaWRlIGJ5IHRoZSB0ZXJtcyBvZiB0aGlzIEFncmVlbWVudC4NDTcuIFRlcm1pbmF0aW9uDVRoaXMgQWdyZWVtZW50IGlzIGVmZmVjdGl2ZSB1bnRpbCB0ZXJtaW5hdGVkLiBUaGlzIEFncmVlbWVudCB3aWxsIHRlcm1pbmF0ZSBhdXRvbWF0aWNhbGx5IHdpdGhvdXQgbm90aWNlIGZyb20gSG9mdHlwZSBpZiB5b3UgZmFpbCB0byBjb21wbHkgd2l0aCBhbnkgcHJvdmlzaW9uIGNvbnRhaW5lZCBoZXJlaW4uIFVwb24gdGVybWluYXRpb24sIHlvdSBtdXN0IGRlc3Ryb3kgdGhlIHdyaXR0ZW4gbWF0ZXJpYWxzLCB0aGUgUHJvZHVjdCwgYW5kIGFsbCBjb3BpZXMgb2YgdGhlbSwgaW4gcGFydCBhbmQgaW4gd2hvbGUsIGluY2x1ZGluZyBtb2RpZmllZCBjb3BpZXMsIGlmIGFueS4NDTguIFByb2R1Y3QgVXBncmFkZXMNSG9mdHlwZSBtYXksIGZyb20gdGltZSB0byB0aW1lLCB1cGRhdGUgdGhlIFByb2R1Y3QuIFByb2R1Y3QgdXBncmFkZSBwcmljaW5nIG1heSBhcHBseS4NDTkuIERpc2NsYWltZXIgYW5kIExpbWl0ZWQgV2FycmFudHkNSG9mdHlwZSB3YXJyYW50cyB0aGUgUHJvZHVjdCB0byBiZSBmcmVlIGZyb20gZGVmZWN0cyBpbiBtYXRlcmlhbHMgYW5kIHdvcmttYW5zaGlwIHVuZGVyIG5vcm1hbCB1c2UgZm9yIGEgcGVyaW9kIG9mIHR3ZW50eSBvbmUgKDIxKSBkYXlzIGZyb20gdGhlIGRhdGUgb2YgZGVsaXZlcnkgYXMgc2hvd24gb24geW91ciByZWNlaXB0LiBIb2Z0eXBlJyBlbnRpcmUgbGlhYmlsaXR5IGFuZCB5b3VyIGV4Y2x1c2l2ZSByZW1lZHkgYXMgdG8gYSBkZWZlY3RpdmUgcHJvZHVjdCBzaGFsbCBiZSwgYXQgSG9mdHlwZScgb3B0aW9uLCBlaXRoZXIgcmV0dXJuIG9mIHB1cmNoYXNlIHByaWNlIG9yIHJlcGxhY2VtZW50IG9mIGFueSBzdWNoIHByb2R1Y3QgdGhhdCBpcyByZXR1cm5lZCB0byBIb2Z0eXBlIHdpdGggYSBjb3B5IG9mIHRoZSBpbnZvaWNlLiBIb2Z0eXBlIHNoYWxsIGhhdmUgbm8gcmVzcG9uc2liaWxpdHkgdG8gcmVwbGFjZSB0aGUgcHJvZHVjdCBvciByZWZ1bmQgdGhlIHB1cmNoYXNlIHByaWNlIGlmIGZhaWx1cmUgcmVzdWx0cyBmcm9tIGFjY2lkZW50LCBhYnVzZSBvciBtaXNhcHBsaWNhdGlvbiwgb3IgaWYgYW55IHByb2R1Y3QgaXMgbG9zdCBvciBkYW1hZ2VkIGR1ZSB0byB0aGVmdCwgZmlyZSwgb3IgbmVnbGlnZW5jZS4gQW55IHJlcGxhY2VtZW50IHByb2R1Y3Qgd2lsbCBiZSB3YXJyYW50ZWQgZm9yIHR3ZW50eSBvbmUgKDIxKSBkYXlzLiBUaGlzIHdhcnJhbnR5IGdpdmVzIHlvdSBzcGVjaWZpYyBsZWdhbCByaWdodHMuIFlvdSBtYXkgaGF2ZSBvdGhlciByaWdodHMsIHdoaWNoIHZhcnkgZnJvbSBzdGF0ZSB0byBzdGF0ZS4NRVhDRVBUIEFTIEVYUFJFU1NMWSBQUk9WSURFRCBBQk9WRSwgVEhFIFBST0RVQ1QsIElTIFBST1ZJREVEIIlBUyBJU4kuIEhvZnR5cGUgRE9FUyBOT1QgTUFLRSBBTlkgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVJVEhFUiBFWFBSRVNTRUQgT1IgSU1QTElFRCwgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8gVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLg1UaGUgZW50aXJlIHJpc2sgYXMgdG8gdGhlIHF1YWxpdHkgYW5kIHBlcmZvcm1hbmNlIG9mIHRoZSBQcm9kdWN0IHJlc3RzIHVwb24geW91LiBIb2Z0eXBlIGRvZXMgbm90IHdhcnJhbnQgdGhhdCB0aGUgZnVuY3Rpb25zIGNvbnRhaW5lZCBpbiB0aGUgUHJvZHVjdCB3aWxsIG1lZXQgeW91ciByZXF1aXJlbWVudHMgb3IgdGhhdCB0aGUgb3BlcmF0aW9uIG9mIHRoZSBzb2Z0d2FyZSB3aWxsIGJlIHVuaW50ZXJydXB0ZWQgb3IgZXJyb3IgZnJlZS4NSG9mdHlwZSBTSEFMTCBOT1QgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgQ09OU0VRVUVOVElBTCwgT1IgSU5DSURFTlRBTCBEQU1BR0VTIChJTkNMVURJTkcgREFNQUdFUyBGUk9NIExPU1MgT0YgQlVTSU5FU1MgUFJPRklUUywgQlVTSU5FU1MgSU5URVJSVVBUSU9OLCBMT1NTIE9GIEJVU0lORVNTIElORk9STUFUSU9OLCBBTkQgVEhFIExJS0UpIEFSSVNJTkcgT1VUIE9GIFRIRSBVU0UgT0YgT1IgSU5BQklMSVRZIFRPIFVTRSBUSEUgUFJPRFVDVCBFVkVOIElGIEhvZnR5cGUgSEFTIEJFRU4gQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0VTLg1CZWNhdXNlIHNvbWUgc3RhdGVzIGRvIG5vdCBhbGxvdyB0aGUgZXhjbHVzaW9uIG9yIGxpbWl0YXRpb24gb2YgbGlhYmlsaXR5IGZvciBjb25zZXF1ZW50aWFsIG9yIGluY2lkZW50YWwgZGFtYWdlcywgdGhlIGFib3ZlIGxpbWl0YXRpb24gbWF5IG5vdCBhcHBseSB0byB5b3UuDQ0xMC4gR292ZXJuaW5nIExhdw1UaGlzIGFncmVlbWVudCBpcyBnb3Zlcm5lZCBieSB0aGUgbGF3cyBvZiBHZXJtYW55LgAAaAB0AHQAcAA6AC8ALwB3AHcAdwAuAGgAbwBmAHQAeQBwAGUALgBjAG8AbQAAaHR0cDovL3d3dy5ob2Z0eXBlLmNvbQAARQBjAG8AbgAgAFMAYQBuAHMAAEVjb24gU2FucwAATABpAGcAaAB0AABMaWdodAAAAgAAAAAAAP+DADIAAAAAAAAAAAAAAAAAAAAAAAAAAALoAAAAAQACAQIBAwADAAQABQAGAAcACAAJAAoACwAMAA0ADgAPABAAEQASABMAFAAVABYAFwAYABkAGgAbABwAHQAeAB8AIAAhACIAIwAkACUAJgAnACgAKQAqACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ADoAOwA8AD0APgA/AEAAQQBCAEMARABFAEYARwBIAEkASgBLAEwATQBOAE8AUABRAFIAUwBUAFUAVgBXAFgAWQBaAFsAXABdAF4AXwBgAGEAowCEAIUAvQCWAOgAhgCOAIsAnQCpAKQBBACKANoAgwCTAPIA8wCNAJcAiADDAN4A8QCeAKoA9QD0APYAogCtAMkAxwCuAGIAYwCQAGQAywBlAMgAygDPAMwAzQDOAOkAZgDTANAA0QCvAGcA8ACRANYA1ADVAGgA6wDtAIkAagBpAGsAbQBsAG4AoABvAHEAcAByAHMAdQB0AHYAdwDqAHgAegB5AHsAfQB8ALgAoQB/AH4AgACBAOwA7gC6AQUBBgEHAQgBCQEKAP0A/gELAQwBDQEOAP8BAAEPARABEQEBARIBEwEUARUBFgEXARgBGQEaARsBHAEdAPgA+QEeAR8BIAEhASIBIwEkASUBJgEnASgBKQEqASsBLAEtAPoA1wEuAS8BMAExATIBMwE0ATUBNgE3ATgBOQE6ATsBPADiAOMBPQE+AT8BQAFBAUIBQwFEAUUBRgFHAUgBSQFKAUsAsACxAUwBTQFOAU8BUAFRAVIBUwFUAVUA+wD8AOQA5QFWAVcBWAFZAVoBWwFcAV0BXgFfAWABYQFiAWMBZAFlAWYBZwFoAWkBagFrALsBbAFtAW4BbwDmAOcBcACmAXEBcgFzAXQBdQF2AXcBeAF5AXoA2ADhANsA3ADdAOAA2QDfAXsBfAF9AJsBfgF/AYABgQGCAYMBhAGFALIAswC2ALcAxAC0ALUAxQCCAMIAhwCrAMYAvgC/ALwBhgGHAYgBiQGKAYsBjAGNAY4BjwGQAZEBkgGTAZQBlQGWAZcBmAGZAZoBmwGcAZ0AjACfAZ4BnwGgAaEBogGjAaQBpQGmAacBqAGpAaoBqwGsAJgAqACaAJkA7wGtAa4ApQCSAJwApwCPAJQAlQC5Aa8BsADAAMEBsQGyAbMBtAG1AbYBtwG4AbkBugG7AbwBvQG+Ab8BwAHBAcIBwwHEAcUBxgHHAcgByQHKAcsBzAHNAc4BzwHQAdEB0gHTAdQB1QHWAdcB2AHZAdoB2wHcAd0B3gHfAeAB4QHiAeMB5AHlAeYB5wHoAekB6gHrAewB7QHuAe8B8AHxAfIB8wH0AfUB9gH3AfgB+QH6AfsB/AH9Af4B/wIAAgECAgIDAgQCBQIGAgcCCAIJAgoCCwIMAg0CDgIPAhACEQISAhMCFAIVAhYCFwIYAhkCGgIbAhwCHQIeAh8CIAIhAiICIwIkAiUCJgInAigCKQIqAisCLAItAi4CLwIwAjECMgIzAjQCNQI2AjcCOAI5AjoCOwI8Aj0CPgI/AkACQQJCAkMCRAJFAkYCRwJIAkkCSgJLAkwCTQJOAk8CUAJRAlICUwJUAlUCVgJXAlgCWQJaAlsCXAJdAl4CXwJgAmECYgJjAmQCZQJmAmcCaAJpAmoCawJsAm0CbgJvAnACcQJyAnMCdAJ1AnYCdwJ4AnkCegJ7AnwCfQJ+An8CgAKBAoICgwKEAoUChgKHAogCiQKKAosCjAKNAo4CjwKQApECkgKTApQClQKWApcCmAKZApoCmwKcAp0CngKfAqACoQKiAqMCpAKlAqYCpwKoAqkCqgKrAqwCrQKuAq8CsAKxArICswK0ArUCtgK3ArgCuQK6ArsCvAK9Ar4CvwLAAsECwgLDAsQCxQLGAscCyALJAsoCywLMAs0CzgLPAtAC0QLSAtMC1ALVAtYC1wLYAtkC2gLbAtwC3QLeAt8C4ALhAuIC4wLkAuUC5gLnAugC6QLqBE5VTEwCQ1IHdW5pMDBBRAdBbWFjcm9uB2FtYWNyb24GQWJyZXZlBmFicmV2ZQdBb2dvbmVrB2FvZ29uZWsLQ2NpcmN1bWZsZXgLY2NpcmN1bWZsZXgKQ2RvdGFjY2VudApjZG90YWNjZW50BkRjYXJvbgZkY2Fyb24GRGNyb2F0B0VtYWNyb24HZW1hY3JvbgZFYnJldmUGZWJyZXZlCkVkb3RhY2NlbnQKZWRvdGFjY2VudAdFb2dvbmVrB2VvZ29uZWsGRWNhcm9uBmVjYXJvbgtHY2lyY3VtZmxleAtnY2lyY3VtZmxleApHZG90YWNjZW50Cmdkb3RhY2NlbnQMR2NvbW1hYWNjZW50DGdjb21tYWFjY2VudAtIY2lyY3VtZmxleAtoY2lyY3VtZmxleARIYmFyBGhiYXIGSXRpbGRlBml0aWxkZQdJbWFjcm9uB2ltYWNyb24GSWJyZXZlBmlicmV2ZQdJb2dvbmVrB2lvZ29uZWsCSUoCaWoLSmNpcmN1bWZsZXgLamNpcmN1bWZsZXgMS2NvbW1hYWNjZW50DGtjb21tYWFjY2VudAxrZ3JlZW5sYW5kaWMGTGFjdXRlBmxhY3V0ZQxMY29tbWFhY2NlbnQMbGNvbW1hYWNjZW50BkxjYXJvbgZsY2Fyb24ETGRvdARsZG90Bk5hY3V0ZQZuYWN1dGUMTmNvbW1hYWNjZW50DG5jb21tYWFjY2VudAZOY2Fyb24GbmNhcm9uC25hcG9zdHJvcGhlA0VuZwNlbmcHT21hY3JvbgdvbWFjcm9uBk9icmV2ZQZvYnJldmUNT2h1bmdhcnVtbGF1dA1vaHVuZ2FydW1sYXV0BlJhY3V0ZQZyYWN1dGUMUmNvbW1hYWNjZW50DHJjb21tYWFjY2VudAZSY2Fyb24GcmNhcm9uBlNhY3V0ZQZzYWN1dGULU2NpcmN1bWZsZXgLc2NpcmN1bWZsZXgHdW5pMDE2Mgd1bmkwMTYzBlRjYXJvbgZ0Y2Fyb24EVGJhcgR0YmFyBlV0aWxkZQZ1dGlsZGUHVW1hY3Jvbgd1bWFjcm9uBlVicmV2ZQZ1YnJldmUFVXJpbmcFdXJpbmcNVWh1bmdhcnVtbGF1dA11aHVuZ2FydW1sYXV0B1VvZ29uZWsHdW9nb25lawtXY2lyY3VtZmxleAt3Y2lyY3VtZmxleAtZY2lyY3VtZmxleAt5Y2lyY3VtZmxleAZaYWN1dGUGemFjdXRlClpkb3RhY2NlbnQKemRvdGFjY2VudAVsb25ncwpBcmluZ2FjdXRlCmFyaW5nYWN1dGUHQUVhY3V0ZQdhZWFjdXRlC09zbGFzaGFjdXRlC29zbGFzaGFjdXRlB3VuaTAyMTgHdW5pMDIxOQd1bmkwMjFBB3VuaTAyMUIHdW5pMDM5NAd1bmkwM0E5B3VuaTAzQkMGV2dyYXZlBndncmF2ZQZXYWN1dGUGd2FjdXRlCVdkaWVyZXNpcwl3ZGllcmVzaXMGWWdyYXZlBnlncmF2ZQ16ZXJvLnN1cGVyaW9yDWZvdXIuc3VwZXJpb3INZml2ZS5zdXBlcmlvcgxzaXguc3VwZXJpb3IOc2V2ZW4uc3VwZXJpb3IOZWlnaHQuc3VwZXJpb3INbmluZS5zdXBlcmlvchJwYXJlbmxlZnQuc3VwZXJpb3ITcGFyZW5yaWdodC5zdXBlcmlvcgpuLnN1cGVyaW9yDXplcm8uaW5mZXJpb3IMb25lLmluZmVyaW9yDHR3by5pbmZlcmlvcg50aHJlZS5pbmZlcmlvcg1mb3VyLmluZmVyaW9yDWZpdmUuaW5mZXJpb3IMc2l4LmluZmVyaW9yDnNldmVuLmluZmVyaW9yDmVpZ2h0LmluZmVyaW9yDW5pbmUuaW5mZXJpb3IScGFyZW5sZWZ0LmluZmVyaW9yE3BhcmVucmlnaHQuaW5mZXJpb3IERXVybwlhZmlpNjEyODkJZXN0aW1hdGVkCG9uZXRoaXJkCXR3b3RoaXJkcwlvbmVlaWdodGgMdGhyZWVlaWdodGhzC2ZpdmVlaWdodGhzDHNldmVuZWlnaHRocwlhcnJvd2xlZnQHYXJyb3d1cAphcnJvd3JpZ2h0CWFycm93ZG93bgd1bmkyMTk2B3VuaTIxOTcHdW5pMjE5OAd1bmkyMTk5B3VuaTIyMTUHdW5pMjIxOQtjb21tYWFjY2VudANmX2YFZl9mX2kFZl9mX2wIRG90bGVzc2kQRXVyby5kZW5vbWluYXRvcg1FdXJvLmluZmVyaW9yDkV1cm8ubnVtZXJhdG9yDUV1cm8ub2xkc3R5bGUNRXVyby5zdXBlcmlvcgxLZ3JlZW5sYW5kaWMDU19TCmEuc3VwZXJpb3IJYWN1dGUuY2FwCmIuc3VwZXJpb3INYnJhY2VsZWZ0LmNhcA5icmFjZXJpZ2h0LmNhcA9icmFja2V0bGVmdC5jYXAQYnJhY2tldHJpZ2h0LmNhcAlicmV2ZS5jYXAKYnVsbGV0LmNhcAljYXJvbi5hbHQJY2Fyb24uY2FwC2NlZGlsbGEuY2FwEGNlbnQuZGVub21pbmF0b3INY2VudC5pbmZlcmlvcg5jZW50Lm51bWVyYXRvcg1jZW50Lm9sZHN0eWxlDWNlbnQuc3VwZXJpb3IOY2lyY3VtZmxleC5jYXARY29tbWEuZGVub21pbmF0b3IOY29tbWEuaW5mZXJpb3IPY29tbWEubnVtZXJhdG9yDmNvbW1hLnN1cGVyaW9yCmQuc3VwZXJpb3IMZGllcmVzaXMuY2FwEmRvbGxhci5kZW5vbWluYXRvcg9kb2xsYXIuaW5mZXJpb3IQZG9sbGFyLm51bWVyYXRvcg9kb2xsYXIub2xkc3R5bGUPZG9sbGFyLnN1cGVyaW9yDWRvdGFjY2VudC5jYXAKZS5zdXBlcmlvcg9lZ3JhdmUuc3VwZXJpb3IRZWlnaHQuZGVub21pbmF0b3IPZWlnaHQubnVtZXJhdG9yDmVpZ2h0Lm9sZHN0eWxlEWVpZ2h0LnRhYm9sZHN0eWxlCmVtZGFzaC5jYXAKZW5kYXNoLmNhcA1lc3RpbWF0ZWQuYWx0DmV4Y2xhbWRvd24uY2FwA2ZfYgVmX2ZfYgVmX2ZfaAVmX2ZfagVmX2ZfawNmX2gDZl9qA2ZfaxBmaXZlLmRlbm9taW5hdG9yDmZpdmUubnVtZXJhdG9yDWZpdmUub2xkc3R5bGUQZml2ZS50YWJvbGRzdHlsZRJmbG9yaW4uZGVub21pbmF0b3IPZmxvcmluLmluZmVyaW9yEGZsb3Jpbi5udW1lcmF0b3IPZmxvcmluLm9sZHN0eWxlD2Zsb3Jpbi5zdXBlcmlvchBmb3VyLmRlbm9taW5hdG9yDmZvdXIubnVtZXJhdG9yDWZvdXIub2xkc3R5bGUQZm91ci50YWJvbGRzdHlsZQpmb3VyZmlmdGhzCWdyYXZlLmNhcBFndWlsbGVtb3RsZWZ0LmNhcBJndWlsbGVtb3RyaWdodC5jYXARZ3VpbHNpbmdsbGVmdC5jYXASZ3VpbHNpbmdscmlnaHQuY2FwCmguc3VwZXJpb3IQaHVuZ2FydW1sYXV0LmNhcApoeXBoZW4uY2FwEmh5cGhlbi5kZW5vbWluYXRvcg9oeXBoZW4uaW5mZXJpb3IQaHlwaGVuLm51bWVyYXRvcg9oeXBoZW4uc3VwZXJpb3IKaS5zdXBlcmlvcgppZG90YWNjZW50Cmwuc3VwZXJpb3IKbS5zdXBlcmlvcgptYWNyb24uY2FwEG5pbmUuZGVub21pbmF0b3IObmluZS5udW1lcmF0b3INbmluZS5vbGRzdHlsZRBuaW5lLnRhYm9sZHN0eWxlE251bWJlcnNpZ24ub2xkc3R5bGUKby5zdXBlcmlvcgpvZ29uZWsuY2FwD29uZS5kZW5vbWluYXRvcg1vbmUubnVtZXJhdG9yDG9uZS5vbGRzdHlsZQ9vbmUudGFib2xkc3R5bGUIb25lZmlmdGgNcGFyZW5sZWZ0LmNhcBVwYXJlbmxlZnQuZGVub21pbmF0b3ITcGFyZW5sZWZ0Lm51bWVyYXRvcg5wYXJlbnJpZ2h0LmNhcBZwYXJlbnJpZ2h0LmRlbm9taW5hdG9yFHBhcmVucmlnaHQubnVtZXJhdG9yEHBlcmNlbnQub2xkc3R5bGUScGVyaW9kLmRlbm9taW5hdG9yD3BlcmlvZC5pbmZlcmlvchBwZXJpb2QubnVtZXJhdG9yD3BlcmlvZC5zdXBlcmlvchJwZXJpb2RjZW50ZXJlZC5jYXAUcGVydGhvdXNhbmQub2xkc3R5bGUQcXVlc3Rpb25kb3duLmNhcApyLnN1cGVyaW9yCHJpbmcuY2FwCnMuc3VwZXJpb3IRc2V2ZW4uZGVub21pbmF0b3IPc2V2ZW4ubnVtZXJhdG9yDnNldmVuLm9sZHN0eWxlEXNldmVuLnRhYm9sZHN0eWxlD3NpeC5kZW5vbWluYXRvcg1zaXgubnVtZXJhdG9yDHNpeC5vbGRzdHlsZQ9zaXgudGFib2xkc3R5bGUUc3RlcmxpbmcuZGVub21pbmF0b3IRc3RlcmxpbmcuaW5mZXJpb3ISc3RlcmxpbmcubnVtZXJhdG9yEXN0ZXJsaW5nLm9sZHN0eWxlEXN0ZXJsaW5nLnN1cGVyaW9yCnQuc3VwZXJpb3IRdGhyZWUuZGVub21pbmF0b3IPdGhyZWUubnVtZXJhdG9yDnRocmVlLm9sZHN0eWxlEXRocmVlLnRhYm9sZHN0eWxlC3RocmVlZmlmdGhzCXRpbGRlLmNhcA90d28uZGVub21pbmF0b3INdHdvLm51bWVyYXRvcgx0d28ub2xkc3R5bGUPdHdvLnRhYm9sZHN0eWxlCXR3b2ZpZnRocw95ZW4uZGVub21pbmF0b3IMeWVuLmluZmVyaW9yDXllbi5udW1lcmF0b3IMeWVuLm9sZHN0eWxlDHllbi5zdXBlcmlvchB6ZXJvLmRlbm9taW5hdG9yDnplcm8ubnVtZXJhdG9yDXplcm8ub2xkc3R5bGUQemVyby50YWJvbGRzdHlsZQhhY3V0ZS5zYwhicmV2ZS5zYwhjYXJvbi5zYwpjZWRpbGxhLnNjDWNpcmN1bWZsZXguc2MOY29tbWFhY2NlbnQuc2MLZGllcmVzaXMuc2MMZG90YWNjZW50LnNjCGdyYXZlLnNjD2h1bmdhcnVtbGF1dC5zYwltYWNyb24uc2MJb2dvbmVrLnNjB3Jpbmcuc2MIdGlsZGUuc2MEYS5zYwRiLnNjBGMuc2MEZC5zYwRlLnNjBGYuc2MEZy5zYwRoLnNjBGkuc2MEai5zYwRrLnNjBGwuc2MEbS5zYwRuLnNjBG8uc2MEcC5zYwRxLnNjBHIuc2MEcy5zYwR0LnNjBHUuc2MEdi5zYwR3LnNjBHguc2MEeS5zYwR6LnNjDGFtcGVyc2FuZC5zYwZldGguc2MJbHNsYXNoLnNjCXNjYXJvbi5zYwl5YWN1dGUuc2MIdGhvcm4uc2MJemNhcm9uLnNjBWFlLnNjCW9zbGFzaC5zYwVvZS5zYwx5ZGllcmVzaXMuc2MGZl9pLnNjBmZfbC5zYwlleGNsYW0uc2MLcXVlc3Rpb24uc2MNZXhjbGFtZG93bi5zYw9xdWVzdGlvbmRvd24uc2MNZ2VybWFuZGJscy5zYwlhYWN1dGUuc2MJYWdyYXZlLnNjDmFjaXJjdW1mbGV4LnNjDGFkaWVyZXNpcy5zYwlhdGlsZGUuc2MIYXJpbmcuc2MLY2NlZGlsbGEuc2MJZWFjdXRlLnNjCWVncmF2ZS5zYw5lY2lyY3VtZmxleC5zYwxlZGllcmVzaXMuc2MJaWFjdXRlLnNjCWlncmF2ZS5zYw5pY2lyY3VtZmxleC5zYwxpZGllcmVzaXMuc2MJbnRpbGRlLnNjCW9hY3V0ZS5zYwlvZ3JhdmUuc2MOb2NpcmN1bWZsZXguc2MMb2RpZXJlc2lzLnNjCW90aWxkZS5zYwl1YWN1dGUuc2MJdWdyYXZlLnNjDnVjaXJjdW1mbGV4LnNjDHVkaWVyZXNpcy5zYwphbWFjcm9uLnNjCWFicmV2ZS5zYwphb2dvbmVrLnNjCWNhY3V0ZS5zYw5jY2lyY3VtZmxleC5zYw1jZG90YWNjZW50LnNjCWNjYXJvbi5zYwlkY2Fyb24uc2MJZGNyb2F0LnNjCmVtYWNyb24uc2MJZWJyZXZlLnNjDWVkb3RhY2NlbnQuc2MKZW9nb25lay5zYwllY2Fyb24uc2MOZ2NpcmN1bWZsZXguc2MJZ2JyZXZlLnNjDWdkb3RhY2NlbnQuc2MPZ2NvbW1hYWNjZW50LnNjB2hiYXIuc2MOaGNpcmN1bWZsZXguc2MJaXRpbGRlLnNjCmltYWNyb24uc2MJaWJyZXZlLnNjCmlvZ29uZWsuc2MNaWRvdGFjY2VudC5zYwVpai5zYw5qY2lyY3VtZmxleC5zYw9rY29tbWFhY2NlbnQuc2MJbGFjdXRlLnNjD2xjb21tYWFjY2VudC5zYwlsY2Fyb24uc2MHbGRvdC5zYwluYWN1dGUuc2MPbmNvbW1hYWNjZW50LnNjCW5jYXJvbi5zYwZlbmcuc2MKb21hY3Jvbi5zYwlvYnJldmUuc2MQb2h1bmdhcnVtbGF1dC5zYwlyYWN1dGUuc2MPcmNvbW1hYWNjZW50LnNjCXJjYXJvbi5zYwlzYWN1dGUuc2MOc2NpcmN1bWZsZXguc2MLc2NlZGlsbGEuc2MKdW5pMDE2My5zYwl0Y2Fyb24uc2MHdGJhci5zYwl1dGlsZGUuc2MKdW1hY3Jvbi5zYwl1YnJldmUuc2MIdXJpbmcuc2MQdWh1bmdhcnVtbGF1dC5zYwp1b2dvbmVrLnNjCXdhY3V0ZS5zYw53Y2lyY3VtZmxleC5zYwx3ZGllcmVzaXMuc2MJd2dyYXZlLnNjDnljaXJjdW1mbGV4LnNjCXlncmF2ZS5zYwl6YWN1dGUuc2MNemRvdGFjY2VudC5zYw1hcmluZ2FjdXRlLnNjCmFlYWN1dGUuc2MOb3NsYXNoYWN1dGUuc2MKdW5pMDIxOS5zYwp1bmkwMjFCLnNjD2tncmVlbmxhbmRpYy5zYwtkb3RsZXNzaS5zYwt6ZXJvLmZpdHRlZApvbmUuZml0dGVkCnR3by5maXR0ZWQMdGhyZWUuZml0dGVkC2ZvdXIuZml0dGVkC2ZpdmUuZml0dGVkCnNpeC5maXR0ZWQMc2V2ZW4uZml0dGVkDGVpZ2h0LmZpdHRlZAtuaW5lLmZpdHRlZAAAAAAAAf//AAIAAQAAAAwAAACmAK4AAgAZAAMACQABAAoACgACAAsAfgABAH8AgQACAIIA9AABAPUA9gACAPcBCwABAQwBDAACAQ0BbQABAW4BbgACAW8BjAABAY0BkgACAZMBqgABAasBrwACAbAB3wABAeAB5wACAegB9AABAfUB9QACAfYCEQABAhICEgACAhMCNQABAjYCNgACAjcCOwABAjwCPAACAj0C5wABAAQAAAACAAAAAQAAAAEAAAAAAAEAAAAKAQYCBgABbGF0bgAIAC4AB0FGSyAAVEFaRSAAfENSVCAAfE1PTCAApE5MRCAAzFJPTSAApFRSSyAAfAAA//8AEAAAAAEAAgADAAQABQAGAAsADAANAA4ADwAQABEAEgATAAD//wARAAAAAQACAAMABAAFAAYABwALAAwADQAOAA8AEAARABIAEwAA//8AEQAAAAEAAgADAAQABQAGAAgACwAMAA0ADgAPABAAEQASABMAAP//ABEAAAABAAIAAwAEAAUABgAJAAsADAANAA4ADwAQABEAEgATAAD//wARAAAAAQACAAMABAAFAAYACgALAAwADQAOAA8AEAARABIAEwAUYzJzYwB6Y2FzZQCAZG5vbQCGZnJhYwCOaGlzdACabGlnYQCgbG51bQCmbG9jbACsbG9jbACybG9jbAC4bG9jbAC+bnVtcgDEb251bQDMb3JkbgDScG51bQDYc2FsdADec2luZgDkc21jcADsc3VwcwDydG51bQD6AAAAAQAWAAAAAQASAAAAAgAIABAAAAAEAAsADAANAA4AAAABABMAAAABABcAAAABAAUAAAABAAMAAAABAAAAAAABAAEAAAABAAIAAAACAAgADwAAAAEABwAAAAEAEQAAAAEABgAAAAEAFAAAAAIACAAKAAAAAQAVAAAAAgAIAAkAAAABAAQAGQA0ADwARABMAFQAXABkAGwAdAB8AIQAjACUAJwApACuALYAvgDGAM4A1gDeAOYA7gD2AAEAAAABAMoAAQAAAAEAzgAEAAAAAQDgAAQAAAABAP4AAQAAAAEBRgABAAAAAQGYAAEAAAABAeoAAQAAAAECPAABAAAAAQKoAAEAAAABAs4AAQAAAAEDnAABAAAAAQRqAAQAAAABBG4AAQAAAAEGYAAGAAAAAgZ8BtIAAQAAAAEHLAABAAAAAQf6AAEAAAABCMgAAQAAAAEJAgAGAAAAAQtYAAEAAAABDHIAAQAAAAEMdgABAAAAAQ6oAAQAAAABELYAAQAAAAERMgABAAYBtQABAAEATgACAA4ABAFKAUsBTAFNAAEABAEhASIBJQEmAAEAHgACAAoAFAABAAQA9QACAC8AAQAEAPYAAgBPAAEAAgAuAE4AAQBCAAUAEAAaACQALgA4AAEABAEMAAIAUwABAAQA9QACAC8AAQAEAPYAAgBPAAEABAEMAAIAUwABAAQBDAACAFMAAQAFAAwALgBOAWUBwQACAC4AFAHbAesB9AIKAhECJwIrAjUCOwJFABUAFgAXABgAGQAaABsAHAAdAB4AAQAUAdoB6gHzAgkCEAImAioCNAI6AkQC3gLfAuAC4QLiAuMC5ALlAuYC5wACAC4AFALmAB0C4wAaAuIAGQLnAB4C3wAWAuUAHALkABsC4QAYAuAAFwLeABUAAQAUAdoB2wHqAesB8wH0AgkCCgIQAhECJgInAioCKwI0AjUCOgI7AkQCRQACAC4AFALeAt8C4ALhAuIC4wLkAuUC5gLnAdoB6gHzAgkCEAImAioCNAI6AkQAAQAUABUAFgAXABgAGQAaABsAHAAdAB4B2wHrAfQCCgIRAicCKwI1AjsCRQACAEAAHQILAdMCGQJFAhECOwI1AfQB6wIrAicB2wIKAccCLwJAAe8CHwG0AkQCEAI6AjQB8wHqAioCJgHaAgkAAgAIAAgACgAAABUAHgADAGUAZgANAGgAaAAPAUMBQwAQAW4BbgARAYgBiAASAt4C5wATAAIAGAAJAYgAZQAJAUMACAAKAW4AZgBoAAEACQG0AccB0wHvAgsCGQIfAi8CQAACAGwAMwHUAXkBegHNAgECHQFyAHwAdQB2AXMBdAF1AXYBdwF4AcgCMAJBAfABtQF3AXcBdAF0AXMBcwF4AXgAfAB8AXYBdgF1AXUAdgB2AHUAdQFyAXIBcgB8AHUAdgFzAXQBdQF2AXcBeAABADMACQANAA4AEQASABMAFQAWABcAGAAZABoAGwAcAB0AHgBlAGYAaAFDAYgB2gHbAeoB6wHzAfQCCQIKAhACEQImAicCKgIrAjQCNQI6AjsCRAJFAt4C3wLgAuEC4gLjAuQC5QLmAucAAgBsADMB0QGGAYcBywH/AhsBfAF9AX4BfwGAAYEBggGDAYQBhQHFAi0CPgHtAbIBhAGEAYEBgQGAAYABhQGFAX0BfQGDAYMBggGCAX8BfwF+AX4BfAF8AXwBfQF+AX8BgAGBAYIBgwGEAYUAAQAzAAkADQAOABEAEgATABUAFgAXABgAGQAaABsAHAAdAB4AZQBmAGgBQwGIAdoB2wHqAesB8wH0AgkCCgIQAhECJgInAioCKwI0AjUCOgI7AkQCRQLeAt8C4ALhAuIC4wLkAuUC5gLnAAEABgFdAAEAAQAUAAEB6gAHABQAWADwAS4BigGqAcoABgAOABgAIgAsADQAPAFuAAQBcQAVABUBbgAEABQAFQAVAW4ABAGgABUAFQAKAAMBcQAVAAoAAwAUABUACgADAaAAFQAPACAAKAAwADgAQABIAFAAWABgAGgAcAB4AIAAiACQAhIAAwFxABoCEgADABQAGgISAAMBoAAaAY8AAwFxAB0BjwADABQAHQGPAAMBoAAdAY0AAwFxABgBjQADABQAGAGNAAMBoAAYAIAAAwFxABcAgAADABQAFwCAAAMBoAAXAH8AAwFxABkAfwADABQAGQB/AAMBoAAZAAYADgAWAB4AJgAuADYCPAADAXEAGgI8AAMAFAAaAjwAAwGgABoBjgADAXEAGAGOAAMAFAAYAY4AAwGgABgACQAUABwAJAAsADQAPABEAEwAVAI2AAMBcQAaAjYAAwAUABoCNgADAaAAGgGQAAMBcQAdAZAAAwAUAB0BkAADAaAAHQCBAAMBcQAZAIEAAwAUABkAgQADAaAAGQADAAgAEAAYAfUAAwFxABoB9QADABQAGgH1AAMBoAAaAAMACAAQABgBkQADAXEAHQGRAAMAFAAdAZEAAwGgAB0AAwAIABAAGAGSAAMBcQAdAZIAAwAUAB0BkgADAaAAHQACAAIAFQAaAAAAHAAcAAYAAgAaAAoCQwIPAjkCMwHyAekCKQIlAdkCCAACAAEAFQAeAAAAAwABABwAAQASAAAAAQAAABgAAgABABUAHgAAAAEAGwAKABQAfwCAAIEBbgFxAY0BjgGPAZABkQGSAdgB6AHxAfUCBwIOAhICJAIoAjICNgI4AjwCQgADAAEAKgABABIAAAABAAAAGAABAAoB2QHpAfICCAIPAiUCKQIzAjkCQwABABsACgAUAH8AgACBAW4BcQGNAY4BjwGQAZEBkgHYAegB8QH1AgcCDgISAiQCKAIyAjYCOAI8AkIAAgBsADMB0gIVAhgBzAIAAhwCQwIPAjkCMwHyAekCKQIlAdkCCAHGAi4CPwHuAbMB2QHZAekB6QHyAfICCAIIAg8CDwIlAiUCKQIpAjMCMwI5AjkCQwJDAkMCDwI5AjMB8gHpAikCJQHZAggAAQAzAAkADQAOABEAEgATABUAFgAXABgAGQAaABsAHAAdAB4AZQBmAGgBQwGIAdoB2wHqAesB8wH0AgkCCgIQAhECJgInAioCKwI0AjUCOgI7AkQCRQLeAt8C4ALhAuIC4wLkAuUC5gLnAAIAbAAzAdACFAIXAcoB/gIaAkICDgI4AjIB8QHoAigCJAHYAgcBxAIsAj0B7AGxAdgB2AHoAegB8QHxAgcCBwIOAg4CJAIkAigCKAIyAjICOAI4AkICQgJCAg4COAIyAfEB6AIoAiQB2AIHAAEAMwAJAA0ADgARABIAEwAVABYAFwAYABkAGgAbABwAHQAeAGUAZgBoAUMBiAHaAdsB6gHrAfMB9AIJAgoCEAIRAiYCJwIqAisCNAI1AjoCOwJEAkUC3gLfAuAC4QLiAuMC5ALlAuYC5wACACIADgBtAboBzgHWAfsCAgIEAgUBewB9AiECIwIxAdcAAQAOAEYARwBJAEoATQBOAFEAUgBTAFQAVwBYAFkAqwACATAAlQITAhYB/QG9Ab4AJgAnACgAKQAqACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ADoAOwA8AD0APgA/AbsBvAHfAfcCHgH4AiABtwCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmwCcAJ0AngCfAKAAoQE7AMMAxQDHAMkAywDNAM8A0QDTANUA1wDZANsA3QDfAOEA4wDlAOcA6QDrAO0A7wDxAbAA9QD3APkBtgD8AP4BAAECAQQBBgEIAQoBDQEPAREBEwEVARcBGQEbAR0BHwEhASMBJQEnASkBKwEtAS8BMQEzATUBNwE5ATwBPgFAADgBRAFGAUgBSgFMAVoBXAFeAWAB3QHcAcAB+QH6APMAAQCVAA0ADgASAEAAQgBGAEcASABJAEoASwBMAE0ATgBPAFAAUQBSAFMAVABVAFYAVwBYAFkAWgBbAFwAXQBeAF8AYABiAGQAbgB6AH4AggCiAKMApAClAKYApwCoAKkAqgCrAKwArQCuAK8AsACxALIAswC0ALUAtgC3ALgAuQC7ALwAvQC+AL8AwADBAMIAxADGAMgAygDMAM4A0ADSANQA1gDYANoA3ADeAOAA4gDkAOYA6ADqAOwA7gDwAPIA9AD2APgA+gD7AP0A/wEBAQMBBQEHAQkBCwEOARABEgEUARYBGAEaARwBHgEgASIBJAEmASgBKgEsAS4BMAEyATQBNgE4AToBPQE/AUEBQgFFAUcBSQFLAU0BWwFdAV8BYQFiAWMBbAFvAXACAwADAAAAAQASAAEAGAABAAAAGAABAAEAWAABAIMARgBHAEgASQBKAEsATABNAE4ATwBQAFEAUgBTAFQAVQBWAFcAWABZAFoAWwBcAF0AXgBfAKIAowCkAKUApgCnAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALsAvAC9AL4AvwDAAMEAwgDEAMYAyADKAMwAzgDQANIA1ADWANgA2gDcAN4A4ADiAOQA5gDoAOoA7ADuAPAA8gD0APYA+AD6APsA/QD/AQEBAwEFAQcBCQELAQ4BEAESARQBFgEYARoBHAEeASABIgEkASYBKAEqASwBLgEwATIBNAE2ATgBOgE9AT8BQQFFAUcBSQFLAU0BWwFdAV8BYQIDAAEABgBSAAEAAQGMAAIBHgCMAnsCCwIZAm4CfAJUAlUCVgJXAlgCWQJaAlsCXAJdAl4CXwJgAmECYgJjAmQCZQJmAmcCaAJpAmoCawJsAm0CfQJ+An8CgQKAAoIChAKDAoUCdQKGAogChwKJAooCjAKLAo0CjgJvAo8CkQKQApIClAKTAnYClgKVApcCmAJyAnMCeAKZApoCmwKcAp0CngKfAqACoQKiAqMCpAKlAqYCpwKoAqkCqgKsAqsCrQKuAq8CsALdArICswK0AtwCtQK2ArcCuAJwArkCugK7ArwCvQK+Ar8CdwLAAsECwgLDAsQCxQJxAsYCxwLIAskCygLLAswCzQLOAtAC0wLVAtYCdAJmAtcC2ALZAtoC2wLSAs8C0QLUAh8CsQABAIwABgAIAAoACwAkAEYARwBIAEkASgBLAEwATQBOAE8AUABRAFIAUwBUAFUAVgBXAFgAWQBaAFsAXABdAF4AXwBkAIIAogCjAKQApQCmAKcAqACpAKoAqwCsAK0ArgCvALAAsQCyALMAtAC1ALYAtwC4ALkAuwC8AL0AvgC/AMAAwQDCAMQAxgDIAMoAzADOANAA0gDUANYA2ADaANwA3gDgAOIA5ADmAOgA6gDsAO4A8ADyAPQA9gD4APoA+wD9AP8BAQEDAQUBBwEJAQsBDgEQARIBFAEWARgBGgEcAR4BIAEiASQBJgEoASoBLAEuATABMgE0ATYBOAE6AT0BPwFBAUIBRQFHAUkBSwFNAVsBXQFfAWEBbgIDAAIBDACDAlQCVQJWAlcCWAJZAloCWwJcAl0CXgJfAmACYQJiAmMCZAJlAmYCZwJoAmkCagJrAmwCbQKBAoACggKEAoMChQJ1AoYCiAKHAokCigKMAosCjQKOAm8CjwKRApACkgKUApMCdgKWApUClwKYAnICcwKZApoCmwKcAp0CngKfAqACoQKiAqMCpAKlAqYCpwKoAqkCqgKsAqsCrQKuAq8CsAKxArICswK0ArUCtgK3ArgCcAK5AroCuwK8Ar0CvgK/AncCwALBAsICwwLEAsUCcQLGAscCyALJAsoCywLMAs0CzgLQAtMCeALVAtYCdALXAtgC2QLaAtsC0gLPAtEC1ALdAtwCfwABAIMAJgAnACgAKQAqACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ADoAOwA8AD0APgA/AIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCbAJwAnQCeAJ8AoAChAMMAxQDHAMkAywDNAM8A0QDTANUA1wDZANsA3QDfAOEA4wDlAOcA6QDrAO0A7wDxAPMA9QD3APkA/AD+AQABAgEEAQYBCAEKAQ0BDwERARMBFQEXARkBGwEdAR8BIQEjASUBJwEpASsBLQEvATEBMwE1ATcBOQE7ATwBPgFAAUQBRgFIAUoBTAFaAVwBXgFgAbABtgG3AAEAfgABAAgADQAcACQALAA0ADwARABMAFIAWABeAGQAagBwAeQAAwBLAFAB4wADAEsATwHiAAMASwBNAeEAAwBLAEcBrwADAEsAUQGuAAMASwBOAecAAgBQAeAAAgBHAeYAAgBPAeUAAgBNAa0AAgBRAawAAgBOAasAAgBLAAEAAQBLAAIAMAAVAkICDgI4AjIB8QHoAigCJAHYAgcBQgHYAegB8QIHAg4CJAIoAjICOAJCAAEAFQAVABYAFwAYABkAGgAbABwAHQAeAFgB2QHpAfICCAIPAiUCKQIzAjkCQwABAAAACgBKAGQAAWxhdG4ACAAuAAdBRksgAC5BWkUgAC5DUlQgAC5NT0wgAC5OTEQgAC5ST00gAC5UUksgAC4AAP//AAIAAAABAAJjcHNwAA5rZXJuABQAAAABAAAAAAABAAEAAgAGAA4AAQAAAAEAFgACAAAABAEiF+4o6jviAAEACgAFAAUACgABAIMAJgAnACgAKQAqACsALAAtAC4ALwAwADEAMgAzADQANQA2ADcAOAA5ADoAOwA8AD0APgA/AIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCbAJwAnQCeAJ8AoAChAMMAxQDHAMkAywDNAM8A0QDTANUA1wDZANsA3QDfAOEA4wDlAOcA6QDrAO0A7wDxAPMA9QD3APkA/AD+AQABAgEEAQYBCAEKAQ0BDwERARMBFQEXARkBGwEdAR8BIQEjASUBJwEpASsBLQEvATEBMwE1ATcBOQE7ATwBPgFAAUQBRgFIAUoBTAFaAVwBXgFgAbABtgG3AAEUggAEAAABjAMiAygDIgMuA1ADVgN4A34DiAOOA5gD1gQcBGIEwAUeBXwFsgYIBmIGzAceB1AHxgg8CJYI3AlCCXgJvgqICvILdAwODGANBgMuA1ANQA1ODVgNYg2IDeINQA3wDfYOCA1ADUANTg1ODkIOTA5eDmQOZA5qDmQOdAMuA1AOeg6ADpIOqAOYA5gDmAOYA5gDmA6+BBwEwATABMAEwAWyBbIFsgWyCDwFsgg8CDwIPAg8CDwIPAqICogKiAqIDGAIPA8gDUANQA1ADUANQA1ADVgPJg8sDzYNQA1ODU4NTg1ODU4NTg5kDU4OZAOYDUADmA1AA5gNQAQcDVgEHA1YBBwNWAQcDVgIPA1iCDwNYgTABMAEwATABMAFfA3iBXwN4gV8DeIFfA3iBbINQAWyDUAFsgWyBbIFsgqICogN8AbMDfYN9gceDggHHg4IBx4OCAceBx4Fsg1ABbINQAWyDUANQAWyDUAIPA1OCDwNTgg8DU4PPAlCDkwJQg5MCUIOTAl4Dl4JeA5eCXgOXgl4Dl4Jvgm+Cb4KiAqICogKiAqICogK8g5kDGAOZAxgDQYOdA0GDnQNBg50D54DmA1ABMAIPA1OCXgOXgm+CvIOZAryDmQK8g5kDGAOZANWA1YPxA/qD/APxA/+EAgQGhAkA5gNiA4IDggFshAuECQQOBA+ED4QJBBIEDgQOBBSDfAN8BBwEIIQoBCmECQQJBAkECQQrBDKEDgQ0BA+EPoRBBEqEUwRVhF8EZ4RpBHGEeAR5hIAEhYSIBI6EjoSUBJmEmwSOhI6EnYSkBKWErQSxhLQEtYSZhJ2EmwSxhJmEgASdhIAEmYSOhJsEsYR4BIAEgASABIAEjoSOhI6EjoSOhJ2EnYSdhJ2EnYS1hLWEtYS1hHgEeAR4BHgEnYSdhIAEgASABIAEgAS7BI6EjoSOhI6EtYSZhJsEmwSbBJsEjoSOhI6EjoSdhJ2EnYStBK0ErQSxhLGEsYS0BLQEtAS1hLWEtYS1hLWEtYSZhJmEgASdhLGEtATBhMsE1YTfBOeE8QT7hQYFDoUXAABAhH/ywABAED/5AAIACQAGwA8AB4AXgAfAGoABgHqABQB6wAVAjQAHgI1ABgAAQAFAAEACAA8/+IB2gAoAeoACgIJAB4CEAAKAib/+wIqAB4CRAAoAAECOgAQAAIAPAAfAGD/zgABAkQAPAACABH/ywAgABIADwAUAD4AJP/tADz/8wBb//sAeP/2AJMADgDTAA4A6QAUAQQACAEp/84B9//0Am8AFAJwABQCoQAUAqsACgARADz/6QBe//AAkwAOAK8AAwCxAAYA0wAOAOkACgDqAAYA7AAMAO4AAQEEABoBBQANASoACgJvABUCcAAXAqEAFQKrAAoAEQAkAAoAPP/lAF7/2ACvAAYAsQAVALIAEgDsAB0A7gAUAPAACwD4AAMB9//wAmv/4gJw//YCjQAeAq0AHgKuAA8CrwAXABcAPP/9AE8AQABbAAkAkwAKAK8AFwCxABQAsgAFANMACgDpAAoA6gAKAOwADwDuAAIA8AAKAPgACwEEAAoBBQALASn/7AEqAAsCbwAeAnAAFAKhAB4CqwAUAsgACwAXACQACgA8//QATP/0AFv/2wBe/+IAeP/2AK8ABACxAAoAsgAKAOwAKwDuAA0A8AATAPgAFAFZ/+wCbwAKAnAAFAKNABQCjgAMAqEACgKrABQCrQAlAq4ACgKvABQAFwAU/8UAPP/5AFv/6gBe/+QArwAGALD/6QCxABUAsgAwAOoADgDsAC0A7gAgAPAAHAD0/90A+AALASr/7AJr/+8CjAAfAo0AHgKOACICoQAMAq0ALgKuAB4CrwAeAA0APP/3AF7/7ACTAAoAsf/9ANMACgEEABYBBQANASoADgJvABQCcAAUAqEAFAKrABQCrQAUABUAFAAQAEz/9gBb//UAkwAKAK8ACQCxAAkAsgAGANMACgDpAAoA6gAKAQQACgEFAA4BKgADAVn/6gJvABQCcAAUAqEAFAKrABQCrQAKAq4ADgKvABAAFgAUABAATP/2AFv/9QCTAAoArwAJALEACQCyAAYA0wAKAOkACgDqAAoBBAAKAQUABwEqAAMBWf/qAm8AFAJwABQCjQAPAqEAFAKrABQCrQATAq4ADgKvAA4AGgCTAAoArwAPALEACgCyAAoAtP/rANMADwDpAA8A6gANAOwADwDuAA0A+AANAQQACgEFAA0BKgAKAmv/8wJvABQCcAAUAowAFAKNABgCjgAaAqEAFAKrABQCrQAXAq4AFAKvABUCyAADABQAPP/1AEz/7wBP//8AW//fAF7/6wCvAAYAsQAKALIAIgDsAB4A7gAUAPAAKAEEAAoB9//8Afn/2AKMAAoCjQAUAo4AEwKtAB4CrgAUAq8AHgAMAAX/2AAk/+IAPP+0AEf/8wBP//YAW/+9AF7/wQC7//MBKf+oAff/5QH4//4B+f/nAB0APP/2AFv/7ABe//YAkwAKAKD/8gCvABAAsQAKALIAAQC7AAMA0wAKAOkACgDqAAoA7AAUAO4ACgDwAAoA+AALAQQACwEFAAoBKgADAm8AFAJwABQCjAALAo0AFAKOABQCoQAUAqsAFAKtABUCrgAUAq8AEgAdABQAEABM//YAW//1AJMACgCvABEAsQAFALIAHAC7AAUA0wAKAOkACgDqAAoA7AAKAO4ADQDwAA0A+AAKAQQACgEFAAoBKgADAVn/6gJvABQCcAAUAowACwKNABICjgARAqEAFAKrABQCrQASAq4AEQKvABAAFgA8//0ATwBAAFsACQCTAAoArwAKALEAAwCyAAUA0wAKAOkACgDqAAoA7AAPAO4ACgDwAAoBBAAKAQUAFAEp/+wBKgAKAm8AFAJwABUCoQAUAqsAFALIAAsAEQAk/+wAMv/0ADz/9gBI/+IATP/OAF7/+ACo/9oAr//9ALEAFACy//gA7AAQAPgACgJr/+wCjQAQAqsAAwKtAB0Crv/5ABkAEQAzADMABwA8//0ATwBAAFsACQCTAAoArwAKALEAAwCyAAUA0wAKAOkACgDqAAoA7AAPAO4ACgDwAAoBBAAWAQUAFAEp/+wBKgAKAbwAFAJvACECcAAVAqEAIQKrACACyAALAA0APP/xAEz//gBe//gAsQARALIADADp//8A7AATAQQAAQEFAAoBKf/UASoACgH3/+IB+f/tABEAPP/5AFv/7QBe/+IArwAKALEACQCyAAUAuwAFAOwAEAEEAB4BBQAUASoACgJr/+wCbwAUAnAAFgKhABQCqwANAq0AFAAyAAYACgAkABQAMv/kAEz/rwBb/7EAXv+/AI//7gCR/+4Akv/wAKb/yQCn/7oAq/+9AK3/uQCu/7QArwAPALD/5ACxACIAsgAjALT/uAC1/7gAt/+4ALj/uAC5/8UAwv+2ANb/zgDY/84A3v/OAOL/uQDqAAwA7AA2AO4AIgDwACQA+AAgAQX/9gEc/80BJP+4ASr/xAFh/7sBb/+7AXD/0gH3/+4B+f/wAmv/zgKMAAQCjQAQAo4ADgKtADICrgAOAq8AHgKx/9wAGgCTAA8ArwAIALEABQCyAAkAtP/rANMADwDpAA8A6gANAOwADwDuAA0A+AANAQQADwEFAA0BKgAKAmv/8wJvABQCcAAUAowAFAKNABgCjgAaAqEAFAKrABQCrQAXAq4AFAKvABUCyAADACAAIP/OACQAJwAy//UAPAAKAE//+wBb//cAXv/xAKP/0wCm/9MAp//hAK8AMwCw//0AsQBGALIAQgDqABEA7ABEAO4AQwDwADkA+AA2ASr/7AFv/9YBcAACAff/8gH5/+4Ca//sAm//5AKMAB8CjQAMAo4AIAKh/+QCrQAyAq4AIAAmACD/uwAkACcAMv/1ADwABABP/+cAW//wAF7/8QCj/90Apv/dAKf/3QCr/7cArf/IAK7/qgCvABwAsP/4ALEAGgCyACkAv//mAMD/zQDq//IA7AAxAO4AFgDwACEA+AAVASr/7AFv/9cBcAACAff/8gH5/+4Ca//sAm//5AKMAB8CjQAoAo4AIAKh/+QCrQAyAq4AIAKvACgAFAA8//YATP/0AE///ABb/94AXv/KAK8ABACw//UAsQAFALIACwDsABQA7gAOAPAAEQH3/9sB+P/lAfn/3wKMABUCjgAUAq0AFAKuABECrwAUACkAIP/FACQAHAAy/+sAR///AE//4wBb/88AXv+wAHj/mgCj/8wApv/NAKf/rQCr/7gArP/GAK8AJACw/98AsQAoALIAPAC1/6QAuP+cAOoAAQDsADYA7gAsAPAAMwD0/74A+AAXASr/xQFZ/6gBb//OAXD/7QH3/9kB+P/mAfn/2gJr/9cCi//YAowAFAKNAAoCjgAoAq0AMgKuAB4CrwAoArH/6gAOADz/9gBP//sAW//QAF7/zQCvAAgAsQADALIACwDsABQA7gAGAPAABgD4AAcB9//tAfn/9QJwABQAAwAGAAMAFAA4ACT/6QACACT/5gFk/+wAAgBQ//0AWwAFAAkArwAKALEAEQCyABAA6gAHAOwAFADuABQA+AALAQUACgEqAAYAFgAGADMADABQAA8ATwAR//YAFAAmACQATgAyADEAPABuAE8AAQBbAAgAXgAKAKcABwCvADwAsQA3ALIAagDqABkA7ABOAO4APQDwAFsA9AADAPgALQEFAAMAAwARADwAFAA0AFsAAQABAE8ABAAEAE///gBb//QAXv//AHj/9AAOAAYAFQAUABwAJAAUAFv/7ACvABEAsQAFALIABQDqAA0A7AAQAO4ABwDwAAsA+AALAQUACQEqAAoAAgAUAAoAW//yAAQAJAAEAE8ACQBeAAMBZQA2AAEAXv/1AAEATP/1AAIAT//+AF7/9gABAF7/7gABADz/2gAEAfMAFAH0ABQCOgAoAjsAHgAFABEACgAgAAoAPP/jAWIAKAFjACgABQAgAAoAMgALADz/4gFiADsBYwA7ABgAJAAKADz/9ABM//QAW//bAF7/4gB4//YArwAEALEACgCyAAoA7AArAO4ADQDwABMA+AAUAQQADgFZ/+wCbwAKAnAAFAKNABQCjgAMAqEACgKrABQCrQAlAq4ACgKvABQAAQAUABYAAQBQAAoAAgBQAAoAUQAWAAEAUQAFABgAJAAKADz/9ABM//QAW//bAF7/4gB4//YArwAEALEACgCyAAoA7AArAO4ADQDwABMA+AAUAQQADQFZ/+wCbwAKAnAAFAKNABQCjgAMAqEACgKrABQCrQAlAq4ACgKvABQACQBHAGsAUQBcAK8AbACxAFUAsgB+AOwAbADuAHMA8AB2APgASwAJABH/rQA8AD8AZP/5AIL/iAHfAAwCIP+mAiYAHwInAAwCawAXAAEAsQBcAAMAPP/MAE8AIAJrACYAAgA8/8wCawAmAAQAMgAUADwAAQFiACgBYwAoAAIBYgAoAWMAKAACAbj//AIj//4AAgIqAAsCKwAdAAEBuP/+AAIAMgAKADwAFwACAjQAAgI1ABMABwHaAAYB6v/2AfP//AIQ//sCJv//AjT/7AI6//QABAHzAAQCCf/7AjT/9QI6AAUABwHzAAkCCf/8Aib/7QIq//8CNP/vAjoAAwJEAAoAAQA8//QAAQA8/+0ABwHz//YCEP/2Aib/6AIqAAoCNP/2Ajr/9QJEAAYAAQI0AB4ACgHa//wB6v/1AfP/8gIJ/+sCEP/7Aib/2gIq//YCNP/aAjr/7AJEAAoAAgG4/+YCI//1AAkB6v/yAfP/vwIJ/+4CEP/7AiYAAQIq/+wCNP/sAjr//wJE//MACAHq//kB8//2Agn//QIQ//YCJv/iAjT/4gI6/+cCRAAKAAIB6gASAesAFAAJAer/+AHz//0CCf/2AhD/8AIm/+YCKv/4AjT/7wI6//kCRP/8AAgB6v/1AfP/9gIJ/+wCEP/iAib/0QIq/+4CNP/yAkT/+wABAjv/9gAIAfP/8wIJAAQCEAACAib/7QIqAA8CNP/vAjr/9wJEACQABgJr/+wCbwAUAnAAFAKhABQCqwAPAsj/2gABAmv/+QAGAmv/4gJvABQCcAAUAqEAFAKrABQCyP/sAAUCaQABAm8AFAJwAAwCoQAUAqsACwACAmv//QJ8AAoABgJr/+wCbwAPAnAADwKhAA8CqwAKAsj/5gAFAmv/5wJvABQCcAASAqEAFAKrABQABQJr//YCbwAPAnAADwKhAA8CqwAPAAECa//+AAICWP/nAmv/9gAGAmv/4gJvAA8CcAAQAqEADwKrAAoCyP/sAAECa//iAAcAEf/7Amv/4gJvAA8CcAAQAqEADwKrAAoCyP/sAAQCbwAUAnAAFAKhABQCqwAUAAICYf/+Amv/6wABAmv/6AAFAmv/9gJvABQCcAAUAqEAFAKrABQABgJhABQCa//nAm8AFAJwABICoQAUAqsAFAAJAt4AJgLg//EC4f/4AuL//ALj//kC5AAWAuX/4gLmABUC5wAUAAoC3gABAt///ALg/+IC4f/wAuL/4QLj/+YC5P/uAuX/7ALm//IC5//yAAkC3v/7At//9QLh//0C4v/IAuP/9wLk/+kC5f/fAub//QLn//oACALf//oC4P/rAuH/2ALi/98C4//nAuT/8gLl/9wC5//0AAkC3gAaAuD/7ALh//sC4gACAuMAAQLkABIC5f/rAuYAGALnAAcACgLe//wC3//yAuD/4ALh/+kC4v/1AuP/4gLk//sC5f/kAuYAAgLn//EACgLeABEC3//6AuD/7ALh/+MC4v/8AuP/7QLkAAUC5f/rAuYACwLn//MACALe/+0C4P/rAuH/6QLi/7wC4//iAuT/6wLm/+wC5//yAAgC4P/xAuH/6QLi//8C4//3AuT//ALl/9oC5gAFAucAAgAJAt4ADALf//8C4P/jAuH/4gLi/+sC4//uAuT//QLl/90C5gAEAAIAYQAHAAcAAAALAA4AAQASABQABQAfAB8ACAAkACQACQAmAEAACgBCAEIAJQBGAEkAJgBLAE0AKgBPAFgALQBbAGAANwBiAGIAPQBkAGQAPgBqAGoAPwBuAG4AQAB+AH4AQQCDAJkAQgCbAKgAWQCqAKoAZwCwALIAaAC0ALkAawC7ALsAcQDAANUAcgDXANcAiADZANkAiQDbANsAigDdAN0AiwDfAOsAjADvAO8AmQDxAPEAmgDzAPMAmwD1APUAnAD3AQIAnQEEAQQAqQEGARUAqgEXASUAugEnAScAyQEpASkAygErASsAywEtAS0AzAEvAS8AzQExATEAzgEzATMAzwE1ATUA0AE3AUIA0QFEAUYA3QFIAUwA4AFaAWcA5QFpAWkA8wFvAXAA9AF7AXsA9gGcAZwA9wGrAasA+AGtAa0A+QGvAbAA+gG0AbQA/AG4AbgA/QG6AbsA/gG9Ab0BAAHOAc4BAQHTAdMBAgHWAdcBAwHaAdoBBQHjAeMBBgHmAeYBBwHqAeoBCAHzAfMBCQH4AfgBCgH6AfsBCwICAgIBDQIEAgUBDgIJAgkBEAILAgwBEQIQAhABEwITAhMBFAIhAiEBFQImAiYBFgIqAioBFwIvAi8BGAI0AjQBGQI6AjoBGgJAAkABGwJEAkQBHAJVAmgBHQJsAmwBMQJvAnIBMgJ1AnoBNgJ/An8BPAKGApgBPQKcAqYBUAKrAqwBWwKuAq4BXQKwArABXgKyAs4BXwLTAtQBfALYAtsBfgLeAucBggABEMwABAAAABYANgBMAHoAtAUeBTAGZgcABwoHSApqDCgMigyKDJwOVg+cD6YPsA/mECQQTgAFAA4AFgBCABYAYgAWAWUAFAFoABQACwB+AAwBZP+DAWX/wgFn/4MBaP/CAXAADAJnAAMCxgADAscAAwLIAAMC2wADAA4AJv/bAIP/2wCE/9sAhf/bAIb/2wCH/9sAiP/bAIn/pgDD/9sAxf/bAMf/2wFE/9sBRv+mAZz/2wEaAA4AHgAR/50AE/+dACb/4AAn//4AKP/2ACn//gAq//4AK//+ACz/9gAt//4ALv/+AC//8wAw//4AMf/+ADL//gAz//4ANP/2ADX//gA2//YAN//+ADj/+AA5//QAOwANAD3/6wA+AAkAP//sAEIAHgBG/9gAR//oAEj/8QBJ//EASv/xAEv/7ABM//EATf/oAE7/9QBP//UAUP/oAFH/6ABS/9IAU//SAFT/8QBV/9IAVv/xAFf/0gBY/+MAWf/2AFr/2QBc/9gAXf/RAF//0gBiAB4AeP/ZAIP/4ACE/+AAhf/gAIb/4ACH/+AAiP/gAIn/rACK//YAi//+AIz//gCN//4Ajv/+AI///gCQ//4Akf/+AJL//gCT//4AlP/+AJX/9gCW//YAl//2AJj/9gCZ//YAm//2AKAACQCh//4Aov/sAKP/2ACk/9gApf/YAKb/2ACn/9gAqP/YAKn/2ACq//EAq//xAKz/8QCt//EArv/xALP/8QC0/9IAtf/xALb/8QC3//EAuP/xALn/8QC7//EAvP/ZAL3/2QC+/9kAv//ZAMD/2ADB/+gAwv/YAMP/4ADE/9gAxf/gAMb/2ADH/+AAyP/YAMn/9gDK//EAy//2AMz/8QDN//YAzv/xAM//9gDQ//EA0f/+ANL/8QDT//4A1P/xANX//gDW//EA1//+ANj/8QDZ//4A2v/xANv//gDc//EA3f/+AN7/8QDf//YA4P/xAOH/9gDi//EA4//2AOT/8QDl//YA5v/xAOf//gDo/+gA6f/+AOv//gDv//4A8f/+APL/9QDz//4A9f/+APb/9QD3//MA+f/+APr/6AD7/9IA/P/+AP3/6AD+//4A///oAQD//gEB/+gBAv/+AQP/6AEE//4BBv/+AQf/0gEI//4BCf/SAQr//gEL/9IBDP/SAQ3//gEO/9IBD//2ARD/8QER//YBEv/xARP/9gEU//EBFf/2ARb/8QEX//4BGP/SARn//gEa/9IBG//+ARz/0gEd//gBHv/jAR//+AEg/+MBIf/4ASL/4wEj//gBJP/jASX/9AEm//YBJ//0ASj/9gEp//QBLP/ZAS7/2QEw/9kBMv/ZATT/2QE2/9kBNwANATj/2AE5AAkBOv/YATsACQE8/+wBPf/SAT7/7AE//9IBQP/sAUH/0gFE/+ABRf/YAUb/rAFH/9gBSP/2AUn/8QFK//gBS//jAUz/9AFN//YBWP/ZAVoADQFb/9gBXAANAV3/2AFeAA0BX//YAWAACQFh/9gBZQAOAWgADgFt/50BnP/gAav/7AGs/+wBrf/sAa7/7AGv/+wBsP/+AbwAFAG+ABQB4P/sAeH/7AHi/+wB4//sAeT/7AHl/+wB5v/sAef/7AIWABQCVP/kAmz/7AJt/+wCcv/sAnT/7AJ1/7ACeP/sAoD/5AKB/+QCgv/kAoP/5AKE/+QChf/kApn/5AKa/+QCm//kAtP/7ALU/+wC1f/sAtb/7ALX/+QC2P+wAAQALwAmAPcAJgG+ACMCFgAjAE0AH/+7ACf/9gAp//YAKv/2ACv/9gAt//YALv/2AC//8QAw//YAMf/2ADP/9gA1//YAN//2AD3/9gBZAA0AXP/0AF//xABu/9sAfgABAIn/tACL//YAjP/2AI3/9gCO//YAj//2AJD/9gCR//YAkv/2AJP/9gCU//YAof/2AML/9ADR//YA0//2ANX/9gDX//YA2f/2ANv/9gDd//YA5//2AOn/9gDr//YA7//2APH/9gDz//YA9f/2APf/8QD5//YA/P/2AP7/9gEA//YBAv/2AQT/9gEG//YBCP/2AQr/9gEN//YBF//2ARn/9gEb//YBJgANASgADQE4//QBOv/0AT3/xAE//8QBQf/EAUb/tAFNAA0BW//0AV3/9AFf//QBYf/0AbD/9gG8AA4BvgAOAhYADgAmAEgAMQBJADEASgAxAEwAMQBUADEAVgAxAKoAMQCrADEArAAxAK0AMQCuADEAswAxALUAMQC2ADEAtwAxALgAMQC5ADEAuwAxAMoAMQDMADEAzgAxANAAMQDSADEA1AAxANYAMQDYADEA2gAxANwAMQDeADEA4AAxAOIAMQDkADEA5gAxARAAMQESADEBFAAxARYAMQFJADEAAgAvACgA9wAoAA8AOf+3ADv/4AA+/8EAoP/BASX/twEn/7cBKf+3ATf/4AE5/8EBO//BAUz/twFa/+ABXP/gAV7/4AFg/8EAyAATABQAHwALACYAIAAnAA0AKAAKACkADQAqAA0AKwANACwACgAtAA0ALgANAC8ADwAwAA0AMQANADIADQAzAA0ANAAKADUADQA2AAoANwANADn/ywA7//MAPv/IAEYAFABHAA8ASAAaAEkAGgBKABoATAAaAE0ADwBOABEATwARAFAADwBRAA8AVAAaAFYAGgBYABcAWwAeAFwAHgBeAB4AgwAgAIQAIACFACAAhgAgAIcAIACIACAAigAKAIsADQCMAA0AjQANAI4ADQCPAA0AkAANAJEADQCSAA0AkwANAJQADQCVAAoAlgAKAJcACgCYAAoAmQAKAJsACgCg/8gAoQANAKMAFACkABQApQAUAKYAFACnABQAqAAUAKkAFACqABoAqwAaAKwAGgCtABoArgAaAK8AEQCwABEAsQARALIAEQCzABoAtQAaALYAGgC3ABoAuAAaALkAGgC7ABoAwAAeAMEADwDCAB4AwwAgAMQAFADFACAAxgAUAMcAIADIABQAyQAKAMoAGgDLAAoAzAAaAM0ACgDOABoAzwAKANAAGgDRAA0A0gAaANMADQDUABoA1QANANYAGgDXAA0A2AAaANkADQDaABoA2wANANwAGgDdAA0A3gAaAN8ACgDgABoA4QAKAOIAGgDjAAoA5AAaAOUACgDmABoA5wANAOgADwDpAA0A6gAPAOsADQDsABEA7gARAO8ADQDwABEA8QANAPIAEQDzAA0A9AARAPUADQD2ABEA9wAPAPgAEQD5AA0A+gAPAPwADQD9AA8A/gANAP8ADwEAAA0BAQAPAQIADQEDAA8BBAANAQYADQEIAA0BCgANAQ0ADQEPAAoBEAAaAREACgESABoBEwAKARQAGgEVAAoBFgAaARcADQEZAA0BGwANAR4AFwEgABcBIgAXASQAFwEl/8sBJ//LASn/ywE3//MBOAAeATn/yAE6AB4BO//IAUQAIAFFABQBRwAUAUgACgFJABoBSwAXAUz/ywFa//MBWwAeAVz/8wFdAB4BXv/zAV8AHgFg/8gBYQAeAW0AFAGcACABsAANAG8AHwAKACYABAAoACkALAApAC8ACgA0ACkANgApADn/xQA7/84APv+7AEYACgBIABcASQAXAEoAFwBMABcAVAAXAFYAFwBYAAUAgwAEAIQABACFAAQAhgAEAIcABACIAAQAigApAJUAKQCWACkAlwApAJgAKQCZACkAmwApAKD/uwCjAAoApAAKAKUACgCmAAoApwAKAKgACgCpAAoAqgAXAKsAFwCsABcArQAXAK4AFwCzABcAtQAXALYAFwC3ABcAuAAXALkAFwC7ABcAwwAEAMQACgDFAAQAxgAKAMcABADIAAoAyQApAMoAFwDLACkAzAAXAM0AKQDOABcAzwApANAAFwDSABcA1AAXANYAFwDYABcA2gAXANwAFwDeABcA3wApAOAAFwDhACkA4gAXAOMAKQDkABcA5QApAOYAFwD3AAoBDwApARAAFwERACkBEgAXARMAKQEUABcBFQApARYAFwEeAAUBIAAFASIABQEkAAUBJf/FASf/xQEp/8UBN//OATn/uwE7/7sBRAAEAUUACgFHAAoBSAApAUkAFwFLAAUBTP/FAVr/zgFc/84BXv/OAWD/uwGcAAQAGAAo/+wALP/sADT/7AA2/+wAiv/sAJX/7ACW/+wAl//sAJj/7ACZ/+wAm//sAMn/7ADL/+wAzf/sAM//7ADf/+wA4f/sAOP/7ADl/+wBD//sARH/7AET/+wBFf/sAUj/7AAEAG4AOwB+ACgBbwA7AXAAKABuACYAMgAoABQALAAUAC8AKwA0ABQANgAUADn/2gA7//YAPv/UAEYADABIABsASQAbAEoAGwBMABsAVAAbAFYAGwBYAAoAgwAyAIQAMgCFADIAhgAyAIcAMgCIADIAigAUAJUAFACWABQAlwAUAJgAFACZABQAmwAUAKD/1ACjAAwApAAMAKUADACmAAwApwAMAKgADACpAAwAqgAbAKsAGwCsABsArQAbAK4AGwCzABsAtQAbALYAGwC3ABsAuAAbALkAGwC7ABsAwwAyAMQADADFADIAxgAMAMcAMgDIAAwAyQAUAMoAGwDLABQAzAAbAM0AFADOABsAzwAUANAAGwDSABsA1AAbANYAGwDYABsA2gAbANwAGwDeABsA3wAUAOAAGwDhABQA4gAbAOMAFADkABsA5QAUAOYAGwD3ACsBDwAUARAAGwERABQBEgAbARMAFAEUABsBFQAUARYAGwEeAAoBIAAKASIACgEkAAoBJf/aASf/2gEp/9oBN//2ATn/1AE7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//QAqv/4AKv/+ACs//gArf/4AK7/+ACv//oAsP/6ALH/+gCy//oAs//4ALX/+AC2//gAt//4ALj/+AC5//gAu//4ALz//gC9//4Avv/+AL///gDE//QAxv/0AMj/9ADK//gAzP/4AM7/+ADQ//gA0v/4ANT/+ADW//gA2P/4ANr/+ADc//gA3v/4AOD/+ADi//gA5P/4AOb/+ADs//oA7v/6APD/+gDy//oA9P/6APb/+gD4//oBEP/4ARL/+AEU//gBFv/4AR7/+QEg//kBIv/5AST/+QEm//wBKP/8ASr//AEs//4BLv/+ATD//gEy//4BNP/+ATb//gFF//QBR//0AUn/+AFL//kBTf/8AVj//gFlAD4BaAA+AW0ACgADAA4ABgBCAAYAYgAGAAsAOP/oADn/qQEd/+gBH//oASH/6AEj/+gBJf+pASf/qQEp/6kBSv/oAUz/qQAOAFIADQBTAA0AVQANAFcADQC0AA0A+wANAQcADQEJAA0BCwANAQwADQEOAA0BGAANARoADQEcAA0ADgBSAAMAUwADAFUAAwBXAAMAtAADAPsAAwEHAAMBCQADAQsAAwEMAAMBDgADARgAAwEaAAMBHAADABAATQBnAE4AOgBPADoAUABnALAAOgDBAGcA6ABnAOoAZwDyADoA9AA6APYAOgD6AGcA/QBnAP8AZwEBAGcBAwBnACYASAAqAEkAKgBKACoATAAqAFQAKgBWACoAqgAqAKsAKgCsACoArQAqAK4AKgCzACoAtQAqALYAKgC3ACoAuAAqALkAKgC7ACoAygAqAMwAKgDOACoA0AAqANIAKgDUACoA1gAqANgAKgDaACoA3AAqAN4AKgDgACoA4gAqAOQAKgDmACoBEAAqARIAKgEUACoBFgAqAUkAKgAZACYAFABOAAUATwAFAIMAFACEABQAhQAUAIYAFACHABQAiAAUAK8ABQCwAAUAsQAFALIABQDDABQAxQAUAMcAFADsAAUA7gAFAPAABQDyAAUA9AAFAPYABQD4AAUBRAAUAZwAFAAbACb//AA5/+MAO//0AD7/6wCD//wAhP/8AIX//ACG//wAh//8AIj//ACg/+sAw//8AMX//ADH//wBJf/jASf/4wEp/+MBN//0ATn/6wE7/+sBRP/8AUz/4wFa//QBXP/0AV7/9AFg/+sBnP/8AAIAB/+cAAz/nABuACYAKAAn//YAKP/sACn/9gAq//YAK//2ACz/7AAt//YALv/2AC8ACgAw//YAMf/2ADL/9gAz//YANP/sADX/9gA2/+wAN//2ADn/4gA7/9gAPv/DAD8AEgCDACgAhAAoAIUAKACGACgAhwAoAIgAKACJAB0Aiv/sAIv/9gCM//YAjf/2AI7/9gCP//YAkP/2AJH/9gCS//YAk//2AJT/9gCV/+wAlv/sAJf/7ACY/+wAmf/sAJv/7ACg/8MAof/2AMMAKADFACgAxwAoAMn/7ADL/+wAzf/sAM//7ADR//YA0//2ANX/9gDX//YA2f/2ANv/9gDd//YA3//sAOH/7ADj/+wA5f/sAOf/9gDp//YA6//2AO//9gDx//YA8//2APX/9gD3AAoA+f/2APz/9gD+//YBAP/2AQL/9gEE//YBBv/2AQj/9gEK//YBDf/2AQ//7AER/+wBE//sARX/7AEX//YBGf/2ARv/9gEl/+IBJ//iASn/4gE3/9gBOf/DATv/wwE8ABIBPgASAUAAEgFEACgBRgAdAUj/7AFM/+IBWv/YAVz/2AFe/9gBYP/DAZwAKAGw//YABAHO//EB1v/xAdf/8QIM//EABAHOAAEB1gABAdcAAQIMAAEAAgFlADgBaAA4AAQBzv/8Adb//AHX//wCDP/8AA8ASwAmAKIAJgGrACYBrAAmAa0AJgGuACYBrwAmAeAAJgHhACYB4gAmAeMAJgHkACYB5QAmAeYAJgHnACYADwBLADwAogA8AasAPAGsADwBrQA8Aa4APAGvADwB4AA8AeEAPAHiADwB4wA8AeQAPAHlADwB5gA8AecAPAAmAEgAMgBJADIASgAyAEwAMgBUADIAVgAyAKoAMgCrADIArAAyAK0AMgCuADIAswAyALUAMgC2ADIAtwAyALgAMgC5ADIAuwAyAMoAMgDMADIAzgAyANAAMgDSADIA1AAyANYAMgDYADIA2gAyANwAMgDeADIA4AAyAOIAMgDkADIA5gAyARAAMgESADIBFAAyARYAMgFJADIAPQAR//sAE//7AWT/7AFn/+wBbf/7AlT/9AJW//wCWv/8AmL//AJk//wCZ//UAmn/7QJq/+0CbP/YAm3/5AJy/9gCdP/kAnX/1QJ2//wCd//8Anj/2AKA//QCgf/0AoL/9AKD//QChP/0AoX/9AKG//wCkP/8ApH//AKS//wCk//8ApT//AKZ//QCmv/0Apv/9AKc//wCnf/8Ap7//AKf//wCp//8Aqj//AKp//wCqv/8Ar3//AK+//wCv//8Asb/1ALH/9QCz//tAtD/7QLR/+0C0v/tAtP/2ALU/9gC1f/kAtb/5ALX//QC2P/VAtn//ALb/9QAcQAR/7MAE/+zAWQAMgFlADIBZwAyAWgAMgFt/7MCVP/YAlX/8AJW//kCV//wAlj/8AJZ//ACWv/5Alv/8AJc//ACXf/0Al7/8AJf//ACYP/wAmH/8AJi//kCY//wAmT/+QJl//ACZv/8AmkABAJqAAQCbf/zAm//8AJw//ACcf/8AnP/8AJ0//MCdf/GAnb/+QJ3//kCef/wAnr/8AJ///wCgP/YAoH/2AKC/9gCg//YAoT/2AKF/9gChv/5Aoj/8AKJ//ACiv/wAov/8AKM//ACjf/wAo7/8AKP//ACkP/5ApH/+QKS//kCk//5ApT/+QKZ/9gCmv/YApv/2AKc//kCnf/5Ap7/+QKf//kCoP/wAqH/8AKi//ACo//wAqT/8AKl//ACpv/wAqf/+QKo//kCqf/5Aqr/+QKr//ACrP/wAq7/8AKw//ACsf/wArL/8AKz//QCtP/wArX/8AK2//ACt//wArj/8AK5//ACuv/wArv/8AK8//ACvf/5Ar7/+QK///kCwP/wAsH/8ALC//ACw//8AsT//ALF//wCzwAEAtAABALRAAQC0gAEAtX/8wLW//MC1//YAtj/xgLZ//kC2v/8ACIBZQAUAWgAFAJU//gCZ//hAmn/6QJq/+kCbP/VAm3/9AJy/9UCdP/0AnX/1gJ4/9UCgP/4AoH/+AKC//gCg//4AoT/+AKF//gCmf/4Apr/+AKb//gCxv/hAsf/4QLP/+kC0P/pAtH/6QLS/+kC0//VAtT/1QLV//QC1v/0Atf/+ALY/9YC2//hAIQAEf+fABP/nwFlACEBaAAhAW3/nwJU/8QCVf/6Alb/+AJX//oCWP/6Aln/+gJa//gCW//6Alz/+gJd//YCXv/6Al//+gJg//oCYf/6AmL/+AJj//oCZP/4AmX/+gJm//YCZ//iAmj/9gJp//YCav/2Amz/6QJt/98Cb//6AnD/+gJx//YCcv/pAnP/+gJ0/98Cdf+bAnb/+AJ3//gCeP/pAnn/+gJ6//oCf//2AoD/xAKB/8QCgv/EAoP/xAKE/8QChf/EAob/+AKI//oCif/6Aor/+gKL//oCjP/6Ao3/+gKO//oCj//6ApD/+AKR//gCkv/4ApP/+AKU//gClf/2Apb/9gKX//YCmP/2Apn/xAKa/8QCm//EApz/+AKd//gCnv/4Ap//+AKg//oCof/6AqL/+gKj//oCpP/6AqX/+gKm//oCp//4Aqj/+AKp//gCqv/4Aqv/+gKs//oCrv/6ArD/+gKx//oCsv/6ArP/9gK0//oCtf/6Arb/+gK3//oCuP/6Arn/+gK6//oCu//6Arz/+gK9//gCvv/4Ar//+ALA//oCwf/6AsL/+gLD//YCxP/2AsX/9gLG/+ICx//iAsj/4gLJ//YCyv/2Asv/9gLM//YCzf/2As7/9gLP//YC0P/2AtH/9gLS//YC0//pAtT/6QLV/98C1v/fAtf/xALY/5sC2f/4Atr/9gLb/+IAdQARAAoAEwAKAWQAKAFlAEEBZwAoAWgAQQFtAAoCVf/nAlb/6AJX/+cCWP/nAln/5wJa/+gCW//nAlz/5wJe/+cCX//nAmD/5wJh/+cCYv/oAmP/5wJk/+gCZf/nAmb/7AJn/+oCaP/3Amn//QJq//0CbP/qAm//5wJw/+cCcf/sAnL/6gJz/+cCdf/+Anb/6AJ3/+gCeP/qAnn/5wJ6/+cCf//sAob/6AKI/+cCif/nAor/5wKL/+cCjP/nAo3/5wKO/+cCj//nApD/6AKR/+gCkv/oApP/6AKU/+gClf/3Apb/9wKX//cCmP/3Apz/6AKd/+gCnv/oAp//6AKg/+cCof/nAqL/5wKj/+cCpP/nAqX/5wKm/+cCp//oAqj/6AKp/+gCqv/oAqv/5wKs/+cCrv/nArD/5wKx/+cCsv/nArT/5wK1/+cCtv/nArf/5wK4/+cCuf/nArr/5wK7/+cCvP/nAr3/6AK+/+gCv//oAsD/5wLB/+cCwv/nAsP/7ALE/+wCxf/sAsb/6gLH/+oCyP/qAsn/9wLK//cCy//3Asz/9wLN//cCzv/3As///QLQ//0C0f/9AtL//QLT/+oC1P/qAtj//gLZ/+gC2v/sAtv/6gAYAlYACgJaAAoCYgAKAmQACgJ2AAoCdwAKAoYACgKQAAoCkQAKApIACgKTAAoClAAKApwACgKdAAoCngAKAp8ACgKnAAoCqAAKAqkACgKqAAoCvQAKAr4ACgK/AAoC2QAKABgCVv/eAlr/3gJi/94CZP/eAnb/3gJ3/94Chv/eApD/3gKR/94Ckv/eApP/3gKU/94CnP/eAp3/3gKe/94Cn//eAqf/3gKo/94Cqf/eAqr/3gK9/94Cvv/eAr//3gLZ/94AAQAdABMAFAAkAFYAXQBqAIIBBQEqAUIBZgFwAfoCEQIgAiECIwInAjECNQI7AkUCVQJZAloCYwJrAqsCyAACH/QABAAAFKAaRAA4AC8AAP/Q//j////s//j/9v/+//UAGQAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAADv//AAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/4v//AAD/+gAAABoAE//+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABk/+0ACv/9AAAAAAAAACsAQf/sAAAAWgAqAAAAAwAUAHEATwBtACgAdAAWAAEAEgADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/+AAD//P/9AAAAAAApACQAHgAAAC4ACgAAAAAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/+gAAAAAAAP/4AAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/+v//P/e//P/6//2AAAAFwAJAAAAAAAAAAD/8QAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/+AAAAAAAAAAAAAP/2AAoAAAAAACYAHwAA//YAAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/9gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/7wAI//gAAAAeAAX/8QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/r//H/8//6AAAAAAAA//cAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/5v/2/+j/6QAA//AAKAA2/7r//wAAACAAFAAKAAAAAAAAAAAAAAAAAAsAAAAAAAIAAP/+//UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT//gAAAAAAAAAA//oADAAA//sAAAArAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/8AAAAAAAPAAAACgAKACAAHgAJAAAAKAAA//EAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAwAKAAX//f/iAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//D//f/9AAAAAP//AC0AQ/+2AAAAAAAeAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAA//8AAP/+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//3/9gAAAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA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ACMAIwAjACMAAAAjAB4AHgAeAB4AEwAaABsAAgACAAIAAgACAAIAAgAEAAQABAAEAAQAFwAXABcAFwAEAAcABAAEAAQABAAEAAAABAAGAAYABgAGAA8AAwAPACEAAgAhAAIAIQACACMABAAjAAQAIwAEACMABAAaAAQAGgAEABoABAAaAAQAGgAEABoABAAaAAQAIwAEACMABAAjAAQAIwAEABoAAwAaAAMAGgAXAAAAFwAaABcAGgAXABoAFwAaABcAHQAXABoAAwAHABoAAwAaAAMAGgADABoAAwAaAAAAGgAHABoABwAaAAcABwAaAAcAIwAEACMABAAjAAQAIwAEABoABwAaAAcAGgAHABAABQAQAAUAEAAFABAABQABABkAAQAZAAEAGQAeAAYAHgAGAB4ABgAeAAYAHgAGAB4ABgARAA8AEwAPABMAFAAcABQAHAAUABwAAAAAACEAAgAfAAIAIwAEABAABQABABkAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAEQAPABEADwARAA8AEwAPABgAGAAIAAkAIgAIAAkAIgAAAAAAAAAKAAAADgANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAbABsAGwAbABoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsAGwAbABsAGwAbABsAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApACcAKAAnACcAJwAoACcAJwAqACcAJwAnACcAKAAnACgAJwArACQALAAtAC0AAAAlAC4AAAAnACcAKwAlACcALgAmACgAKAAlACcAJwAAAAAAAAAAACsAKQApACkAKQApACkAKAAAACcAJwAnACcAJwAnACcAJwAoACgAKAAoACgALAAsACwALAApACkAKQAoACgAKAAoACcAJwAnACcAJwAnACcAKAAoACgAKAAnACcAAAAnAAAAJwAnACcAKgAnACcAJwAnACcAJwAnACcAJwAoACgAKAAnACcAJwArACsAKwAkACQAJAAsACwALAAsACwALAAtAC0ALQAtACUAJQAuAC4AKQAmACgAKwAkAAIAKAANAA0AAAASABIAAQAmACoAAgAsAEAABwBGAFUAHABXAFwALABeAGAAMgB4AHgANQCDAJkANgCbAKEATQCjALIAVAC0ALkAZAC7AOwAagDuAPUAnAD3AQIApAEEAQQAsAEGAUEAsQFEAU0A7QFYAVgA9wFaAWkA+AGcAZwBCAGrAbABCQG7AbsBDwG9Ab0BEAHjAeMBEQHmAeYBEgIDAgMBEwITAhMBFAJUAlQBFQJWAlgBFgJbAmIBGQJkAmoBIQJsAm0BKAJvAnIBKgJ0AnoBLgJ/AqYBNQKrAqwBXQKuAq4BXwKwArABYAKyAtsBYQABAAAACAAAAAQADgACaWRlb3JvbW4AAWxhdG4ACAAGAAAAAAABAAIACAAMAAH/bQABAAAAAAABAAAAANre18UAAAAA1OzEqQAAAADVOKq3'\n\nexport default EconSansLig\n","const EconSansBolIta =\n  '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'\n\nexport default EconSansBolIta\n","const EconSansCndLig =\n  ''\n\nexport default EconSansCndLig\n","const EconSansCndLigIta =\n  ''\n\nexport default EconSansCndLigIta\n","const EconSansCndReg =\n  ''\n\nexport default EconSansCndReg\n","const EconSansRegIta =\n  ''\n\nexport default EconSansRegIta\n","const EconSansCndMed =\n  ''\n\nexport default EconSansCndMed\n","const EconSansCndMedIta =\n  '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'\n\nexport default EconSansCndMedIta\n","const MiloTEBold =\n  ''\n\nexport default MiloTEBold\n","const MiloTEMedium =\n  ''\n\nexport default MiloTEMedium\n","const MiloTERegularItalic =\n  ''\n\nexport default MiloTERegularItalic\n","const MiloTERegular =\n  ''\n\nexport default MiloTERegular\n","/**\n * WHY THIS MODULE?\n * \n * Rationale:\n * ----------\n * \n * Initially, the set of JSON files contanining all the configs/parameters/preferences/etc of Sybil \n * were loaded in compilation time, that is, imported as modules. The caveat of it was that every time\n * a change on any parameter contained on these files was needed, the entire app needed to be compiled again.\n * \n * Now files are in the public folder public/assets/, and are fetched by the editor.js in the phase \n * 'componentWillMount' of the lifecycle, as external files. There is a specific property in the editor's state\n * called 'loadingAssets', flagged to false when such files are loaded, and only then the Editor component\n * starts doing all the stuff (since the data of these json files is needed everywhere).\n * \n * While this is easy to control for just the editor.js component as explained above, there are some other\n * modules within Sibyl that also load these files via import statements, hence a way to globally\n * access this information is needed.\n * \n * This module is the one now being imported by all the modules that needed that info, so editor.js\n * populates these globalAssets object as soon as the JSON files are loaded, so before all the stuff\n * happens this object is already populated and ready to be used.\n */\n\nlet globalAssets = {\n  DefaultChartConfig: undefined,\n  DefaultPreferences: undefined,\n  PresetPreferences: undefined,\n  ColourLookup: undefined\n};\n\nexport default globalAssets;","import globalAssets from '../assets/globalAssets';\n// Series preferences:\n// import * as SeriesPreferences from './series-preferences.js';\n\n// OBJECTIFY DATA\n// Called from EditorConfigUtilities.reconcileEdConfigPanelDataToConfig to convert array of arrays\n// into array of objects, each object containing values as\n// header-named properties. Returns an object containing that\n// and other properties\nexport function objectifyData(allData) {\n  const dataObjArray = [];\n  // Isolate row of headers_\n  const headers = allData[0];\n  // _and category header\n  const catHeader = headers[0];\n  // Init array of cateogory strings:\n  const categories = [];\n  // Count (non-header) rows and (incl. cats) columns:\n  const rLen = allData.length;\n  const cLen = headers.length;\n  // By row (omitting 1st header row)\n  for (let rNo = 1; rNo < rLen; rNo++) {\n    const thisRow = allData[rNo];\n    // Four objects per 'row', for chart and blob data\n    // Each needs a category value, from col 0\n    const tempChartObj = { [catHeader]: thisRow[0] };\n    categories.push(thisRow[0]);\n    // Now by column, from 1, appending to row-object\n    for (let cNo = 1; cNo < cLen; cNo++) {\n      const seriesName = headers[cNo];\n      tempChartObj[seriesName] = thisRow[cNo];\n    }\n    dataObjArray.push(tempChartObj);\n  }\n  // Count points, omitting headers\n  const pointCount = rLen - 1;\n  // Count number of columns of data (exclude cats);\n  // get seriesCount and blobCount later\n  const dataColCount = headers.length - 1;\n  return { dataObjArray, headers, categories, pointCount, dataColCount };\n}\n// OBJECTIFY DATA ends\n\n// FIT SCALES BASICS\n// NOTE: =============================\n// Hatchet job to get temp data working\nexport function fitScalesBasics(scalesObj) {\n  const isMixed = false;\n  const isDouble = false;\n  const splitDataAtCol = 0;\n  scalesObj.isMixed = isMixed;\n  scalesObj.isDouble = isDouble;\n  scalesObj.splitDataAtCol = splitDataAtCol;\n  return scalesObj;\n}\n\n// GET SIDE\n// Simple utility to return current scale 'side' for single/mixed charts\nexport function getSide(edConfig) {\n  let side = 'left';\n  if (edConfig.enableScale.right) {\n    side = 'right';\n  }\n  return side;\n}\n// GET SIDE ends\n\n// GET SCALE PROPS\n// Called from Editor.reconcileEdConfigPanelScalesToConfig to extract\n// properties for left/right scale\nexport function getScaleProps(edConfig, side) {\n  const result = {};\n  const mmi = { actual: {}, scale: {} };\n  result.type = edConfig.chartType[side].type;\n  result.stacked = edConfig.chartType[side].stacked;\n  // LOG to come\n  // Pull out props from edConfig:\n  const edConfigSide = edConfig.scales[side];\n  // Actual_\n  const aMin = edConfigSide.actualMin;\n  const aMax = edConfigSide.actualMax;\n  mmi.actual.min = aMin;\n  mmi.actual.max = aMax;\n  // _and scale\n  mmi.scale.min = edConfigSide.min;\n  mmi.scale.max = edConfigSide.max;\n  mmi.scale.increment = edConfigSide.increment;\n  mmi.scale.tickValues = edConfigSide.tickValues;\n  mmi.scale.tickDensity = edConfigSide.tickDensity;\n  result.minMaxObj = mmi;\n  result.factor = edConfigSide.factor;\n  result.invert = edConfigSide.invert;\n  result.log = edConfigSide.log;\n  // Thermo dots\n  result.thermoDots = edConfig.chartType[side].thermoDots;\n  result.scatterLabels = edConfig.chartType[side].scatterLabels;\n  result.scatterTrendline = edConfig.chartType[side].scatterTrendline;\n  return result;\n}\n// GET SCALE PROPS ends\n\n// GET BLOB VALUES ARRAY\nexport function getBlobValuesArray(dataArray, bCol) {\n  const bArray = [];\n  for (let rNo = 1; rNo < dataArray.length; rNo++) {\n    bArray.push(dataArray[rNo][bCol]);\n  }\n  const min = Math.min(...bArray);\n  const max = Math.max(...bArray);\n  return {\n    bArray,\n    min,\n    max,\n  };\n}\n// GET BLOB VALUES ARRAY ends\n\n// Called from Editor.resetActualScaleValuesFromNewPayload. Splits data array into\n// x-left, y-right and (if relevant) z arrays, for calculating MMI values\n// for scatter charts\nexport function splitScatterDataArray(dataArray, isSimple) {\n  // From each row, I want element 0 (categories, for consistency),\n  // then either 1,3,5... (simple) or 1,4,7... (sized)\n  let seriesCols = 3;\n  if (isSimple) {\n    seriesCols = 2;\n  }\n  const leftArray = [];\n  const rightArray = [];\n  const zArray = [];\n  // Filters: 'columns' of values by axis\n  const getXvals = (value, index) => {\n    return index === 0 || (index - 1) % seriesCols === 0;\n  };\n  const getYvals = (value, index) => {\n    return index === 0 || (index - 2) % seriesCols === 0;\n  };\n  const getZvals = (value, index) => {\n    return index % seriesCols === 0;\n  };\n  // Get x-left and y-right scale values as arrays:\n  for (let iii = 0; iii < dataArray.length; iii++) {\n    const row = dataArray[iii];\n    leftArray.push(row.filter(getXvals));\n    rightArray.push(row.filter(getYvals));\n    if (!isSimple) {\n      zArray.push(row.filter(getZvals));\n    }\n  }\n  return { leftArray, rightArray, zArray };\n}\n\n// SPLIT DATA ARRAY\n// Called from Editor.resetActualScaleValuesFromNewPayload to split dataArray\n// for double scale charts\nexport function splitDataArray(dArray, splitAt) {\n  const leftArray = [];\n  const rightArray = [];\n  for (let iii = 0; iii < dArray.length; iii++) {\n    const row = dArray[iii];\n    leftArray.push(row.slice(0, splitAt));\n    // Right needs cats column too\n    const tempArray = row.slice(splitAt);\n    tempArray.unshift(row[0]);\n    rightArray.push(tempArray);\n  }\n  return { leftArray, rightArray };\n}\n// SPLIT DATA ARRAY ends\n\n// COUNT TICKS\nexport function countTicks(min, max, increment) {\n  // Valid numbers?\n  const checkArgs = min + max + increment;\n  if (isNaN(checkArgs)) {\n    return 0;\n  }\n  if (checkArgs === 0) {\n    return 0;\n  }\n  // Factor everybody up until increment is an integer\n  const ten = 10;\n  while (!Number.isInteger(increment)) {\n    min *= ten;\n    max *= ten;\n    increment *= ten;\n  }\n  const ticks = (max - min) / increment;\n  return ticks + 1;\n}\n// COUNT TICKS ends\n\nexport function defaultLegendColumns(sCount) {\n  const zero = 0;\n  const one = 1;\n  const two = 2;\n  const three = 3;\n  const lookUp = [zero, one, two, three, two, three, three];\n  let lCols = three;\n  if (sCount < lookUp.length) {\n    lCols = lookUp[sCount];\n  }\n  return lCols;\n}\n\n// DATE OPTIONS FOR FILE NAMING\n\n// IS THIS BAR CHART\n// Called from EditorConfigDefaultUtils.revertPanelDefaultVals;\n// Editor.makeSizeAndPresetConfig; EditorConfigUtils.payloadToEdConfigPanel\n// (NOTE: are any of these calls redundant?)\n// Returns true if this is a bar chart\nexport function isThisBarChart(activePanel) {\n  let isBar = false;\n  if (\n    activePanel.enableScale.left &&\n    activePanel.chartType.left.type.includes('bar')\n  ) {\n    isBar = true;\n  } else if (\n    activePanel.enableScale.right &&\n    activePanel.chartType.right.type.includes('bar')\n  ) {\n    isBar = true;\n  }\n  return isBar;\n}\n// IS THIS BAR CHART ends\n\n// GET CHART SCALE DEFAULT OBJECT\n// Called from Editor.getNewChartObject and EditorConfigUtilities.reconcileEdConfigPanelScalesToConfig.\n// Returns an object with left/right sub-objects defining default vals for the\n// type of the chart that relates to the scale; MMI vals...\nexport function getChartScaleDefaultObject(defaults) {\n  // Let's start with a default object\n  const base = {\n    factor: 1,\n    invert: false,\n    minMaxObj: {\n      actual: {},\n      scale: {\n        min: 0,\n        max: 0,\n        increment: 0,\n      },\n    },\n    type: defaults.type,\n    stacked: defaults.stacked,\n  };\n  const obj = {\n    left: Object.assign({}, base),\n    right: Object.assign({}, base),\n    isMixed: false,\n    isDouble: false,\n    isScatter: false,\n    splitDataAtCol: 0,\n  };\n  return obj;\n}\n// GET CHART SCALE DEFAULT OBJECT ends\n\n// GET NAMED COLOUR VALUES\n// Get colour values for AXIS text fill and tick stroke\n// Arg is axis definition object, by ref.\nexport function getNamedColourVals(axis) {\n  // Lookup is:\n  const colours = globalAssets.ColourLookup.colours;\n  // Default text fill:\n  let fill = axis.text.fill;\n  let colNode = colours[fill];\n  if (typeof colNode === 'undefined') {\n    // Trouble? Use black.\n    colNode = colours.black100;\n  }\n  axis.text.fillValue = colNode;\n  // Double fills\n  const dScale = axis.doubleScale;\n  if (typeof dScale !== 'undefined') {\n    fill = dScale.fill.left;\n    dScale.fill.leftVal = colours[fill];\n    fill = dScale.fill.right;\n    dScale.fill.rightVal = colours[fill];\n    // And line/column overrides\n    fill = dScale.fill.linealone;\n    dScale.fill.linealoneVal = colours[fill];\n    fill = dScale.fill.columnalone;\n    dScale.fill.columnaloneVal = colours[fill];\n  }\n  //  Tick stroke. We have to contend with chart type\n  // default/bar/col...\n  // ...then substyles <default>, baseline and zero (mixed/simple)\n  const tList = Object.keys(axis.ticks);\n  for (let iii = 0; iii < tList.length; iii++) {\n    const tickNode = axis.ticks[tList[iii]];\n    // Chart type: bar, column...\n    // In each case, there's a default 'stroke':\n    let stroke = tickNode.stroke;\n    if (typeof stroke !== 'undefined') {\n      tickNode.strokeValue = colours[stroke];\n    }\n    // A baseline:\n    const baseNode = tickNode.baseline;\n    if (typeof baseNode !== 'undefined') {\n      stroke = baseNode.stroke;\n      tickNode.baseline.strokeValue = colours[stroke];\n    }\n    // And zero ('simple' and 'mixed')\n    const zeroNode = tickNode.zero;\n    if (typeof zeroNode !== 'undefined') {\n      stroke = zeroNode.simple;\n      zeroNode.simpleValue = colours[stroke];\n      stroke = zeroNode.mixed;\n      zeroNode.mixedValue = colours[stroke];\n    }\n  }\n  return axis;\n}\n// GET NAMED COLOUR VALUES\n\n// DEEP MERGE\n// Found on Stackoverflow. Will do a deep merge of source object into target\n// I modded to overwrite rather than concatenate arrays\nexport function deepMerge(target, source) {\n  // If not two objects, just return target unchanged\n  if (typeof target !== 'object' || typeof source !== 'object') {\n    return target;\n  }\n  // Loop by SOURCE properties\n  for (const prop in source) {\n    if (source.hasOwnProperty(prop)) {\n      if (prop in target) {\n        // Matching property exists in target.\n        // Are they both objects?\n        const bothObjects =\n          typeof target[prop] === 'object' && typeof source[prop] === 'object';\n        if (bothObjects) {\n          // OK: both are objects.\n          if (target[prop].concat && source[prop].concat) {\n            // If both are arrays\n            // Original concatenated, but I want to overwrite arrays, too\n            // target[prop] = target[prop].concat(source[prop]);\n            target[prop] = source[prop];\n          } else {\n            // No arrays, both are objects: so recurse.\n            // But clone them:\n            const targetObj = Object.assign({}, target[prop]);\n            const sourceObj = Object.assign({}, source[prop]);\n            target[prop] = deepMerge(targetObj, sourceObj);\n          }\n        } else {\n          // Either target or source isn't an object or an array\n          // So overwrite target with source, whatever it may be\n          target[prop] = source[prop];\n        }\n      } else {\n        // No target prop exists, so create from source\n        target[prop] = source[prop];\n      }\n    }\n  }\n  return target;\n}\n// DEEP MERGE ends\n\n// GET SPECIFIC PRESET PROPERTIES\n// Called from getNewChartObject to extract non-global\n// lookup properties from the current sub/preset\nexport function getSpecificPresetProps(presetsConfig) {  \n  // Isolate the user-specific sub-preset source node\n  const pps = presetsConfig.userPresets;\n  const psSource = pps[presetsConfig.presetName][presetsConfig.subpresetName];\n  // OK: this gets inferential. Check potential nodes\n  // Axes:\n  // Reversion to default:\n  // NOTE: I'm throwing Object.assign at all of this stuff in\n  // the hope of preventing DPs from mutating. And this seems\n  // necessary here, even though I'm also doing Object.assign in deepMerge.\n  const defaultAxes = Object.assign({}, globalAssets.DefaultPreferences.axes);\n  // Any preset props will be merged into x- and y-axis objects\n  const mergedXaxis = Object.assign({}, defaultAxes.xAxis);\n  const mergedYaxis = Object.assign({}, defaultAxes.yAxis);\n  const mergedZaxis = Object.assign({}, defaultAxes.zAxis);\n  let brokenScaleFactors = defaultAxes.brokenScaleFactors;\n  // I'm looking for preset axis properties:\n  const axesSource = psSource.axes;\n  if (typeof axesSource !== 'undefined') {\n    const xAxisSource = axesSource.xAxis;\n    if (typeof xAxisSource !== 'undefined') {\n      // const xAxisTarget = chart.xAxis;\n      // const mergedXaxis = defaultAxes.xAxis;\n      deepMerge(mergedXaxis, xAxisSource);\n    }\n    const yAxisSource = axesSource.yAxis;\n    if (typeof yAxisSource !== 'undefined') {\n      // const yAxisTarget = chart.yAxis;\n      // const mergedYaxis = defaultAxes.yAxis;\n      deepMerge(mergedYaxis, yAxisSource);\n    }\n    const zAxisSource = axesSource.zAxis;\n    if (typeof zAxisSource !== 'undefined') {\n      deepMerge(mergedZaxis, zAxisSource);\n    }\n    // Broken scale factoring added, Feb'22\n    const ppBSF = axesSource.brokenScaleFactors;\n    if (typeof ppBSF !== 'undefined') {\n      brokenScaleFactors = ppBSF;\n    }\n  }\n\n  // Blobs\n  const mergedBlobs = Object.assign({}, globalAssets.DefaultPreferences.blobs);\n  const ppBlobs = psSource.blobs;\n  if (typeof ppBlobs !== 'undefined') {\n    // debugger;\n    deepMerge(mergedBlobs, ppBlobs);\n  }\n\n  // Series are overwritten elsewhere, down the line...\n  // But other properties may need adding here as preset styles develop...?\n  return {\n    xAxis: mergedXaxis,\n    yAxis: mergedYaxis,\n    zAxis: mergedZaxis,\n    brokenScaleFactors,\n    blobs: mergedBlobs\n  };\n}\n// GET SPECIFIC PRESET PROPERTIES ends\n\n/*\nHere's the problem, I think. When I go to a preset with no axes node, axesSource is\nundefined at line 683... and nothing happens. So actually, if there's no preset node,\nI have to fetch one in from DPs... or something.\nI have to be careful about swapping one defined PP axis for another. In all cases,\nI have to impose the DP axis, before overwriting with PP.\nOK so I'm doing that: the 'target' object that goes into deepMerge is from DPs.\nIt's the condition that's the problem.\nNo: that's not it. If there's no PP object, I just return the unchanged DP node.\n*/\n\n// GET NEW CHART OBJECT\n// Called from Editor.reconcileEditorToChartPanelConfig\n// Creates a new chart data object of default chart-type\nexport function getNewChartObject(newPayload, presetsConfig) {\n  // Decouple from base DPs:\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  // Series: default type, assuming 1 series...\n  // Next 2 comm'd out 17.7.18, since they seem to go nowhere...\n  // Axes:\n  // Too early: DPs haven't been overwritten from PPs yet...\n  // NOTE: take out call to getNamedColourVals here...?\n  // const xAxis = getNamedColourVals(dps.axes.xAxis);\n  // const yAxis = getNamedColourVals(dps.axes.yAxis);\n  // Chart object:\n  const newChart = {\n    scales: getChartScaleDefaultObject(dps.metadata.defaults),\n    panelheader: dps.panelAttributes.strings.panelheader.default,\n    // Some props packed into each chart (saves extracting later)\n    duration: dps.other.duration,\n    steplineSpur: Number(dps.other.steplineSpur),\n    // defaultSource: dps.other.defaultSource,\n    // emVal: dps.other.emVal,\n    forceTurn: dps.other.forceTurn,\n    idealMargin: dps.other.idealMargin,\n    // Smallest possible inner chart area\n    minimumBounds: dps.other.minimumBounds,\n    // NOTE: blob metadata moves to global CO\n    // Legend, panel-specific values only:\n    legend: {\n      value: dps.legend.columns.value,\n      header: dps.legend.header,\n    },\n    // Chart data obj with empty arrays\n    // chartData: { all: [], left: [], right: [] },\n    chartData: { left: [], right: [] },\n    // Blobs object\n    blobs: {\n      blobHeaders: [],\n      blobState: Object.assign({}, dps.metadata.defaults.blobs),\n      blobMeta: dps.blobs,\n    },\n    // Header and category arrays:\n    headers: [],\n    categories: [],\n    minMaxObj: {\n      // actual: {},\n      // scale: {\n      //   min: 0,\n      //   max: 0,\n      //   increment: 0,\n      // },\n      // NOTE: fix this -- blobs MMI should go into blobs.blobState\n      blobs: {},\n    },\n    series: {\n      // left: series,\n      // right: series,\n    },\n    newPayload,\n    rawData: '',\n  };\n  // Index dot props\n  const iPrefs = dps.other.indexDot;\n  // Define fillName for lookup\n  const fillName = iPrefs.fill;\n  newChart.indexDot = {\n    radius: iPrefs.radius,\n    fillName,\n    fillValue: globalAssets.ColourLookup.colours[fillName],\n    value: iPrefs.value,\n  };\n  // Broken scale props\n  const bss = dps.other.brokenScale;\n  newChart.brokenScaleSymbol = {\n    points: bss.points,\n    linejoin: bss.linejoin,\n    noSymbol: bss.noSymbol,\n    horizontalPaddingToXaxisLabel: bss.horizontalPaddingToXaxisLabel,\n    strokeName: bss.stroke,\n    strokeValue: globalAssets.ColourLookup.colours[bss.stroke],\n    width: bss.width,\n  };\n  // Get any preset-specific props\n  const specificPresetProps = getSpecificPresetProps(presetsConfig);\n  newChart.xAxis = getNamedColourVals(specificPresetProps.xAxis);\n  newChart.yAxis = getNamedColourVals(specificPresetProps.yAxis);\n  // No colour vals for z-axis (so far...)\n  newChart.zAxis = specificPresetProps.zAxis;\n  // Broken scale factoring\n  newChart.brokenScaleFactors = specificPresetProps.brokenScaleFactors;\n  // Blobs\n  newChart.blobs.blobMeta = specificPresetProps.blobs;\n  // Fetch in margin below blobs from separate topPadding node\n  newChart.blobs.blobMeta.belowBlobs =\n    dps.background.topPadding.belowBlobBottom.default;\n  return newChart;\n}\n// GET NEW CHART OBJECT ends\n\n// MONTEUX DATA ARE VALID\n// Called from Editor.handleMonteuxImportValues to check the data\n// validity flags in panelArray\nexport function monteuxDataAreValid(mData) {\n  // I'll check in all panels, but break on first problem\n  const dataObj = {\n    goodData: true,\n    problematicData: false,\n    dataMsg: '',\n  };\n  // Loop through each panel's data, looking for trouble. First\n  // bad panel, squeak and break\n  for (let pNo = 0; pNo < mData.panelArray.length; pNo++) {\n    const myVals = mData.panelArray[pNo].rawData.values;\n    if (!myVals.isValid) {\n      // Prepend data sheet number to warning\n      const doMsg = `Data for panel ${pNo + 1}: ${myVals.validityMsg}`;\n      dataObj.dataMsg = doMsg;\n      dataObj.goodData = false;\n      break;\n    } else if (myVals.isProblematic) {\n      const doMsg = `Data for panel ${pNo + 1}: ${myVals.validityMsg}`;\n      dataObj.dataMsg = doMsg;\n      dataObj.problematicData = true;\n    }\n  }\n  return dataObj;\n}\n// MONTEUX DATA ARE VALID ends\n\n// GET ACTIVE PANEL\n// Variously called. Returns the active editorConfig panel\nexport function getActivePanel(editorConfig) {\n  const { chartIndex } = editorConfig.global;\n  return editorConfig.panels[chartIndex];\n}\n// GET ACTIVE PANEL ends\n\n// GET PAYLOAD PRESET AND SUB-PRESET IF ANY\n// Called from Editor.handleMonteuxImportValues\n// If 'values' has come from a data payload, there\n// will be defined preset and subPreset. But if the\n// data were pasted into the Advanced tab's text field,\n// these don't exist\nexport function getPayloadPresetAndSubPresetIfAny(values) {\n  const lookUp = values.global.values;\n  let ppObj;\n  if (typeof lookUp.preset !== 'undefined') {\n    ppObj = {\n      preset: lookUp.preset,\n      subPreset: lookUp.subPreset,\n    };\n  }\n  return ppObj;\n}\n// GET PAYLOAD PRESET AND SUB-PRESET IF ANY ends\n\n// SMARTEN QUOTES\n// Called from various points in Editor and from\n// smartenArrayOfQuotes to convert straight to smart quotes\n// Arg is a string\n// NOTE: could be better, but leave like this until we're sure it works...\nexport function smartenQuotes(str) {\n  // Failsafe (originally when axis headers were killed off)\n  if (typeof str === 'undefined') {\n    return '';\n  }\n  let smart = str;\n  // Don't trip over numbers\n  if (isNaN(str)) {\n    // There's a special case: '000. Normally, an apostrope\n    // after a space is an opener. But in this case it's\n    // a closer. So, inferentially:\n    smart = str.replace(/'000/g, '’000');\n    // Replace doublequotes that start a line or follow spaces\n    smart = smart.replace(/(^|\\s)(\")/g, '$1“');\n    // Replace survivors with the back doublequote\n    smart = smart.replace(/\"/g, '”');\n    // Ditto single\n    smart = smart.replace(/(^|\\s)(')/g, '$1‘');\n    smart = smart.replace(/'/g, '’');\n  }\n  return smart;\n}\n// SMARTEN QUOTES ends\n\n// SMARTEN ARRAY OF QUOTES\n// Called from EditorConfigUtils.payloadToEdConfigRawData. Passed an array,\n// calls smartenQuotes on each element\nexport function smartenArrayOfQuotes(qArray) {\n  const smartenedArray = [];\n  for (const item in qArray) {\n    smartenedArray.push(smartenQuotes(qArray[item]));\n  }\n  return smartenedArray;\n}\n// SMARTEN ARRAY OF QUOTES ends\n","// TRIM DECIMALS\n// Called from various places to fix precision errors:\n//    trim 0.300000000004 to 0.3\n//    round 3.9999999999994 to 4, or 0.08999999999 to 0.09\n// This is all 'make it up as we go along'\nexport function trimDecimals(val) {\n  const valAsString = val.toString();\n  const valAsArray = valAsString.split('.');\n  // Zeroes are, I think, less straightforward\n  if (valAsArray.length > 1) {\n    const dStr = valAsArray[1];\n    const zerosPos = dStr.indexOf('0000');\n    const ninesPos = dStr.indexOf('9999');\n    if (zerosPos >= 0) {\n      // Zeros\n      valAsArray[1] = dStr.substr(0, zerosPos);\n      val = +valAsArray.join('.');\n    } else if (ninesPos > 0) {\n      // Nines, like 0.899999999 or 0.01999999\n      val = +Number(valAsString).toFixed(ninesPos);\n      // So lose leading zeroes:\n      // const zeroMatch = dStr.match(/[1-9]\\d*/);\n      // const zeroBin = dStr.substr(0, zeroMatch.index);\n      // dStr = zeroMatch[0];\n      // ninesPos -= zeroMatch.index;\n      // Get the digit preceding the nines, and increment by 1\n      // So 19999 -> 2\n      // const dStub = parseInt(dStr.substr(0, ninesPos), 10) + 1;\n      // Stick the leading zeroes back on\n      // valAsArray[1] = `${zeroBin}${dStub.toString()}`;\n      // val = +valAsArray.join('.');\n    } else if (ninesPos === 0) {\n      // Nines, like 3.999999994, just round up\n      val = Math.round(val);\n    }\n  }\n  // Returns a number\n  return val;\n}\n// TRIM DECIMALS ends\n\n// SET CHART-WRAPPER SCALE CLASS\n// Called from Editor.handleValuesFromSizeAndPreset, and\n// from EdConfigUtils.initiateNewEdConfig\n// Overrides default scaling of chart-wrapper for\n// responsive DCs\nexport function setChartWrapperScaleClass(presetsConfig) {\n  \n  // Look for a chartScaleClass property on the node\n  const upNode = presetsConfig.userPresets;\n  const pNode = upNode[presetsConfig.presetName];\n  const spNode = pNode[presetsConfig.subpresetName];\n  const scaleClass = spNode.chartScaleClass;\n  // Isolate the div that resizes\n  const scWrapper = document.getElementsByClassName('silver-chartwrapper')[0];\n  const classExists = typeof scaleClass !== 'undefined';\n  // Failsafe:\n  const divExists = typeof scWrapper !== 'undefined';\n  // If we can find the div (doesn't exist at startup)\n  if (divExists) {\n    // remove any zooming class applied. The specific zooming class is defined in\n    // preset_preferences.json, using the property 'chartScaleClass'\n    scWrapper.classList.remove(\n      ...Array.from(\n        scWrapper.classList.values()\n      ).filter(className => /chart-zoom-.*/.test(className))\n    );  \n    // set specific scaling class or use the default scaling factor (x2.5)\n    scWrapper.classList.add(classExists?scaleClass:'chart-zoom-250')    \n  }\n}\n// SET CHART-WRAPPER SCALE CLASS ends\n","// Functions that handle the consequences of user setting\n// a factor value on a scale\n// No longer called, Oct'20, since factors are disabled\n\nimport * as OtherUtils from './other-utilities';\n\n// FACTORISE STRING\n// Called from reflectFactorInSubtitle and reflectFactorInAxisHeader\n// to remove/add a factor string\nexport function factoriseString(str, oldFactor, newFactor, factors, user) {\n  // Factor values are 1, 1000 or 1000000\n  // I add or remove \", '000\" or \", m\" to/from the subtitle\n  // First, if string ENDS with PREVIOUS factor suffix, remove that\n  const oldFactorDef = factors.find(def => def.value === oldFactor);\n  if (oldFactorDef.value > 1) {\n    const oldSuffix = oldFactorDef.string[user];\n    const osLen = oldSuffix.length;\n    if (str.includes(oldSuffix) && str.slice(-osLen) === oldSuffix) {\n      str = str.slice(0, -osLen);\n    }\n  }\n  // Look up the new factor in the array, and append the suffix\n  const newFactorDef = factors.find(def => def.value === newFactor);\n  str = `${str}${newFactorDef.string[user]}`;\n  return str;\n}\n// FACTORISE STRING ends\n\n// REFLECT FACTOR IN SUBTITLE\n// Called from reflectFactorInStrings\n// Changes subtitle string to indicate scale factor\n// Params are editorConfig.global, which is updated by ref;\n// old and new factors *as 1, 1000 or 1000000*;\n// and an array of factor definitions\nexport function reflectFactorInSubtitle(\n  edConfigGlobal,\n  oldFactor,\n  newFactor,\n  factors,\n  user,\n) {\n  let subTitle = edConfigGlobal.strings.subtitle;\n  subTitle = factoriseString(subTitle, oldFactor, newFactor, factors, user);\n  edConfigGlobal.strings.subtitle = subTitle;\n}\n// REFLECT FACTOR IN SUBTITLE ends\n\n// REFLECT FACTOR IN PANEL HEADER\n// Called from reflectFactorInStrings\n// Changes subtitle string to indicate scale factor\n// Params are the active panel, which is updated by ref;\n// old and new factors *as 1, 1000 or 1000000*;\n// and an array of factor definitions\nexport function reflectFactorInPanelHeader(\n  activePanel,\n  oldFactor,\n  newFactor,\n  factors,\n  user,\n) {\n  let str = activePanel.panelHeader;\n  str = factoriseString(str, oldFactor, newFactor, factors, user);\n  activePanel.panelHeader = str;\n}\n// REFLECT FACTOR IN PANEL HEADER ends\n\n// REFLECT FACTOR IN AXIS HEADER\n// Called from reflectFactorInStrings to update relevant axis header\n// Scatters and double-scales only\nexport function reflectFactorInAxisHeader(\n  activePanel,\n  oldFactor,\n  newFactor,\n  factors,\n  isLeft,\n  user,\n) {\n  // Originally changed *series* headers\n  // As of Sep'20, changes independent *axis* headers\n  const heads = activePanel.axisHeaders;\n  const cType = activePanel.overallChartType;\n  // Default is r/h y axis\n  let factorName = 'yaxisright';\n  if (isLeft) {\n    if (cType.includes('scatter')) {\n      // Scatter: left maps to x-axis (for now, at least)\n      factorName = 'xaxis';\n    } else {\n      // Double scale\n      factorName = 'yaxisleft';\n    }\n  }\n  heads[factorName] = factoriseString(\n    heads[factorName],\n    oldFactor,\n    newFactor,\n    factors,\n    user,\n  );\n}\n// REFLECT FACTOR IN AXIS HEADER ends\n\n// REFLECT FACTOR IN STRINGS\n// Called from Editor.handleValuesFromScalesFold\n// Determines whether factor strings should be appended to\n// global subtitle or a chart-specific axis header\n// Final param, 'factors' is DP definitions object\nexport function reflectFactorInStrings(\n  edConfig,\n  oldFactor,\n  newFactor,\n  factors,\n  isLeft,\n) {\n  // Double or mixed/single scale?\n  const { chartIndex, user } = edConfig.global;\n  const activePanel = edConfig.panels[chartIndex];\n  const isDouble = activePanel.scales.double.isDouble;\n  // FIXME: this flag ought to work, but doesn't.\n  // const isScatter = activePanel.scales.scatter.isScatter;\n  const isScatter = activePanel.chartType.left.type.includes('scatter');\n  // Multi-panel?\n  const isPanels = edConfig.panels.length > 1;\n\n  if (isDouble || isScatter) {\n    reflectFactorInAxisHeader(\n      activePanel,\n      oldFactor,\n      newFactor,\n      factors,\n      isLeft,\n      user,\n    );\n  } else if (isPanels) {\n    reflectFactorInPanelHeader(\n      activePanel,\n      oldFactor,\n      newFactor,\n      factors,\n      user,\n    );\n  } else {\n    reflectFactorInSubtitle(\n      edConfig.global,\n      oldFactor,\n      newFactor,\n      factors,\n      user,\n    );\n  }\n}\n// REFLECT FACTOR IN STRINGS ends\n\n// FORCE FACTOR STRINGS OFF\n// Called from EditorConfigDefaultUtilities.setScaleSideMinMax to\n// remove any factor strings\nexport function forceFactorStringsOff(\n  editorConfig,\n  oldFactor,\n  newFactor,\n  factors,\n  isLeft,\n) {\n  // Double or mixed/single scale?\n  const { chartIndex, user } = editorConfig.global;\n  const activePanel = editorConfig.panels[chartIndex];\n  // Just hit everything:\n  reflectFactorInAxisHeader(\n    activePanel,\n    oldFactor,\n    newFactor,\n    factors,\n    isLeft,\n    user,\n  );\n  reflectFactorInSubtitle(\n    editorConfig.global,\n    oldFactor,\n    newFactor,\n    factors,\n    user,\n  );\n  reflectFactorInPanelHeader(activePanel, oldFactor, newFactor, factors, user);\n}\n// FORCE FACTOR STRINGS OFF ends\n\n// FACTOR MMI VALS\n// Called from scale-callback-utilities.handleValuesFromFactorComponent\n// to adjust MMI for scale factor\nexport function factorMmiVals(oldFactor, newFactor, sideScale) {\n  const refactorBy = oldFactor / newFactor;\n  sideScale.min = OtherUtils.trimDecimals(sideScale.min * refactorBy);\n  sideScale.max = OtherUtils.trimDecimals(sideScale.max * refactorBy);\n  // And refactor tickValues\n  for (let iii = 0; iii < sideScale.tickValues.length; iii++) {\n    const tVal = sideScale.tickValues[iii] * refactorBy;\n    sideScale.tickValues[iii] = OtherUtils.trimDecimals(tVal);\n  }\n}\n// FACTOR MMI VALS ends\n","// MAKE ADVANCED FOLD CONFIG\n// Called from Editor.makeFoldsJsx to assemble config\n// objects for Advanced fold sub-components\nexport function makeAdvancedFoldConfig(editorConfig, dps) {\n  const cIndex = editorConfig.global.chartIndex;\n  const activePanel = editorConfig.panels[cIndex];\n  const textFieldConfig = makeTextFieldConfig(dps);\n  const axisHeadersConfig = makeAxisHeadersConfig(activePanel);\n  const numberBoxConfig = makeNumberBoxConfig(editorConfig);\n  return {\n    textFieldConfig,\n    axisHeadersConfig,\n    numberBoxConfig,\n  };\n}\n// MAKE ADVANCED FOLD CONFIG ends\n\nexport function makeNumberBoxConfig(edConfig) {\n  return { value: edConfig.global.strings.numberBox };\n}\n\n// // MAKE AXIS HEADERS CONFIG\n// Config object for axis headers. Arg is active panel\n// in editorConfig\nexport function makeAxisHeadersConfig(activePanel) {\n  const axisHeadersConfig = setAxisHeaderContent(activePanel);\n  // Enablement depends upon chart type\n  setAxisHeaderEnablement(axisHeadersConfig, activePanel);\n  return axisHeadersConfig;\n}\n// MAKE AXIS HEADERS CONFIG ends\n\n// SET AXIS HEADER CONTENT\n// Called from makeAxisHeadersConfig to pull values\n// out of editorConfig\nexport function setAxisHeaderContent(activePanel) {\n  const axHeaders = activePanel.axisHeaders;\n  return {\n    xaxis: { content: axHeaders.xaxis },\n    yaxisleft: { content: axHeaders.yaxisleft },\n    yaxisright: { content: axHeaders.yaxisright },\n    zaxis: { content: axHeaders.zaxis },\n  };\n}\n// SET AXIS HEADER CONTENT\n\n// SET AXIS HEADER ENABLEMENT\n// Called from makeAxisHeadersConfig. Sets enablement flags\n// according to chart type\nexport function setAxisHeaderEnablement(ahObj, activePanel) {\n  const isDouble = activePanel.scales.double.isDouble;\n  const chartType = activePanel.overallChartType;\n  if (isDouble) {\n    ahObj.xaxis.enabled = true;\n    ahObj.yaxisleft.enabled = false;\n    ahObj.yaxisright.enabled = false;\n  } else if (\n    chartType.includes('line') ||\n    chartType.includes('column') ||\n    chartType.includes('thermov')\n  ) {\n    ahObj.xaxis.enabled = true;\n  } else if (chartType.includes('scatter')) {\n    ahObj.xaxis.enabled = false;\n    // FIXME: hard-wiring to r/h/s. Check side...\n    ahObj.yaxisright.enabled = false;\n    if (chartType.includes('sized')) {\n      ahObj.zaxis.enabled = false;\n    }\n  }\n}\n// SET AXIS HEADER ENABLEMENT ends\n\n// MAKE TEXT FIELD CONFIG\n// Config object for paste-in text field\nexport function makeTextFieldConfig(dps) {\n  return {\n    timeFormats: Object.assign([], dps.metadata.timeformats),\n    dayInMilliSeconds: dps.other.dayInMilliSeconds,\n  };\n}\n// MAKE TEXT FIELD CONFIG ends\n\n// UPDATE DEFAULT AXIS HEADERS IN ED-CONFIG\n// Called from Editor.handleValuesFromChartTypeComponent\n// (in which case flag doubleChange is false), or from\n// ScaleCallbackUtils.handleValuesFromDoubleScaleComponent\n// (flag true).\n// Sets x, y and z-axis values to defaults (based on headers for doubles or scatters)\nexport function updateDefaultAxisHeadersInEdConfig(activePanel, doubleChange) {\n  const isDouble = activePanel.scales.double.isDouble;\n  const chartType = activePanel.overallChartType;\n  const ahObj = activePanel.axisHeaders;\n  const dataHeaders = activePanel.chartData.headers;\n  if (doubleChange) {\n    if (isDouble) {\n      setContent(ahObj, 'yaxisleft', dataHeaders[1]);\n      // Get split\n      const splitAt = activePanel.scales.double.splitDataAtCol + 1;\n      setContent(ahObj, 'yaxisright', dataHeaders[splitAt]);\n    }\n    // Dec'20: *don't* reset xaxis header on change to line/col/vthermo\n    // } else if (\n    //   chartType.includes('line') ||\n    //   chartType.includes('column') ||\n    //   chartType.includes('vthermo')\n    // ) {\n    // setContent(ahObj, 'xaxis', dataHeaders[1]);\n    // setContent(ahObj, 'xaxis', '');\n  } else if (chartType.includes('scatter')) {\n    setContent(ahObj, 'xaxis', dataHeaders[1]);\n    // FIXME: hard-wiring to r/h/s. Check side...\n    setContent(ahObj, 'yaxisright', dataHeaders[2]);\n    if (chartType.includes('sized')) {\n      setContent(ahObj, 'zaxis', dataHeaders[3]);\n    }\n  }\n}\n// UPDATE DEFAULT AXIS HEADERS IN ED-CONFIG ends\n\n// SET CONTENT\n// Called from updateDefaultAxisHeadersInEdConfig\nexport function setContent(ahObj, node, source) {\n  // Again: this was surely madness!\n  // if (ahObj[node].length === 0) {\n  ahObj[node] = source;\n  // }\n}\n// SET CONTENT ends\n","/*\n    Functions to triage callbacks from Scales fold and children\n    - handleScaleCallback\n    - handleFactorCallbak\n    - handleInvertCallback\n    - handleDoubleScaleCallback\n    All (?) called from Editor.handleValuesFromScalesFold\n*/\n\nimport globalAssets from \"../assets/globalAssets\";\nimport * as EditorConfigDefaultUtils from './editor-config-default-utilities';\nimport * as EditorUtils from './editor-utilities';\nimport * as FactorUtils from './factor-utilities';\nimport * as AdvancedFoldUtils from './advanced-fold-utilities';\n\n// SCALE CHANGE SINGLE MIXED DOUBLE\n// Called from handleValuesFromDoubleScaleComponent to check\n// whether we've swapped from single/mixed to double or vice versa\nexport function scaleChangeSingleMixedDouble(oldScale, newScale) {\n  let scaleChanged = false;\n  if (!oldScale.double.isDouble && newScale === 'double') {\n    // True for single or mixed to double\n    scaleChanged = true;\n  } else if (oldScale.double.isDouble && newScale !== 'double') {\n    // True for double to single or mixed\n    scaleChanged = true;\n  }\n  // Prev'y True if swapped single/double to or from mixed. But that\n  // shouldn't change.\n  // else if (newScale === 'mixed' && !oldScale.mixed.isMixed) {\n  //   //\n  //   scaleChanged = true;\n  // } else if (newScale === 'single') {\n  //   if (oldScale.mixed.isMixed || oldScale.double.isDouble) {\n  //     scaleChanged = true;\n  //   }\n  // }\n  return scaleChanged;\n}\n// SCALE CHANGE SINGLE MIXED DOUBLE ends\n\n// SCALE CHANGE STACKING\n// Called from handleValuesFromDoubleScaleComponent to check\n// whether stacking has changed on double scale\nexport function scaleChangeStacking(oldCT, newCT) {\n  let scaleChanged = false;\n  if (newCT.left.type === 'column') {\n    // Has left-stacking changed?\n    const oldStack = oldCT.left.stacked;\n    scaleChanged = newCT.left.stacked !== oldStack;\n  }\n  if (newCT.right.type === 'column') {\n    // Has right-stacking changed?\n    const oldStack = oldCT.right.stacked;\n    scaleChanged = newCT.right.stacked !== oldStack;\n  }\n  return scaleChanged;\n}\n// SCALE CHANGE STACKING ends\n\n// SCALE CHANGE SPLIT\n// Called from handleValuesFromDoubleScaleComponent to check\n// whether split point of series has changed\nexport function scaleChangeSplit(oldScale, newVals) {\n  const oldSplit = oldScale.double.splitDataAtCol;\n  return newVals.splitDataAtCol !== oldSplit;\n}\n// SCALE CHANGE SPLIT ends\n\n// GET SCALE CALLBACK SIDE\n// This is a (hopefully) temporary expedient to\n// reconcile indexed scale components with my\n// fossilised 'side' malarky. Returns\n// 'left' or 'right'\n// NOTE: As of Oct'19, this shouldn't be called... and,\n// with luck, can be deleted. Check back.\nexport function getScaleCallbackSide(activePanel, scaleVals) {\n  const scaleIndex = scaleVals.index;\n  const isDouble = activePanel.scales.double.isDouble;\n  let side = 'left';\n  let chartType = activePanel.chartType.left.type;\n  if (activePanel.enableScale.right) {\n    chartType = activePanel.chartType.right.type;\n  }\n  if (isDouble) {\n    if (scaleIndex === 1) {\n      side = 'right';\n    }\n  } else if (chartType.includes('scatter')) {\n    if (scaleIndex === 1) {\n      side = 'right';\n    } else if (scaleIndex === 2) {\n      side = 'z';\n    }\n  } else if (\n    chartType.includes('line') ||\n    chartType.includes('col') ||\n    chartType.includes('horiz')\n  ) {\n    side = 'right';\n    // Bars and h-thermos stick on default 'left'\n  }\n  return side;\n}\n// GET SCALE CALLBACK SIDE ends\n\nexport function updateEdConFromScaleComponent(activePanel, values) {\n  const newVals = values.vals.mmi;\n  // Map scale index to chart 'side' (currently left/right)\n  // NOTE: well, this was crap:\n  // const side = getScaleCallbackSide(activePanel, values.vals);\n  // As far as I can see (Oct'19), I sent the side into each\n  // scale instance, so I should get it back again!\n  const side = values.vals.side;\n  const { scales } = activePanel;\n  const scaleSide = scales[side];\n  scaleSide.min = newVals.min;\n  scaleSide.max = newVals.max;\n  scaleSide.increment = newVals.increment;\n  scaleSide.tickDensity = newVals.tickDensity;\n  scaleSide.tickValues = newVals.tickValues;\n  // Get rid of unwanted properties (these can mess up the Monteux metaData)\n  // (Actually, this doesn't solve the problem)\n  delete scaleSide.label;\n  delete scaleSide.side;\n  delete scaleSide.densityOK;\n}\n\n// ENABLE SCALE SIDES\nexport function enableScaleSides(isDouble, chartType, enableSide) {\n  // I haven't allowed for stacking. But actually, I think that\n  // is unnecessary -- basic chart type is enough\n  const eObj = {\n    left: false,\n    right: false,\n  };\n  if (isDouble) {\n    eObj.left = true;\n    eObj.right = true;\n  } else {\n    if (chartType.includes('bar')) {\n      // NOTE: I might eventually want to translate top/bottom to left/right\n      // Meanwhile, just forcing 'left'\n      enableSide = 'left';\n    }\n    eObj[enableSide] = true;\n  }\n  return eObj;\n}\n// ENABLE SCALE SIDES ends\n\n// HANDLE VALUES FROM DOUBLE SCALE COMPONENT\nexport function handleValuesFromDoubleScaleComponent(editorConfig, values) {\n  // Fetch props\n  const edConGlobal = editorConfig.global;\n  const { chartIndex } = edConGlobal;\n  const activePanel = editorConfig.panels[chartIndex];\n  // Existing and new scale properties:\n  const oldScale = activePanel.scales;\n  const newScale = values.scale;\n  // Check for any changes that would require a\n  // re-calculation of the scale values\n  // Has single/mixed/double status changed?\n  let scaleChanged = scaleChangeSingleMixedDouble(oldScale, newScale);\n  // Has stacking changed?\n  if (!scaleChanged) {\n    scaleChanged = scaleChangeStacking(activePanel.chartType, values.chartType);\n  }\n  // Has split point changed, mixed/double?\n  if (!scaleChanged) {\n    scaleChanged = scaleChangeSplit(oldScale, values);\n  }\n  // Current enablement left/right\n  // scaleChanged is true if 'scale' has changed (e.g. single to double)\n  if (scaleChanged) {\n    if (newScale === 'double') {\n      // Double scale\n      activePanel.enableScale.left = true;\n      activePanel.enableScale.right = true;\n    } else {\n      // Single and mixed revert to default chart type and axis side\n      const dps = Object.assign({}, globalAssets.DefaultPreferences);\n      const chartType = dps.metadata.defaults.type;\n      const side = dps.axes.yAxis.orient[chartType];\n      activePanel.enableScale = enableScaleSides(false, chartType, side);\n    }\n  }\n  activePanel.scales.double.isDouble = newScale === 'double';\n  activePanel.scales.mixed.isMixed = newScale === 'mixed';\n  if (activePanel.scales.double.isDouble) {\n    activePanel.scales.double.splitDataAtCol = values.splitDataAtCol;\n    activePanel.scales.mixed.splitDataAtCol = 0;\n  } else if (activePanel.scales.mixed.isMixed) {\n    activePanel.scales.mixed.splitDataAtCol = values.splitDataAtCol;\n    activePanel.scales.double.splitDataAtCol = 0;\n  } else {\n    activePanel.scales.double.splitDataAtCol = 0;\n    activePanel.scales.mixed.splitDataAtCol = 0;\n  }\n  // Try this:\n  activePanel.chartType = Object.assign({}, values.chartType);\n  // If structural change, reset editorConfig\n  // Sends empty string as 3rd param, which is read as 'chartType' for\n  // scatters fork\n  if (scaleChanged) {\n    EditorConfigDefaultUtils.revertPanelDefaultVals(\n      editorConfig,\n      'double',\n      '',\n      false,\n    );\n    // Axis headers:\n    AdvancedFoldUtils.updateDefaultAxisHeadersInEdConfig(activePanel, true);\n  }\n}\n// HANDLE VALUES FROM DOUBLE SCALE COMPONENT ends\n\n// HANDLE VALUES FROM INDEXED COMPONENT\nexport function handleValuesFromIndexedComponent(editorConfig, iFlag) {\n  const edConGlobal = editorConfig.global;\n  const { chartIndex } = edConGlobal;\n  const activePanel = editorConfig.panels[chartIndex];\n  activePanel.indexed.indexFlag = iFlag;\n}\n// HANDLE VALUES FROM INDEXED COMPONENT ends\n\n// HANDLE VALUES FROM LOG COMPONENT\n// Called from handleValuesFromScalesComponent to pass\n// log flag to editorConfig\nexport function handleValuesFromLogComponent(editorConfig, values) {\n  const activePanel = EditorUtils.getActivePanel(editorConfig);\n  const isLog = values.log;\n  const side = values.side;\n  const chartType = activePanel.chartType[side].type;\n  activePanel.scales[side].log = isLog;\n  // Parallel to call from double scale handler here...\n  EditorConfigDefaultUtils.revertPanelDefaultVals(\n    editorConfig,\n    'log',\n    chartType,\n    false,\n  );\n}\n// HANDLE VALUES FROM LOG COMPONENT ends\n\n// HANDLE VALUES FROM SHARE-SCALE COMPONENT\n// Handles 'Share Scale'. Applies scale values of current\n// panel to all.\n// Mod Jun'20 to share chart type, too\n// Mod Sep'20 to share index-status\n// Mod May'21 to 'swap' sides (bar/column) if nec'y\nexport function handleValuesFromShareScaleComponent(editorConfig) {\n  const cIndex = editorConfig.global.chartIndex;\n  const panels = editorConfig.panels;\n  const pCount = panels.length;\n  const activePanel = panels[cIndex];\n  const activeScales = JSON.parse(JSON.stringify(activePanel.scales));\n  const activeChartType = JSON.parse(JSON.stringify(activePanel.chartType));\n  for (let pNo = 0; pNo < pCount; pNo++) {\n    if (pNo !== cIndex) {\n      const targetPanel = panels[pNo];\n      // Preserve actual min/max values, left/right\n      let actualMinLeft = targetPanel.scales.left.actualMin;\n      let actualMaxLeft = targetPanel.scales.left.actualMax;\n      let actualMinRight = targetPanel.scales.right.actualMin;\n      let actualMaxRight = targetPanel.scales.right.actualMax;\n      // Do sides swap (e.g., column to bar)?\n      const sidesSwap =\n        EditorUtils.getSide(targetPanel) !== EditorUtils.getSide(activePanel);\n      if (sidesSwap) {\n        // Reset enableScale flags\n        targetPanel.enableScale = JSON.parse(\n          JSON.stringify(activePanel.enableScale),\n        );\n        // Swap actual values\n        actualMinLeft = targetPanel.scales.right.actualMin;\n        actualMaxLeft = targetPanel.scales.right.actualMax;\n        actualMinRight = targetPanel.scales.left.actualMin;\n        actualMaxRight = targetPanel.scales.left.actualMax;\n      }\n      // Now move scales\n      targetPanel.scales.left = activeScales.left;\n      targetPanel.scales.right = activeScales.right;\n      // ...and put actual values back\n      targetPanel.scales.left.actualMin = actualMinLeft;\n      targetPanel.scales.left.actualMax = actualMaxLeft;\n      targetPanel.scales.right.actualMin = actualMinRight;\n      targetPanel.scales.right.actualMax = actualMaxRight;\n      // Index status doesn't swap\n      setSharedIndexedStatus(targetPanel, activePanel.indexed.indexFlag);\n      // Chart type doesn't swap\n      targetPanel.chartType = activeChartType;\n      targetPanel.overallChartType = activePanel.overallChartType;\n    }\n  }\n}\n// HANDLE VALUES FROM SHARE-SCALE COMPONENT\n\n// export function setSharedChartType(targetPanel, activePanel) {\n//   const activeChartTypeObject = activePanel.chartType;\n//   const tSide = EditorUtils.getSide(targetPanel);\n//   const aSide = EditorUtils.getSide(activePanel);\n//   if (tSide === aSide) {\n//     targetPanel.chartType = JSON.parse(JSON.stringify(activeChartTypeObject));\n//   } else {\n//     targetPanel.chartType.left = JSON.parse(\n//       JSON.stringify(activeChartTypeObject.right),\n//     );\n//     targetPanel.chartType.right = JSON.parse(\n//       JSON.stringify(activeChartTypeObject.left),\n//     );\n//   }\n// }\n\n// SET SHARED INDEXED STATUS\n// Called from handleValuesFromShartScaleComponent. Sets indexed\n// status of target to match source panel (if possible)\nexport function setSharedIndexedStatus(targetPanel, indexFlag) {\n  if (indexFlag) {\n    EditorConfigDefaultUtils.getIndexedPoint(\n      targetPanel.indexed,\n      targetPanel.chartData.dataArray,\n      targetPanel.blobs.column,\n      true,\n    );\n  } else {\n    targetPanel.indexed = EditorConfigDefaultUtils.getEdConfigDefaultIndexed();\n  }\n}\n// SET SHARED INDEXED STATUS ends\n\n// HANDLE VALUES FROM FACTOR COMPONENT\n// Responds to 'Factor' dropdown -- which is disabled, as of Oct'20\nexport function handleValuesFromFactorComponent(editorConfig, vals) {\n  const { chartIndex } = editorConfig.global;\n  const activePanel = editorConfig.panels[chartIndex];\n  const { scales } = activePanel;\n  // 'left' or 'right'\n  const activeSide = vals.factorSide;\n  const isLeft = vals.factorSide === 'left';\n  let targetScale = scales.right;\n  let oldFactor = targetScale.factor;\n  let newFactor = vals.right.factor;\n  if (isLeft) {\n    targetScale = scales.left;\n    oldFactor = activePanel.scales.left.factor;\n    newFactor = vals.left.factor;\n  }\n  if (oldFactor !== newFactor) {\n    // Reset factored vals\n    FactorUtils.factorMmiVals(oldFactor, newFactor, targetScale);\n    targetScale.factor = newFactor;\n    // Update subtitle (or whatever) string\n    // Arg 5 is 'isLeft' flag\n    FactorUtils.reflectFactorInStrings(\n      editorConfig,\n      oldFactor,\n      newFactor,\n      globalAssets.DefaultPreferences.other.factors,\n      isLeft,\n    );\n  }\n  // Mixed scale updates inactive side with new factor\n  if (scales.mixed.isMixed) {\n    oldFactor = scales.right.factor;\n    targetScale = scales.right;\n    if (activeSide === 'right') {\n      oldFactor = scales.left.factor;\n      targetScale = scales.left;\n    }\n    FactorUtils.factorMmiVals(oldFactor, newFactor, targetScale);\n    targetScale.factor = newFactor;\n  }\n}\n// HANDLE VALUES FROM FACTOR COMPONENT ends\n\n// HANDLE VALUES FROM SCALES FOLD\n// Called from Editor.fieldValuesFromScalesFold\n// Calls sub-handlers to deal with specific child\n// components of ScalesFoldBody: Scale, Factor,\n// Invert, DoubleScale\nexport function handleValuesFromScalesFold(editorConfig, values) {\n  // Get bearings:\n  const { chartIndex } = editorConfig.global;\n  const activePanel = editorConfig.panels[chartIndex];\n  const { scales } = activePanel;\n  const subComponent = values.vals.component;\n  // If callback came from Scale, I have to update editorConfig,\n  // to pass any bad or provisional update back down to\n  // the scales fold. So I have a flag to prevent a chart update:\n  let callSibyl = values.vals.updateChart;\n  if (typeof callSibyl === 'undefined') {\n    callSibyl = false;\n  }\n  if (subComponent === 'scales') {\n    updateEdConFromScaleComponent(activePanel, values);\n  } else if (subComponent === 'factor') {\n    // As of Oct'20, no longer called\n    handleValuesFromFactorComponent(editorConfig, values.vals);\n  } else if (subComponent === 'invert') {\n    // Just update both sides...\n    scales.left.invert = values.vals.left.invert;\n    scales.right.invert = values.vals.right.invert;\n    // But align mixed scales...\n    if (scales.mixed.isMixed) {\n      if (activePanel.enableScale.left) {\n        scales.right.invert = scales.left.invert;\n      } else {\n        scales.left.invert = scales.right.invert;\n      }\n    }\n  } else if (subComponent === 'doublescale') {\n    handleValuesFromDoubleScaleComponent(editorConfig, values.vals);\n  } else if (subComponent === 'indexed') {\n    const iFlag = values.vals.indexFlag;\n    handleValuesFromIndexedComponent(editorConfig, iFlag);\n  } else if (subComponent === 'log') {\n    handleValuesFromLogComponent(editorConfig, values.vals);\n  } else if (subComponent === 'share-scale') {\n    handleValuesFromShareScaleComponent(editorConfig);\n  }\n  return callSibyl;\n}\n// HANDLE VALUES FROM SCALES FOLD ends\n","import globalAssets from \"../assets/globalAssets\";\nimport * as ScaleCallbackUtils from './scale-callback-utilities';\nimport * as EditorUtils from './editor-utilities';\nimport * as MinMaxUtils from './editor-minmax-utilities';\n\n// DEFAULT PROPERTY SUPPLIERS\nexport function getEdConfigDefaultSize() {\n  const source = Object.assign(\n    {},\n    globalAssets.DefaultPreferences.background.outerbox.dimensions.default,\n  );\n  return {\n    width: source.width,\n    height: source.height,\n    defaultRecommendedHeight: source.height,\n    pngWidth: source.pngWidth,\n  };\n}\nexport function getEdConfigDefaultPanelVals() {\n  const source = Object.assign({}, globalAssets.DefaultPreferences.metadata.defaults.panels);\n  return {\n    active: source.active,\n    total: source.total,\n    rows: source.rows,\n  };\n}\nexport function getEdConfigDefaultChartType() {\n  const source = Object.assign({}, globalAssets.DefaultPreferences.metadata.defaults);\n  return {\n    left: {\n      type: source.type,\n      stacked: source.stacked,\n      thermoDots: source.thermoDots,\n      scatterLabels: source.scatterLabels,\n      scatterTrendline: source.scatterTrendline,\n    },\n    right: {\n      type: source.type,\n      stacked: source.stacked,\n      thermoDots: source.thermoDots,\n      scatterLabels: source.scatterLabels,\n      scatterTrendline: source.scatterTrendline,\n    },\n  };\n}\nexport function getEdConfigDefaultOverallChartType() {\n  const ocType = globalAssets.DefaultPreferences.metadata.defaults.type;\n  return ocType;\n}\nexport function getEdConfigDefaultBlobs() {\n  const source = Object.assign({}, globalAssets.DefaultPreferences.metadata.defaults.blobs);\n  return {\n    column: source.column,\n    hasBlobs: false,\n    header: source.header,\n    isRect: source.isRect,\n  };\n}\nexport function getEdConfigDefaultLegend() {\n  const source = Object.assign({}, globalAssets.DefaultPreferences.legend);\n  return {\n    max: source.columns.max,\n    columns: source.columns.columns,\n    header: source.header,\n  };\n}\nexport function getEdConfigDefaultData() {\n  return {\n    rawData: '',\n    dataArray: [],\n    validityMsg: '',\n    radicalDataChange: true,\n    isTable: false,\n  };\n}\nexport function getDefaultScaleSideProps() {\n  return {\n    max: 0,\n    min: 0,\n    increment: 0,\n    factor: 1,\n    log: false,\n    invert: false,\n    actualMin: 0,\n    actualMax: 0,\n    tickDensity: 0,\n    tickValues: '',\n  };\n}\nexport function getEdConfigDefaultScales() {\n  const source = Object.assign({}, globalAssets.DefaultPreferences.metadata.defaults);\n  const defaultScales = {\n    mixed: Object.assign({}, source.mixedScale),\n    double: Object.assign({}, source.doubleScale),\n    scatter: Object.assign({}, source.scatter),\n    left: Object.assign({}, getDefaultScaleSideProps()),\n    right: Object.assign({}, getDefaultScaleSideProps()),\n    z: Object.assign({}, getDefaultScaleSideProps()),\n  };\n  // Enablement: left and right\n  // NO! Separate, root property\n  // const enableSide = Object.assign({}, globalAssets.DefaultPreferences.axes.yAxis.orient[source.type]);\n  // EditorUtils.enableScaleSides(defaultScales, source.type, enableSide);\n  return defaultScales;\n}\nexport function getEdConfigDefaultBackgroundStrings() {\n  const source = Object.assign({}, globalAssets.DefaultPreferences.background.strings);\n  // editorConfig only needs string *content*\n  return {\n    title: source.title.content,\n    subtitle: source.subtitle.content,\n    subsubtitle: source.subsubtitle.content,\n    source: source.source.content,\n    footnote: source.footnote.content,\n    numberBox: source.numberBox.content,\n  };\n}\nexport function getEdConfigDefaultPanelHeader() {\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  return dps.panelAttributes.strings.panelheader.default;\n}\nexport function getEdConfigDefaultEnableScale() {\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  const source = Object.assign({}, dps.metadata.defaults);\n  const isDouble = source.doubleScale.isDouble;\n  // According to default chart type, set left/right emablement\n  const side = dps.axes.yAxis.orient[source.type];\n  const enable = ScaleCallbackUtils.enableScaleSides(\n    isDouble,\n    source.type,\n    side,\n  );\n  return enable;\n}\nexport function getEdConfigDefaultChartIndex() {\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  return dps.metadata.defaults.chartIndex;\n}\nexport function getEdConfigDefaultPanelSize() {\n  return {};\n}\nexport function getEdConfigDefaultIndexed() {\n  return {\n    indexCat: '',\n    indexFlag: false,\n    indexPoint: -1,\n  };\n}\nexport function getEdConfigDefaultAxisHeaders() {\n  return {\n    xaxis: '',\n    yaxisleft: '',\n    yaxisright: '',\n    zaxis: '',\n  };\n}\n// DEFAULT PROPERTY SUPPLIERS end\n\n// IS ROW INDEXABLE\n// Called from getIndexedPoint. Returns true if all\n// elements in an array (row) are 100\nexport function isRowIndexable(aRow) {\n  // Flag is on by default\n  let rowFlag = true;\n  // Loop by 'columns' (omit cats)\n  for (let cNo = 1; cNo < aRow.length; cNo++) {\n    // If any 'cell' in the row is not 100, break\n    if (parseInt(aRow[cNo], 10) !== 100) {\n      rowFlag = false;\n      break;\n    }\n  }\n  // Row result: true if all 'cells' are 100\n  return rowFlag;\n}\n\n// GET INDEXED POINT\n// Called from runIndexedCheck and ScaleCallbackUtils.setSharedIndexedStatus\n// Args are the 'indexed' object, the complete data array,\n// the blob col (excluded) and a flag indicating caller\n//  updates 'indexed' by ref.\n// For a possible index, all values in one 'row' must = 100\n// If we're sharing a scale, index flag is forced on\nexport function getIndexedPoint(iObj, dArray, blobCol, sharingScale) {\n  let canIndex = false;\n  let pointNo = 0;\n  let iCat = '';\n  // Outer loop by 'rows' (omit headers)\n  for (let rNo = 1; rNo < dArray.length; rNo++) {\n    // Exclude blobs\n    const aRow = Object.assign([], dArray[rNo]);\n    if (blobCol > 0) {\n      aRow.splice(blobCol, 1);\n    }\n    // Check one 'row'\n    if (isRowIndexable(aRow)) {\n      pointNo = rNo;\n      iCat = aRow[0];\n      canIndex = true;\n      break;\n    }\n  }\n  if (canIndex) {\n    iObj.indexCat = iCat;\n    iObj.indexPoint = pointNo;\n    // Only set index flag on, if sharing scale\n    if (sharingScale) {\n      iObj.indexFlag = true;\n    }\n  } else {\n    // No 'all-100':\n    iObj.indexCat = '';\n    iObj.indexFlag = false;\n    iObj.indexPoint = -1;\n  }\n}\n// GET INDEXED POINT ends\n\n// RUN INDEXED CHECK\n// Called from revertPanelDefaultVals\n// Args are edConfigPanel and double/mixed flags\n// By ref, update edConfigPanel with\n// properties indexPoint, indexCat, indexFlag\nexport function runIndexedCheck(edConfigPanel, isDouble, isMixed) {\n  // Isolate data array\n  let indexAllowed = true;\n  if (isDouble || isMixed) {\n    indexAllowed = false;\n  } else {\n    // Get side\n    if (\n      edConfigPanel.enableScale.left &&\n      edConfigPanel.chartType.left.type !== 'line'\n    ) {\n      // NOTE: but I'm not checking for stacked...\n      indexAllowed = false;\n    }\n    if (\n      edConfigPanel.enableScale.right &&\n      edConfigPanel.chartType.right.type !== 'line'\n    ) {\n      indexAllowed = false;\n    }\n  }\n  // NOTE: keep an eye on this\n  // Set indexed object back to 'off' defaults.\n  edConfigPanel.indexed = getEdConfigDefaultIndexed();\n  if (indexAllowed) {\n    // Look for a point at which all series = 100\n    // (excluding blobs col)\n    const blobCol = edConfigPanel.blobs.column;\n    const { dataArray } = edConfigPanel.chartData;\n    getIndexedPoint(edConfigPanel.indexed, dataArray, blobCol, false);\n  }\n}\n// RUN INDEXED CHECK ends\n\n// RESET DEFAULTS FOR RAW DATA FROM ADVANCED FOLD\n// Called by revertPanelDefaultVals if new data have arrived from\n// the textarea on the Advanced fold (shouldn't happen once we're\n// talking to Monteux, but left as failsafe).\n// Just resets blob and scale defaults...\nexport function resetDefaultsForRawDataFromAdvancedFold(edConfigPanel) {\n  edConfigPanel.blobs = getEdConfigDefaultBlobs();\n  edConfigPanel.scales = getEdConfigDefaultScales();\n}\n// RESET DEFAULTS FOR RAW DATA FROM ADVANCED FOLD ends\n\n// RESET SCALE INVERSION\n// Called from revertPanelDefaultVals. If chart type !== line,\n// force inverted scale off\nexport function resetScaleInversion(myPanel) {\n  const leftType = myPanel.chartType.left.type;\n  const leftInverts = leftType.includes('line');\n  const rightType = myPanel.chartType.right.type;\n  const rightInverts = rightType.includes('line');\n  if (!leftInverts) {\n    myPanel.scales.left.invert = false;\n  }\n  if (!rightInverts) {\n    myPanel.scales.right.invert = false;\n  }\n  //\n  //\n  // But there's also an issue with mixed scales, where I want the\n  // 'inactive' scale to align to the active...\n  if (myPanel.scales.mixed.isMixed) {\n    if (!myPanel.enableScale.left) {\n      myPanel.scales.left.invert = myPanel.scales.right.invert;\n    } else if (!myPanel.enableScale.right) {\n      myPanel.scales.right.invert = myPanel.scales.left.invert;\n    }\n  }\n}\n// RESET SCALE INVERSION ends\n\n// IS THIS TABLE\n// Called from revertPanelDefaultVals\nexport function isThisTable(myPanel) {\n  let isTable = false;\n  const overallChartType = myPanel.overallChartType;\n  if (typeof overallChartType !== 'undefined') {\n    isTable = overallChartType.includes('Table');\n  }\n  return isTable;\n}\n// IS THIS TABLE ends\n\n// REVERT PANEL DEFAULT VALS\n// Called from subcomponent callback handlers, to reset the editorConfig\n// to new values. Args are the panel-specific editorConfig object and a\n// string indicating new values are data, double-scale, log... whatever...?\nexport function revertPanelDefaultVals(\n  editorConfig,\n  source,\n  chartType,\n  newPayload,\n) {\n  const myPanel = EditorUtils.getActivePanel(editorConfig);\n  // Array of raw data\n  const { dataArray } = myPanel.chartData;\n  // If this has been called from the data values handler,\n  // reset some defaults\n  if (source === 'data') {\n    resetDefaultsForRawDataFromAdvancedFold(myPanel);\n  }\n  const { isDouble } = myPanel.scales.double;\n  const { isMixed } = myPanel.scales.mixed;\n  const isScatter = chartType.includes('scatter');\n  // INDEXED -- is option compatible with double/mixed scale\n  // or with data (100s)\n  if (source === 'double' || source === 'data' || source === 'blobs') {\n    runIndexedCheck(myPanel, isDouble, isMixed);\n  }\n  // Defaults (for non-double only)\n  let side = 'left';\n  let splitDataAtCol = 0;\n  // Let the real work begin...\n  if (isDouble || isMixed) {\n    // Get 'column' at which data split\n    if (isDouble) {\n      splitDataAtCol = myPanel.scales.double.splitDataAtCol;\n    } else {\n      splitDataAtCol = myPanel.scales.mixed.splitDataAtCol;\n    }\n    if (splitDataAtCol > 0) {\n      // Default: mixed calculate scale with ALL data; same MMI left and right\n      let leftArray = Object.assign([], dataArray);\n      let rightArray = Object.assign([], dataArray);\n      if (isDouble) {\n        // But double scales split data into 'left' and 'right'\n        const splitArray = EditorUtils.splitDataArray(\n          dataArray,\n          splitDataAtCol + 1,\n        );\n        leftArray = splitArray.leftArray;\n        rightArray = splitArray.rightArray;\n      }\n      // Set left and right scales\n      MinMaxUtils.setScaleSideMinMax(leftArray, editorConfig, 'left');\n      MinMaxUtils.setScaleSideMinMax(rightArray, editorConfig, 'right');\n    }\n  } else if (isScatter) {\n    // NOTE: this may duplicate EditorConfigUtils.resetActualScaleValuesFromNewPayload\n    // The flow here follows a user gesture\n    // Left is 'x' axis; right is 'y' axis\n    const { isSimple } = myPanel.scales.scatter;\n    const splitArray = EditorUtils.splitScatterDataArray(dataArray, isSimple);\n    // So splitArray is an object with 'left', 'right' and 'z' properties\n    MinMaxUtils.setScaleSideMinMax(splitArray.leftArray, editorConfig, 'left');\n    MinMaxUtils.setScaleSideMinMax(\n      splitArray.rightArray,\n      editorConfig,\n      'right',\n    );\n    if (!isSimple) {\n      MinMaxUtils.setZScaleMinMax(splitArray.zArray, myPanel);\n    }\n  } else {\n    // Single (log or non-log)\n    // So which side is scale?\n    side = EditorUtils.getSide(myPanel);\n    MinMaxUtils.setScaleSideMinMax(dataArray, editorConfig, side);\n  }\n  //\n  // LEGEND: if new raw data, set default legend columns\n  if (newPayload) {\n    const seriesCount = myPanel.chartData.dataArray[0].length - 1;\n    const legendCols = EditorUtils.defaultLegendColumns(seriesCount);\n    myPanel.legend.columns = legendCols;\n  }\n  // INVERTED SCALE: force off if chart type !== line\n  // and scale is log\n  resetScaleInversion(myPanel);\n}\n// REVERT PANEL DEFAULT VALS ends\n","// Log scales\n\n// GET CYCLE START OR END\n// Called from setNewLogScale to get the start or end of\n// a cycle containing the passed value\nexport function getCycleStartOrEnd(val, isStart) {\n  let result = 1;\n  if (val > 1) {\n    // Count number of integer digits\n    // val = parseInt(val, 10);\n    // const len = val.toString().length;\n    // for (let i = 0; i < len; i++) {\n    //   result *= 10;\n    // }\n    while (val > 1) {\n      val /= 10;\n      result *= 10;\n    }\n    if (isStart) {\n      result /= 10;\n    }\n  } else if (val < 1) {\n    while (val < 1) {\n      val *= 10;\n      result /= 10;\n    }\n    if (!isStart) {\n      result *= 10;\n    }\n  }\n  return result;\n}\n\nexport function forceMultiple(val, mult) {\n  let result = val;\n  if (val < 1) {\n    // Get number of dps\n    const dpCount = val.toString().split('.')[1].length;\n    result = Number((val * mult).toFixed(dpCount));\n  } else {\n    result = val * mult;\n  }\n  return result;\n}\n\nexport function appendLogTickVals(logVals) {\n  let min = logVals.min;\n  let max = logVals.max;\n\n  // Now factor up to get round Math issues\n  let factoredBy = 1;\n  while (!Number.isInteger(min)) {\n    min *= 10;\n    max *= 10;\n    factoredBy *= 10;\n  }\n\n  const incrCode = logVals.increment;\n  // scale.min = min;\n  // scale.max = max;\n  // scale.incr = incrCode;\n  // Increment is complicated. It's based on the idea:\n  //    0: single log units\n  //    1: half cycles\n  //    2: complete cycles\n  // And we assemble tickValues as we go...\n  // Initial increment:\n  let incrA = min;\n  let incrB = min;\n\n  let cycleEnd = min * 10;\n  const tickVals = [min];\n  if (incrCode === 1) {\n    incrA *= 4;\n    incrB *= 5;\n  } else if (incrCode === 2) {\n    incrB *= 9;\n  }\n  while (min < max) {\n    if (incrCode === 1) {\n      min += incrA;\n      tickVals.push(min);\n      min += incrB;\n      tickVals.push(min);\n    } else {\n      min += incrB;\n      tickVals.push(min);\n    }\n    if (min >= cycleEnd) {\n      incrA *= 10;\n      incrB *= 10;\n      cycleEnd *= 10;\n    }\n  }\n  // Factor back down:\n  for (let iii = 0; iii < tickVals.length; iii++) {\n    tickVals[iii] /= factoredBy;\n  }\n  logVals.tickValues = tickVals;\n  logVals.tickDensity = tickVals.length;\n}\n\nexport function setNewLogScale(actualMinMax) {\n  // I need actual values\n  const actualMin = actualMinMax.min;\n  const actualMax = actualMinMax.max;\n  const logMin = getCycleStartOrEnd(actualMin, true);\n  const logMax = getCycleStartOrEnd(actualMax, false);\n  // Increment is an index for the dropdown, which\n  // can be 0, 1 or 2. Default is 2 (complete cycles).\n  const incrCode = 2;\n  // const maxDivByMin = logMax / logMin;\n  // if (maxDivByMin > 1000000) {\n  //   incrCode = 2;\n  // } else if (maxDivByMin > 10000) {\n  //   incrCode = 1;\n  // }\n  // Provisional mmi object\n  const logVals = {\n    actualMin,\n    actualMax,\n    factor: 1,\n    log: true,\n    min: logMin,\n    max: logMax,\n    increment: incrCode,\n  };\n  // Still needs tick values and density:\n  appendLogTickVals(logVals);\n  return logVals;\n}\n","// Contains the chain of functions that assemble a virgin\n// editorConfig object. And random colour generation for series.\n// Main entry is via initiateNewEditorConfig, which is called\n// from Editor.componentWillMount...\n\nimport globalAssets from \"../assets/globalAssets\";\nimport * as FactorUtils from './factor-utilities';\nimport * as LogUtils from './log-utilities';\nimport * as OtherUtils from './other-utilities';\nimport * as EditorUtils from './editor-utilities';\n\n// GET RECOMMENDED MIN-MAX-INCR\n// Called from editor-config-utilities.payloadToEdConfigPanel\n// for non-log scales. Passed 3 args:\n//    object containing actual min & max vals\n//    object containing axis props\n//      (number of steps, & array of plausible increments)\n//    factor\n// Returns obj with properties:\n//    min, max, increment, factor, log (false)\n//    updated step-count\n//    tickValues (better than leaving D3 to work out the scale vals to show)\nexport function getRecommendedMinMaxIncr(actual, aProps, factor) {\n  const actualMin = actual.min / factor;\n  const actualMax = actual.max / factor;\n  // Init new object with actual min/max values\n  const mmObj = {\n    actualMin,\n    actualMax,\n    factor,\n    log: false,\n  };\n  let min = 0;\n  // Min can't exceed zero; max can't be less than zero\n  // NOTE: this needs reconsideration -- or maybe rely upon user overwrite\n  const minVal = Math.min(0, actualMin);\n  const maxVal = Math.max(0, actualMax);\n  // Do (max-min) / steps to get a raw increment\n  let increment = (maxVal - minVal) / aProps.tickDensity;\n  // We have a list of plausible increments\n  const plausibleIncrs = aProps.plausibleIncrements;\n  const piLen = plausibleIncrs.length;\n  // Factor the increment up or down to fit\n  let turns = 1;\n  if (increment < plausibleIncrs[0]) {\n    while (increment < plausibleIncrs[0]) {\n      increment *= 10;\n      turns /= 10;\n    }\n  } else {\n    while (increment > plausibleIncrs[piLen - 1]) {\n      increment /= 10;\n      turns *= 10;\n    }\n  }\n  // Increment is probably imperfect, so loop through\n  // the array of plausibilities, raising the increment\n  // to the next acceptable value\n  // Plausible increment is the first greater than the raw incr.\n  for (let i = 0; i < piLen; i++) {\n    const plausVal = plausibleIncrs[i];\n    if (plausVal >= increment) {\n      increment = plausVal;\n      break;\n    }\n  }\n  // Now multiply increment back up again, fixing precision:\n  increment = OtherUtils.trimDecimals(increment * turns);\n  // From zero, lower min to next acceptable value on or below inherited min\n  while (min > minVal) {\n    min -= increment;\n  }\n  // From min, raise max to next acceptable value on or above inherited max\n  // Build tickValues as we go, since we need tickDensity for scales forms\n  let max = min;\n  const tickValues = [max];\n  while (max < maxVal) {\n    // Fixing any precision error:\n    max = OtherUtils.trimDecimals(max + increment);\n    tickValues.push(max);\n  }\n  // Revise number of ticks?\n  const tickDensity = tickValues.length;\n  // Since I'm going to use the array of 'tickValues' to force\n  // scale vals in D3, there's some redundancy here. But I\n  // need MMI values for the Scales fold.\n  mmObj.min = min;\n  mmObj.max = max;\n  mmObj.increment = increment;\n  mmObj.tickDensity = tickDensity;\n  mmObj.tickValues = tickValues;\n  return mmObj;\n}\n// GET RECOMMENDED MIN-MAX-INCR ends\n\n// GET ROW MIN MAX OR TOTAL\n// Called from editor-config-utilities. to add up vals in a data row\n// Args are a sub-array of a data-row and a flag to\n// indicate un/stacked data.\n// Returns an object with min and max properties.\nexport function getRowMinMaxOrTotal(rowArray, accum) {\n  // I want to return either:\n  //    accum'd row total & lowest val, or\n  //    highest & lowest vals in row\n  let rowMin = 0;\n  let rowMax = 0;\n  // Ignoring blanks\n  const filtArray = rowArray.filter(val => val.toString().length > 0);\n  if (accum) {\n    for (const iii in filtArray) {\n      const val = Number(filtArray[iii]);\n      if (val > 0) {\n        rowMax += val;\n      } else {\n        rowMin += val;\n      }\n    }\n  } else if (filtArray.length > 0) {\n    // Unaccum'd, unless all blanks\n    rowMax = Math.max(...filtArray);\n    rowMin = Math.min(...filtArray);\n  } else {\n    // If row is entirely empty, in order to avoid returning a disruptive\n    // zero, I set to an arbitrary string that will evaluate as NaN\n    rowMin = 'no minimum value in empty row';\n    // Max can safely be left as default zero. Row gets ignored by caller.\n  }\n  return {\n    min: rowMin,\n    max: rowMax,\n  };\n}\n// GET ROW MIN MAX OR TOTAL ends\n\n// NEW MIN MAX FUNCTION\n// Added Oct'17. This seems like a simpler way to extract\n// min and max from un/stacked data. Called from\n// EdConfigUtils.resetActualScaleValuesFromNewPayload and\n// payloadToEdConfigPanel\nexport function newMinMaxFcn(dataArray, accum, blobCol) {\n  const minMax = {};\n  // Flag forces straight extraction of min and max from first row\n  // that contains data.\n  let setDefaultMinMax = true;\n  // Decrement blobCol by 1 to compensate for omission of categories col\n  blobCol--;\n  // (done internally here, since this is where cats get dropped)\n  // dataArray[0] is headers\n  for (let rNo = 1; rNo < dataArray.length; rNo++) {\n    // Exclude categories\n    const thisRow = dataArray[rNo].slice(1);\n    // And I may need to exclude a blobs column:\n    if (blobCol > 0) {\n      thisRow.splice(blobCol, 1);\n    }\n    const mmRow = getRowMinMaxOrTotal(thisRow, accum);\n    // Ignore 'empty' rows that return min as an arbitrary string\n    if (!isNaN(mmRow.min)) {\n      if (setDefaultMinMax) {\n        // First row sets default min/max\n        minMax.min = mmRow.min;\n        minMax.max = mmRow.max;\n        // Set the flag off\n        setDefaultMinMax = false;\n      } else {\n        // After first dataful row\n        minMax.min = Math.min(minMax.min, mmRow.min);\n        minMax.max = Math.max(minMax.max, mmRow.max);\n      }\n    }\n  }\n  // Return actual min and max\n  return minMax;\n}\n// NEW MIN MAX FUNCTION ends\n\n// GET SIDE RECOMMENDED MIN MAX\n// Called from revertPanelDefaultVals to work out recommended\n// MMI values for complete or partial data array\nexport function getSideRecommendedMinMax(dArray, isStacked, blobCol, isLog) {\n  // Next isn't strictly necessary for log scales\n  const actualMinMax = newMinMaxFcn(dArray, isStacked, blobCol);\n  // Now get recommended default min/max, assuming factor=1\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  let recommendedMinMax = {};\n  if (isLog) {\n    recommendedMinMax = LogUtils.setNewLogScale(actualMinMax);\n  } else {\n    recommendedMinMax = getRecommendedMinMaxIncr(\n      actualMinMax,\n      dps.axes.general,\n      1,\n    );\n  }\n  return recommendedMinMax;\n}\n// GET SIDE RECOMMENDED MIN MAX ends\n\n// SET Z-SCALE MIN-MAX\n// Called from revertPanelDefaultVals to set simple\n// mmi props for a scatter z-axis. Remember: min and max are\n// the upper and lower dot radii in points\nexport function setZScaleMinMax(dataArray, edConfigPanel) {\n  // Object with 'min' and 'max' props:\n  const actualMinMax = newMinMaxFcn(dataArray, false, 0);\n  // New object with actualMin/Max from previous,\n  // and scale 'bounds' fromDPs\n  edConfigPanel.scales.z = {\n    actualMin: actualMinMax.min,\n    actualMax: actualMinMax.max,\n    min: edConfigPanel.scales.scatter.minSizedRadius,\n    max: edConfigPanel.scales.scatter.maxSizedRadius,\n  };\n}\n// SET Z-SCALE MIN-MAX ends\n\n// SET SCALE SIDE MIN MAX\n// Called from revertPanelDefaultVals. Calculates default\n// MMI and other scale values.\n// 'side' is 'left' or 'right' (scatter z axis has separate fcn)\nexport function setScaleSideMinMax(dataArray, editorConfig, side) {\n  const activePanel = EditorUtils.getActivePanel(editorConfig);\n  const incomingFactor = activePanel.scales.left.factor;\n  // We're provisionally reverting to defaults, so...\n  let resetFactor = 1;\n  // const log = false;\n  const invert = false;\n  let stacked = false;\n  stacked = activePanel.chartType[side].stacked;\n  // NOTE: watch blobCol. This should be zero for d/m... but is it?\n  const blobCol = activePanel.blobs.column;\n  // Log flag\n  const isLog = activePanel.scales[side].log;\n  const minMax = getSideRecommendedMinMax(dataArray, stacked, blobCol, isLog);\n  activePanel.scales[side] = minMax;\n  activePanel.scales[side].invert = invert;\n  let isLeft = true;\n  if (side === 'right') {\n    isLeft = false;\n  }\n  // Log scales are a kludge. I want to preserve\n  // any existing factor, Sep'20.\n  // But as of late '20, factoring dropped anyway.\n  if (isLog) {\n    resetFactor = incomingFactor;\n    FactorUtils.factorMmiVals(1, resetFactor, activePanel.scales[side]);\n  }\n  activePanel.scales[side].factor = resetFactor;\n  // Remove any existing factor strings from subtitle\n  // or panel or axis headers\n  // Basically hitting it with a sledgehammer\n  FactorUtils.forceFactorStringsOff(\n    editorConfig,\n    incomingFactor,\n    resetFactor,\n    globalAssets.DefaultPreferences.other.factors,\n    isLeft,\n  );\n}\n// SET SCALE SIDE MIN MAX ends\n","// Filename assembly for\n//      new files\n//      revising existing file names (date, section or preset)\n\nexport function padNumber(number) {\n  // We want 3 chars with leading zeroes\n  return number.toString().padStart(3, '0');\n}\n\nexport function getFileNameDate(fnObj, user) {\n  const dates = fnObj.dates;\n  // Notwithstanding the property name, 'datesYmd', eiu dates\n  // are in yyyymm format:\n  let fnDate = dates.datesYmd[dates.dateIndex];\n  // Belt and braces! (But this really shouldn't be necessary)\n  if (user === 'eiu') {\n    fnDate = fnDate.substring(0, 6);\n  }\n  return fnDate;\n}\n\n// BUILD NEW FILE NAME\n// Called from EditorConfigUtilities.getEdConfigFilenameProperties to assemble actual file name\nexport function buildNewFileName(fnObj, user) {\n  // Start filename with date...\n  let fileName = getFileNameDate(fnObj, user);\n  // ...section...\n  const sections = fnObj.sections;\n  fileName = `${fileName}_${sections.list[sections.index].code}`;\n  // Inferentially, for economist\n  if (user === 'economist') {\n    fileName = `${fileName}C`;\n  }\n  // Number\n  let number = fnObj.number;\n  if (typeof number === 'undefined') {\n    number = 0;\n  }\n  // 3 chars with leading zeroes\n  number = padNumber(number);\n  return `${fileName}${number}`;\n}\n// BUILD NEW FILE NAME ends\n\n// ISOLATE FILE NUMBER\n// Called from updateFileName to extract existing file number from name.\n// Failsafe lest number wasn't in payload. This should only get called,\n// I think, if the data originated in the Advanced tab's text field\nexport function isolateFileNumber(fnObj) {\n  const fName = fnObj.name;\n  let fNum = '000';\n  if (typeof fName !== 'undefined') {\n    // Last 3 charts of existing filename\n    const mark = fName.length - 3;\n    fNum = fName.substring(mark);\n  }\n  return fNum;\n}\n// ISOLATE FILE NUMBER ends\n\n// GET FILENAME SECTION ID\n// Called from updateFileName, and from Editor.getSectionIdForNewPreset\n// Extracts section id from filename (e.g. 'BR' from 20191012_BRC252)\n// NOTE: this may need to mod to allow for codes longer than 2 chars, and\n// for Economist 'C' suffix\nexport function getFilenameSectionId(fName) {\n  const fArray = fName.split('_');\n  const id = fArray[1].slice(0, 2);\n  return id;\n}\n// GET FILENAME SECTION ID ends\n\n// UPDATE FILE NAME\n// Called from Editor.handlesValuesFromFooter to update file name,\n// retaining existing counter value. Params are the filename\n// definitions object from editorConfig; the section from the footer;\n// and the user (economist/eiu)\nexport function updateFileName(fnObj, sectionId, user) {\n  // Start filename with date...\n  let fileName = getFileNameDate(fnObj, user);\n  // If a section id was passed, use it; otherwise keep existing section\n  if (typeof sectionId === 'undefined') {\n    // NOTE: I need to change the subhandler for eiu,\n    // if it gets codes longer than 2 chars\n    sectionId = getFilenameSectionId(fnObj.name);\n  }\n  // Date + section\n  fileName = `${fileName}_${sectionId}`;\n  // Economist adds 'C':\n  if (user === 'economist') {\n    fileName = `${fileName}C`;\n  }\n  // File number\n  let fNum = fnObj.number;\n  if (typeof fNum === 'undefined') {\n    fNum = isolateFileNumber(fnObj);\n  } else {\n    fNum = padNumber(fNum);\n  }\n  return `${fileName}${fNum}`;\n}\n// UPDATE FILE NAME ends\n","/*\n\n*/\n\n// Functions called from specifySeriesPrefs return an\n// object with default styling for chart type...\n// BAR\nexport function getBarProps(barProps, seriesCount) {\n  return {\n    colours: barProps.colours[seriesCount],\n    cluster: barProps.cluster,\n    gap: barProps.gap,\n    absoluteMinWidth: barProps.absoluteMinWidth,\n    minWidth: barProps.minWidth,\n    maxWidth: barProps.maxWidth,\n    narrowGap: barProps.narrowGap,\n    stroke: barProps.stroke,\n  };\n}\n// STACKED BAR\nexport function getStackedBarProps(sProps, seriesCount) {\n  // Stacked bars use some 'bar' props; so arg 1 is\n  // a level 'back'\n  return {\n    colours: sProps.stackedbar.colours[seriesCount],\n    cluster: sProps.bar.cluster,\n    gap: sProps.bar.gap,\n    absoluteMinWidth: sProps.bar.absoluteMinWidth,\n    minWidth: sProps.bar.minWidth,\n    maxWidth: sProps.bar.maxWidth,\n    narrowGap: sProps.bar.narrowGap,\n    stroke: sProps.bar.stroke,\n  };\n}\n// COLUMN\nexport function getColumnProps(colProps, seriesCount) {\n  return {\n    colours: colProps.colours[seriesCount],\n    cluster: colProps.cluster,\n    gap: colProps.gap,\n    absoluteMinWidth: colProps.absoluteMinWidth,\n    minWidth: colProps.minWidth,\n    maxWidth: colProps.maxWidth,\n    narrowGap: colProps.narrowGap,\n    stroke: colProps.stroke,\n  };\n}\n// STACKED COLUMN\nexport function getStackedColumnProps(sProps, seriesCount) {\n  // Stacked columns use 'bar' and 'stackedbar' props\n  // So arg 1 is a level 'back'\n  return {\n    colours: sProps.stackedbar.colours[seriesCount],\n    // Use bar vals for now, at least...\n    cluster: sProps.bar.cluster,\n    gap: sProps.bar.gap,\n    absoluteMinWidth: sProps.bar.absoluteMinWidth,\n    minWidth: sProps.bar.minWidth,\n    maxWidth: sProps.bar.maxWidth,\n    narrowGap: sProps.bar.narrowGap,\n    stroke: sProps.bar.stroke,\n  };\n}\n// THERMOMETER (vert or horiz)\nexport function getThermometerProps(tProps, seriesCount) {\n  return {\n    colours: tProps.colours[seriesCount],\n    dot: tProps.dot,\n    line: tProps.line,\n    spindle: tProps.spindle,\n    gap: tProps.gap,\n  };\n}\n// LINE\nexport function getLineProps(lineProps, seriesCount) {\n  return {\n    colours: lineProps.colours[seriesCount],\n    stroke: lineProps.stroke,\n    // Gap is for blobs\n    gap: lineProps.blobGap,\n    indexDotFactor: lineProps.indexDotFactor,\n  };\n}\n// LAYERCAKE\nexport function getLayerCakeProps(lcProps, seriesCount) {\n  return {\n    colours: lcProps.colours[seriesCount],\n    stroke: lcProps.stroke,\n    // Gap is for blobs\n    gap: lcProps.blobGap,\n  };\n}\n// STEP LINE\nexport function getStepLineProps(stepProps, seriesCount) {\n  return {\n    colours: stepProps.colours[seriesCount],\n    stroke: stepProps.stroke,\n    // Gap is for blobs\n    gap: stepProps.blobGap,\n    indexDotFactor: stepProps.indexDotFactor,\n  };\n}\n// POINT LINE\nexport function getPointLineProps(pointProps, seriesCount) {\n  return {\n    colours: pointProps.colours[seriesCount],\n    stroke: pointProps.stroke,\n    // Gap is for blobs\n    gap: pointProps.blobGap,\n    radius: pointProps.radius,\n    indexDotFactor: pointProps.indexDotFactor,\n  };\n}\n// SCATTER\nexport function getScatterProps(scatterProps, seriesCount) {\n  return {\n    colours: scatterProps.colours[seriesCount],\n    dots: scatterProps.dots,\n    labelMarker: scatterProps.labelMarker,\n    links: scatterProps.links,\n    text: scatterProps.text,\n    trendline: scatterProps.trendline,\n    zkey: scatterProps.zkey,\n  };\n}\n// PIE\nexport function getPieProps(pieProps, seriesCount) {\n  return {\n    colours: pieProps.colours[seriesCount],\n    wedges: pieProps.wedges,\n    links: pieProps.links,\n    labels: pieProps.labels,\n    header: pieProps.header,\n  };\n}\n// TABLE\n// Not called\nexport function getTableProps(tableProps) {\n  return {\n    headers: tableProps.headers,\n    content: tableProps.content,\n  };\n}\n// MIXED\nexport function getMixedProps(sProps, seriesCount) {\n  return {\n    // Codge-up from various sources:\n    colours: sProps.stackedbar.colours[seriesCount],\n    cluster: sProps.bar.cluster,\n    gap: sProps.bar.gap,\n    minWidth: sProps.bar.minWidth,\n    narrowGap: sProps.bar.narrowGap,\n    stroke: sProps.line.stroke,\n  };\n}\n\n// SPECIFY SERIES PREFS\n// Called from EditorConfigUtils.reconcileEdConfigPanelSeriesToConfig\n// to set series prefs according to chart type\n// Params are chart type; series lookup object; and the number of series\nexport function specifySeriesPrefs(type, seriesDefaults, seriesCount) {\n  // 'Sanity' defaults when there's no data\n  if (typeof type === 'undefined') {\n    type = 'bar';\n  }\n  if (typeof seriesCount === 'undefined') {\n    seriesCount = 1;\n  }\n  // I need next for appending extra colour names beyond the maxSeries limit\n  const completeSeriesCount = seriesCount;\n  // Limit seriesCount to the number of coloursets I've defined\n  // All types (should!) have the same number of colours defined:\n  const maxSeries = seriesDefaults.bar.colours.length;\n  seriesCount = Math.min(seriesCount, maxSeries);\n  // Align series count to array-indexing\n  seriesCount--;\n  // Object whose properties are the type-specific functions above\n  const typeCheck = {\n    bar: getBarProps(seriesDefaults.bar, seriesCount),\n    stackedbar: getStackedBarProps(seriesDefaults, seriesCount),\n    thermohorizontal: getThermometerProps(\n      seriesDefaults.thermometer,\n      seriesCount,\n    ),\n    column: getColumnProps(seriesDefaults.bar, seriesCount),\n    stackedcolumn: getStackedColumnProps(seriesDefaults, seriesCount),\n    thermovertical: getThermometerProps(\n      seriesDefaults.thermometer,\n      seriesCount,\n    ),\n    line: getLineProps(seriesDefaults.line, seriesCount),\n    stepline: getStepLineProps(seriesDefaults.stepline, seriesCount),\n    pointline: getPointLineProps(seriesDefaults.pointline, seriesCount),\n    layercake: getLayerCakeProps(seriesDefaults.layercake, seriesCount),\n    steplayercake: getLayerCakeProps(seriesDefaults.layercake, seriesCount),\n    // Does this option ever get used?\n    mixed: getMixedProps(seriesDefaults, seriesCount),\n    scatter: getScatterProps(seriesDefaults.scatter, seriesCount),\n    sizedscatter: getScatterProps(seriesDefaults.scatter, seriesCount),\n    pie: getPieProps(seriesDefaults.pie, seriesCount),\n    halfpie: getPieProps(seriesDefaults.pie, seriesCount),\n    // Not that it should get called:\n    table: getTableProps(seriesDefaults.table),\n  };\n  // Default:\n  let ssPrefs = typeCheck.line;\n  if (typeCheck.hasOwnProperty(type)) {\n    // Now I have to do a subpreset-specific override (e.g. of colours)\n    ssPrefs = typeCheck[type];\n  }\n  addExtraColourNames(ssPrefs, completeSeriesCount);\n  return ssPrefs;\n}\n// SPECIFY SERIES PREFS ends\n\n// ADD EXTRA COLOUR NAMES\n// Called from specifySeriesPrefs. If there are fewer defined colours than\n// there are series, appends 'extra-n' names to the array of colour names\nexport function addExtraColourNames(ssPrefs, sCount) {\n  let rNo = 1;\n  while (ssPrefs.colours.length < sCount) {\n    ssPrefs.colours.push(`extra${rNo}`);\n    rNo++;\n  }\n}\n// ADD EXTRA COLOUR NAMES ends\n","// Called from EditorConfigUtils for custom UK and US party colours\n\n// PASS PARTY COLOURS FLAG TO CONFIG OBJECT\n// Called from EditorConfigUtils.reconcileEdConfiganelSeriesToConfig\n// Legends check 2 flags to determine whether key strings\n// should be set to party colours.\n// NOTE: For now (Nov'19) I'm forcing OFF.\nexport function passPartyColoursFlagToConfigObject(\n  configSeries,\n  // eslint-disable-next-line no-unused-vars\n  ukParties,\n  // eslint-disable-next-line no-unused-vars\n  usParties,\n) {\n  configSeries.ukParties = ukParties;\n  configSeries.usParties = usParties;\n  // configSeries.ukParties = false;\n  // configSeries.usParties = false;\n}\n// PASS PARTY COLOURS FLAG TO CONFIG OBJECT ends\n\n// CHECK FOR PARTIES\n// Called from EditorConfigUtils.reconcileEdConfigPanelSeriesToConfig to check\n// for party names in series headers\nexport function checkForParties(headers, isUK) {\n  // I need headers as a single string, losing cats header and making all lower case\n  const myHeaders = [...headers];\n  myHeaders.shift();\n  const hString = myHeaders.join(',').toLowerCase();\n  let target = 2;\n  let testArray = ['republican', 'democrat'];\n  if (isUK) {\n    target = 3;\n    // 'lib' to cover 'liberal' and 'libdem'\n    testArray = ['conservative', 'labour', 'lib'];\n  }\n  // Search for party names in headers string\n  // If there's just *one* occurence of each of the party names,\n  // we're good to go with party colours\n  let partyTest = 0;\n  for (let pNo = 0; pNo < testArray.length; pNo++) {\n    const regex = new RegExp(testArray[pNo], 'g');\n    const matches = (hString.match(regex) || []).length;\n    if (matches === 1) {\n      // if (hString.includes(testArray[pNo])) {\n      partyTest++;\n    }\n  }\n  // Did we get enough hits...?\n  return partyTest === target;\n}\n// CHECK FOR PARTIES ends\n\n// FIND PARTY IN HEADER\n// Called from applyPartyColours. Searches in one header for a\n// party name and, if found, returns that name\n// NOTE: names in the list must match names of party colours\nexport function findPartyInHeader(header, isUK) {\n  // List of party names (UK or US)\n  let partyList = ['democrat', 'republican'];\n  if (isUK) {\n    partyList = [\n      'conservative',\n      'labour',\n      'lib',\n      'brexit',\n      'snp',\n      'ukip',\n      'green',\n      'plaid',\n      'other',\n    ];\n  }\n  let result = '';\n  // Loop through all party names looking for a hit in this header\n  // NOTE: is there a more efficient way of doing this?\n  for (let pNo = 0; pNo < partyList.length; pNo++) {\n    const pName = partyList[pNo];\n    if (header.includes(pName)) {\n      result = pName;\n      break;\n    }\n  }\n  return result;\n}\n// FIND PARTY IN HEADER ends\n\n// APPLY PARTY COLOURS\n// Called from EditorConfigUtils.reconcileEdConfigPanelSeriesToConfig to\n// overwrite default colours with party colours\n// Args are the array of series colours (currently set to\n// the standard defaults); array of headers; UK/US flag\nexport function applyPartyColours(colours, headers, isUK) {\n  for (let hNo = 1; hNo < headers.length; hNo++) {\n    const head = headers[hNo].toLowerCase();\n    const pName = findPartyInHeader(head, isUK);\n    // Overwrite colour\n    if (pName.length > 0) {\n      colours[hNo - 1] = pName;\n    }\n  }\n}\n// APPLY PARTY COLOURS ends\n","// Contains the chain of functions that assemble a virgin\n// editorConfig object. And random colour generation for series.\n// Main entry is via initiateNewEditorConfig, which is called\n// from Editor.componentWillMount...\n\n// Default preferences ( complete set of style definitions):\nimport globalAssets from '../assets/globalAssets';\nimport * as EditorUtils from './editor-utilities';\nimport * as EditorConfigDefaultUtils from './editor-config-default-utilities';\nimport * as MinMaxUtils from './editor-minmax-utilities';\nimport * as OtherUtils from './other-utilities';\nimport * as SeriesPreferences from './series-preferences';\nimport * as Filename from './filename';\nimport * as PartyUtils from './party-utilities';\n\n// GET PUB DATE\n// Called from getDatesObject\n// Returns next publication day (Saturday) in ms\nexport function getPubDate(pDay) {\n  // Arg is publication day as numbered\n  const wLen = 7;\n  const aDate = new Date();\n  // From time now, work out *immediate* next pub date\n  const pubDate = aDate.setDate(\n    aDate.getDate() + ((pDay + wLen - aDate.getDay()) % wLen),\n  );\n  return pubDate;\n}\n// GET PUB DATE ends\n\n// GET EIU DATES OBJECT\n// Called from getEdConfigDefaultDates to return dates lists for file naming\nexport function getEiuDatesObject() {\n  // Start from current month\n  const timeNow = new Date();\n  let monthNo = timeNow.getMonth();\n  const yearNo = timeNow.getFullYear();\n  const datesMd = [];\n  const datesYmd = [];\n  const mList = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  // End date\n  let endYear = yearNo + 1;\n  if (monthNo > 9) {\n    endYear++;\n  }\n  const endMonth = 11;\n  for (let y = yearNo; y <= endYear; y++) {\n    for (let m = monthNo; m <= endMonth; m++) {\n      let month = String(m + 1);\n      if (month.length === 1) {\n        month = `0${month}`;\n      }\n      datesYmd.push(`${y}${month}`);\n      datesMd.push(`${mList[m]} ${y}`);\n    }\n    monthNo = 0;\n  }\n  return {\n    datesMd,\n    datesYmd,\n    dateIndex: 0,\n  };\n}\n// GET EIU DATES OBJECT ends\n\n// GET ECO DATES OBJECT\n// Called from getEdConfigDefaultDates to return dates lists for file naming\nexport function getEcoDatesObject(pDay, oneDay) {\n  // Args are number of publication day, and one day as ms\n  let toNextWeek = 0;\n  const seven = 7;\n  const six = 6;\n  // Get immediate next Saturday, in ms\n  const pubDate = getPubDate(pDay);\n  // Are we pre-threshold?\n  const timeNow = new Date();\n  const dayNow = timeNow.getDay();\n  const hourNow = timeNow.getHours();\n  // Threshold is 6pm, Thursday\n  const thresholdHour = 18;\n  const thresholdDay = 4;\n  // I want to compare now with threshold\n  // First: is 'today' before thresholdDay?\n  if (dayNow > thresholdDay) {\n    toNextWeek = seven;\n  } else if (dayNow === thresholdDay && hourNow >= thresholdHour) {\n    toNextWeek = seven;\n  }\n  // Adjust to Sat+ ...?\n  const addTo = toNextWeek * oneDay;\n  const initialDate = pubDate + addTo;\n  const datesMd = [];\n  const datesYmd = [];\n  const aWeek = oneDay * seven;\n  const mList = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  for (let www = 0; www < six; www++) {\n    const thisDate = new Date(initialDate + www * aWeek);\n    const dStr = `${mList[thisDate.getMonth()]} ${thisDate.getDate()}`;\n    datesMd.push(dStr);\n    let dNo = thisDate.getFullYear();\n    // Month as 'mm'\n    let month = String(thisDate.getMonth() + 1);\n    if (month.length === 1) {\n      month = `0${month}`;\n    }\n    // Date as 'dd'\n    let day = String(thisDate.getDate());\n    if (day.length === 1) {\n      day = `0${day}`;\n    }\n    dNo = `${dNo}${month}${day}`;\n    datesYmd.push(dNo);\n  }\n  return {\n    datesMd,\n    datesYmd,\n    dateIndex: 0,\n  };\n}\n// GET ECO DATES OBJECT ends\n\n// GET ED CONFIG DEFAULT SECTIONS\n// Called from getEdConfigFilenameProperties, returns a list\n// of sections.\nexport function getEdConfigDefaultSections(defaultPrefs, presetsConfig) {\n  // I need stuff from PresetPreferences, but first I need to know\n  // which the default PPs are!\n  const defaults = defaultPrefs.metadata.defaults;\n  const user = presetsConfig.user;\n  const presetName = presetsConfig.presetName;\n  const subPresetName = presetsConfig.subpresetName;\n  const pps = presetsConfig.userPresets;\n  // Fetch in sections object, setting default as 'active' section\n  // Can't use spread operator cos it generates an unexpected token fatal error\n  // Get preset; if not found use default\n  let preset = pps[presetName];\n  if (typeof preset === 'undefined') {\n    preset = pps[defaults.preset[user]];\n  }\n  // Ditto sub-preset\n  let subPreset = preset[subPresetName];\n  if (typeof subPreset === 'undefined') {\n    subPreset = preset[defaults.subPreset[user]];\n  }\n  // Check subpreset for sections. If none of its own,\n  // use the general preset sections list\n  let lookUpSections = subPreset.sections;\n  if (typeof lookUpSections === 'undefined') {\n    lookUpSections = preset.sections;\n  }\n  const sections = JSON.parse(JSON.stringify(lookUpSections));\n  // Index of default, by code\n  sections.index = sections.list.findIndex(\n    item => item.code === sections.default,\n  );\n  return sections;\n}\n// GET ED CONFIG DEFAULT SECTIONS ends\n\n// GET ED CONFIG CURRENT SECTIONS\n// Called from payloadToEditorConfigGlobalProps. Passed the current global.values from the\n// Monteux payload, returns section name and options for dropdown\nexport function getEdConfigCurrentSections(payloadGVals, presetsConfig) {\n  // I need stuff from PresetPreferences, but first I need to know\n  // which the default PPs are!\n  const preset = presetsConfig.presetName;\n  const subPreset = presetsConfig.subpresetName;\n  const pps = presetsConfig.userPresets;\n  // I need to isolate the current section from the filename:\n  const fnameString = payloadGVals.name.split('_')[1];\n  // So I should have something like 'FNC123'. I'm only interested\n  // in the first 2 characters\n  const sectionName = fnameString.substr(0, 2);\n  // Fetch in sections object, setting default as 'active' section\n  // Can't use spread operator cos it generates an unexpected token fatal error\n  // Look first in subpreset. If it has no sections list of its own,\n  // use the general preset sections list\n  let lookUp = pps[preset][subPreset];\n  if (typeof lookUp.sections === 'undefined') {\n    lookUp = pps[preset];\n  }\n  const lookUpSections = lookUp.sections;\n  const sections = JSON.parse(JSON.stringify(lookUpSections));\n  // Index of code\n  sections.index = sections.list.findIndex(item => item.code === sectionName);\n  // if for any reason sectionName (coming from the spreadsheet global data tab)\n  // is not found, use index of default section\n  if(sections.index === -1)\n    sections.index = sections.list.findIndex(item => item.code === sections.default);\n  return sections;\n}\n// GET ED CONFIG CURRENT SECTIONS\n\n// GET ED CONFIG DEFAULT DATES\n// Called from getEdConfigFilenameProperties\nexport function getEdConfigDefaultDates(pDay, user) {\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  const dInMs = dps.other.dayInMilliSeconds;\n  let datesObject = {};\n  if (user === 'economist') {\n    datesObject = getEcoDatesObject(pDay, dInMs);\n  } else if (user === 'eiu') {\n    datesObject = getEiuDatesObject();\n  }\n  return datesObject;\n}\n// GET ED CONFIG DEFAULT DATES ends\n\n// GET ED CONFIG FILENAME PROPERTIES\n// Called from initiateNewEdConfig. Returns a default filename.\n// editorConfig.global has a 'fileName' object with section, date\n// fileName properties...\n// 2nd arg may be an actual file name (from Monteux), or the string 'false'\nexport function getEdConfigFilenameProperties(presetsConfig, fName, fNumber) {\n  if (typeof fName === 'undefined') {\n    fName = 'false';\n  }\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  // Get default section details: list, default and (default) 'active'\n  const fnObj = {};\n  fnObj.sections = getEdConfigDefaultSections(dps, presetsConfig);\n  // Get a list of potential dates. First I need publication day:\n  const pDay = dps.other.publicationDay;\n  fnObj.dates = getEdConfigDefaultDates(pDay, presetsConfig.user);\n  fnObj.number = fNumber;\n  // If no Monteux-supplied filename, make one up\n  if (fName.toLowerCase() === 'false') {\n    fName = Filename.buildNewFileName(fnObj, presetsConfig.user);\n  }\n  fnObj.name = fName;\n  return fnObj;\n}\n// GET ED CONFIG FILENAME PROPERTIES ends\n\n// NEW ED CONFIG PANEL ELEMENT\n// Called from initiateNewEdConfig; adds a new\n// panel definition object to editorConfig's panels array\nexport function newEdConfigPanelElement() {\n  return {\n    // No: these are in the root 'monteux' node\n    // metadataId: 'Panel metadata sheet ID',\n    // dataId: 'Panel data sheet ID',\n    blobs: EditorConfigDefaultUtils.getEdConfigDefaultBlobs(),\n    chartData: EditorConfigDefaultUtils.getEdConfigDefaultData(),\n    chartType: EditorConfigDefaultUtils.getEdConfigDefaultChartType(),\n    enableScale: EditorConfigDefaultUtils.getEdConfigDefaultEnableScale(),\n    indexed: EditorConfigDefaultUtils.getEdConfigDefaultIndexed(),\n    legend: EditorConfigDefaultUtils.getEdConfigDefaultLegend(),\n    panelSize: EditorConfigDefaultUtils.getEdConfigDefaultPanelSize(),\n    scales: EditorConfigDefaultUtils.getEdConfigDefaultScales(),\n    panelHeader: EditorConfigDefaultUtils.getEdConfigDefaultPanelHeader(),\n    axisHeaders: EditorConfigDefaultUtils.getEdConfigDefaultAxisHeaders(),\n    // Set overall chart type to default\n    overallChartType: EditorConfigDefaultUtils.getEdConfigDefaultOverallChartType(),\n  };\n}\n// NEW ED CONFIG PANEL ELEMENT ends\n\n// INITIATE NEW ED CONFIG\n// Called from Editor.componentWillMount\n// Args are user-specific PPs, filename, number of panels and file number\nexport function initiateNewEdConfig(presetsConfig, name, pTotal, fileNumber) {\n  // The editorConfig object has 2 nodes: background and panels\n  const fileNameObj = getEdConfigFilenameProperties(\n    presetsConfig,\n    name,\n    fileNumber,\n  );\n  // No longer look directly to default presets; take them\n  // from param presetsConfig\n  const presets = {\n    preset: presetsConfig.presetName,\n    subPreset: presetsConfig.subpresetName,\n  };\n  const editorConfig = {\n    // Ids of sheet and tabs\n    monteux: {\n      sheetId: '',\n      globalId: '',\n      panels: [{ metadataId: 'To come', dataId: 'To come' }],\n    },\n    global: {\n      chartIndex: EditorConfigDefaultUtils.getEdConfigDefaultChartIndex(),\n      fileName: fileNameObj,\n      // ...and this will be global tab's id\n      globalId: 'Global tab ID',\n      panelVals: EditorConfigDefaultUtils.getEdConfigDefaultPanelVals(),\n      presets,\n      size: EditorConfigDefaultUtils.getEdConfigDefaultSize(),\n      strings: EditorConfigDefaultUtils.getEdConfigDefaultBackgroundStrings(),\n      user: presetsConfig.user,\n    },\n    // Initially, panels is an empty array. First element is\n    // inserted at startup. Others, as panels are added to the data\n    panels: [newEdConfigPanelElement()],\n  };\n  // Default content for panel 1\n  if (pTotal > 1) {\n    for (let pNo = 1; pNo < pTotal; pNo++) {\n      editorConfig.panels.push(newEdConfigPanelElement());\n    }\n  }\n  // Set global colour space\n  setIllustratorColourSpace(editorConfig.global, presetsConfig);\n  // Scaling (for responsive DCs). Needs timeout until\n  // scaled div exists\n  setTimeout(() => {\n    OtherUtils.setChartWrapperScaleClass(presetsConfig);\n  }, 500);\n  return editorConfig;\n}\n// INITIATE NEW ED CONFIG ends\n\n// ***** TRANSFER DATA FROM PAYLOAD TO EDITOR CONFIG *****\n\n// PAYLOAD TO ED CONFIG RAW DATA\n// Transfers data array for one panel\nexport function payloadToEdConfigRawData(\n  edConfigChartData,\n  payloadRawDataVals,\n) {\n  edConfigChartData.dataArray = smartenQuotesInDataArray(\n    payloadRawDataVals.dataArray,\n    payloadRawDataVals.isTable,\n  );\n  edConfigChartData.isTable = payloadRawDataVals.isTable;\n  edConfigChartData.isValid = payloadRawDataVals.isValid;\n  edConfigChartData.validityMsg = payloadRawDataVals.validityMsg;\n  // Categories and headers have already been isolated from complete array\n  // of raw data and need to be handled separately. In the best\n  // of all possible worlds, I'd sort this out...\n  edConfigChartData.categories = EditorUtils.smartenArrayOfQuotes(\n    payloadRawDataVals.categories,\n  );\n  edConfigChartData.headers = EditorUtils.smartenArrayOfQuotes(\n    payloadRawDataVals.headers,\n  );\n  edConfigChartData.timeFormats = payloadRawDataVals.timeFormats;\n  edConfigChartData.categoryType = payloadRawDataVals.categoryType;\n  edConfigChartData.yearsAdjustedBy = payloadRawDataVals.yearsAdjustedBy;\n}\n\n// SMARTEN QUOTES IN DATA ARRAY\n// Called from payloadToEdConfigRawData to do quote-smartening\n// throughout the complete raw data array\nexport function smartenQuotesInDataArray(dArray, isTable) {\n  // If it's a table, I want to check everything\n  // If not, I'm only interested in:\n  //  - 1st row (headers)\n  //  - item[0] of subsequent rows\n  const smartenedData = dArray.map((dataRow, iii) => {\n    let smartenedRow;\n    if (iii === 0) {\n      // Headers\n      smartenedRow = EditorUtils.smartenArrayOfQuotes(dataRow);\n    } else if (isTable) {\n      smartenedRow = EditorUtils.smartenArrayOfQuotes(dataRow);\n    } else {\n      // If not a table, only smarten category\n      smartenedRow = dataRow;\n      smartenedRow[0] = EditorUtils.smartenQuotes(smartenedRow[0]);\n    }\n    return smartenedRow;\n  });\n  return smartenedData;\n}\n// SMARTEN QUOTES IN DATA ARRAY\n\n// IS DOUBLE MIXED SPLIT VALID\n// Called from transferAllMetadataSets. This is designed to trap an edge\n// case where user has changed a double/mixed scale to 2 panels and\n// the split-point has broken the series-count.\nexport function isDoubleMixedSplitValid(vals, seriesCount) {\n  const doubleSplit = vals.scales_double_splitDataAtCol;\n  const mixedSplit = vals.scales_mixed_splitDataAtCol;\n  const splitAt = Math.max(mixedSplit, doubleSplit);\n  return splitAt < seriesCount;\n}\n// IS DOUBLE MIXED SPLIT VALID ends\n\n// TRANSER ONE METADATA SET\n// editorConfig and payload metadata properties are 'parallel'...\n// except that while editorConfig has a nested-object structure, payload uses\n// simple underscore-delimited strings.\n// Thus: editorConfig.chartType.left.type corresponds to\n// loadVals.chartType_left_type\n// 'topic' is an underline-delimited string representing the 'path' down the object...\nexport function transferOneMetadataSet(edConfigPanel, loadVals, topic) {\n  // topic is a string of '_' delimited object nodes\n  // Arrayify...\n  const tArray = topic.split('_');\n  // To dig down into the object structure...\n  const getNestedObject = (nestedObj, myArr) => {\n    return myArr.reduce((parent, child) => {\n      let result = null;\n      if (typeof parent === 'object' && typeof parent[child] === 'object') {\n        result = parent[child];\n      }\n      return result;\n    }, nestedObj);\n  };\n  // Pass in object structure as array elements\n  const target = getNestedObject(edConfigPanel, tArray);\n  // Now move props from source to target\n  for (const key in target) {\n    const sourceName = `${topic}_${key}`;\n    const sourceNode = loadVals[sourceName];\n    if (typeof sourceNode === 'undefined') {\n      target[key] = '';\n    } else {\n      target[key] = sourceNode;\n    }\n  }\n}\n// TRANSER ONE METADATA SET ends\n\n// GET SPLIT DATA COL NUMBER\n// Called from resetActualScaleValuesFromNewPayload, returns\n// number of column at which double/mixed data split\nexport function getSplitDataColNumber(scales) {\n  let splitCol = 0;\n  if (scales.double.isDouble) {\n    splitCol = scales.double.splitDataAtCol;\n  } else if (scales.mixed.isMixed) {\n    splitCol = scales.mixed.splitDataAtCol;\n  }\n  return splitCol;\n}\n// GET SPLIT DATA COL NUMBER ends\n\n// RESET ACTUAL SCALE VALUES FROM NEW PAYLOAD\n// Called from payloadToEdConfigPanel\nexport function resetActualScaleValuesFromNewPayload(edConfigPanel) {\n  // Extract required properties:\n  const dataArray = Object.assign([], edConfigPanel.chartData.dataArray);\n  const leftStacked = edConfigPanel.chartType.left.stacked;\n  const rightStacked = edConfigPanel.chartType.right.stacked;\n  const leftEnabled = edConfigPanel.enableScale.left;\n  const scales = edConfigPanel.scales;\n  const splitDataAtCol = getSplitDataColNumber(scales);\n  // Blob status:\n  const blobCol = edConfigPanel.blobs.column;\n  // Scatter?\n  const isScatter = edConfigPanel.chartType.left.type.includes('scatter');\n  // Next: each side, do actual max and min break the scale boundaries\n  // So I need to get left and right.\n  let leftActualMinMax = '';\n  let rightActualMinMax = '';\n  // Now I have to isolate the relevant data areas. I'm calling a function\n  // that expects a single, coherent data array (i.e., it can't cope with\n  // data separated for double scales).\n  // So if it's a double scale...\n  // NOTE: this isn't making any allowance yet for scatters. This just gets\n  // more and more intricate...\n  // Another NOTE: I should eventually compare this with\n  // payloadToEdConfigPanel, and how it deals with side on\n  // non-double scale...\n  if (scales.double.isDouble) {\n    const splitData = EditorUtils.splitDataArray(dataArray, splitDataAtCol + 1);\n    leftActualMinMax = MinMaxUtils.newMinMaxFcn(\n      splitData.leftArray,\n      leftStacked,\n      blobCol,\n    );\n    rightActualMinMax = MinMaxUtils.newMinMaxFcn(\n      splitData.rightArray,\n      leftStacked,\n      blobCol,\n    );\n  } else if (isScatter) {\n    // Left is 'x' axis; right is 'y' axis (FIXME: !!)\n    const isSimple = !edConfigPanel.chartType.left.type.includes('sized');\n    const splitArray = EditorUtils.splitScatterDataArray(dataArray, isSimple);\n    // So splitArray is an object with 'left', 'right' and 'z' properties\n    leftActualMinMax = MinMaxUtils.newMinMaxFcn(splitArray.leftArray, false, 0);\n    rightActualMinMax = MinMaxUtils.newMinMaxFcn(\n      splitArray.rightArray,\n      false,\n      0,\n    );\n    // Ignore z-scatter; see note below\n  } else if (leftEnabled) {\n    // Single scale, left\n    leftActualMinMax = MinMaxUtils.newMinMaxFcn(\n      dataArray,\n      leftStacked,\n      blobCol,\n    );\n  } else {\n    // Single scale, right\n    rightActualMinMax = MinMaxUtils.newMinMaxFcn(\n      dataArray,\n      rightStacked,\n      blobCol,\n    );\n  }\n  // NOTE: Nov'19-- previously, this function proceeded to calculate\n  // *plotted* MMI values from actual. As of now, we want the actual values,\n  // but we don't recalculate the plotted values. So I've killed the\n  // override of plotted MMI, but update the scales object(s) with actual\n  // min and max, left/right\n  if (typeof leftActualMinMax === 'object') {\n    scales.left.actualMin = leftActualMinMax.min;\n    scales.left.actualMax = leftActualMinMax.max;\n  }\n  if (typeof rightActualMinMax === 'object') {\n    scales.right.actualMin = rightActualMinMax.min;\n    scales.right.actualMax = rightActualMinMax.max;\n  }\n}\n// RESET ACTUAL SCALE VALUES FROM NEW PAYLOAD ends\n\n// DO INFERENTIAL FIXES FOR OLD DATA FILES\n// Called from transferAllMetadataSets to fix property name anomalies\n// in old data files\nexport function doInferentialFixesForOldDataFiles(edConfigPanel) {\n  if (edConfigPanel.chartType.left.type === 'blobscatter') {\n    edConfigPanel.chartType.left.type = 'sizedscatter';\n  }\n  if (edConfigPanel.chartType.right.type === 'blobscatter') {\n    edConfigPanel.chartType.right.type = 'sizedscatter';\n  }\n}\n// DO INFERENTIAL FIXES FOR OLD DATA FILES ends\n\n// TRANSFER ALL METADATA SETS\n// Called from payloadToEdConfigPanel. Triages transfers by topic\nexport function transferAllMetadataSets(edConfigPanel, loadVals) {\n  // Check for the double/mixed to panels anomaly\n  // NOTE: this can be improved upon, but it does seem to\n  // work (sort of) and time is tight...\n  const seriesCount = edConfigPanel.chartData.headers.length - 1;\n  const noDoubleScaleAnomaly = isDoubleMixedSplitValid(loadVals, seriesCount);\n  if (!noDoubleScaleAnomaly) {\n    return;\n  }\n  transferOneMetadataSet(edConfigPanel, loadVals, 'indexed');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'legend');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'scales_z');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'enableScale');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'blobs');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'chartType_left');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'chartType_right');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'scales_double');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'scales_mixed');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'scales_left');\n  transferOneMetadataSet(edConfigPanel, loadVals, 'scales_right');\n  // Next comm'd out Sep'20, when we 'recoupled' axis headers to series headers\n  // Restored Feb'21 (x-axis header only)\n  transferOneMetadataSet(edConfigPanel, loadVals, 'axisHeaders');\n  // Over time, some property names have changed, so old data files\n  // may cause trouble down the line...\n  doInferentialFixesForOldDataFiles(edConfigPanel);\n}\n// TRANSFER ALL METADATA SETS ends\n\n// SET AXIS HEADERS FROM SERIES HEADERS\n// Called from payloadToEdConfigPanel. According to chart type,\n// assigns raw series headers to axis headers\nexport function setAxisHeadersFromSeriesHeaders(pConfig) {\n  const target = pConfig.axisHeaders;\n  const chartType = pConfig.overallChartType;\n  const { isDouble, splitDataAtCol } = pConfig.scales.double;\n  const headers = pConfig.chartData.headers;\n  if (chartType.includes('scatter')) {\n    target.xaxis = headers[1];\n    target.yaxisright = headers[2];\n    target.zaxis = headers[3];\n  } else if (isDouble) {\n    target.yaxisleft = headers[1];\n    target.yaxisright = headers[splitDataAtCol + 1];\n    // Overcautious?\n    if (typeof target.yaxisright === 'undefined') {\n      target.yaxisright = headers[headers.length - 1];\n    }\n  }\n}\n// SET AXIS HEADERS FROM SERIES HEADERS\n\n// SET LEGEND COLUMN DEFAULT\n// Called from payloadToEdConfigPanel, on 'new' raw data\n// If line chart, default legend outside chart\n// If table, legend columns val is zero, so no space taken\nexport function setLegendColumnDefault(legend, chartType) {\n  if (chartType.includes('line') || chartType.includes('table')) {\n    legend.columns = 0;\n  }\n}\n// SET LEGEND COLUMN DEFAULT ends\n\n// DO SCATTER INSURANCE\n// If chart type was scatter and user added a column of data, we get stuck\n// out of step. So if existing chart type is scatter, align exact type\n// ('sized' or not) to number of columns of data. If number of colums is\n// incompatible with either scatter type, default to line\nexport function doScatterInsurance(edConfigPanel, side) {\n  // NOTE: this must eventually change to match left/right/top/bottom options\n  // if I ever get around to implementing them\n  let otherSide = 'left';\n  if (side === 'left') {\n    otherSide = 'right';\n  }\n  let activeType = edConfigPanel.chartType[side].type;\n  // NOTE: assumption that left. and right.type are the same for scatters\n  if (activeType.includes('scatter')) {\n    // How many data columns?\n    const dataColCount = edConfigPanel.chartData.headers.length - 1;\n    if (dataColCount % 2 === 0) {\n      activeType = 'scatter';\n    } else if (dataColCount % 3 === 0) {\n      activeType = 'sizedscatter';\n    } else {\n      activeType = 'line';\n    }\n    // Fix up:\n    if (activeType === 'line') {\n      edConfigPanel.chartType[side].type = 'line';\n      edConfigPanel.chartType[otherSide].type = 'none';\n    } else {\n      edConfigPanel.chartType[side].type = activeType;\n      edConfigPanel.chartType[otherSide].type = activeType;\n    }\n  }\n}\n// DO SCATTER INSURANCE ends\n\n// PAYLOAD TO ED CONFIG PANEL\n// Called from payloadToEdConfigMaster to oversee transfer of\n// rawData and metadata for one panel\nexport function payloadToEdConfigPanel(edConfigPanel, payloadP, existingChart) {\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  // Data\n  payloadToEdConfigRawData(edConfigPanel.chartData, payloadP.rawData.values);\n  // Metadata\n  const loadVals = payloadP.metaData.values;\n  // Handler moves all properties of one 'set'\n  // The editorConfig is in a 'default' state. But there are certain\n  // properties that overwrite from an existing panel in Monteux...\n  // ...**IF** that panel has metadata\n  const overwriteDefaultPanelMetadata =\n    existingChart && Object.keys(loadVals).length > 0;\n  let isStacked = false;\n  let side = 'left';\n  // Raw data, as an array:\n  const dArray = Object.assign([], edConfigPanel.chartData.dataArray);\n  let blobCol = 0;\n  if (overwriteDefaultPanelMetadata) {\n    // Chart has existing metadata;\n    // do all the obvious data transfers\n    transferAllMetadataSets(edConfigPanel, loadVals);\n    // But overwrite string values that must arrayify\n    // NOTE: egregious duplication\n    let tVals = loadVals.scales_left_tickValues;\n    edConfigPanel.scales.left.tickValues = [];\n    if (typeof tVals !== 'undefined' && tVals.length > 0) {\n      // edConfigPanel.scales.left.tickValues = tVals.split(',');\n      const leftArray = tVals.split(';');\n      edConfigPanel.scales.left.tickValues = leftArray.map(val => Number(val));\n    }\n    tVals = loadVals.scales_right_tickValues;\n    edConfigPanel.scales.right.tickValues = [];\n    if (typeof tVals !== 'undefined' && tVals.length > 0) {\n      const rightArray = tVals.split(';');\n      edConfigPanel.scales.right.tickValues = rightArray.map(val =>\n        Number(val),\n      );\n    }\n    // And specifics:\n    edConfigPanel.panelHeader = loadVals.panelHeader;\n    // Added Jan'19: is this a good place to check that data and\n    // scales are still in alignment? Maybe, but as of Nov'19, I\n    // no longer update *plotted* MMI (just actual min/max)\n    resetActualScaleValuesFromNewPayload(edConfigPanel);\n    side = EditorUtils.getSide(edConfigPanel);\n    isStacked = edConfigPanel.chartType[side].stacked;\n    // Scatters can get confused, so...\n    doScatterInsurance(edConfigPanel, side);\n    // Overall chart type (line/bar/scatter/table/mixed/double...)\n    // Panel object default is 'line', FWIW...\n    let ocType = loadVals.overallChartType;\n    // Old files don't define overallChartType, or\n    // use an outdated value\n    if (typeof ocType === 'undefined') {\n      ocType = edConfigPanel.chartType[side].type;\n    } else if (ocType === 'blobscatter') {\n      ocType = 'sizedscatter';\n    }\n    edConfigPanel.overallChartType = ocType;\n    // If a series has been deleted, legend can go askew, so:\n    if (edConfigPanel.chartData.headers.length < 3) {\n      edConfigPanel.legend.value = 0;\n      edConfigPanel.legend.header = '';\n    }\n    // Now we know everything we need to know, populate axis headers\n    // for scatters or doublescale\n    setAxisHeadersFromSeriesHeaders(edConfigPanel);\n  } else {\n    // New chart, or new panel has been added, with no metadata.\n    // FIXME: I'm slipping in the Table option; but this function\n    // deffo needs refactoring so that human beings can understand it.\n    // I originally set overallChartType to '' here; but\n    // now it's already set to DPs default\n    let chartType = dps.metadata.defaults.type;\n    if (payloadP.rawData.values.isTable) {\n      // Table-specific\n      edConfigPanel.chartType.left.type = 'table';\n      edConfigPanel.chartType.right.type = 'table';\n      chartType = 'table';\n    } else {\n      // I want to leave the editorConfig in its default\n      // state... but I need to extract scale values for the raw data\n      // and check whether data are indexable...\n      // Side as string: 'left' or 'right'\n      side = EditorUtils.getSide(edConfigPanel);\n      // NOTE: prev is wrong... unless I've set editorConfig.enableScale in default editorConfig...\n      // Default side enablement\n      edConfigPanel.enableScale.left = false;\n      edConfigPanel.enableScale.right = false;\n      // Whatever, there may be an override to default chart type: if\n      // categories are strings, set to bar\n      if (payloadP.rawData.values.categoryType.includes('string')) {\n        chartType = 'bar';\n        edConfigPanel.overallChartType = 'bar';\n        // Default 'side' (left=top, right=bottom) for bar charts\n        side = 'left';\n        edConfigPanel.chartType[side].type = chartType;\n      }\n      // NOTE: serious duplication of Editor.handleValuesFromDataFold: at\n      // some point I need to revisit these processes\n      // Now set 'active' side on\n      edConfigPanel.enableScale[side] = true;\n      isStacked = edConfigPanel.chartType[side].stacked;\n      const actualMinMax = MinMaxUtils.newMinMaxFcn(dArray, isStacked, blobCol);\n      const factor = edConfigPanel.scales[side].factor;\n      const invert = edConfigPanel.scales[side].invert;\n      // Now get recommended default min/max vals in an object\n      const recommendedMinMax = MinMaxUtils.getRecommendedMinMaxIncr(\n        actualMinMax,\n        dps.axes.general,\n        factor,\n      );\n      // _which gets set as the active side's scales object\n      edConfigPanel.scales[side] = recommendedMinMax;\n      // And put back factor and invert\n      edConfigPanel.scales[side].factor = factor;\n      edConfigPanel.scales[side].invert = invert;\n    }\n    // Legend default\n    setLegendColumnDefault(edConfigPanel.legend, chartType);\n    // Is chart 'indexable'?\n    // Pass current editorConfig index object and data array\n    // and the blob column, if any\n    if (typeof edConfigPanel.blobs.column !== 'undefined') {\n      blobCol = edConfigPanel.blobs.column;\n    }\n  }\n  // Index check is outside the condition, since we're verifying whether there's\n  // an *indexable* point, and existing data may have changed\n  EditorConfigDefaultUtils.getIndexedPoint(\n    edConfigPanel.indexed,\n    dArray,\n    blobCol,\n  );\n}\n// PAYLOAD TO ED CONFIG PANEL ends\n\n// VERIFY PAYLOAD PRESET\n// Called from payloadToEdConfigGlobalProps. If synced\n// chart's sub/preset aren't found in Sibyl's lookup,\n// substitutes defaults\nexport function verifyPayloadPreset(pVals, presetsConfig) {\n  // 'Incoming' values\n  let preset = pVals.preset;\n  let subPreset = pVals.subPreset;\n  // If either is undefined, use defaults:\n  const useDefault =\n    typeof presetsConfig.userPresets[preset] === 'undefined' ||\n    typeof presetsConfig.userPresets[preset][subPreset] === 'undefined';\n  if (useDefault) {\n    const dps = globalAssets.DefaultPreferences.metadata.defaults;\n    preset = dps.preset[presetsConfig.user];\n    subPreset = dps.subPreset[presetsConfig.user];\n    // Update payload, too:\n    pVals.preset = dps.preset;\n    pVals.subPreset = dps.subPreset;\n  }\n  return { preset, subPreset };\n}\n// VERIFY PAYLOAD PRESET ends\n\n// PAYLOAD TO EDITOR CONFIG PROPS\n// Called from payloadToEdConfigMaster to transfer global props\nexport function payloadToEditorConfigGlobalProps(\n  edConfigGlobal,\n  payloadGVals,\n  presetsConfig,\n) {\n  // Check that sub/preset exist\n  const verifiedPresets = verifyPayloadPreset(payloadGVals, presetsConfig);\n  edConfigGlobal.presets.preset = verifiedPresets.preset;\n  edConfigGlobal.presets.subPreset = verifiedPresets.subPreset;\n  edConfigGlobal.size.height = payloadGVals.height;\n  edConfigGlobal.size.width = payloadGVals.width;\n  edConfigGlobal.strings.title = payloadGVals.title;\n  edConfigGlobal.strings.subtitle = payloadGVals.subtitle;\n  edConfigGlobal.strings.subsubtitle = payloadGVals.subSubtitle;\n  edConfigGlobal.strings.footnote = payloadGVals.footnote;\n  edConfigGlobal.strings.source = payloadGVals.source;\n  if (typeof payloadGVals.numberBox !== 'undefined') {\n    // Because not defined in old datasets\n    edConfigGlobal.strings.numberBox = payloadGVals.numberBox;\n  }\n  edConfigGlobal.chartIndex = payloadGVals.chartIndex;\n  edConfigGlobal.fileName.name = payloadGVals.name;\n  edConfigGlobal.fileName.number = payloadGVals.chartNumber;\n  edConfigGlobal.fileName.sections = getEdConfigCurrentSections(\n    payloadGVals,\n    presetsConfig,\n  );\n}\n// PAYLOAD TO EDITOR CONFIG GLOBAL PROPS ends\n\n// PAYLOAD TO ED-CONFIG MONTEUX PROPS\n// Called from payloadToEdConfigMaster to transfer Google sheet/tab ids\nexport function payloadToEdConfigMonteuxProps(editorConfig, payload) {\n  editorConfig.monteux = {\n    sheetId: payload.sheetId,\n    globalTabId: payload.global.globalId,\n  };\n  const payloadPanels = payload.panelArray;\n  editorConfig.monteux.panels = payloadPanels.map(oneP => ({\n    dataTabId: oneP.rawData.id,\n    metadataTabId: oneP.metaData.id,\n  }));\n}\n// PAYLOAD TO ED-CONFIG MONTEUX PROPS ends\n\n// PAYLOAD TO ED-CONFIG MASTER\n// Called from updateEdConfigWithNewPayload. Controls specific\n// payload-to-editorConfig transfers\nexport function payloadToEdConfigMaster(editorConfig, payload, presetsConfig) {\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  // Always transfer overall sheet id:\n  editorConfig.global.sheetId = payload.global.values.sheetId;\n  // and sheet and tab id:\n  payloadToEdConfigMonteuxProps(editorConfig, payload, dps);\n  // Remaining props only transfer if we're reloading an\n  // existing chart. The editorConfig's fileName object has already\n  // been updated, so I go back to the payload to check whether\n  // this is a new chart. Monteux initially sends the filename as an\n  // empty string...\n  // Transfer global prefs for a reloaded chart:\n  const existingChart = editorConfig.global.existingChart;\n  if (existingChart) {\n    // Global props\n    payloadToEditorConfigGlobalProps(\n      editorConfig.global,\n      payload.global.values,\n      presetsConfig,\n    );\n  }\n  // By default, editorConfig panel settings are 1 active out of 1 total on 1 row\n  // Count incoming panels and update total. But I have to\n  // handle panels added or deleted, so...\n  const actualPanelTotal = payload.panelArray.length;\n  const recordedPanelTotal = payload.global.values.panelTotal;\n  // Always use the actual number of datasets\n  editorConfig.global.panelVals.total = actualPanelTotal;\n  // Get prev'y-exported rowcount and chartIndex\n  let panelRows = payload.global.values.panelRows;\n  let chartIndex = payload.global.values.chartIndex;\n  if (actualPanelTotal !== recordedPanelTotal) {\n    // Panel count has changed; force one row;\n    // first panel is active\n    panelRows = 1;\n    chartIndex = 0;\n  }\n  editorConfig.global.panelVals.rows = panelRows;\n  editorConfig.global.panelVals.active = chartIndex;\n  editorConfig.global.chartIndex = chartIndex;\n  // Now loop by panels\n  for (let pNo = 0; pNo < actualPanelTotal; pNo++) {\n    const activePanel = editorConfig.panels[pNo];\n    const payloadPanel = payload.panelArray[pNo];\n    payloadToEdConfigPanel(activePanel, payloadPanel, existingChart);\n  }\n}\n// PAYLOAD TO ED-CONFIG MASTER ends\n\n// UPDATE ED-CONFIG WITH NEW PAYLOAD\n// Called from Editor.handleMonteuxImportValues to create a new\n// editorConfig, then overlay with values from Monteux.\n// Args: Monteux payload, presets, and an array of\n// existing panel headers\nexport function updateEdConfigWithNewPayload(payload, presetsConfig) {\n  // The first thing is to get a new editorConfig...\n  // ...for which I need to know whether this is a new chart\n  // that needs a filename (in which case, fileName is\n  // a boolean false, which needs to be stringified!)\n  // As of Dec'18, Monteux sends filename for a new data sheet as\n  // an empty string, but still trapping undefined...\n  let fileName = payload.global.values.name;\n  // And we need file number:\n  const fileNumber = payload.global.values.chartNumber;\n  // Flag for a resync of an existing chart\n  // Set true for first sync of completely new data\n  // Never reset hereafter. Passed into EdConfig\n  // by child handler payloadToEdConfigMaster\n  let existingChart = false;\n  if (typeof fileName === 'undefined') {\n    fileName = 'false';\n    // No: fileNumber is sorted downstream\n    // fileNumber = '000';\n  } else if (fileName.length === 0) {\n    fileName = 'false';\n    // fileNumber = '000';\n  } else {\n    fileName = fileName.toString();\n    existingChart = true;\n  }\n  // Before we can create a new editorConfig, we need to know how many panels...\n  const panelNo = payload.panelArray.length;\n  const newEdConfig = initiateNewEdConfig(\n    presetsConfig,\n    fileName,\n    panelNo,\n    fileNumber,\n  );\n  newEdConfig.global.existingChart = existingChart;\n  // newPayload indicates that the event chain is precipitated by\n  // the arrival of a new payload, rather than an edit in Sibyl\n  // It can be reset further along the process\n  newEdConfig.global.newPayload = true;\n  // Now overwrite, by ref, with values from payload.\n  // A sub-handler controls specific transfers...\n  payloadToEdConfigMaster(newEdConfig, payload, presetsConfig);\n  // To force through...\n  newEdConfig.goodPayload = true;\n  return newEdConfig;\n}\n// UPDATE ED-CONFIG WITH NEW PAYLOAD ends\n\n// ***** ***** FUNCTIONS TO TRANSFER DATA FROM ED CONFIG TO CONFIG OBJECT ***** *****\n\n// FIND NODE DOWN CHAIN\n// Called from findPreferencesNode to dig down a chain of nodes in a\n// Preferences file. Args are the top-level of DPs or PPs. Chain is a\n// descending hierarchy of nodes to step carefully down as far as they lead...\nexport function findNodeDownChain(topNode, chain) {\n  let node = JSON.parse(JSON.stringify(topNode));\n  for (let link = 0; link < chain.length; link++) {\n    node = node[chain[link]];\n    // In case of error:\n    if (typeof node === 'undefined') {\n      break;\n    }\n  }\n  return node;\n}\n// FIND NODE DOWN CHAIN ends\n\n// FIND PREFERENCES NODE\n// Function returns a complete preferences node. It clones the (hopefully\n// complete!) default definition as its base. Then it scrabbles around,\n// by preset and section, for a specific node. If a specific node is\n// found, it overwrites the default with whatever properties exist.\n// Args are: preset id; section id; and an array of subnodes that\n// constitute a sort of 'chain' down to the node I'm looking for...\n// NOTE: this chain structure must be consistent across all prefs presets,\n// sections, etc. And the 'end-of-chain' node must exist in the\n// default prefs...\n// Pass in user for PPs economist/eiu\nexport function findPreferencesNode(presetsConfig, chain) {\n  const dps = JSON.parse(JSON.stringify(globalAssets.DefaultPreferences));\n  const defaultNode = findNodeDownChain(dps, chain);\n  if (typeof defaultNode === 'undefined') {\n    return defaultNode;\n  }\n  // So now (in theory, at least) defaultNode is the target node\n  // in the default preferences...\n  // Clone it:\n  // NOTE: overdoing the cloning!\n  const returnNode = JSON.parse(JSON.stringify(defaultNode));\n  // That's the complete default node which (in theory at least!)\n  // includes all the properties that could exist...\n  // Now: are there any specific preset/subPreset overwrites?\n  const presetNode = presetsConfig.userPresets[presetsConfig.presetName];\n  if (typeof presetNode === 'undefined') {\n    // No specific preset definition found (shouldn't happen, but still...)\n    return returnNode;\n  }\n  // Now narrow preset down to subPreset:\n  let specificNode = presetNode[presetsConfig.subpresetName];\n  // let specificNode = presetNode[subPreset];\n  if (typeof specificNode === 'undefined') {\n    // No specific subPreset node: return default\n    // NOTE: what happens as a result?\n    return returnNode;\n  }\n  // Now look down the chain. If it breaks, return the default node\n  specificNode = findNodeDownChain(specificNode, chain);\n  if (typeof specificNode !== 'undefined') {\n    // Overwrite deltas\n    Object.assign(returnNode, specificNode);\n  }\n  return returnNode;\n}\n// FIND PREFERENCES NODE ends\n\n// SET BACKGROUND PROPERTIES\n// Called from Editor.getDefaultChartConfigProperties\n// Args are editorConfig object and preset strings.\n// Background is updated by ref.\n// The way this works is that I look for a specific node, in preset\n// prefs or, failing that, default prefs...\n// But for dimensions I look for a subPreset node and, if that doesn't exist,\n// fall back to the original node's 'default' property...\nexport function setBackgroundProperties(config, presetsConfig, startUp) {\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  // DIMENSIONS\n  let chain = ['background', 'outerbox', 'dimensions'];\n  const myNode = findPreferencesNode(presetsConfig, chain);\n  // NOTE: I used to have error-trapping for node not found...\n  // Previous versions checked for a preset-specific 'forceHeight' property\n  // But I think this changes now: if this fcn has been called, there\n  // has been a preset change and both height and width are forced\n  // (or it's startup)\n  config.background.outerbox.dimensions = {\n    height: myNode.height,\n    width: myNode.width,\n    defaultRecommendedHeight: myNode.height,\n  };\n  // I have a defaultRecommendedHeight, which is the original\n  // height to which any chart is set initially or upon change\n  // of preset. It can overriden.\n  // MARGINS\n  chain = ['background', 'outerbox', 'margins'];\n  const margins = findPreferencesNode(presetsConfig, chain);\n  config.background.margins = margins;\n  // SHAPES (convert object to array)\n  const shapeKeys = Object.keys(dps.background.shapes);\n  const shapeArray = [];\n  for (let iii = 0; iii < shapeKeys.length; iii++) {\n    chain = ['background', 'shapes', shapeKeys[iii]];\n    const oneShape = findPreferencesNode(presetsConfig, chain);\n    shapeArray.push(oneShape);\n  }\n  config.background.shapes = shapeArray;\n  // Strings, like shapes, have to be individually accessed...\n  // and, unlike shapes, string props are objects.\n  // Nov'20 added Number boxes\n  // NOTE: this injects default string content only. 'Actual' content\n  // is transferred by reconcileEdConfigBackgroundStringsToConfig\n  const stringKeys = Object.keys(dps.background.strings);\n  const stringObj = {};\n  for (let iii = 0; iii < stringKeys.length; iii++) {\n    const thisKey = stringKeys[iii];\n    chain = ['background', 'strings', thisKey];\n    const oneString = findPreferencesNode(presetsConfig, chain);\n    // But if we're not starting up, fetch in existing content:\n    if (!startUp) {\n      oneString.content = config.background.strings[thisKey].content;\n    }\n    stringObj[thisKey] = oneString;\n  }\n  config.background.strings = stringObj;\n  // Panel attributes\n  const pAtts = findPreferencesNode(presetsConfig, ['panelAttributes']);\n  config.panelAttributes = pAtts;\n  // Legend\n  config.legend = findPreferencesNode(presetsConfig, ['legend']);\n  // Chart padding:\n  // NOTE: only needed for 'below' property now. Above is replaced\n  // by gapBelowStrings... which is, in turn, replace: see below...\n  chain = ['chart', 'padding'];\n  config.background.chartPadding = findPreferencesNode(presetsConfig, chain);\n  // Background values for gap below strings stack\n  chain = ['background', 'topPadding'];\n  config.background.topPadding = findPreferencesNode(presetsConfig, chain);\n}\n// SET BACKGROUND PROPERTIES ends\n\n//  RECONCILE ED-CONFIG PANEL SCALES TO CONFIG\n// Called from reconcileEdConfigPanelToConfig. Creates a new 'scales' object to\n// go into the CO\nexport function reconcileEdConfigPanelScalesToConfig(activePanel) {\n  const dps = Object.assign({}, globalAssets.DefaultPreferences);\n  const configScales = EditorUtils.getChartScaleDefaultObject(\n    dps.metadata.defaults,\n  );\n  // Left and/or right...\n  const checkScale = Object.assign({}, activePanel.enableScale);\n  // NOTE: kludge for mixed scales forces both sides on\n  // NOTE: this looks... bizarre! Revisit!\n  if (activePanel.scales.mixed.isMixed) {\n    checkScale.left = true;\n    checkScale.right = true;\n  }\n  if (checkScale.left) {\n    configScales.left = EditorUtils.getScaleProps(activePanel, 'left');\n  }\n  if (checkScale.right) {\n    configScales.right = EditorUtils.getScaleProps(activePanel, 'right');\n  }\n  // Pass axis-side flags to CO:\n  configScales.enableScale = activePanel.enableScale;\n  // Double/mixed?\n  const isDouble = activePanel.scales.double.isDouble;\n  const isMixed = activePanel.scales.mixed.isMixed;\n  configScales.isDouble = isDouble;\n  configScales.isMixed = isMixed;\n  // Side: left or right. Default, for double scales:\n  let side = '';\n  if (!isDouble) {\n    side = EditorUtils.getSide(activePanel);\n  }\n  // Split point (zero default for single)\n  let splitAt = 0;\n  if (isDouble) {\n    splitAt = activePanel.scales.double.splitDataAtCol;\n  } else if (isMixed) {\n    splitAt = activePanel.scales.mixed.splitDataAtCol;\n    // If scale is mixed, I have to override a setting about\n    // 15 lines above and align the subsidiary\n    // side's MMI to the (default) dominant\n    let otherSide = 'left';\n    if (side === 'left') {\n      otherSide = 'right';\n    }\n    configScales[otherSide].minMaxObj = configScales[side].minMaxObj;\n  }\n  configScales.splitDataAtCol = splitAt;\n  // Scatter z-scale, if any\n  configScales.z = {};\n  if (typeof activePanel.scales.z !== 'undefined') {\n    configScales.z = activePanel.scales.z;\n  }\n  return configScales;\n}\n//  RECONCILE ED-CONFIG PANEL SCALES TO CONFIG ends\n\n// WILL DATA LAYER CAKE\n// Checks whether data are compatible with a layer cake\n// Called from Editor.handleValuesFromDataFold, and from\n// reconcileEdConfigPanelDataToConfig. chartDataObj is\n// the entire 'chartData' object. I check the array of series-arrays,\n// to determine whether I can layer-cake these data\nexport function willDataLayerCake(chartDataObj) {\n  let canLayer = true;\n  const dArray = chartDataObj.dataArray;\n  // The data array is structured by rows (categories), so it's all\n  // a bit topsy-turvy...\n  const pointCount = dArray.length;\n  const seriesCount = dArray[0].length;\n  // I check for mixed +/- values in one series...\n  // (Prev'y also checked for blanks, in the belief that layer cakes must have\n  // zeroes for missing vals. I changed my mind about this: blanks are allowed\n  // and Sibyl will turn them into zeroes as necessary)\n  // Outer loop is by points\n  // NOTE: does this allow for blobs?\n  for (let sNo = 1; sNo < seriesCount; sNo++) {\n    let posCount = 0;\n    let negCount = 0;\n    for (let pNo = 1; pNo < pointCount; pNo++) {\n      const point = parseFloat(dArray[pNo][sNo]);\n      if (point < 0) {\n        negCount++;\n      } else if (point > 0) {\n        posCount++;\n      }\n    }\n    // Is series +/- consistent?\n    canLayer = posCount === 0 || negCount === 0;\n    if (!canLayer) {\n      break;\n    }\n  }\n  chartDataObj.canLayerCake = canLayer;\n  if (canLayer) {\n    // Check for holes (as opposed to gaps across all series)\n    chartDataObj.hasHoles = checkForHoles(dArray);\n  }\n}\n// WILL DATA LAYER CAKE ends\n\n// CHECK FOR HOLES\n// Called from willDataLayerCake. Checks through data for 'rows'\n// that have isolated missing values. This is for\n// layer cakes...\n// NOTE: if data are ever organised in columns, that would\n// be a better point of intervention\nexport function checkForHoles(dArray) {\n  // Counts occurrences of a val in an array\n  // From: https://www.w3resource.com/javascript-exercises/fundamental/javascript-fundamental-exercise-70.php\n  const countOccurrences = (arr, val) =>\n    arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\n  const hole = '';\n  let result = false;\n  // Number of values (no. of cols - 1)\n  const vLen = dArray[0].length - 1;\n  // Omit headers\n  for (let rNo = 1; rNo < dArray.length; rNo++) {\n    const thisRow = dArray[rNo];\n    const holeCount = countOccurrences(thisRow, hole);\n    // 'Normal' is either no or all missing values\n    if (holeCount !== 0 && holeCount < vLen) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n// CHECK FOR HOLES ends\n\n//  RECONCILE ED CONFIG PANEL DATA TO CONFIG\n// Called from reconcileEdConfigPanelToConfig to pass data over,\n// with consequent properties\nexport function reconcileEdConfigPanelDataToConfig(activePanel, configPanel) {\n  // Data array from editorConfig:\n  const dataArray = activePanel.chartData.dataArray;\n  // I did have a trap for no data, but this should be handled upstream...\n  //\n  // Restructure into D3-friendly array of objects, each\n  // representing a row of data named for headers. The\n  // returned object also has properties for\n  // headers, categories, seriesCount and pointCount...\n  // NOTE: this encompasses ALL data, including blobs\n  // so some tweaks have to be made subsequently...\n  const dataObject = EditorUtils.objectifyData(dataArray);\n  // dataObject has props:\n  //    dataObjArray: an array of objects, each with properties keyed\n  //      as raw data headers\n  //    headers: an array of the raw data headers\n  //    categories: array of categories\n  //    pointCount: number of points per series\n  //    dataColCount: number of cols of data (excl categories)\n  // Parcel these properties out to the config obj:\n  configPanel.chartData = dataObject.dataObjArray;\n  // Set the calLayerCake flag on the data\n  willDataLayerCake(activePanel.chartData);\n  configPanel.dataColCount = dataObject.dataColCount;\n  configPanel.pointCount = dataObject.pointCount;\n  configPanel.headers = dataObject.headers;\n  configPanel.categories = dataObject.categories;\n  configPanel.timeFormats = activePanel.chartData.timeFormats;\n  configPanel.yearsAdjustedBy = activePanel.chartData.yearsAdjustedBy;\n  configPanel.categoryType = activePanel.chartData.categoryType;\n  configPanel.hasHoles = activePanel.chartData.hasHoles;\n}\n//  RECONCILE ED CONFIG PANEL DATA TO CONFIG ends\n\n//  RECONCILE ED CONFIG PANEL BLOBS TO CONFIG\n// Called from reconcileEdConfigPanelToConfig to pass blobs across\nexport function reconcileEdConfigPanelBlobsToConfig(myBlobs, dataArray) {\n  // Get a default blobs object\n  const blobState = EditorConfigDefaultUtils.getEdConfigDefaultBlobs();\n  // Now verify that the blobs col is within the series range\n  // (i.e. that nobody's deleted a column in the raw data)\n  const seriesCount = dataArray[0].length;\n  if (myBlobs.column < seriesCount) {\n    // Overwrite with incoming props\n    const bCol = myBlobs.column;\n    blobState.column = bCol;\n    // Reset important blobs-off vals in CO blobState:\n    blobState.valsArray = [];\n    // Then overwrite if there are blobs...\n    if (bCol > 0) {\n      // Get min and max values\n      const blobValues = EditorUtils.getBlobValuesArray(dataArray, bCol);\n      blobState.valsArray = blobValues.bArray;\n      blobState.min = blobValues.min;\n      blobState.max = blobValues.max;\n      // There's an edge case where user has changed name of blobs column,\n      // which confuses Sibyl, so grab blob header from data headers:\n      blobState.header = dataArray[0][bCol];\n      if (blobValues.min < 0) {\n        // Negative blob vals force rectangular blobs\n        blobState.isRect = true;\n      } else {\n        blobState.isRect = myBlobs.isRect;\n      }\n    }\n  }\n  return blobState;\n}\n//  RECONCILE ED-CONFIG PANEL BLOBS TO CONFIG ends\n\n//  RECONCILE ED-CONFIG PANEL LEGEND TO CONFIG\n// Called from reconcileEdConfigPanelToConfig to handle legend\nexport function reconcileEdConfigPanelLegendToConfig(edConfigLegend) {\n  return {\n    value: edConfigLegend.columns,\n    header: edConfigLegend.header,\n  };\n}\n//  RECONCILE ED-CONFIG PANEL LEGEND TO CONFIG ends\n\nexport function getChartSideTypes(activePanel, isDouble, isMixed) {\n  const sideTypes = {\n    left: {},\n    right: {},\n  };\n  let side = '';\n  if (!isDouble) {\n    side = EditorUtils.getSide(activePanel);\n  }\n  if (isDouble || isMixed) {\n    sideTypes.left = {\n      type: activePanel.chartType.left.type,\n      stacked: activePanel.chartType.left.stacked,\n      thermoDots: activePanel.chartType.left.thermoDots,\n      scatterLabels: activePanel.chartType.left.scatterLabels,\n      scatterTrendline: activePanel.chartType.left.scatterTrendline,\n    };\n    sideTypes.right = {\n      type: activePanel.chartType.right.type,\n      stacked: activePanel.chartType.right.stacked,\n      thermoDots: activePanel.chartType.right.thermoDots,\n      scatterLabels: activePanel.chartType.right.scatterLabels,\n      scatterTrendline: activePanel.chartType.right.scatterTrendline,\n    };\n  } else if (side === 'left') {\n    sideTypes.left = {\n      type: activePanel.chartType.left.type,\n      stacked: activePanel.chartType.left.stacked,\n      thermoDots: activePanel.chartType.left.thermoDots,\n      scatterLabels: activePanel.chartType.left.scatterLabels,\n      scatterTrendline: activePanel.chartType.left.scatterTrendline,\n    };\n  } else {\n    sideTypes.right = {\n      type: activePanel.chartType.right.type,\n      stacked: activePanel.chartType.right.stacked,\n      thermoDots: activePanel.chartType.right.thermoDots,\n      scatterLabels: activePanel.chartType.right.scatterLabels,\n      scatterTrendline: activePanel.chartType.right.scatterTrendline,\n    };\n  }\n  return sideTypes;\n}\n\n// GET SPECIFIC CHART TYPE\n// Gets name for stacked step/line, bar and column charts\nexport function getSpecificChartType(type, isStacked) {\n  let specific = type;\n  if (isStacked) {\n    if (specific === 'line') {\n      specific = 'layercake';\n    } else if (specific === 'stepline') {\n      specific = 'steplayercake';\n    } else if (specific === 'column') {\n      specific = 'stackedbar';\n    } else if (specific === 'column') {\n      specific = 'stackedcolumn';\n    }\n  }\n  return specific;\n}\n// GET SPECIFIC CHART TYPE ends\n\n// DECIDE DOUBLE COLOUR SETS\n// Called from reconcileEdConfigPanelSeriesToConfig.  Determines which double-\n// scale colour definitions to use for series (left/right or line/column)\nexport function decideDoubleColourSets(leftType, rightType, doubleColours) {\n  // By default, assume that both sides are the same chart type,\n  // and set side-specific colours\n  const colourSets = {\n    left: doubleColours.left,\n    right: doubleColours.right,\n  };\n  const leftLine = leftType.includes('line');\n  const rightLine = rightType.includes('line');\n  if (leftLine !== rightLine) {\n    // Different chart types; overwrite with type-specific colours\n    if (leftLine) {\n      colourSets.left = doubleColours.linealone;\n      colourSets.right = doubleColours.columnalone;\n    } else {\n      colourSets.left = doubleColours.columnalone;\n      colourSets.right = doubleColours.linealone;\n    }\n  }\n  return colourSets;\n}\n// DECIDE DOUBLE COLOUR SETS ends\n\n//  RECONCILE ED CONFIG PANEL SERIES TO CONFIG\n// Called from reconcileEdConfigPanelToConfig to handle series props\nexport function reconcileEdConfigPanelSeriesToConfig(\n  activePanel,\n  colourCount,\n  splitAt,\n  presetsConfig,\n) {\n  const configSeries = {};\n  // I have to allow for separate series attributes\n  // on double and mixed scale charts.\n  // I have scales.double/mixed.isDouble/Mixed\n  // and chartType.left/right.type\n  // First, let's have a couple of objects\n  let seriesLeft = {};\n  let seriesRight = {};\n  let leftType = '';\n  let rightType = '';\n  configSeries.colours = [];\n  const isDouble = activePanel.scales.double.isDouble;\n  const isMixed = activePanel.scales.mixed.isMixed;\n  // Is this a UK/US parties chart?\n  const headers = activePanel.chartData.headers;\n  const ukParties = PartyUtils.checkForParties(headers, true);\n  const usParties = PartyUtils.checkForParties(headers, false);\n  // Send these chartside, so that legends know to use\n  // party colours for strings\n  // (Actually, the fcn currently forces both to false)\n  PartyUtils.passPartyColoursFlagToConfigObject(\n    configSeries,\n    ukParties,\n    usParties,\n  );\n  // Clone DP series\n  // let defaultSeries = Object.assign({}, globalAssets.DefaultPreferences.series);\n  let defaultSeries = JSON.parse(JSON.stringify(globalAssets.DefaultPreferences.series));\n  // Are there any preset-specific series prefs?\n  const pps = presetsConfig.userPresets;\n  const preset = presetsConfig.presetName;\n  const subpreset = presetsConfig.subpresetName;\n  const presetSeries = pps[preset][subpreset].series;\n  if (typeof presetSeries !== 'undefined') {\n    defaultSeries = EditorUtils.deepMerge(defaultSeries, presetSeries);\n  }\n  const sideTypes = getChartSideTypes(activePanel, isDouble, isMixed);\n  leftType = sideTypes.left.type;\n  rightType = sideTypes.right.type;\n  let doubleColourSets = {};\n  if (isDouble) {\n    doubleColourSets = decideDoubleColourSets(\n      leftType,\n      rightType,\n      defaultSeries.double.colours,\n    );\n  }\n  // So now I have 1 (single-scale) or 2 chart types\n  if (typeof leftType !== 'undefined') {\n    // And I need sub-type (eg 'layercake')\n    const leftSpecificType = getSpecificChartType(\n      leftType,\n      sideTypes.left.stacked,\n    );\n    seriesLeft = SeriesPreferences.specifySeriesPrefs(\n      leftSpecificType,\n      defaultSeries,\n      colourCount,\n    );\n    if (ukParties) {\n      PartyUtils.applyPartyColours(seriesLeft.colours, headers, true);\n    } else if (usParties) {\n      PartyUtils.applyPartyColours(seriesLeft.colours, headers, false);\n    }\n    // Set as series.left...\n    configSeries[leftType] = seriesLeft;\n    // But (Feb 2018) there's a kludgy overwrite of colours for double scale...\n    for (let colNo = 0; colNo < splitAt; colNo++) {\n      if (isMixed) {\n        // Use colours up to split point\n        configSeries.colours.push(seriesLeft.colours[colNo]);\n      } else if (isDouble) {\n        // configSeries.colours.push(defaultSeries.double.colours.left[colNo]);\n        configSeries.colours.push(doubleColourSets.left[colNo]);\n      }\n    }\n  }\n  if (typeof rightType !== 'undefined') {\n    // Sub-type (eg 'layercake')\n    const rightSpecificType = getSpecificChartType(\n      rightType,\n      sideTypes.right.stacked,\n    );\n    seriesRight = SeriesPreferences.specifySeriesPrefs(\n      rightSpecificType,\n      defaultSeries,\n      colourCount,\n    );\n    if (ukParties) {\n      PartyUtils.applyPartyColours(seriesRight.colours, headers, true);\n    } else if (usParties) {\n      PartyUtils.applyPartyColours(seriesRight.colours, headers, false);\n    }\n    configSeries[rightType] = seriesRight;\n    // Use colours FROM split point -- unless isDouble,\n    // in which case start from zero, so that we use the\n    // complete set of r/hand colours as defined in DPs\n    let start = splitAt;\n    let end = seriesRight.colours.length;\n    if (isDouble) {\n      end -= start;\n      start = 0;\n    }\n    for (let colNo = start; colNo < end; colNo++) {\n      if (isMixed) {\n        // Use colours up to split point\n        configSeries.colours.push(seriesRight.colours[colNo]);\n      } else if (isDouble) {\n        // Double uses specific set\n        configSeries.colours.push(doubleColourSets.right[colNo]);\n      }\n    }\n  }\n  return configSeries;\n}\n//  RECONCILE ED CONFIG PANEL SERIES TO CONFIG ends\n\n// RECONCILE ED CONFIG BACKGROUND STRINGS TO CONFIG\n// Called from reconcileEdConfigGlobalToConfig to transfer background strings\n// Args are editorConfig's global strings object, and the complete CO\n// NOTE: doesn't handle panel headers, which are TO COME, anyway\nexport function reconcileEdConfigBackgroundStringsToConfig(\n  edConfigStrings,\n  allConfig,\n) {\n  const coBackStrings = allConfig.background.strings;\n  coBackStrings.title.content = edConfigStrings.title;\n  coBackStrings.subtitle.content = edConfigStrings.subtitle;\n  coBackStrings.subsubtitle.content = edConfigStrings.subsubtitle;\n  coBackStrings.source.content = edConfigStrings.source;\n  coBackStrings.footnote.content = edConfigStrings.footnote;\n  coBackStrings.numberBox.content = edConfigStrings.numberBox;\n  allConfig.background.footnoteCount = edConfigStrings.footnoteCount;\n  // Source wrapwidth depends upon whether there are footnotes\n  if (edConfigStrings.footnote.length > 0) {\n    coBackStrings.source.wrapwidth =\n      coBackStrings.source.wrapoptions.hasfootnote;\n  }\n}\n//  RECONCILE ED CONFIG BACKGROUND STRINGS TO CONFIG ends\n\n// RECONCILE EDITOR TO CHART PANEL CONFIG\n// Called from Editor.reconcileEditorToChartConfig, to transfer properties\n// by ref for one panel\nexport function reconcileEditorToChartPanelConfig(activePanel, presetsConfig) {\n  const configPanel = EditorUtils.getNewChartObject(false, presetsConfig);\n  // PANEL HEADER rattles around on its own:\n  configPanel.panelheader = activePanel.panelHeader;\n  // SCALES\n  configPanel.scales = reconcileEdConfigPanelScalesToConfig(activePanel);\n  // Now we've got scales, for mixed or double, we need to know if there are columns...\n  const typeStr = `${configPanel.scales.left.type}${\n    configPanel.scales.right.type\n  }`;\n  configPanel.hasColumns = typeStr.includes('column');\n  // Indexed\n  configPanel.indexDot.indexCat = activePanel.indexed.indexCat;\n  configPanel.indexDot.indexFlag = activePanel.indexed.indexFlag;\n  configPanel.indexDot.indexPoint = activePanel.indexed.indexPoint;\n  // DATA\n  reconcileEdConfigPanelDataToConfig(activePanel, configPanel);\n  // BLOBS\n  const dataArray = activePanel.chartData.dataArray;\n  configPanel.blobs.blobState = reconcileEdConfigPanelBlobsToConfig(\n    activePanel.blobs,\n    dataArray,\n  );\n  // And overall blobs flag\n  configPanel.blobs.hasBlobs = configPanel.blobs.blobState.column > 0;\n  // AXIS HEADERS\n  configPanel.axisHeaders = activePanel.axisHeaders;\n  // LEGEND\n  configPanel.legend = reconcileEdConfigPanelLegendToConfig(activePanel.legend);\n  // Now that we know how many blob columns there are, we can get a\n  // SERIES count\n  // NOTE: this could presumably move inside configPanel.series...\n  // ...and I seem to have 2 props that do the same job...\n  configPanel.seriesCount = configPanel.dataColCount;\n  // SERIES\n  // NOTE: it's annoying, the way I have to keep dragging properties back out\n  // of configPanel...\n  // Colour sets vary according to number of series...\n  let colourCount = configPanel.seriesCount;\n  // ...except pies, which use number of points per series\n  const bothTypes = `${activePanel.chartType.left.type}.\n    ${activePanel.chartType.right.type}.`;\n  if (bothTypes.includes('pie')) {\n    colourCount = configPanel.pointCount;\n  }\n  // Don't try to set series props on a table\n  // FIXME: my use of left and right types to determine overall chart type\n  // is stupid. For now, I'm doing a crude table check, but it needs\n  // fixing to use overallType. Also, I've long played fast-and-loose\n  // with setting left. and right.type. I shouldn't by writing\n  // crap like this!\n  const isTable =\n    activePanel.chartType.left.type.includes('table') &&\n    activePanel.chartType.right.type.includes('table');\n  if (isTable) {\n    injectTablePropsIntoConfig(configPanel);\n  } else {\n    configPanel.series = reconcileEdConfigPanelSeriesToConfig(\n      activePanel,\n      colourCount,\n      configPanel.scales.splitDataAtCol,\n      presetsConfig,\n    );\n    // FIXME: kludge to get scatter y-axis side into config\n    configPanel.scatterYaxisSide = activePanel.scales.scatter.yAxisSide;\n    // FIXME: overallChartType looks ahead to the day when\n    // I get around to refactoring data structure. Meanwhile...\n    // Overall chart type (includes Mixed/Double/Table)\n    const ocType = activePanel.overallChartType;\n    if (typeof ocType === 'undefined') {\n      configPanel.overallChartType = '';\n    } else {\n      configPanel.overallChartType = ocType;\n    }\n  }\n  return configPanel;\n}\n// RECONCILE EDITOR TO CHART PANEL CONFIG ends\n\n// INJECT TABLE PROPS INTO CONFIG\nexport function injectTablePropsIntoConfig(configPanel) {\n  configPanel.tableProperties = Object.assign(\n    {},\n    globalAssets.DefaultPreferences.series.table,\n  );\n  configPanel.overallChartType = 'table';\n}\n// INJECT TABLE PROPS INTO CONFIG ends\n\n// RECONCILE EDITOR TO CHART GLOBAL CONFIG\n// Called from Editor.reconcileEditorToChartConfig, to transfer global properties by ref\n// Args are editorConfig.global and the complete chartConfig\nexport function reconcileEditorToChartGlobalConfig(\n  editorConfigGlobal,\n  chartConfig,\n  presetsConfig,\n) {\n  // PRESET/SUBPRESET\n  const preset = presetsConfig.presetName;\n  const subPreset = presetsConfig.subpresetName;\n  chartConfig.metadata.platform = preset;\n  chartConfig.metadata.subplatform = subPreset;\n  // Panels\n  chartConfig.metadata.panels.active = editorConfigGlobal.panelVals.active;\n  chartConfig.metadata.panels.total = editorConfigGlobal.panelVals.total;\n  chartConfig.metadata.panels.rows = editorConfigGlobal.panelVals.rows;\n  // BACKGROUND\n  setBackgroundProperties(chartConfig, presetsConfig, false);\n  // But overwrite height and width\n  // (often redundant, but probably easier just to do it)\n  const coDims = chartConfig.background.outerbox.dimensions;\n  coDims.width = editorConfigGlobal.size.width;\n  coDims.height = editorConfigGlobal.size.height;\n  // Global (chart backgroud) strings\n  reconcileEdConfigBackgroundStringsToConfig(\n    editorConfigGlobal.strings,\n    chartConfig,\n  );\n}\n// RECONCILE EDITOR TO CHART GLOBAL CONFIG ends\n\n// EXTRACT SERIES HEADERS\n// Called from Editor.handleMonteuxImportValues\n// Builds an array, by panel, of series headers\n//  Arg is the editorConfig panels array\nexport function extractSeriesHeaders(panelArray) {\n  const seriesHeaders = [];\n  for (const oneP in panelArray) {\n    const thisP = panelArray[oneP];\n    const headers = thisP.chartData.headers;\n    if (typeof headers !== 'undefined') {\n      seriesHeaders.push(headers);\n    }\n  }\n  return seriesHeaders;\n}\n// EXTRACT SERIES HEADERS ends\n\n// HAVE HEADERS CHANGED\n// Called from Editor.handleMonteuxImportValues\n// Checks for changed series structure in new payload\nexport function haveHeadersChanged(oldHeads, newHeads) {\n  let changed = false;\n  const oldLen = oldHeads.length;\n  const newLen = newHeads.length;\n  // If the number of panels has changed, don't try\n  // to compare... unless this is first sync, when\n  // there are no existing headers\n  if (oldLen !== newLen) {\n    if (oldLen > 0) {\n      changed = true;\n    }\n  } else {\n    for (let pNo = 0; pNo < oldLen; pNo++) {\n      const oneOldSet = oldHeads[pNo].join('');\n      const oneNewSet = newHeads[pNo].join('');\n      if (oneOldSet !== oneNewSet) {\n        changed = true;\n        break;\n      }\n    }\n  }\n  return changed;\n}\n// HAVE HEADERS CHANGED ends\n\n// GET RANDOM COLOUR\n// Called from updateMetadataColourDefinitions. I found this\n// out there on the internet. It simply generates a randon hex value\nexport function getRandomColour() {\n  const letters = '0123456789ABCDEF';\n  let colour = '#';\n  for (let i = 0; i < 6; i++) {\n    colour += letters[Math.floor(Math.random() * 16)];\n  }\n  return colour;\n}\n// GET RANDOM COLOUR ends\n\n// UPDATE METADATA COLOUR DEFINITIONS\n// Called from defineAdditionalColours. Loops through series-colour names for one\n// panel. If any name is not found in the global list, it gets a random colour\n// and adds it to the global list under that name\nexport function updateMetadataColourDefinitions(pColourNames, metaColours) {\n  const nLen = pColourNames.length - 1;\n  for (let iii = nLen; iii >= 0; iii--) {\n    const thisName = pColourNames[iii];\n    if (typeof metaColours[thisName] === 'undefined') {\n      const newColour = getRandomColour();\n      metaColours[thisName] = newColour;\n    } else {\n      break;\n    }\n  }\n}\n// UPDATE METADATA COLOUR DEFINITIONS ends\n\n// DEFINE ADDITIONAL COLOURS\n// Called from Editor.reconcileEditorToChartConfig.\n// The problem is that I can't just define infinite numbers of colours for series.\n// So far, I allow for a number of 'named' colours (defined in the style guide) and\n// an additional 10 'extra' colours. All are defined in assets/colours.json\n// Beyond the extra 10, we have to start adding random colours...\n// I append these additional colours to chartConfig.metadata.colours,\n// as name/value properties\nexport function defineAdditionalColours(chartConfig) {\n  // List of colour definitions (name: value)\n  const metaColours = chartConfig.metadata.colours;\n  // Loop through panels\n  const panels = chartConfig.panelArray;\n  for (let pNo = 0; pNo < panels.length; pNo++) {\n    const panel = panels[pNo];\n    const ocType = panel.overallChartType;\n    // Ignore tables\n    if (ocType === 'table') {\n      break;\n    }\n    // Get the list of names of series-colours for this panel\n    // const pColourNames = panel.series[ocType].colours;\n    // Previous can fail, so there's a kludge of epic proportions\n    const pColourNames = getColoursForOverallChartType(panel.series, ocType);\n    // Update global list of colour definitions with random colours\n    updateMetadataColourDefinitions(pColourNames, metaColours);\n  }\n}\n// DEFINE ADDITIONAL COLOURS ends\n\n// GET COLOURS FOR OVERALL CHART-TYPE\n// FIXME: this is a knock-on of the unresolved 'side' and\n// overallChartType issues. I'm looking for a set of colour\n// definitions, matched to chart type. If I've got scrambled and\n// the expected set doesn't exist, just find one that does!\n// This is probably only happening with mixed/double-scales, so\n// it's very possibly a stacked/point/line or column issue only\nexport function getColoursForOverallChartType(pSeries, ocType) {\n  let lookup = pSeries[ocType];\n  if (typeof lookup === 'undefined') {\n    // Just grab anything that'll go through\n    const altOcTypes = [\n      'line',\n      'pointline',\n      'stepline',\n      'column',\n      'bar',\n      'pie',\n      'scatter',\n    ];\n    for (let iii = 0; iii < altOcTypes.length; iii++) {\n      lookup = pSeries[altOcTypes[iii]];\n      if (typeof lookup !== 'undefined') {\n        break;\n      }\n    }\n  }\n  return lookup.colours;\n}\n// GET COLOURS FOR OVERALL CHART-TYPE ends\n\n// GET ILLUSTRATOR COLOUR SPACE\n// Called from setIllustratorColourSpace, below\n// presetsConfig is an object with properties\n//    user: economist/eiu\n//    presetName\n//    subpresetName\n//    userPresets: the user-specific presets node\n// Returns either the found value, or undefined\nexport function getIllustratorColourSpace(presetsConfig) {\n  const upNode = presetsConfig.userPresets;\n  const pNode = upNode[presetsConfig.presetName];\n  const spNode = pNode[presetsConfig.subpresetName];\n  const colourSpace = spNode.colourSpace;\n  return colourSpace;\n}\n// GET ILLUSTRATOR COLOUR SPACE ends\n\n// SET ILLUSTRATOR COLOUR SPACE\n// Called from Editor.handleValuesFromSizeAndPreset\n// Looks for a new colourSpace property in a subPreset. If found,\n// updates EditorConfig.global\nexport function setIllustratorColourSpace(edConfigGlobal, presetsConfig) {\n  // Revert to default\n  edConfigGlobal.colourSpace = globalAssets.DefaultPreferences.colourSpace;\n  const newColourSpace = getIllustratorColourSpace(presetsConfig);\n  if (typeof newColourSpace !== 'undefined') {\n    edConfigGlobal.colourSpace = newColourSpace;\n  }\n}\n// SET ILLUSTRATOR COLOUR SPACE ends\n","/*\n    Functions to generate configuration objects for the ScalesBody\n    fold and its children\n      - buildMmiArray\n      - makeScalesComponentConfig\n      - makeFactorComponentConfig\n      - makeInvertComponentConfig\n      - getDoubleScaleHeaders\n      - getDoubleScaleSplitAndType\n      - makeDoubleScaleComponentConfig\n      All called from:\n      - makeScalesFoldConfig (called from Editor)\n*/\n\n// ------------\n// SCALE-VALUES\n\n// BUILD MMI ARRAY\n// Called from makeScalesComponentConfig. Assembles the\n// array of configuration objects: one for each Scale\n// component to display\nexport function buildMmiArray(edConfigPanel) {\n  const mmiArray = [];\n  const edConfigScales = edConfigPanel.scales;\n  // NOTE: edConfigPanel.scales is still glued to my original\n  // left/right division. Until that is refactored,\n  // I have to unpick inferentially\n  const chartType = edConfigPanel.chartType.left.type;\n  // Left/right scale enablement\n  const { enableScale } = edConfigPanel;\n  const { isDouble } = edConfigPanel.scales.double;\n  if (isDouble) {\n    // Double scales have 'left' and 'right'\n    const leftMmi = edConfigScales.left;\n    leftMmi.label = 'Left axis:';\n    leftMmi.side = 'left';\n    mmiArray.push(leftMmi);\n    const rightMmi = edConfigScales.right;\n    rightMmi.label = 'Right axis:';\n    rightMmi.side = 'right';\n    mmiArray.push(rightMmi);\n  } else if (chartType.includes('scatter')) {\n    // Scatters do 0 and 1, then...\n    const xMmi = edConfigScales.left;\n    xMmi.label = 'X axis:';\n    xMmi.side = 'left';\n    mmiArray.push(xMmi);\n    const yMmi = edConfigScales.right;\n    yMmi.label = 'Y axis:';\n    yMmi.side = 'right';\n    mmiArray.push(yMmi);\n    // scalesConfig.mmi.right = yMmi;\n    if (chartType.includes('sized')) {\n      // Add element 2: scatter z-axis\n      const zMmi = edConfigScales.z;\n      zMmi.label = 'Z axis:';\n      zMmi.side = 'z';\n      mmiArray.push(zMmi);\n    }\n  } else if (\n    chartType.includes('bar') ||\n    chartType.includes('thermohorizontal')\n  ) {\n    let side = 'left';\n    const label = 'X axis';\n    if (enableScale.right) {\n      side = 'right';\n    }\n    const singleMmi = edConfigScales[side];\n    singleMmi.label = label;\n    singleMmi.side = side;\n    mmiArray.push(singleMmi);\n  } else {\n    // NOTE: currently hard-wiring 'side'; but I need\n    // to fetch that in from DPs, according to chart type\n    let side = 'left';\n    let label = 'Left axis';\n    if (enableScale.right) {\n      side = 'right';\n      label = 'Right axis';\n    }\n    const singleMmi = edConfigScales[side];\n    singleMmi.label = label;\n    singleMmi.side = side;\n    mmiArray.push(singleMmi);\n  }\n  return mmiArray;\n}\n// BUILD MMI ARRAY ends\n\n// MAKE SCALES COMPONENT CONFIG\n// Sets enablement and values for scales fold\nexport function makeScalesComponentConfig(\n  edConfigPanel,\n  maximumIncrements,\n  canShare,\n) {\n  const scalesConfig = {\n    maximumIncrements,\n    canShareScale: canShare,\n  };\n  // Double?\n  const { isDouble } = edConfigPanel.scales.double;\n  const mmiArray = buildMmiArray(edConfigPanel);\n  // Array of objects with properties:\n  //    min\n  //    max\n  //    increment\n  //    actualMin\n  //    actualMax\n  //    tickDensity\n  //    factor\n  //    side\n  scalesConfig.mmiArray = mmiArray;\n  // If it's a double or mixed scale, tick counts must match\n  let misMatch = false;\n  // Scatters allow mismatch (and are mutually exclusive with doublescales)\n  const isScatter = edConfigPanel.chartType.left.type.includes('scatter');\n  if (isDouble) {\n    misMatch = mmiArray[0].tickDensity !== mmiArray[1].tickDensity;\n  }\n  scalesConfig.tickCountsMisMatch = misMatch;\n  scalesConfig.isScatter = isScatter;\n  return scalesConfig;\n}\n// MAKE SCALES COMPONENT CONFIG ends\n\n// ---------\n// FACTORING\n\n//  GET FACTOR CONFIG BY SIDE\n// Called from makeFactorComponentConfig. Returns\n// side-specific properties\nexport function getFactorConfigBySide(edConfigPanel, side) {\n  const scale = edConfigPanel.scales[side];\n  // I need to evaluate both min and max values (lose any preceding '-')\n  // Originally used actualMin/Max; now use user-set scale vals\n  // But I have to take any factor into account:\n  const maxVal = (Math.abs(scale.max) * scale.factor).toString();\n  const minVal = (Math.abs(scale.min) * scale.factor).toString();\n  // Lose decimal points and get length of longer\n  const maxLen = maxVal.replace('.', '').length;\n  const minLen = minVal.replace('.', '').length;\n  const len = Math.max(maxLen, minLen);\n  // Label:\n  let label = 'Right axis';\n  // Labelling is all very inferential. FIXME: on day...\n  if (\n    edConfigPanel.overallChartType === 'bar' ||\n    edConfigPanel.overallChartType === 'thermohorizontal'\n  ) {\n    if (side === 'left') {\n      label = 'X axis';\n    } else {\n      label = '';\n    }\n  } else if (edConfigPanel.overallChartType.includes('scatter')) {\n    if (side === 'left') {\n      label = 'X axis';\n    } else {\n      label = 'Y axis';\n    }\n  } else if (side === 'left') {\n    label = 'Left axis';\n  }\n  // Enablement and factor value:\n  const enable = edConfigPanel.enableScale[side];\n  const factor = scale.factor;\n  // No longer disabled for log\n  // if (scale.log) {\n  //   enable = false;\n  //   factor = 1;\n  // }\n  return {\n    factor,\n    maxLen: len,\n    enable,\n    label,\n  };\n}\n\n// MAKE FACTOR COMPONENT CONFIG\n// NOTE: can be refactored for left and right\nexport function makeFactorComponentConfig(edConfigPanel, factorsArray) {\n  // Get factor properties for each side\n  const leftValues = getFactorConfigBySide(edConfigPanel, 'left');\n  const rightValues = getFactorConfigBySide(edConfigPanel, 'right');\n  return {\n    values: {\n      left: leftValues,\n      right: rightValues,\n      // Mixed flag:\n      isMixed: edConfigPanel.scales.mixed.isMixed,\n    },\n    // And factor lookup\n    factorsArray,\n  };\n}\n// MAKE FACTOR COMPONENT CONFIG ends\n\n// ---------\n// INVERSION\n\n// MAKE INVERT COMPONENT CONFIG\nexport function makeInvertComponentConfig(edConfigPanel) {\n  // Only enabled for step/lines\n  // (Invert is set off by revertedConfigPanelDefaultVals)\n  const leftType = edConfigPanel.chartType.left.type;\n  const leftCanInvert =\n    edConfigPanel.enableScale.left && leftType.includes('line');\n  const rightType = edConfigPanel.chartType.right.type;\n  const rightCanInvert =\n    edConfigPanel.enableScale.right && rightType.includes('line');\n  return {\n    left: {\n      invert: edConfigPanel.scales.left.invert,\n      enabled: leftCanInvert,\n    },\n    right: {\n      invert: edConfigPanel.scales.right.invert,\n      enabled: rightCanInvert,\n    },\n    // And mixed flag:\n    isMixed: edConfigPanel.scales.mixed.isMixed,\n  };\n}\n// MAKE INVERT COMPONENT CONFIG ends\n\n// GET LOG LABEL\n// Called from scaleLogProperties to work out appropriate label for log checkbox\nexport function getLogLabel(side, type) {\n  // Default is line\n  let label = `${side[0].toUpperCase()}${side.slice(1).toLowerCase()} axis`;\n  if (type.includes('scatter')) {\n    if (side === 'left') {\n      label = 'X axis';\n    } else {\n      label = 'Y axis';\n    }\n  } else if (type === 'thermohorizontal') {\n    label = 'X axis';\n  } else if (type === 'thermovertical') {\n    label = 'Y axis';\n  }\n  return label;\n}\n// GET LOG LABEL ends\n\n// SCALE LOG PROPERTIES\n// Called from makeLogComponentConfig to determine whether\n// scale, left or right, is 'loggable'.\n// This isn't the flag that indicates whether we currently have a log scale.\n// It's whether:\n//    the chart *type* is compatible with log scale\n//    actual min value > 0\nexport function scaleLogProperties(edConfigPanel, side) {\n  const sideEnabled = edConfigPanel.enableScale[side];\n  const type = edConfigPanel.chartType[side].type;\n  const isStacked = edConfigPanel.chartType[side].isStacked;\n  const isLine = type.includes('line');\n  const isScatter = type.includes('scatter');\n  const isThermo = type.includes('thermo');\n  const { isDouble } = edConfigPanel.scales.double;\n  const { isMixed } = edConfigPanel.scales.mixed;\n  // const factored = edConfigPanel.scales[side].factor > 1;\n  const actualMin = edConfigPanel.scales[side].actualMin;\n  // The *ability* to be a log scale\n  let canLog = false;\n  // The current log status of the scale\n  let log = false;\n  // Label for the control\n  const label = getLogLabel(side, type);\n  if (sideEnabled) {\n    // Only loggable if all vals > 0...\n    if (actualMin > 0) {\n      // ...for certain types\n      if (isLine || isScatter || isThermo) {\n        // But can't be layer cake or double/mixed\n        // NOTE: actually, mixed should be allowed\n        // Couldn't be factored, until Sep'20\n        // if (!isStacked && !factored) {\n        if (!isStacked && !isDouble && !isMixed) {\n          canLog = true;\n          if (typeof log !== 'undefined') {\n            log = edConfigPanel.scales[side].log;\n          }\n        }\n      }\n    }\n  }\n  return {\n    enabled: canLog,\n    log,\n    label,\n  };\n}\n// SCALE LOG PROPERTIES ends\n\n// MAKE LOG COMPONENT CONFIG\n// Called from makeScalesFoldConfig to create log component config\nexport function makeLogComponentConfig(edConfigPanel) {\n  const left = scaleLogProperties(edConfigPanel, 'left');\n  const right = scaleLogProperties(edConfigPanel, 'right');\n  return {\n    left,\n    right,\n  };\n}\n// MAKE LOG COMPONENT CONFIG ends\n\n// ---------------------\n// DOUBLE SCALE HANDLERS\n\n// GET DOUBLESCALE HEADERS\n// Called from makeDoubleScaleComponentConfig\nexport function getDoubleScaleHeaders(dArray) {\n  let headers = [];\n  if (dArray.length > 0) {\n    headers = JSON.parse(JSON.stringify(dArray[0]));\n    // Remove cat-header and last series\n    headers.shift();\n    headers.pop();\n  }\n  return headers;\n}\n// GET DOUBLESCALE HEADERS ends\n\n// GET DOUBLESCALE SPLIT AND TYPE\n// Called from makeDoubleScaleComponentConfig\nexport function getDoubleScaleSplitAndType(scales) {\n  let splitAt = 0;\n  let scaleStr = 'single';\n  if (scales.double.isDouble) {\n    splitAt = scales.double.splitDataAtCol;\n    scaleStr = 'double';\n  } else if (scales.mixed.isMixed) {\n    splitAt = scales.mixed.splitDataAtCol;\n    scaleStr = 'mixed';\n  }\n  return {\n    splitAt,\n    scaleStr,\n  };\n}\n// GET DOUBLESCALE SPLIT AND TYPE ends\n\n// MAKE DOUBLE SCALE COMPONENT CONFIG\n// Called from makeScalesFoldConfig\n// Args are panel-specific editorConfig object; array of chart types\n// compatible with double scales\nexport function makeDoubleScaleComponentConfig(\n  edConfigPanel,\n  doubleableStyles,\n) {\n  // DOUBLE/MIXED\n  const doubleScale = {\n    // Double/mixed options disabled by default\n    disableDouble: true,\n  };\n  // En/disablement\n  // If only one series (cats are 1 col)\n  const threshold = 2;\n  // Can't double a logged scale\n  const notLogged =\n    !edConfigPanel.scales.left.log && !edConfigPanel.scales.right.log;\n  // I want to check number of series, but at start up, there aren't *any*!\n  // So...\n  let dataColCount = 0;\n  const dArray = edConfigPanel.chartData.dataArray;\n  if (dArray.length > 0) {\n    dataColCount = dArray[0].length;\n  }\n  const noBlobs = edConfigPanel.blobs.column === 0;\n  // If no blobs or log-scale, and more than one series:\n  if (noBlobs && notLogged && dataColCount > threshold) {\n    // Check left/right for line/col...\n    const leftType = edConfigPanel.chartType.left;\n    const rightType = edConfigPanel.chartType.right;\n    // ...but (Jun'21) disable for stacked lines\n    const stackedLineLeft = leftType.type === 'line' && leftType.stacked;\n    const stackedLineRight = rightType.type === 'line' && rightType.stacked;\n    if (edConfigPanel.enableScale.left) {\n      if (\n        !stackedLineLeft &&\n        doubleableStyles.includes(edConfigPanel.chartType.left.type)\n      ) {\n        doubleScale.disableDouble = false;\n      }\n    } else if (\n      !stackedLineRight &&\n      doubleableStyles.includes(edConfigPanel.chartType.right.type)\n    ) {\n      doubleScale.disableDouble = false;\n    }\n  }\n  // Headers for dropdown\n  doubleScale.headers = getDoubleScaleHeaders(dArray);\n  // Split at col and scale-type string...\n  const splitAndType = getDoubleScaleSplitAndType(edConfigPanel.scales);\n  doubleScale.splitDataAtCol = splitAndType.splitAt;\n  doubleScale.scale = splitAndType.scaleStr;\n  // Other properties\n  doubleScale.chartType = Object.assign({}, edConfigPanel.chartType);\n  // Is either scale inverted?\n  doubleScale.invert = {\n    left: edConfigPanel.scales.left.invert,\n    right: edConfigPanel.scales.right.invert,\n  };\n  return doubleScale;\n}\n// MAKE DOUBLE SCALE COMPONENT CONFIG ends\n\n// CAN SHARE SCALE\n// Called from makesScalesFoldConfig to establish whether the 'Share scale'\n// button in enabled. Scale of active panel can be shared if there are multi-panels,\n// and no panel is log, scatter, pie or double scale\n// NOTE: may eventually mod to allow, if ALL panels are log or double\nexport function canShareScale(edConfigScales) {\n  let canShare = true;\n  // Must be at least 2 panels\n  const pCount = edConfigScales.panels.length;\n  if (pCount < 2) {\n    canShare = false;\n  } else {\n    for (let pNo = 0; pNo < pCount; pNo++) {\n      const myPanel = edConfigScales.panels[pNo];\n      const myScales = myPanel.scales;\n      // No double, mixed or log scales, pies or scatters\n      if (\n        myScales.double.isDouble ||\n        myScales.mixed.isMixed ||\n        myScales.left.log ||\n        myScales.right.log ||\n        myPanel.overallChartType === 'pie' ||\n        myScales.scatter.isScatter\n      ) {\n        canShare = false;\n        break;\n      }\n    }\n  }\n  return canShare;\n}\n// CAN SHARE SCALE ends\n\n// ------------------------\n// ENTRY POINT, FROM EDITOR\n\n// MAKE SCALES FOLD CONFIG\n// Called from Editor.makeFoldsJsx. Arguments are the\n// complete editorConfig object; the array of factor definitions\n// from DPs; and an array of styles compatible with\n// a double scale\nexport function makeScalesFoldConfig(\n  edConfig,\n  factors,\n  doubleableStyles,\n  disabled,\n  maximumIncrements,\n) {\n  const cIndex = edConfig.global.chartIndex;\n  const edConfigPanel = edConfig.panels[cIndex];\n  // For panel sharing:\n  const canShare = canShareScale(edConfig);\n  return {\n    scales: makeScalesComponentConfig(\n      edConfigPanel,\n      maximumIncrements,\n      canShare,\n    ),\n    // Still called, although factors tempor'y disabled, Oct'20:\n    factor: makeFactorComponentConfig(edConfigPanel, factors),\n    invert: makeInvertComponentConfig(edConfigPanel),\n    log: makeLogComponentConfig(edConfigPanel),\n    doubleScale: makeDoubleScaleComponentConfig(\n      edConfigPanel,\n      doubleableStyles,\n    ),\n    indexed: Object.assign({}, edConfigPanel.indexed),\n    disabled,\n    maximumIncrements,\n  };\n}\n// MAKE SCALES FOLD CONFIG ends\n","// Sheet property-names need to be separable (I'm using\n// underscores). So break camelcase...\n// /* eslint-disable camelcase, no-console */\n/* eslint-disable camelcase */\n\n// Monteux:\nimport Monteux from './monteux';\n\n// GET TIME STAMP\n// Called from updateGoogleSheet, returns time-stamp\n// as 'yyyy,mm,dd,hh,mm,ss'\nexport function getTimeStamp() {\n  const timeNow = new Date();\n  let tStr = timeNow.getFullYear();\n  // Month indexed from zero\n  tStr = `${tStr},${timeNow.getMonth()}`;\n  tStr = `${tStr},${timeNow.getDate()}`;\n  tStr = `${tStr},${timeNow.getHours()}`;\n  tStr = `${tStr},${timeNow.getMinutes()}`;\n  tStr = `${tStr},${timeNow.getSeconds()}`;\n  return tStr;\n}\n// GET TIME STAMP ends\n\n// GET GLOBAL PROPERTIES\n// Global properties as an object, inferentially assembled\nexport function getGlobalValues(edConfigGlobal) {\n  const gVals = {\n    sheetId: edConfigGlobal.sheetId,\n    name: edConfigGlobal.fileName.name,\n    chartNumber: edConfigGlobal.fileName.number,\n    preset: edConfigGlobal.presets.preset,\n    subPreset: edConfigGlobal.presets.subPreset,\n    height: +edConfigGlobal.size.height,\n    width: +edConfigGlobal.size.width,\n    title: edConfigGlobal.strings.title,\n    subtitle: edConfigGlobal.strings.subtitle,\n    subSubtitle: edConfigGlobal.strings.subsubtitle,\n    footnote: edConfigGlobal.strings.footnote,\n    source: edConfigGlobal.strings.source,\n    numberBox: edConfigGlobal.strings.numberBox,\n    // Timestamp\n    lastUpdate: getTimeStamp(),\n    // Panels: total, row-count and 'active' panel index\n    panelTotal: edConfigGlobal.panelVals.total,\n    panelRows: edConfigGlobal.panelVals.rows,\n    chartIndex: edConfigGlobal.chartIndex,\n  };\n  return gVals;\n}\n// GET GLOBAL PROPERTIES ends\n\n// MAKE GLOBAL OBJECT\n// Called from updateGoogleSheet, returns the payload for the\n// global Google sheet\nexport function makeGlobalObject(edConfig) {\n  return {\n    // Google global tab's id\n    id: edConfig.monteux.globalTabId,\n    values: getGlobalValues(edConfig.global),\n  };\n}\n// MAKE GLOBAL OBJECT ends\n\n// REMOVE ROGUE SCALE PROPERTIES\n// Called from appendPanelMetadataProperties. This was a kludge\n// to get round the fact that editorConfig erratically contained a\n// couple of rogue properties that could cause irregularities\n// in the Monteux metaData sheet.\n// FIXME: now that metadata are cleared before overwriting, this is deletable\nexport function removeRogueProperties(key) {\n  // Scale props\n  // if (typeof key.label !== 'undefined') {\n  //   delete key.label;\n  // }\n  // if (typeof key.side !== 'undefined') {\n  //   delete key.side;\n  // }\n  // Indexed props\n  if (typeof key.fillName !== 'undefined') {\n    delete key.fillName;\n  }\n  if (typeof key.fillValue !== 'undefined') {\n    delete key.fillValue;\n  }\n  if (typeof key.radius !== 'undefined') {\n    delete key.radius;\n  }\n  if (typeof key.value !== 'undefined') {\n    delete key.value;\n  }\n}\n// REMOVE ROGUE SCALE PROPERTIES ends\n\n// APPEND PANEL METADATA PROPERTIES\n// Called from updateGoogleSheet to append a specific sub-set of\n// metadata (e.g. blob definitions) to the metadata object for\n// one panel\n// Args are the source object in editorConfig; the key for the node in\n// that source object; and the metadata object to which the\n// properties are appended...\nexport function appendPanelMetadataProperties(\n  sourceObj,\n  targetKey,\n  metadataObj,\n) {\n  // Kludge for the problem with rogue properties\n  if (targetKey.includes('scales')) {\n    removeRogueProperties(sourceObj);\n  }\n  if (targetKey.includes('indexed')) {\n    removeRogueProperties(sourceObj);\n  }\n  const oKeys = Object.keys(sourceObj);\n  for (let kNo = 0; kNo < oKeys.length; kNo++) {\n    // If tickValues array, join:\n    let metaVal = sourceObj[oKeys[kNo]];\n    if (Array.isArray(metaVal)) {\n      metaVal = metaVal.join(';');\n    }\n    metadataObj[`${targetKey}${oKeys[kNo]}`] = metaVal;\n  }\n}\n// APPEND PANEL METADATA PROPERTIES ends\n\n// GET METADATA FOR ONE PANEL\n// Passed the source object for one panel, returns an object defining\n// all properties shared with Sheet\nexport function getMetadataForOnePanel(thisPanelSource) {\n  const metadataObj = {};\n  // I'm collecting sub-properties by type (e.g. blobs.column, .header and\n  // .isRect). I pass a values object, where all properties are collected,\n  // into a sub-fcn that appends those properties...\n  const mVals = {};\n  // Blobs\n  appendPanelMetadataProperties(thisPanelSource.blobs, 'blobs_', mVals);\n  // Chart type, left and right\n  appendPanelMetadataProperties(\n    thisPanelSource.chartType.left,\n    'chartType_left_',\n    mVals,\n  );\n  appendPanelMetadataProperties(\n    thisPanelSource.chartType.right,\n    'chartType_right_',\n    mVals,\n  );\n  // Enable scale\n  appendPanelMetadataProperties(\n    thisPanelSource.enableScale,\n    'enableScale_',\n    mVals,\n  );\n  // Indexed\n  appendPanelMetadataProperties(thisPanelSource.indexed, 'indexed_', mVals);\n  // Legend\n  appendPanelMetadataProperties(thisPanelSource.legend, 'legend_', mVals);\n  // Scales: double\n  appendPanelMetadataProperties(\n    thisPanelSource.scales.double,\n    'scales_double_',\n    mVals,\n  );\n  // Scales: left\n  appendPanelMetadataProperties(\n    thisPanelSource.scales.left,\n    'scales_left_',\n    mVals,\n  );\n  // Scales: right\n  appendPanelMetadataProperties(\n    thisPanelSource.scales.right,\n    'scales_right_',\n    mVals,\n  );\n  // Scales: z (may not exist)\n  if (typeof thisPanelSource.scales.z !== 'undefined') {\n    // eslint-disable-next-line prettier/prettier\n    appendPanelMetadataProperties(thisPanelSource.scales.z, 'scales_z_', mVals);\n  }\n  // Scales: mixed\n  appendPanelMetadataProperties(\n    thisPanelSource.scales.mixed,\n    'scales_mixed_',\n    mVals,\n  );\n  // Axis headers\n  // Sep'20, axis headers recoupled to series headers\n  // appendPanelMetadataProperties(\n  //   thisPanelSource.axisHeaders,\n  //   'axisHeaders_',\n  //   mVals,\n  // );\n  // Feb'21, x-axis header only restored\n  const xaxisHeader = thisPanelSource.axisHeaders.xaxis.trim();\n  if (xaxisHeader.length > 0) {\n    mVals.axisHeaders_xaxis = xaxisHeader;\n  }\n  // Now append individual properties\n  // Panel header\n  mVals.panelHeader = thisPanelSource.panelHeader;\n  mVals.overallChartType = thisPanelSource.overallChartType;\n  // Inferentially, tickValues arrays as strings...\n\n  // OK: so this is all fucked. What am I trying to do?\n  // Yeah, this is stupid, because I'm setting the exported tickValues property\n  // to an empty string, then only changing if it's NOT an empty string!\n\n  mVals.scales_left_tickValues = '';\n  // let tvObj = mVals.scales_left_tickValues;\n  let tvObj = thisPanelSource.scales.left.tickValues;\n  if (typeof tvObj !== 'undefined' && tvObj.length > 0) {\n    mVals.scales_left_tickValues = tvObj.join(';');\n  }\n  mVals.scales_right_tickValues = '';\n  // tvObj = mVals.scales_right_tickValues;\n  tvObj = thisPanelSource.scales.right.tickValues;\n  if (typeof tvObj !== 'undefined' && tvObj.length > 0) {\n    mVals.scales_right_tickValues = tvObj.join(';');\n  }\n  metadataObj.values = mVals;\n  return metadataObj;\n}\n// GET METADATA FOR ONE PANEL ends\n\n// GET RAW DATA FOR ONE PANEL\nexport function getRawdataForOnePanel(thisPanelSource) {\n  return {\n    values: thisPanelSource.chartData.dataArray,\n  };\n}\n// GET RAW DATA FOR ONE PANEL ends\n\n// UPDATE GOOGLE SHEET\n// Called from Editor.componentDidUpdate to gather properties\n// from the editorConfig and update the matching Sheet's metadata\n// Incomplete: so far just creates the exportable object\nexport function updateGoogleSheet(edConfig) {\n  // Object to export. This has a global object, and\n  // an array, each of whose elements will correspond to a panel\n  const payload = {\n    id: edConfig.monteux.sheetId,\n    global: makeGlobalObject(edConfig),\n    panelArray: [],\n  };\n  // Panel-specific properties\n  // NOTE: I thought I didn't need to send raw data back, to Sheet,\n  // since I can't change it. But that may not be true...\n  // NOTE: ...because panel-shuffling will, I fear, be done by Sibyl...\n  const panelSourceArray = edConfig.panels;\n  // For each panel...\n  for (let pNo = 0; pNo < panelSourceArray.length; pNo++) {\n    // Function collects all the metadata props for one panel\n    const metaData = getMetadataForOnePanel(panelSourceArray[pNo]);\n    const rawData = getRawdataForOnePanel(panelSourceArray[pNo]);\n    // In each case, id is taken from edConfig.monteux:\n    metaData.id = edConfig.monteux.panels[pNo].metadataTabId;\n    rawData.id = edConfig.monteux.panels[pNo].dataTabId;\n    // Append to panelArray\n    payload.panelArray.push({\n      metaData,\n      // rawData,\n    });\n  }\n\n  // This is actually rather overweight, but it seems to make sense\n  // to send the same, complete data-structure back...\n  // If there's a sheetId, fire off the export event to Monteux\n  // If not (specifically if data were pasted into Advance text field)... don't.\n  const sheetId = payload.global.values.sheetId;\n  const sendToMonteux = typeof sheetId !== 'undefined' && sheetId.length > 0;\n  if (sendToMonteux) {\n    Monteux.postMessage(payload);\n  }\n  // console.dir(payload);\n}\n// UPDATE GOOGLE SHEET ends\n","import React from 'react';\n\nconst ExpandMoreIcon = ({ flip }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"10\"\n    height=\"6\"\n    viewBox=\"0 0 10 6\"\n    style={{ transform: flip ? 'rotate(180deg)' : '' }}\n  >\n    <polygon\n      fill=\"#FFF\"\n      fillRule=\"evenodd\"\n      points=\"8.825 0 5 3.709 1.175 0 0 1.142 5 6 10 1.142\"\n    />\n  </svg>\n);\n\nexport default ExpandMoreIcon;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ExpandMoreIcon from '../icons/expand-more';\n\nclass Preset extends Component {\n  static get defaultProps() {\n    return {};\n  }\n\n  // Click events on parent and child elements in dropdown\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      isMenuOpen: false,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClickMenu = this.handleClickMenu.bind(this);\n    this.handleClickPreset = this.handleClickPreset.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClick, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClick, false);\n  }\n\n  handleClick(e) {\n    // capture clicks outside menu (and button!)\n    // https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-react-component-5604830beb7f\n    if (this.node.contains(e.target) || this.button.contains(e.target)) return;\n\n    this.setState({\n      isMenuOpen: false,\n    });\n  }\n\n  handleClickMenu() {\n    const { isMenuOpen } = this.state;\n\n    this.setState({\n      isMenuOpen: !isMenuOpen,\n    });\n  }\n\n  handleClickPreset({ preset, subPreset }) {\n    const { onValuesToSizeAndPreset } = this.props;\n    onValuesToSizeAndPreset({ preset, subPreset });\n    this.setState({\n      isMenuOpen: false,\n    });\n  }\n\n  render() {\n    const { presetDefinitions } = this.props;\n    const { isMenuOpen } = this.state;\n\n    // we want to display the same name as in the menu\n    // FIXME: maybe there's a better way to do this? changing the source data?\n    const displaySetting = presetDefinitions.presetArray\n      .find(d => d.parent === presetDefinitions.preset)\n      .children.find(d => d.id === presetDefinitions.subPreset).display;\n\n    return (\n      <React.Fragment>\n        <button\n          type=\"button\"\n          className={`silver-button preset-button ${\n            isMenuOpen ? 'active' : ''\n          }`}\n          onClick={this.handleClickMenu}\n          ref={button => {\n            this.button = button;\n          }}\n        >\n          <div className=\"main-preset\">{presetDefinitions.preset}</div>{' '}\n          <div className=\"sub-preset\">{displaySetting}</div>{' '}\n          <ExpandMoreIcon flip={isMenuOpen} />\n        </button>\n\n        <div\n          className=\"preset-menu\"\n          style={{ display: isMenuOpen ? 'flex' : 'none' }}\n          ref={node => {\n            this.node = node;\n          }}\n        >\n          {presetDefinitions.presetArray.map(d => (\n            <div className=\"preset-menu-type\" key={d.display}>\n              <div className=\"preset-menu-display\">{d.display}</div>\n\n              <div className=\"preset-menu-list\">\n                {d.children.map(c => (\n                  <button\n                    key={c.id}\n                    type=\"button\"\n                    className={`silver-button preset-menu-item ${\n                      presetDefinitions.preset === d.parent &&\n                      presetDefinitions.subPreset === c.id\n                        ? 'active'\n                        : ''\n                    }`}\n                    onClick={() =>\n                      this.handleClickPreset({\n                        preset: d.parent,\n                        subPreset: c.id,\n                      })\n                    }\n                  >\n                    {c.display}\n                  </button>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nPreset.propTypes = {\n  // Incoming object defining presets\n  presetDefinitions: PropTypes.object.isRequired,\n  // Callback returns parent and child props of element selected\n  onValuesToSizeAndPreset: PropTypes.func.isRequired,\n};\n\nexport default Preset;\n","/*  Refactored Dec'20\n    This has to be a controlled component so that the inputs\n    respond immediately (no Submit button).\n    Monteux's response to quickly-succeeding events seems erratic.\n    So to limit this component to firing off just one event\n    if the user types in several numbers in rapid sequence:\n    - input calls debounceSizeChange, which:\n        - resets state, so that input redisplays, but...\n        - ...leaves a flag, state.updateEditor on false\n        - debounces a function, handleSizeChange, which\n          fires at the end of the sequence and flips\n          state.updateEditor, so that the latest height\n          and width values can be picked up and kicked\n          upstairs...\n    On un/controlled React components see:\n    https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/\n*/\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Size extends Component {\n  static get defaultProps() {\n    return {\n      minHeight: 50,\n      minWidth: 50,\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: 0,\n      width: 0,\n      updateEditor: false,\n    };\n    // Events\n    this.handleSizeChange = this.handleSizeChange.bind(this);\n    this.debounceSizeChange = this.debounceSizeChange.bind(this);\n    this.debounce = this.debounce.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(newProps) {\n    const config = newProps.config;\n    this.setState({\n      height: config.height,\n      width: config.width,\n      updateEditor: false,\n    });\n  }\n\n  // Any user gesture resets state. After\n  // debouncing, the updateEditor flag gets set true,\n  // and we can update Editor...\n  componentDidUpdate() {\n    if (this.state.updateEditor) {\n      const vals = {\n        height: this.state.height,\n        width: this.state.width,\n      };\n      this.props.onValuesToSizeAndPreset(vals);\n    }\n  }\n\n  // DEBOUNCE\n  // See: https://redd.one/blog/debounce-vs-throttle\n  debounce(func, duration) {\n    let timeout;\n    return function(...args) {\n      const effect = () => {\n        timeout = null;\n        return func.apply(this, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(effect, duration);\n    };\n  }\n  // DEBOUNCE ends\n\n  // UPDATE STATE\n  // Called from debounceSizeChange on every keystroke.\n  // Resets state with height and width for controlled\n  // inputs. And sets updateEditor to false, so that\n  // no callback is sent upstairs\n  updateState(tar, newVal) {\n    const maxChartWidth = this.props.config.maximumChartWidth;\n    this.setState(prevState => {\n      let height = prevState.height;\n      let width = prevState.width;\n      if (tar === 'height') {\n        height = newVal;\n      } else {\n        width = Math.min(newVal, maxChartWidth);\n      }\n      return {\n        height,\n        width,\n        updateEditor: false,\n      };\n    });\n  }\n  // UPDATE STATE ends\n\n  // HANDLE SIZE CHANGE\n  // Called after debouncing. All it does is reset the\n  // updateEditor flag, so that current state values\n  // get sent upstairs\n  handleSizeChange() {\n    this.setState(prevState => {\n      return {\n        height: prevState.height,\n        width: prevState.width,\n        updateEditor: true,\n      };\n    });\n  }\n  // HANDLE SIZE CHANGE ends\n\n  // DEBOUNCE SIZE CHANGE\n  // Handler for input onChange event\n  // From https://medium.com/@anuhosad/debouncing-events-with-react-b8c405c33273\n  debounceSizeChange = evt => {\n    // Always update state for controlled inputs\n    const targ = evt.target;\n    const targetId = targ.id.split('-')[1].toLowerCase();\n    const newVal = Number(targ.value);\n    this.updateState(targetId, newVal);\n    // Tell React not to nullify the event object\n    evt.persist();\n    if (!this.debouncedFn) {\n      this.debouncedFn = this.debounce(() => {\n        this.handleSizeChange(evt);\n      }, 500);\n    }\n    this.debouncedFn();\n  };\n\n  // HANDLE KEY DOWN\n  handleKeyDown() {}\n  // HANDLE KEY DOWN ends\n\n  // SET CLASS\n  // Called from makeSizeJsx to assemble class name\n  // for width/height input\n  setClass(type) {\n    const config = this.props.config;\n    const heightError = config.heightError;\n    const widthError = config.widthError;\n    let className = '';\n    if (type === 'width') {\n      className = 'number-field width-input';\n      if (widthError) {\n        className = `${className} size-error`;\n      }\n    } else {\n      className = 'number-field height-input';\n      if (heightError) {\n        className = `${className} size-error`;\n      }\n    }\n    return className;\n  }\n  // SET CLASS ends\n\n  // MAKE SIZE JSX\n  // Called from sizeJsx to assemble chart size div\n  // containing width and height inputs\n  makeSizeJsx() {\n    const { height, width } = this.state;\n    // const height = this.state.height;\n    // const width = this.state.width;\n    return (\n      <div className=\"size-wrapper\">\n        <span className=\"silver-label-head size-label\">Size</span>\n        <input\n          type=\"number\"\n          id=\"size-width-input\"\n          className={this.setClass('width')}\n          min={this.props.minWidth}\n          // Remove leading 0s\n          value={`${width}`.replace(/^0+/, '')}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.debounceSizeChange}\n          required\n        />\n        <span className=\"silver-label x-label\" htmlFor=\"size-height-input\">\n          ×\n        </span>\n        <input\n          type=\"number\"\n          id=\"size-height-input\"\n          className={this.setClass('height')}\n          step=\"5\"\n          min={this.props.minHeight}\n          value={`${height}`.replace(/^0+/, '')}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.debounceSizeChange}\n          required\n        />\n      </div>\n    );\n  }\n  // MAKE SIZE JSX ends\n\n  // SIZE AND PRESET JSX\n  // Calls sub-function to construct JSX for size controls\n  sizeJsx() {\n    const sizeJsx = this.makeSizeJsx();\n    return <div className=\"size-wrapper\">{sizeJsx}</div>;\n  }\n  // SIZE AND PRESET JSX ends\n\n  // RENDER\n  render() {\n    return this.sizeJsx();\n  }\n}\n\n// PROP TYPES and DEFAULTS\nSize.propTypes = {\n  config: PropTypes.object.isRequired,\n  minHeight: PropTypes.number,\n  minWidth: PropTypes.number,\n  onValuesToSizeAndPreset: PropTypes.func.isRequired,\n};\n\nexport default Size;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// Sub-components\nimport Preset from './preset';\nimport Size from './size';\n\nclass SizeAndPreset extends Component {\n  static get defaultProps() {\n    return {};\n  }\n\n  constructor(props) {\n    super(props);\n    this.handleValuesFromSize = this.handleValuesFromSize.bind(this);\n    this.handleValuesFromPreset = this.handleValuesFromPreset.bind(this);\n  }\n\n  // HANDLE VALUES FROM PRESET\n  handleValuesFromPreset(preset) {\n    const vals = {\n      preset,\n      size: this.props.config.size,\n    };\n    this.props.onValuesToEditor(vals);\n  }\n  // HANDLE VALUES FROM PRESET ends\n\n  // HANDLE VALUES FROM SIZE\n  handleValuesFromSize(size) {\n    const vals = {\n      preset: this.props.config.preset,\n      size,\n    };\n    this.props.onValuesToEditor(vals);\n  }\n  // HANDLE VALUES FROM PRESET ends\n\n  // MAKE SIZE JSX\n  // Constructs chart size group\n  // Sep'20: 'Recommended Height' removed\n  makeSizeJsx() {\n    const size = this.props.config.size;\n    return (\n      <Size config={size} onValuesToSizeAndPreset={this.handleValuesFromSize} />\n    );\n  }\n  // MAKE SIZE JSX ends\n\n  // MAKE PRESET JSX\n  // Builds preset sub-component\n  makePresetJsx() {\n    const preset = this.props.config.preset;\n    return (\n      <Preset\n        presetDefinitions={preset}\n        onValuesToSizeAndPreset={this.handleValuesFromPreset}\n      />\n    );\n  }\n  // MAKE PRESET JSX ends\n\n  // SIZE AND PRESET JSX\n  // Calls sub-functions to construct JSX for size controls\n  // and preset sub-components\n  sizeAndPresetJsx() {\n    // Size inputs\n    const sizeJsx = this.makeSizeJsx();\n    const presetJsx = this.makePresetJsx();\n    return (\n      <div className=\"size-and-preset-wrapper\">\n        {presetJsx}\n        {sizeJsx}        \n      </div>\n    );\n  }\n  // SIZE AND PRESET JSX ends\n\n  // RENDER\n  render() {\n    return this.sizeAndPresetJsx();\n  }\n}\n\n// PROP TYPES and DEFAULTS\nSizeAndPreset.propTypes = {\n  config: PropTypes.object.isRequired,\n  onValuesToEditor: PropTypes.func.isRequired,\n};\n\nexport default SizeAndPreset;\n","/* eslint-disable no-console, id-blacklist */\n// disabled id-blacklist so that I can work with\n// panels.number property. But why have I got\n// away with it so long?\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Panels extends Component {\n  // CONSTRUCTOR\n  // Sets up the various event listeners...\n  // ...and the global value-container\n  constructor(props) {\n    super(props);\n    this.state = {\n      panels: props.config.values,\n      updateEditor: false,\n    };\n    // Events\n    this.handlePanelChange = this.handlePanelChange.bind(this);\n  }\n  // CONSTRUCTOR ends\n\n  // COMPONENT WILL RECEIVE PROPS\n  UNSAFE_componentWillReceiveProps(newProps) {\n    this.setState({\n      panels: newProps.config.values,\n      updateEditor: newProps.config.values.updateEditor,\n    });\n  }\n  // COMPONENT WILL RECEIVE PROPS ends\n\n  // COMPONENT DID UPDATE\n  // Any user gesture precipitates a re-render, after which\n  // we update Editor...\n  componentDidUpdate() {\n    if (this.state.updateEditor) {\n      const vals = {\n        panels: this.state.panels,\n      };\n      this.props.onValuesToEditor(vals);\n    }\n  }\n  // COMPONENT DID UPDATE ends\n\n  // VALIDATE PANEL VALUES\n  // Checks that any value entered in one of the panel inputs is\n  // consistent with existing values. Args are: id of the input, its new value,\n  // and the config object\n  // NOTE: this needs more work. Among other things, if input is 'total' I\n  // ought always be able to reset it, but 'active' and 'row' should adapt\n  // if inconsistent...\n  validatePanelValues(targetId, val, inPanels) {\n    // Clone current CO panel properties & substitute potential new value\n    // then run checks...\n    const panels = Object.assign({}, inPanels);\n    panels.valid = false;\n    if (targetId === 'rows') {\n      panels.rows = val;\n    } else {\n      // Clicked icon\n      panels.active = val;\n      if (val > panels.total) {\n        panels.total = val;\n      }\n    }\n    // NOTE: handling of total is all over the place\n    // Do we need a +/– control, or is it driven by sheet tabs?\n    // Panel-active can't exceed total\n    if (panels.active > panels.total) {\n      return panels;\n    }\n    // Row count must be exact divisor of total\n    if (panels.total % panels.rows !== 0) {\n      return panels;\n    }\n    // Can't have more rows than total\n    if (panels.rows > panels.total) {\n      return panels;\n    }\n    // NOTE: anything else to check...?\n    // Still here? New val is OK\n    panels.valid = true;\n    return panels;\n  }\n  // VALIDATE PANEL VALUES ends\n\n  // HANDLE PANEL CHANGE\n  // NOTE: reset state to precipitate re-render; after which\n  // componentDidUpdate does callback to Editor\n  handlePanelChange(evt) {\n    const panels = JSON.parse(JSON.stringify(this.state.panels));\n    // Extract id and val from event\n    const targ = evt.target;\n    const targetId = targ.id.split('-')[1];\n    const newVal = parseInt(targ.value, 10);\n    const oldVal = panels[targetId];\n    // Validate\n    const newVals = this.validatePanelValues(targetId, newVal, panels);\n    if (newVals.valid) {\n      // New val is OK: update CO...\n      panels.active = newVals.active;\n      panels.total = newVals.total;\n      panels.rows = newVals.rows;\n      this.setState({\n        panels,\n        updateEditor: true,\n      });\n    } else {\n      // Reset target to previous value\n      // NOTE: ideally there'd be some sort of alert...\n      targ.value = oldVal;\n      // And state doesn't change\n    }\n  }\n  // HANDLE PANEL CHANGE ends\n\n  // MAKE PANEL CONTROLS\n  // Called by render to construct panel controls\n  makePanelControls() {\n    const panels = this.state.panels;\n    const pNo = panels.active;\n    const pRows = panels.rows;\n    const pTotal = panels.total;\n\n    // Remember: counting from zero, but panel numbers display from 1\n    const panelArray = [];\n    for (let iii = 0; iii < pTotal; iii++) {\n      panelArray.push(\n        <option key={iii} value={iii}>\n          {iii + 1}\n        </option>,\n      );\n    }\n\n    // I also need the array for the row dropdown\n    const rowArray = [];\n    let rowVal = 0;\n    let index = 0;\n    for (let iii = 1; iii <= pTotal; iii++) {\n      if (Number.isInteger(pTotal / iii)) {\n        if (iii === pRows) {\n          rowVal = iii;\n        }\n        rowArray.push(\n          <option key={index} value={iii}>\n            {iii}\n          </option>,\n        );\n        index++;\n      }\n    }\n    //\n    return (\n      <div className=\"panel-controls-wrapper\">\n        <span className=\"silver-label panel-select-label\">Panels</span>\n        <select\n          className=\"dropdown panel-panels-select\"\n          id=\"panel-panels\"\n          value={pNo}\n          onChange={this.handlePanelChange}\n          required\n        >\n          {panelArray}\n        </select>\n        <span className=\"silver-label panel-rows-label\">Rows</span>\n        <div className=\"dropdown-border panel-rows-border\" />\n        <select\n          className=\"dropdown panel-rows-select\"\n          id=\"panel-rows\"\n          value={rowVal}\n          onChange={this.handlePanelChange}\n          required\n        >\n          {rowArray}\n        </select>\n      </div>\n    );\n  }\n  // MAKE PANEL CONTROLS ends\n\n  // RENDER\n  render() {\n    return this.makePanelControls();\n  }\n}\n\nPanels.propTypes = {\n  config: PropTypes.object.isRequired,\n  onValuesToEditor: PropTypes.func.isRequired,\n};\n\nexport default Panels;\n","import React from 'react';\n\nconst Alerts = props => {\n  const config = props.config;\n  let alertString = config.alertString;\n  if (typeof alertString === 'undefined') {\n    alertString = 'Undefined error in data';\n  }\n  let classString = 'silver-label alert-div';\n  if (config.showAlert) {\n    classString = `${classString} silver-label-alert`;\n  }\n  return <div className={classString}>{alertString}</div>;\n};\n\nexport default Alerts;\n","import React from 'react';\n\nconst EconomistIcon = ({ size }) => (\n  <svg\n    width={size || 16}\n    height={size || 16}\n    viewBox=\"0 0 342 480\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M.6 451.4c40.1-.7 49.5-11.1 49.5-50.6V80.6c0-39.5-9.4-50.6-49.5-51.3V.2h325.5l7.4 110.9h-40.1c-14.7-52.7-23.4-68.6-66.8-68.6h-90.2V213H187c41.4 0 53.5-9.7 56.1-49.2h36.1v139.3h-36.1c-2.7-37.4-14-49.2-55.5-49.2h-51.5V439h96.2c47.5 0 62.2-15.9 67.5-80.4h41.4v121.3H.6v-28.5z\"\n      fill=\"currentColor\"\n      fillRule=\"nonzero\"\n    />\n  </svg>\n);\n\nexport default EconomistIcon;\n","import React from 'react';\n\nconst EiuIcon = ({ size }) => (\n  <svg\n    width={size || 16}\n    height={size || 16}\n    viewBox=\"0 0 16 16\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g>\n      <path\n        d=\"M1.31,11.71V3.95h4.28v1.26H2.63v1.88h2.76v1.23H2.63v2.13h3.14v1.25H1.31z\"\n        fill=\"black\"\n        fillRule=\"nonzero\"\n      />\n      <path\n        d=\"M6.61,11.71V3.95h1.32v7.76H6.61z\"\n        fill=\"black\"\n        fillRule=\"nonzero\"\n      />\n      <path\n        d=\"M10.32,3.95v4.46c0,0.54,0.04,0.91,0.15,1.26c0.2,0.63,0.77,0.92,1.48,0.92c0.81,0,1.33-0.33,1.52-1.02c0.09-0.33,0.13-0.75,0.13-1.21V3.95h1.29v4.46c0,0.76-0.08,1.38-0.25,1.85c-0.36,1.01-1.33,1.58-2.73,1.58c-1.24,0-2.23-0.48-2.63-1.52C9.1,9.84,9.02,9.22,9.02,8.48V3.95H10.32z\"\n        fill=\"black\"\n        fillRule=\"nonzero\"\n      />\n    </g>\n  </svg>\n);\n\nexport default EiuIcon;\n","import React from 'react';\n\nconst RefinitivIcon = ({ size }) => (\n  <svg\n    width={size || 16}\n    height={size || 16}\n    viewBox=\"0 0 16 16\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g>\n      <path d=\"M1,15V1H15\" stroke=\"blue\" strokeWidth=\"2\" fill=\"none\" />\n      <path d=\"M15,7.5h-7.5L15,15\" stroke=\"blue\" strokeWidth=\"2\" fill=\"none\" />\n    </g>\n  </svg>\n);\n\nexport default RefinitivIcon;\n","/* eslint-disable jsx-a11y/no-autofocus */\n\n// FIXME: May 2019, footnote handling needs refactoring\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport EconomistIcon from '../icons/economist-icon';\nimport EiuIcon from '../icons/eiu-icon';\nimport RefinitivIcon from '../icons/refinitiv-icon';\n\nclass Strings extends Component {\n  static get defaultProps() {\n    return {\n      ecoStrPlain: 'The Economist',\n      ecoStrItal: '<i>The Economist</i>',\n      ecoStrAfterSemicolon: '; <i>The Economist</i>',\n      ecoStrAfterColon: ': <i>The Economist</i>',\n      eiuStr: 'The Economist Intelligence Unit',\n      eiuStrAfterSemicolon: '; The Economist Intelligence Unit',\n      eiuStrAfterColon: ': The Economist Intelligence Unit',\n      refStr: 'Refinitiv Datastream',\n      refStrAfterSemicolon: '; Refinitiv Datastream',\n      refStrAfterColon: ': Refinitiv Datastream',\n      semicolon: ';',\n      semicolonSpace: '; ',\n      colon: ':',\n      colonSpace: ': ',\n      br: '<br>',\n      spaceBr: ' <br>',\n      footnoteSymbols: ['*', '†', '‡', '§', '**', '††', '‡‡', '§§'],\n    };\n  }\n\n  // CONSTRUCTOR\n  // Creates empty array of footnote items\n  // Sets up the event listener\n  constructor(props) {\n    super(props);\n    this.state = {\n      // This will be an array of objects, each with props 'symbol' and 'content'\n      // FIXME: I suspect, July'20, that this may be redundant. Revisit...\n      activeFootnotes: [],\n      focusFootnote: '',\n      // Tracking old values of all except footnotes\n      // Inputs for these values are uncontrolled\n      title: 'To come',\n      subtitle: 'To come',\n      subsubtitle: '',\n      panelheader: '',\n      source: 'to come',\n    };\n    this.handleStringBlur = this.handleStringBlur.bind(this);\n    this.handleAddFootnote = this.handleAddFootnote.bind(this);\n    this.handleEcoString = this.handleEcoString.bind(this);\n    this.handleEiuString = this.handleEiuString.bind(this);\n    this.handleRefinitivString = this.handleRefinitivString.bind(this);\n  }\n  // CONSTRUCTOR ends\n\n  UNSAFE_componentWillReceiveProps(newProps) {\n    const values = newProps.config.values;\n    this.setState({\n      title: values.title,\n      subtitle: values.subtitle,\n      subsubtitle: values.subsubtitle,\n      panelHeader: values.panelHeader,\n      source: values.source,\n    });\n  }\n\n  componentDidMount() {\n    this.fillFields();\n  }\n\n  componentDidUpdate() {\n    this.fillFields();\n  }\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // *** EVENT LISTENERS ***\n\n  // GET FOOTNOTES\n  // Called from handleStringBlur to concatenate footnote strings\n  // (I can't get list from state, because last-added content\n  // isn't in state yet)\n  getFootnotes() {\n    const symbolList = this.props.footnoteSymbols;\n    // Collect all existing footnote strings in an array\n    const fArray = [];\n    // Loop thro all potential symbols\n    // But also set a counter that will pick up symbols from symbolList\n    let symbolCount = 0;\n    for (let iii = 0; iii < symbolList.length; iii++) {\n      const symbol = symbolList[iii];\n      const thisInputName = `footnote-input-${symbol}`;\n      const thisInput = this[thisInputName];\n      if (thisInput !== null && typeof thisInput !== 'undefined') {\n        // If input exists, get its content\n        const fContent = thisInput.value;\n        if (fContent.trim().length > 0) {\n          fArray.push({\n            symbol: symbolList[symbolCount],\n            content: fContent,\n          });\n          symbolCount++;\n        }\n      }\n    }\n    // So fArray is an array of existing footnotes,\n    // with symbols in default sequence\n    // Set state to array\n    const stringArray = [];\n    for (let iii = 0; iii < fArray.length; iii++) {\n      const { symbol } = fArray[iii];\n      const { content } = fArray[iii];\n      const oneString = `${symbol}${content}`;\n      stringArray.push(oneString);\n    }\n    this.setState({ activeFootnotes: fArray });\n    // Convert the array to a string\n    // Sending the 4-space separator now is a waste of time, since\n    // Background.wrapText arrayifies anyway...\n    // NOTE: so I should just send the array in the first place!\n    return stringArray.join(' ');\n  }\n  // GET FOOTNOTES ends\n\n  // COLLECT FOOTNOTES FROM INPUTS\n  // Called from handleAddFootnote. Retrieves existing\n  // footnote field contents\n  collectFootnotesFromInputs() {\n    const fArray = [];\n    const outerThis = this;\n    const symbols = this.props.footnoteSymbols;\n    const parent = this['footnote-strings-body'];\n    const fCount = parent.childElementCount;\n    for (let iii = 0; iii < fCount; iii++) {\n      const symbol = symbols[iii];\n      const iName = `footnote-input-${symbol}`;\n      const input = outerThis[iName];\n      if (typeof input !== 'undefined') {\n        const content = input.value;\n        if (content.length > 0) {\n          fArray.push({ symbol, content });\n        }\n      }\n    }\n    return fArray;\n  }\n\n  forceNewFootnoteDiv(newDiv, showClass) {\n    if (!newDiv.classList.contains(showClass)) {\n      newDiv.classList.add(showClass);\n      newDiv.children[1].focus();\n    }\n  }\n\n  // HANDLE ADD FOOTNOTE\n  // Handler for '+' button click. Loops through footnote divs\n  // until it finds the first empty one, which it sets to visible\n  // with focus.\n  // The Timeout is necessary because if user clicks '+' after\n  // editing a footnote, the latter's blur event fires the callback\n  // to Editor with the existing footnotes; and this then\n  // precipitates a rerender of this component that hides the\n  // newly-visible footnote div. So Timeout just ensure that\n  // the field is made visible after the blur sequence has\n  // concluded...\n  handleAddFootnote() {\n    const mainClass = 'one-footnote-div';\n    const showClass = 'one-footnote-div-visible';\n    const allFootnotes = document.getElementsByClassName(mainClass);\n    for (let fNo = 0; fNo < allFootnotes.length; fNo++) {\n      const fDiv = allFootnotes[fNo];\n      if (!fDiv.classList.contains(showClass)) {\n        // First non-visible\n        fDiv.classList.add(showClass);\n        fDiv.children[1].focus();\n        // See above\n        setTimeout(() => {\n          this.forceNewFootnoteDiv(fDiv, showClass);\n        }, 10);\n        break;\n      }\n    }\n  }\n  // HANDLE ADD FOOTNOTE ends\n\n  // FILL FIELDS\n  // Called from componentDidMount and componentDidUpdate\n  // to stuff new props cheaply and cheerfully into fields\n  fillFields() {\n    this.title.value = this.props.config.values.title;\n    this.subtitle.value = this.props.config.values.subtitle;\n    this.subsubtitle.value = this.props.config.values.subsubtitle;\n    this.source.value = this.props.config.values.source;\n    this.panelHeader.value = this.props.config.values.panelHeader;\n    this.fillFootnoteFields();\n  }\n  // FILL FIELDS ends\n\n  // FILL FOOTNOTE FIELDS\n  fillFootnoteFields() {\n    const fString = this.props.config.values.footnote;\n    // Arrayify:\n    let fArray = [];\n    let propList = [];\n    if (fString.length > 0) {\n      fArray = this.footnoteStringToArray(fString);\n      // Now turn each fnote into a symbol/content object\n      // Convert single string to array of individual footnotes\n      propList = this.footnoteStringsToObjects(fArray);\n    }\n    const showClass = 'one-footnote-div-visible';\n    const symbols = this.props.footnoteSymbols;\n    for (let fNo = 0; fNo < symbols.length; fNo++) {\n      const symbol = symbols[fNo];\n      const thisFoot = `footnote-input-${symbol}`;\n      const parentDiv = this[thisFoot].parentElement;\n      let fContent = '';\n      if (fNo < propList.length) {\n        fContent = propList[fNo].content;\n        if (!parentDiv.classList.contains(showClass)) {\n          parentDiv.classList.add(showClass);\n        }\n      } else {\n        parentDiv.classList.remove(showClass);\n      }\n      this[thisFoot].value = fContent;\n    }\n  }\n  // FILL FOOTNOTE FIELDS ends\n\n  // ENFORCE CHAR-SPACE IN SOURCE\n  // Called from checkSourcePunctuation to enforce semi/colon + 1-space\n  enforceCharSpaceInSource(str, char, charSpace) {\n    const myArray = str.split(char);\n    for (let i = 1; i < myArray.length; i++) {\n      myArray[i] = myArray[i].trim();\n    }\n    return myArray.join(charSpace);\n  }\n  // ENFORCE CHAR-SPACE IN SOURCE ends\n\n  // CHECK SOURCE PUNCTUATION\n  // Called from filterSource to ensure that semi/colons are\n  // followed by 1 space.\n  checkSourcePunctuation(source) {\n    let str = source.trim();\n    if (str.length === 0) {\n      return str;\n    }\n    const sColon = this.props.semicolon;\n    const scSpace = this.props.semicolonSpace;\n    const colon = this.props.colon;\n    const cSpace = this.props.colonSpace;\n    if (str.includes(colon)) {\n      str = this.enforceCharSpaceInSource(str, colon, cSpace);\n    }\n    if (str.includes(sColon)) {\n      str = this.enforceCharSpaceInSource(str, sColon, scSpace);\n    }\n    return str;\n  }\n  // CHECK SOURCE PUNCTUATION ends\n\n  // NO SPACE BEFORE BR\n  // Remove rogue spaces before hard return tag.\n  // But NOTE: text-wrapping adds a space after return anyway --\n  // something to do with italics tag!\n  noSpaceBeforeBr(str) {\n    str = str.replace(this.props.spaceBr, this.props.br);\n    return str;\n  }\n  // NO SPACE BEFORE BR ends\n\n  // FULL STOP FOR EIU SOURCE\n  // EIU needs full stop at end of source\n  fullStopForEiuSource(str) {\n    if (this.props.config.values.user === 'eiu') {\n      const lastChar = str.slice(-1);\n      if (lastChar !== '.') {\n        str = `${str}.`;\n      }\n    }\n    return str;\n  }\n  // FULL STOP FOR EIU SOURCE ends\n\n  // ITALICISE ONE ECONOMIST\n  // Called from italiciseAllEconomists, checks that 'The Economist'\n  // has italics tags\n  italiciseOneEconomist(str) {\n    const ecoStrPlain = this.props.ecoStrPlain;\n    const ecoStrItal = this.props.ecoStrItal;\n    if (str.includes(ecoStrPlain)) {\n      if (!str.includes(ecoStrItal)) {\n        str = str.replace(ecoStrPlain, ecoStrItal);\n      }\n    }\n    return str;\n  }\n  // ITALICISE ONE ECONOMIST ends\n\n  // ITALICISE THE ECONOMIST\n  // Called from filterSource. italicises 'The Economist'\n  // but not 'The Economist Intelligence Unit'\n  italiciseTheEconomist(source) {\n    const semicolon = this.props.semicolon;\n    // The string could include both simple 'Eco' and 'EIU',\n    // so arrayify\n    // (element 0 will include prefix, but I don't think that matters)\n    const sArray = source.split(semicolon);\n    const italicisedSource = sArray.map(oneSource => {\n      if (!oneSource.includes(this.props.eiuStr)) {\n        // Ignore EIU; check others\n        oneSource = this.italiciseOneEconomist(oneSource);\n      }\n      return oneSource;\n    });\n    // Return as string\n    return italicisedSource.join(semicolon);\n  }\n  // ITALICISE THE ECONOMIST ends\n\n  // FILTER SOURCE\n  // Called from handleStringBlur. Before source string is dispatched,\n  // verify source/sources is OK, and check Economist strings\n  filterSource(source) {\n    if (source.length > 0) {\n      // Prepend a source label, if missing\n      if (!source.includes('Source')) {\n        source = `Source: ${source}`;\n      }\n      // Italicise The Economist --\n      // but not in The Economist Intelligence Unit\n      source = this.italiciseTheEconomist(source);\n      // Just check for semi-colons for source/sources...\n      if (source.includes(';')) {\n        source = source.replace('Source:', 'Sources:');\n      } else {\n        source = source.replace('Sources:', 'Source:');\n      }\n    } else {\n      // Currently (re-)set to empty string.\n      // But should this be 'Source: to come'?\n      source = '';\n    }\n    source = this.checkSourcePunctuation(source);\n    // One final check: no space before '<br>'\n    source = this.noSpaceBeforeBr(source);\n    // And one final, final, inferential check:\n    // EIU source must end with full stop\n    source = this.fullStopForEiuSource(source);\n    return source;\n  }\n  // FILTER SOURCE ends\n\n  updateEditor() {\n    // Run source thro filter\n    const source = this.filterSource(this.source.value);\n    // Collect footnotes, as a string\n    const footnote = this.getFootnotes();\n    const vals = {\n      strings: {\n        title: this.title.value,\n        subtitle: this.subtitle.value,\n        subsubtitle: this.subsubtitle.value,\n        source,\n        footnote,\n        panelHeader: this.panelHeader.value,\n      },\n      // And send number of footnotes\n      footnoteCount: this.state.activeFootnotes.length,\n    };\n    this.props.onValuesToEditor(vals);\n  }\n\n  // CHECK VAL CHANGED\n  // Called from handleStringBlur. If the new value is\n  // different from that held in state, update state to\n  // new val, and return true\n  checkValChanged(evt) {\n    const newVal = evt.target.value;\n    const id = evt.target.id;\n    const oldVal = this.state[id];\n    const hasChanged = newVal !== oldVal;\n    if (hasChanged) {\n      this.setState({\n        [newVal]: newVal,\n      });\n    }\n    return hasChanged;\n  }\n  // CHECK VAL CHANGED\n\n  // HANDLE STRING BLUR\n  // Cheap and cheerful. Every time we tab or click out\n  // of an input, check whether val has changed and, if\n  // so, fire off the callback\n  handleStringBlur(evt) {\n    if (this.checkValChanged(evt)) {\n      this.updateEditor();\n      this.setState({ focusFootnote: '' });\n    }\n  }\n  // HANDLE STRING BLUR ends\n\n  // HANDLE ECO STRING\n  // Append or remove '<i>The Economist</i>' to/from the source string\n  handleEcoString() {\n    const sourceInput = this.source;\n    let sourceString = sourceInput.value;\n    // Economist with preceding semi-colon...\n    const ecoStrAfterSemicolon = this.props.ecoStrAfterSemicolon;\n    // ...or preceding colon\n    const ecoStrAfterColon = this.props.ecoStrAfterColon;\n    if (sourceString.includes(ecoStrAfterSemicolon)) {\n      // If Eco is a subsequent source, delete it\n      sourceString = sourceString.replace(ecoStrAfterSemicolon, '');\n    } else if (sourceString.includes(ecoStrAfterColon)) {\n      // If it's the ONLY source, replace with default\n      if (sourceString.includes('Source:')) {\n        sourceString = sourceString.replace(ecoStrAfterColon, ': to come');\n      } else {\n        sourceString = sourceString.replace(`${ecoStrAfterColon};`, ':');\n      }\n    } else {\n      // If it isn't already a source, append it\n      sourceString = `${sourceString}${ecoStrAfterSemicolon}`;\n    }\n    this.source.value = sourceString;\n    this.updateEditor();\n    this.setState({ focusFootnote: '' });\n  }\n  // HANDLE ECO STRING ends\n\n  // HANDLE EIU STRING\n  // Append or remove 'The Economist Intelligence Unit' to/from the source string\n  handleEiuString() {\n    let sourceString = this.source.value;\n    // Remove EIU-style final full stop(s)\n    while (sourceString.slice(-1) === '.') {\n      sourceString = sourceString.slice(0, -1);\n    }\n    // EIU with preceding semi-colon...\n    const eiuStrAfterSemicolon = this.props.eiuStrAfterSemicolon;\n    // ...or preceding colon\n    const eiuStrAfterColon = this.props.eiuStrAfterColon;\n    if (sourceString.includes(eiuStrAfterSemicolon)) {\n      // If EIU is a subsequent source, delete it\n      sourceString = sourceString.replace(eiuStrAfterSemicolon, '');\n    } else if (sourceString.includes(eiuStrAfterColon)) {\n      // If it's the ONLY source, replace with default\n      if (sourceString.includes('Source:')) {\n        sourceString = sourceString.replace(eiuStrAfterColon, ': to come');\n      } else {\n        sourceString = sourceString.replace(`${eiuStrAfterColon};`, ':');\n      }\n    } else {\n      // If it isn't already a source, append it\n      sourceString = `${sourceString}${eiuStrAfterSemicolon}`;\n    }\n    this.source.value = sourceString;\n    this.updateEditor();\n    this.setState({ focusFootnote: '' });\n  }\n  // HANDLE EIU STRING ends\n\n  // HANDLE REFINITIV STRING\n  // Append or remove 'Refinitiv Datastream' to/from the source string\n  handleRefinitivString() {\n    let sourceString = this.source.value;\n    // Remove EIU-style final full stop(s)\n    while (sourceString.slice(-1) === '.') {\n      sourceString = sourceString.slice(0, -1);\n    }\n    // RD with preceding semi-colon...\n    const refStrAfterSemicolon = this.props.refStrAfterSemicolon;\n    // ...or preceding colon\n    const refStrAfterColon = this.props.refStrAfterColon;\n    if (sourceString.includes(refStrAfterSemicolon)) {\n      // If RD is a subsequent source, delete it\n      sourceString = sourceString.replace(refStrAfterSemicolon, '');\n    } else if (sourceString.includes(refStrAfterColon)) {\n      // If it's the ONLY source, replace with default\n      if (sourceString.includes('Source:')) {\n        sourceString = sourceString.replace(refStrAfterColon, ': to come');\n      } else {\n        sourceString = sourceString.replace(`${refStrAfterColon};`, ':');\n      }\n    } else {\n      // If it isn't already a source, append it\n      sourceString = `${sourceString}${refStrAfterSemicolon}`;\n    }\n    this.source.value = sourceString;\n    this.updateEditor();\n    this.setState({ focusFootnote: '' });\n  }\n  // HANDLE REFINITIV STRING ends\n\n  // ______________________________\n  // *** JSX ASSEMBLY FUNCTIONS ***\n\n  // FOOTNOTE STRING TO ARRAY\n  // Called from unpickFootnotes, converts complete footnote string\n  // into an array of individual items\n  footnoteStringToArray(fString) {\n    const symbols = this.props.footnoteSymbols;\n    // First do a crude split\n    const crudeArray = fString.split(' ');\n    // The problem is, of course, that any one footnote may have internal spaces, so...\n    const goodArray = [];\n    for (let iii = crudeArray.length - 1; iii > 0; iii--) {\n      const fNote = crudeArray[iii];\n      const symbol = fNote.substring(0, 1);\n      if (symbols.includes(symbol)) {\n        goodArray.unshift(fNote);\n      } else {\n        // If there's no symbol, append string to previous element\n        crudeArray[iii - 1] = `${crudeArray[iii - 1]} ${fNote}`;\n      }\n    }\n    // Since I'm appending 'unsymboled' strings to previous\n    // elements in crudeArray, I can't count down to zero;\n    // so explicitly prepend first element:\n    goodArray.unshift(crudeArray[0]);\n    return goodArray;\n  }\n  // FOOTNOTE STRING TO ARRAY ends\n\n  // FOOTNOTE STRINGS TO OBJECTS\n  footnoteStringsToObjects(fArray) {\n    const symbols = this.props.footnoteSymbols;\n    // Now, on each, separate into symbol and content\n    const fObjArray = fArray.map(fNote => {\n      const fObj = {};\n      for (let iii = symbols.length - 1; iii >= 0; iii--) {\n        const symbol = symbols[iii];\n        if (fNote.includes(symbol)) {\n          fObj.symbol = symbol;\n          fObj.content = fNote.replace(symbol, '');\n          break;\n        }\n      }\n      return fObj;\n    });\n    return fObjArray;\n  }\n  // FOOTNOTE STRINGS TO OBJECTS ends\n\n  // FOOTNOTE ARRAYS DIFFER\n  footnoteArraysDiffer(listA, listB) {\n    let result = false;\n    if (listA.length !== listB.length) {\n      result = true;\n    } else if (listA.length === 0) {\n      result = true;\n    } else {\n      for (let iii = 0; iii < listA.length; iii++) {\n        const itemA = listA[iii];\n        const itemB = listB[iii];\n        if (itemA.symbol !== itemB.symbol || itemA.content !== itemB.content) {\n          result = true;\n          break;\n        }\n      }\n    }\n    return result;\n  }\n  // FOOTNOTE ARRAYS DIFFER ends\n\n  // MAP FOOTNOTE ELEMENTS\n  // Called from makeFootnotesJSX\n  mapFootnoteElements() {\n    const symbols = this.props.footnoteSymbols;\n    const feMap = symbols.map((symbol, fIndex) => {\n      const fNoteInputKey = `footnote-input-${symbol}`;\n      return (\n        <div key={fIndex} className=\"one-footnote-div\">\n          <span className=\"footnote-symbol-label\">{symbol}</span>\n          <input\n            className=\"silver-input text-field  footnote-content-input\"\n            ref={c => {\n              this[fNoteInputKey] = c;\n            }}\n            onBlur={this.handleStringBlur}\n          />\n        </div>\n      );\n    });\n    return feMap;\n  }\n  // MAP FOOTNOTE ELEMENTS ends\n\n  // MAKE FOOTNOTES JSX\n  // Constructs Footnotes fieldset. The number of footnote inputs is\n  // determined by list in state\n  makeFootnotesJsx() {\n    // List of 'active' footnotes\n    let fList = this.state.activeFootnotes;\n    // If the 'focus' is empty, that means we've got props from upstairs\n    // which override the footnotes (if any) held in state\n    if (this.state.focusFootnote.length === 0) {\n      const fString = this.props.config.values.footnote;\n      // Arrayify:\n      let fArray = [];\n      let propList = [];\n      if (fString.length > 0) {\n        fArray = this.footnoteStringToArray(fString);\n        // Now turn each fnote into a symbol/content object\n        // Convert single string to array of individual footnotes\n        propList = this.footnoteStringsToObjects(fArray);\n      }\n      // So if props version is different, it overrides...\n      // ...but I may have to allow for final empty content in state version\n      if (this.footnoteArraysDiffer(propList, fList)) {\n        fList = propList;\n      }\n    }\n    // Stack of divs for individual footnotes\n    const footnoteElementArray = this.mapFootnoteElements(fList);\n    const footnotesCollection = (\n      <div className=\"footnote-strings-div\">\n        <div className=\"footnote-strings-header\">\n          <span className=\"silver-label footnote-label\">Footnotes</span>\n          <button\n            type=\"button\"\n            className=\"silver-button footnote-add-div\"\n            onClick={this.handleAddFootnote}\n          >\n            <span>+</span>\n          </button>\n        </div>\n        <div\n          className=\"footnote-strings-body\"\n          ref={c => {\n            this['footnote-strings-body'] = c;\n          }}\n        >\n          {footnoteElementArray}\n        </div>\n      </div>\n    );\n    // </div>\n    return footnotesCollection;\n  }\n  // MAKE FOOTNOTES JSX ends\n\n  // MAKE ONE TOP DIV JSX\n  // Called from makeTopJsx to generate a single string input\n  // (sub/sub/title + panelHeader)\n  makeOneTopDivJsx(label, id) {\n    const placeholder = `Add ${id.toLowerCase()}`;\n    let className = 'string-set-div';\n    // But panel header hides if only one panel\n    if (id.includes('panel')) {\n      const { panelTotal } = this.props.config.values;\n      if (panelTotal < 2) {\n        className = `${className}-hidden`;\n      }\n    }\n    return (\n      <div className={className}>\n        <span className=\"silver-label strings-label\">{label}</span>\n        <input\n          id={id}\n          ref={c => {\n            this[id] = c;\n          }}\n          className=\"text-field strings-input\"\n          autoComplete=\"off\"\n          placeholder={placeholder}\n          onBlur={this.handleStringBlur}\n        />\n      </div>\n    );\n  }\n  // MAKE ONE TOP DIV JSX\n\n  // MAKE TOP JSX\n  // JSX for title, subtitle, subsubtitle & panel-header\n  makeTopJsx() {\n    const titleDiv = this.makeOneTopDivJsx('Title', 'title');\n    const panelHeaderDiv = this.makeOneTopDivJsx('Panel header', 'panelHeader');\n    const subtitleDiv = this.makeOneTopDivJsx('Subtitle', 'subtitle');\n    const subsubtitleDiv = this.makeOneTopDivJsx('Sub-subtitle', 'subsubtitle');\n    return (\n      <div className=\"top-strings-div\">\n        {titleDiv}\n        {panelHeaderDiv}\n        {subtitleDiv}\n        {subsubtitleDiv}\n      </div>\n    );\n  }\n  // MAKE TOP JSX ends\n\n  // SOURCE INCLUDES JUST ECONOMIST\n  // Called from makeSourcesJsx. Returns true if the source\n  // includes 'The Economist'\n  sourceIncludesJustEconomist(source, hasEiu) {\n    let hasEco = false;\n    const ecoRx = new RegExp(this.props.ecoStrPlain, 'g');\n    const ecoMatch = source.match(ecoRx);\n    if (ecoMatch !== null) {\n      let ecoCount = ecoMatch.length;\n      // Count occurrences. Discount EIU string.\n      if (hasEiu) {\n        ecoCount--;\n      }\n      hasEco = ecoCount > 0;\n    }\n    return hasEco;\n  }\n  // SOURCE INCLUDES JUST ECONOMIST ends\n\n  // MAKE SOURCES JSX\n  // Source field, plus Economist, EIU and Refinitiv buttons\n  makeSourcesJsx() {\n    const source = this.props.config.values.source;\n    // Flags for highlighting (string exists in source)\n    const hasEiu = source.includes(this.props.eiuStr);\n    const hasEconomist = this.sourceIncludesJustEconomist(source, hasEiu);\n    const hasRef = source.includes(this.props.refStr);\n    return (\n      <div className=\"source-strings-div\">\n        <div className=\"source-strings-div-header\">\n          <span className=\"silver-label strings-label\">Source</span>\n          <button\n            type=\"button\"\n            className={`silver-button append-economist-button ${\n              hasEconomist ? 'button-selected' : ''\n            }`}\n            onClick={this.handleEcoString}\n            title=\"Appends The Economist to the sources\"\n          >\n            <EconomistIcon size={10} />\n          </button>\n          <button\n            type=\"button\"\n            className={`silver-button append-eiu-button ${\n              hasEiu ? 'button-selected' : ''\n            }`}\n            onClick={this.handleEiuString}\n            title=\"Appends The Economist Intelligence Unit to the sources\"\n          >\n            <EiuIcon size={10} />\n          </button>\n          <button\n            type=\"button\"\n            className={`silver-button append-refinitiv-button ${\n              hasRef ? 'button-selected' : ''\n            }`}\n            onClick={this.handleRefinitivString}\n            title=\"Appends Refinitiv Datastream to the sources\"\n          >\n            <RefinitivIcon size={10} />\n          </button>\n        </div>\n        <input\n          id=\"source\"\n          ref={c => {\n            this.source = c;\n          }}\n          className=\"silver-input strings-input text-field\"\n          autoComplete=\"off\"\n          onBlur={this.handleStringBlur}\n        />\n      </div>\n    );\n  }\n  // MAKE SOURCES JSX ends\n\n  // STRINGS JSX\n  // Called from render\n  // Calls sub-functions to construct individual elements\n  stringsJsx() {\n    // Top set (above chart): title, subtitle, panel header, sub-subtitle\n    const topJsx = this.makeTopJsx();\n    // Sources\n    const sourcesJsx = this.makeSourcesJsx();\n    // Footnotes\n    const footnotesJsx = this.makeFootnotesJsx();\n    return (\n      <div className=\"strings-wrapper\">\n        {topJsx}\n        {sourcesJsx}\n        {footnotesJsx}\n      </div>\n    );\n  }\n  // STRINGS JSX ends\n\n  // RENDER\n  render() {\n    return this.stringsJsx();\n  }\n}\n\nStrings.propTypes = {\n  config: PropTypes.object.isRequired,\n  onValuesToEditor: PropTypes.func.isRequired,\n  footnoteSymbols: PropTypes.array,\n  ecoStrPlain: PropTypes.string,\n  ecoStrItal: PropTypes.string,\n  ecoStrAfterSemicolon: PropTypes.string,\n  ecoStrAfterColon: PropTypes.string,\n  eiuStr: PropTypes.string,\n  eiuStrAfterSemicolon: PropTypes.string,\n  eiuStrAfterColon: PropTypes.string,\n  refStr: PropTypes.string,\n  refStrAfterSemicolon: PropTypes.string,\n  refStrAfterColon: PropTypes.string,\n  semicolon: PropTypes.string,\n  semicolonSpace: PropTypes.string,\n  colon: PropTypes.string,\n  colonSpace: PropTypes.string,\n  br: PropTypes.string,\n  spaceBr: PropTypes.string,\n};\n\nexport default Strings;\n","import React from 'react';\n\nconst ChartColumn = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"17\"\n    height=\"17\"\n    viewBox=\"0 0 14 11\"\n  >\n    <path\n      fill=\"currentColor\"\n      data-name=\"&lt;Rectangle&gt;\"\n      d=\"M2 12V4h2v8zM6.02 12V2h2v10zM10 12V5.93h2V12z\"\n    />\n  </svg>\n);\n\nexport default ChartColumn;\n","import React from 'react';\n\nconst ChartBar = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"17\"\n    height=\"17\"\n    viewBox=\"0 0 14 12\"\n  >\n    <path\n      fill=\"currentColor\"\n      data-name=\"&lt;Rectangle&gt;\"\n      d=\"M2 2h8v2H2zM2 6.02h10v2H2zM2 10h6.07v2H2z\"\n    />\n  </svg>\n);\n\nexport default ChartBar;\n","import React from 'react';\n\nconst ChartLine = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"15\"\n    height=\"11\"\n    viewBox=\"0 0 17 11\"\n  >\n    <path\n      data-name=\"&lt;Path&gt;\"\n      d=\"M2 12c.1-.17 17-17 17-17\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinejoin=\"bevel\"\n      strokeWidth=\"2\"\n    />\n  </svg>\n);\n\nexport default ChartLine;\n","import React from 'react';\n\nconst ChartTable = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"17\"\n    height=\"17\"\n    viewBox=\"0 0 24 24\"\n  >\n    <path fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n    <path\n      fill=\"currentColor\"\n      d=\"M10 10.02h5V21h-5zM17 21h3c1.1 0 2-.9 2-2v-9h-5v11zm3-18H5c-1.1 0-2 .9-2 2v3h19V5c0-1.1-.9-2-2-2zM3 19c0 1.1.9 2 2 2h3V10H3v9z\"\n    />\n  </svg>\n);\n\nexport default ChartTable;\n","import React from 'react';\n\nconst ChartPointline = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"17\"\n    height=\"14\"\n    viewBox=\"0 0 17 12\"\n  >\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"10.83\"\n      cy=\"3\"\n      r=\"2\"\n    />\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"6.83\"\n      cy=\"7\"\n      r=\"2\"\n    />\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"2.83\"\n      cy=\"11\"\n      r=\"2\"\n    />\n    <path\n      data-name=\"&lt;Path&gt;\"\n      d=\"M2 12c.1-.17 10-10 10-10\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinejoin=\"bevel\"\n    />\n  </svg>\n);\n\nexport default ChartPointline;\n","import React from 'react';\n\nconst ChartStepline = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 14 11\"\n    width=\"17\"\n    height=\"14\"\n  >\n    <path\n      data-name=\"&lt;Path&gt;\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeMiterlimit=\"10\"\n      strokeWidth=\"2\"\n      d=\"M3 12V7h8V2\"\n    />\n  </svg>\n);\n\nexport default ChartStepline;\n","import React from 'react';\n\nconst ChartThermoHorizontal = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 13 9\"\n    width=\"17\"\n    height=\"17\"\n  >\n    <path\n      fill=\"currentcolor\"\n      data-name=\"&lt;Rectangle&gt;\"\n      d=\"M2 6.12h10v1.25H2z\"\n    />\n    <path\n      fill=\"currentcolor\"\n      data-name=\"&lt;Rectangle&gt;\"\n      d=\"M1.5 10.5V3h2v7.5zM10.5 10.5V3h2v7.5z\"\n    />\n  </svg>\n);\n\nexport default ChartThermoHorizontal;\n","import React from 'react';\n\nconst ChartThermoVertical = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 14 13\"\n    width=\"16\"\n    height=\"14\"\n  >\n    <path\n      fill=\"currentcolor\"\n      data-name=\"&lt;Rectangle&gt;\"\n      d=\"M6.5 12V2h1v10z\"\n    />\n    <path\n      fill=\"currentcolor\"\n      data-name=\"&lt;Rectangle&gt;\"\n      d=\"M10 12.5H4v-2h6zM10 3.5H4v-2h6z\"\n    />\n  </svg>\n);\n\nexport default ChartThermoVertical;\n","import React from 'react';\n\nconst ChartScatter = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 14 12\"\n    width=\"20\"\n    height=\"16\"\n  >\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"9.78\"\n      cy=\"4.08\"\n      r=\"1.5\"\n      transform=\"rotate(-27 9.79 4.09)\"\n    />\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"6.96\"\n      cy=\"6.91\"\n      r=\"1.5\"\n      transform=\"rotate(-27 6.95 6.91)\"\n    />\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"4.13\"\n      cy=\"9.74\"\n      r=\"1.5\"\n      transform=\"rotate(-27 4.12 9.73)\"\n    />\n  </svg>\n);\n\nexport default ChartScatter;\n","import React from 'react';\n\nconst ChartSizedScatter = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 14 12\"\n    width=\"20\"\n    height=\"16\"\n  >\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"9.29\"\n      cy=\"4.71\"\n      r=\"2\"\n      transform=\"rotate(-27 9.3 4.7)\"\n    />\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"6.08\"\n      cy=\"7.92\"\n      r=\"1.5\"\n      transform=\"rotate(-27 6.07 7.91)\"\n    />\n    <circle\n      fill=\"currentColor\"\n      data-name=\"&lt;Path&gt;\"\n      cx=\"3.64\"\n      cy=\"10.36\"\n      r=\".93\"\n      transform=\"rotate(-27 3.63 10.37)\"\n    />\n  </svg>\n);\n\nexport default ChartSizedScatter;\n","import React from 'react';\n\nconst ChartPie = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 14 12\"\n    width=\"17\"\n    height=\"17\"\n  >\n    <g data-name=\"&lt;Group&gt;\">\n      <path\n        fill=\"currentColor\"\n        data-name=\"&lt;Path&gt;\"\n        d=\"M7 2.41a4.33 4.33 0 0 0-2.24.49 4.71 4.71 0 0 0-2.1 6.31 4.64 4.64 0 0 0 6.28 2A4.41 4.41 0 0 0 11.45 7H7z\"\n      />\n    </g>\n  </svg>\n);\n\nexport default ChartPie;\n","import React from 'react';\n\nconst ChartHalfPie = () => (\n  <svg\n    data-name=\"Layer 1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 14 11\"\n    width=\"20\"\n    height=\"16\"\n  >\n    <g data-name=\"&lt;Group&gt;\">\n      <path\n        data-name=\"&lt;Path&gt;\"\n        d=\"M7.15 6.41A2.92 2.92 0 0 0 4.56 9h5.18a2.92 2.92 0 0 0-2.59-2.59z\"\n        fill=\"none\"\n      />\n      <path\n        fill=\"currentColor\"\n        data-name=\"&lt;Path&gt;\"\n        d=\"M7.15 6.41A2.92 2.92 0 0 1 9.74 9h2.39a4.83 4.83 0 0 0-5-5 4.83 4.83 0 0 0-5 5h2.43a2.92 2.92 0 0 1 2.59-2.59z\"\n      />\n    </g>\n  </svg>\n);\n\nexport default ChartHalfPie;\n","// NOTE: for chartTypeJsx:\n/* eslint-disable complexity */\n// Child of design-fold-body. Handles chart type and stacking\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColumnIcon from '../../icons/chart-column';\nimport BarIcon from '../../icons/chart-bar';\nimport LineIcon from '../../icons/chart-line';\nimport TableIcon from '../../icons/chart-table';\nimport PointlineIcon from '../../icons/chart-pointline';\nimport SteplineIcon from '../../icons/chart-stepline';\nimport ThermoHorizontalIcon from '../../icons/chart-thermo-horizontal';\nimport ThermoVerticalIcon from '../../icons/chart-thermo-vertical';\nimport ScatterIcon from '../../icons/chart-scatter';\nimport SizedScatterIcon from '../../icons/chart-sized-scatter';\nimport PieIcon from '../../icons/chart-pie';\nimport HalfPieIcon from '../../icons/chart-half-pie';\n\nclass ChartType extends Component {\n  static get defaultProps() {\n    return {\n      typeDefs: [\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-column',\n          display: 'column',\n          text: 'column',\n          cbString: 'column',\n          canStack: true,\n          canLog: false,\n          orientation: 'vertical',\n          icon: <ColumnIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-bar',\n          display: 'bar',\n          text: 'bar',\n          cbString: 'bar',\n          // Flag determines whether stack options are active\n          canStack: true,\n          canLog: false,\n          // horizontal/vertical/both/none\n          orientation: 'horizontal',\n          icon: <BarIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-line',\n          display: 'line',\n          text: 'line',\n          cbString: 'line',\n          // Lines can't stack yet...\n          canStack: true,\n          canLog: true,\n          orientation: 'vertical',\n          icon: <LineIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-table',\n          display: 'table',\n          text: 'table',\n          cbString: 'table',\n          // Lines can't stack yet...\n          canStack: true,\n          canLog: false,\n          orientation: 'vertical',\n          icon: <TableIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-pointline',\n          display: 'pointline',\n          text: 'pointline',\n          cbString: 'pointline',\n          canStack: false,\n          canLog: true,\n          orientation: 'vertical',\n          icon: <PointlineIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-stepline',\n          display: 'stepline',\n          text: 'stepline',\n          cbString: 'stepline',\n          canStack: false,\n          canLog: true,\n          orientation: 'vertical',\n          icon: <SteplineIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-thermohorizontal',\n          display: 'thermo horizontal',\n          text: 'thermo',\n          cbString: 'thermohorizontal',\n          canStack: false,\n          canLog: true,\n          orientation: 'horizontal',\n          icon: <ThermoHorizontalIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-thermovertical',\n          display: 'thermo vertical',\n          text: 'thermo',\n          cbString: 'thermovertical',\n          canStack: false,\n          canLog: true,\n          orientation: 'vertical',\n          icon: <ThermoVerticalIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-scatter',\n          display: 'scatter',\n          text: 'scatter',\n          cbString: 'scatter',\n          canStack: false,\n          canLog: true,\n          orientation: 'both',\n          icon: <ScatterIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-sizedscatter',\n          display: 'sized scatter',\n          text: 'sized scatter',\n          cbString: 'sizedscatter',\n          canStack: false,\n          canLog: true,\n          orientation: 'both',\n          icon: <SizedScatterIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-pie',\n          display: 'pie',\n          text: 'pie',\n          cbString: 'pie',\n          canStack: false,\n          canLog: false,\n          orientation: 'none',\n          icon: <PieIcon />,\n        },\n        {\n          group: 'type',\n          generalClass: 'silver-button',\n          specificClass: 'type-halfpie',\n          display: 'half pie',\n          text: 'half pie',\n          cbString: 'halfpie',\n          canStack: false,\n          canLog: false,\n          orientation: 'none',\n          icon: <HalfPieIcon />,\n        },\n      ],\n      stackDefs: [\n        {\n          group: 'stack',\n          generalClass: 'silver-button',\n          specificClass: 'type-sidebyside',\n          display: 'unstacked',\n          text: 'unstacked',\n        },\n        {\n          group: 'stack',\n          generalClass: 'silver-button',\n          specificClass: 'type-stacked',\n          display: 'stacked',\n          text: 'stacked',\n        },\n      ],\n      // Both of next 3 arrays use cbString\n      stackableTypes: ['bar', 'column', 'line', 'stepline'],\n      unLoggableTypes: ['bar', 'column', 'table', 'pie', 'halfpie'],\n      // Chart types that currently work:\n      workingTypes: [\n        'bar',\n        'column',\n        'line',\n        'table',\n        'pointline',\n        'stepline',\n        'thermohorizontal',\n        'thermovertical',\n        'scatter',\n        'sizedscatter',\n        'pie',\n        'halfpie',\n      ],\n    };\n  }\n\n  // CONSTRUCTOR\n  // Sets up the structure and 'reactions' of the controls\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Object to pass back\n      typeVals: {\n        source: 'chartType',\n        type: this.props.config.type,\n        stacked: this.props.config.stacked,\n        thermoDots: this.props.config.thermoDots,\n        scatterLabels: this.props.config.scatterLabels,\n        scatterTrendline: this.props.config.scatterTrendline,\n      },\n      updateEditor: false,\n    };\n    // Events\n    this.handleTypeClick = this.handleTypeClick.bind(this);\n    this.handleStackClick = this.handleStackClick.bind(this);\n    this.handleThermoDotClick = this.handleThermoDotClick.bind(this);\n    this.handleScatterOptionClick = this.handleScatterOptionClick.bind(this);\n  }\n  // CONSTRUCTOR ends\n\n  // COMPONENT WILL RECEIVE PROPS\n  UNSAFE_componentWillReceiveProps(newProps) {\n    const oldConfig = this.props.config;\n    const newConfig = newProps.config;\n    if (\n      oldConfig.type !== newConfig.stack ||\n      oldConfig.stack !== newConfig.stack\n    ) {\n      this.setState({\n        typeVals: {\n          source: 'chartType',\n          type: newConfig.type,\n          thermoDots: newConfig.thermoDots,\n          scatterLabels: newConfig.scatterLabels,\n          scatterTrendline: newConfig.scatterTrendline,\n          stacked: newConfig.stacked,\n          canLayerCake: newConfig.canLayerCake,\n          whatChanged: '',\n        },\n        updateEditor: false,\n      });\n    }\n  }\n  // COMPONENT WILL RECEIVE PROPS ends\n\n  // COMPONENT DID UPDATE\n  // Any user gesture precipitates a state-change and re-render,\n  // after which we update Editor...\n  componentDidUpdate() {\n    if (this.state.updateEditor) {\n      this.props.onValuesToDesignBody(this.state.typeVals);\n    }\n  }\n  // COMPONENT DID UPDATE ends\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // HANDLE TYPE CLICK\n  handleTypeClick(event) {\n    // First, get the typeDef for the existing chart type:\n    const oldTypeDef = this.props.typeDefs.filter(\n      type => type.cbString === this.props.config.type,\n    )[0];\n    const oldOrientation = oldTypeDef.orientation;\n    const displayed = event.currentTarget.dataset.chart.toLowerCase();\n    // Isolate the definition and extract string to return in callback\n    const newTypeDef = this.props.typeDefs.filter(\n      type => type.display === displayed,\n    )[0];\n    const cbString = newTypeDef.cbString;\n    const cbOrientation = newTypeDef.orientation;\n\n    this.setState(prevState => {\n      const typeVals = prevState.typeVals;\n      typeVals.type = cbString;\n      typeVals.sameOrientation = oldOrientation === cbOrientation;\n      // But *can* this style stack? This is a one-way street: if I\n      // change from a stacked type to an unstackable one, I have to\n      // force the stacking option off...\n      if (!this.props.stackableTypes.includes(cbString)) {\n        typeVals.stacked = false;\n      }\n      typeVals.whatChanged = 'type';\n      return {\n        typeVals,\n        updateEditor: true,\n      };\n    });\n  }\n  // HANDLE TYPE CLICK ends\n\n  // HANDLE STACK CLICK\n  handleStackClick(event) {\n    const style = event.currentTarget.dataset.chart.toLowerCase();\n    this.setState(prevState => {\n      const typeVals = prevState.typeVals;\n      typeVals.stacked = style === 'stacked';\n      typeVals.whatChanged = 'stacking';\n      return {\n        typeVals,\n        updateEditor: true,\n      };\n    });\n  }\n  // HANDLE STACK CLICK ends\n\n  // HANDLE THERMO DOT CLICK\n  handleThermoDotClick({ target: { checked } }) {\n    this.setState(prevState => {\n      const typeVals = prevState.typeVals;\n      typeVals.thermoDots = checked;\n      typeVals.whatChanged = 'thermo-dots';\n      return {\n        typeVals,\n        updateEditor: true,\n      };\n    });\n  }\n  // HANDLE THERMO DOT CLICK ends\n\n  // HANDLE SCATTER LABEL CLICK\n  handleScatterOptionClick({ target }) {\n    // Labels or trendline?\n    const labelsChanged = target.className.includes('labels');\n    const checked = target.checked;\n    this.setState(prevState => {\n      const typeVals = prevState.typeVals;\n      if (labelsChanged) {\n        typeVals.scatterLabels = checked;\n        typeVals.whatChanged = 'scatter-labels';\n      } else {\n        typeVals.scatterTrendline = checked;\n        typeVals.whatChanged = 'scatter-trendline';\n      }\n      return {\n        typeVals,\n        updateEditor: true,\n      };\n    });\n  }\n  // HANDLE SCATTER LABEL CLICK ends\n\n  // GET ELEMENT JSX\n  // Called from chartTypeJsx to assemble jsx for one element\n  // Args are the element definition; index; en/disable flag\n  getElementJsx(def, keyVal, isDisabled) {\n    let element = '';\n    if (def.group === 'label') {\n      const keyStr = `label-${keyVal}`;\n      const cName = `${def.generalClass} ${def.specificClass}`;\n      element = (\n        <span key={keyStr} className={cName}>\n          {def.display}\n        </span>\n      );\n    } else if (def.group === 'type') {\n      const keyStr = `type-${keyVal}`;\n      let cName = `${def.generalClass} ${def.specificClass}`;\n      if (def.cbString === this.state.typeVals.type) {\n        cName = `${cName} button-selected`;\n      }\n      if (isDisabled) {\n        cName = `${cName} button-disabled`;\n      }\n      element = (\n        <button\n          type=\"button\"\n          data-chart={def.display}\n          key={keyStr}\n          className={cName}\n          onClick={this.handleTypeClick}\n        >\n          {def.icon && def.icon} {def.text}\n        </button>\n      );\n    } else {\n      const keyStr = `stack-${keyVal}`;\n      let cName = `${def.generalClass} ${def.specificClass}`;\n      // Selected? It's binary: stacked or side-by-side\n      const isStacked = this.state.typeVals.stacked;\n      if (isStacked && def.display === 'stacked') {\n        cName = `${cName} button-selected`;\n      } else if (!isStacked && def.display === 'unstacked') {\n        cName = `${cName} button-selected`;\n      }\n      if (isDisabled) {\n        cName = `${cName} button-disabled`;\n      }\n      element = (\n        <button\n          type=\"button\"\n          data-chart={def.display}\n          key={keyStr}\n          className={cName}\n          onClick={this.handleStackClick}\n        >\n          {def.text}\n        </button>\n      );\n    }\n    return element;\n  }\n  // GET ELEMENT JSX ends\n\n  // DATA CANT BE SCATTER CHART\n  // Called from chartTypeJsx. Returns True if data aren't compatible\n  // with a sized/scatter chart\n  dataCantBeScatterChart(chartType, seriesCount) {\n    if (seriesCount === 1) {\n      return true;\n    }\n    const three = 3;\n    let modVal = seriesCount % 2;\n    if (chartType.includes('sized')) {\n      modVal = seriesCount % three;\n    }\n    // So if modVal isn't zero, data are incompatible with a scatter (simple or sized)\n    return modVal !== 0;\n  }\n  // DATA CANT BE SCATTER CHART ends\n\n  // MAKE THERMO DOT CHECKBOX\n  makeThermoDotCheckbox() {\n    // Class names\n    const labClass = 'silver-label thermo-dot-option-label';\n    const cbClass = 'silver-checkbox thermo-checkbox';\n    // Div is enabled only if chart-type is thermometer\n    let divClass = 'thermo-dot-option-div';\n    let ticked = this.props.config.thermoDots;\n    if (!this.props.config.type.includes('thermo')) {\n      divClass = `${divClass} thermo-dot-option-disabled`;\n      ticked = false;\n    }\n    const element = (\n      <div key=\"thermo-dot-option-div\" className={divClass}>\n        <label className={labClass} htmlFor={cbClass}>\n          Use dots\n          <input\n            className={cbClass}\n            type=\"checkbox\"\n            onChange={this.handleThermoDotClick}\n            checked={ticked}\n          />\n        </label>\n      </div>\n    );\n    return element;\n  }\n  // MAKE THERMO DOT CHECKBOX ends\n\n  // MAKE ONE SCATTER OPTS CHECKBOX\n  // Called from makeScatterOptionsCheckboxes to build\n  // scatter labels or trendline options\n  makeOneScatterOptsCheckbox(ticked, isLabels, canLabel) {\n    // Class names\n    let labClass = 'silver-label scatter-trend-option-label';\n    let cbClass = 'silver-checkbox scatter-trend-checkbox';\n    let optionStr = 'Trend line';\n    if (isLabels) {\n      labClass = 'silver-label scatter-labels-option-label';\n      cbClass = 'silver-checkbox scatter-labels-checkbox';\n      if (!canLabel) {\n        labClass = `${labClass} scatter-labels-disabled`;\n        cbClass = `${cbClass} scatter-labels-disabled`;\n      }\n      optionStr = 'Label points';\n    }\n    return (\n      <label className={labClass} htmlFor={cbClass}>\n        {optionStr}\n        <input\n          className={cbClass}\n          type=\"checkbox\"\n          onChange={this.handleScatterOptionClick}\n          checked={ticked}\n        />\n      </label>\n    );\n  }\n  // MAKE ONE SCATTER OPTS CHECKBOX ends\n\n  // MAKE SCATTER OPTIONS CHECKBOXES\n  makeScatterOptionsCheckboxes() {\n    // Div is enabled only if chart-type is SCATTER\n    let divClass = 'scatter-options-div';\n    const scattersCanLabel = this.props.config.scattersCanLabel;\n    let labelTicked = this.props.config.scatterLabels;\n    let trendTicked = this.props.config.scatterTrendline;\n    // Not scatter: kill everything\n    if (!this.props.config.type.includes('scatter')) {\n      divClass = `${divClass} scatter-options-disabled`;\n      labelTicked = false;\n      trendTicked = false;\n    }\n    const optionKey = 'scatter-options-key';\n    const elementA = this.makeOneScatterOptsCheckbox(\n      labelTicked,\n      true,\n      scattersCanLabel,\n    );\n    const elementB = this.makeOneScatterOptsCheckbox(trendTicked, false);\n    return (\n      <div key={optionKey} className={divClass}>\n        {elementA}\n        {elementB}\n      </div>\n    );\n  }\n  // MAKE SCATTER OPTIONS CHECKBOXES ends\n\n  // CHART TYPE JSX\n  // Calls sub-functions to construct individual elements and clusters\n  chartTypeJsx() {\n    const config = this.props.config;\n    // If chart is mixed or double-scaled, or if data includes non-numbers,\n    // this entire component may be disabled\n    const allOff = config.typeDisabled;\n    // If log scale, disable bars, columns, pies...\n    const { isLog } = config;\n    // Flag to en/disable stacked options, according to chart type\n    let disableStacked = true;\n    // Stackable chart types is empty by default...\n    const stackableTypes = this.props.stackableTypes;\n    // Ditto *UN*-loggable (exclusionary)\n    const unLoggableTypes = this.props.unLoggableTypes;\n    // Loop through chart type properties\n    const typeDefs = this.props.typeDefs;\n    // Array of definitions to return:\n    const elementArray = [];\n    for (let iii = 0; iii < typeDefs.length; iii++) {\n      const tDef = typeDefs[iii];\n      // Can this chart type enable?\n      let tDisabled = false;\n      if (this.props.config.stacked) {\n        // If data are currently stacked, only enable this chart type\n        // if it's stackable\n        tDisabled = !stackableTypes.includes(tDef.cbString);\n      } else if (tDef.cbString === 'line') {\n        // Columns and bars can stack when there are mixed values in a series\n        // (indicated by the 'canLayerCake' flag). But if either of those\n        // chart types has left stacking on, I can't switch to a line chart...\n        if (config.stacked) {\n          tDisabled = !config.canLayerCake;\n        }\n      } else if (tDef.cbString.includes('scatter')) {\n        tDisabled = this.dataCantBeScatterChart(\n          tDef.cbString,\n          config.seriesCount,\n        );\n      } else if (tDef.cbString.includes('pie')) {\n        tDisabled = config.noPie;\n      } else if (config.user === 'eiu' && tDef.cbString.includes('table')) {\n        // NOTE: kludge to disable tables for EIU\n        tDisabled = true;\n      } else if (isLog) {\n        // Log check:\n        tDisabled = unLoggableTypes.includes(tDef.cbString);\n      }\n      // NOTE: this clunks\n\n      // Disablement override for types that don't work yet:\n      // NOTE: once pies work, this becomes redundant\n      if (!tDisabled) {\n        tDisabled = !this.props.workingTypes.includes(tDef.cbString);\n      }\n      const thisEl = this.getElementJsx(typeDefs[iii], iii, tDisabled);\n      elementArray.push(thisEl);\n      if (tDef.display === this.state.typeVals.type) {\n        if (\n          this.props.config.type === 'line' ||\n          this.props.config.type === 'stepline'\n        ) {\n          disableStacked = !this.props.config.canLayerCake;\n        } else {\n          disableStacked = !typeDefs[iii].canStack;\n        }\n      }\n    }\n\n    // Stacking buttons\n    const stackDefs = this.props.stackDefs;\n    for (let iii = 0; iii < stackDefs.length; iii++) {\n      const thisEl = this.getElementJsx(stackDefs[iii], iii, disableStacked);\n      elementArray.push(thisEl);\n    }\n    let componentClass = 'chart-type-div';\n    if (allOff) {\n      componentClass = `${componentClass} chart-type-disabled`;\n    }\n\n    elementArray.push(this.makeThermoDotCheckbox());\n    elementArray.push(this.makeScatterOptionsCheckboxes());\n    return <div className={componentClass}>{elementArray}</div>;\n  }\n  // CHART TYPE JSX ends\n\n  // RENDER\n  render() {\n    return this.chartTypeJsx();\n  }\n}\n\nChartType.propTypes = {\n  config: PropTypes.object,\n  onValuesToDesignBody: PropTypes.func,\n  typeDefs: PropTypes.array,\n  stackDefs: PropTypes.array,\n  stackableTypes: PropTypes.array,\n  unLoggableTypes: PropTypes.array,\n  workingTypes: PropTypes.array,\n};\n\nexport default ChartType;\n","// Child of design-fold-body. Handles blobs\n// Component seems happy to be stateless...\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Blobs extends Component {\n  // *** REACT LIFECYCLE ***\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    // Events\n    this.handleBlobHeaderChange = this.handleBlobHeaderChange.bind(this);\n    this.handleBlobShapeChange = this.handleBlobShapeChange.bind(this);\n  }\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // HANDLE BLOB HEADER CHANGE\n  handleBlobHeaderChange({ target: { value } }) {\n    const column = Number(value);\n    const header = this.props.config.headers[column];\n    const isRect = this.props.config.isRect;\n    const blobResult = {\n      source: 'blobs',\n      column,\n      isRect,\n      header,\n    };\n    this.props.onValuesToDesignBody(blobResult);\n  }\n  // HANDLE BLOB HEADER CHANGE ends\n\n  handleBlobShapeChange({ target: { innerHTML } }) {\n    const isRect = innerHTML.toLowerCase() === 'block';\n    const column = Number(this.props.config.column);\n    const blobResult = {\n      source: 'blobs',\n      isRect,\n      column,\n      header: this.props.config.headers[column],\n    };\n    this.props.onValuesToDesignBody(blobResult);\n  }\n\n  blobsJsx() {\n    // I want a main label; minor label, dropdown;\n    // minor label 2 buttons\n    let componentClass = 'blobs-div';\n    if (this.props.config.disabled) {\n      componentClass = `${componentClass} blobs-disabled`;\n    }\n    // Dropdown content\n    const headArray = this.props.config.headers;\n    const options = headArray.map((opt, index) => (\n      <option key={index} value={index}>\n        {opt}\n      </option>\n    ));\n    const val = this.props.config.column;\n    // Bubble/block selection\n    const isRect = this.props.config.isRect;\n    // Base className\n    let blockClass = 'silver-button blobs-block';\n    let bubbleClass = 'silver-button blobs-bubble';\n    if (isRect) {\n      blockClass = `${blockClass} button-selected`;\n    } else {\n      bubbleClass = `${bubbleClass} button-selected`;\n    }\n    return (\n      <div className={componentClass}>\n        <div className=\"silver-label-head blobs-label-main\">Blobhead</div>\n\n        <div className=\"blobs-group-dropdown\">\n          <span className=\"silver-label blobs-label-dropdown\">Convert</span>\n          <select\n            className=\"dropdown blobs-dropdown\"\n            value={val}\n            onChange={this.handleBlobHeaderChange}\n            required\n          >\n            {options}\n          </select>\n          <span className=\"silver-label blobs-label-toggle\">to</span>\n        </div>\n\n        <button\n          type=\"button\"\n          className={bubbleClass}\n          onClick={this.handleBlobShapeChange}\n        >\n          bubble\n        </button>\n        <button\n          type=\"button\"\n          className={blockClass}\n          onClick={this.handleBlobShapeChange}\n        >\n          block\n        </button>\n      </div>\n    );\n  }\n\n  // RENDER\n  render() {\n    return this.blobsJsx();\n  }\n}\n\nBlobs.propTypes = {\n  config: PropTypes.object,\n  onValuesToDesignBody: PropTypes.func,\n};\n\nexport default Blobs;\n","// Child of design-fold-body. Handles legend columns-count and header\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Legend extends Component {\n  // *** REACT LIFECYCLE ***\n\n  // CONSTRUCTOR\n  // Sets up the structure and 'reactions' of the controls\n  constructor(props) {\n    super(props);\n    this.state = {\n      header: this.props.config.header,\n    };\n    // Events\n    this.handleColumnsChange = this.handleColumnsChange.bind(this);\n    this.handleHeaderChange = this.handleHeaderChange.bind(this);\n    this.handleHeaderBlur = this.handleHeaderBlur.bind(this);\n  }\n  // CONSTRUCTOR ends\n\n  // COMPONENT WILL RECEIVE PROPS\n  // If header has changed, update in state\n  UNSAFE_componentWillReceiveProps(newProps) {\n    const header = newProps.config.header;\n    if (header !== this.props.config.header) {\n      this.setState({\n        header,\n      });\n    }\n  }\n  // COMPONENT WILL RECEIVE PROPS ends\n\n  // COMPONENT DID UPDATE\n  // Any user gesture precipitates a state-change and re-render,\n  // after which we update Editor...\n  // componentDidUpdate() {\n  //   if (this.state.updateEditor) {\n  //     this.props.onValuesToDesignBody(this.state.legend);\n  //   }\n  // }\n  // COMPONENT DID UPDATE ends\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // HANDLE COLUMNS CHANGE\n  // Unpick and dispatch callback\n  handleColumnsChange({ target: { value } }) {\n    const columns = Number(value);\n    const legendResult = this.props.config;\n    legendResult.source = 'legend';\n    legendResult.columns = columns;\n    this.props.onValuesToDesignBody(legendResult);\n  }\n  // HANDLE COLUMNS CHANGE ends\n\n  handleHeaderChange({ target: { value } }) {\n    const header = value;\n    // NOTE: remainder comm'd out because errors... And\n    // anyway I need to decide what I want to do...\n    this.setState({ header });\n  }\n\n  // HANDLE HEADER BLUR\n  // Unpick and dispatch callback\n  handleHeaderBlur({ target: { value } }) {\n    let header = value.trim();\n    const legendResult = this.props.config;\n    legendResult.source = 'legend';\n    legendResult.header = header;\n    // Force undefined to empty string\n    if (typeof header === 'undefined') {\n      header = '';\n    }\n    this.setState({ header });\n    this.props.onValuesToDesignBody(legendResult);\n  }\n  // HANDLE HEADER BLUR ends\n\n  legendJsx() {\n    // I want a main label; minor label, dropdown, minor label\n    let componentClass = 'legend-div';\n    if (this.props.config.disabled) {\n      componentClass = `${componentClass} legend-disabled`;\n    }\n    const columns = this.props.config.columns;\n    const options = [];\n    const max = this.props.config.max;\n    for (let iii = 0; iii <= max; iii++) {\n      options.push(\n        <option key={iii} value={iii}>\n          {iii}\n        </option>,\n      );\n    }\n    const header = this.state.header;\n    return (\n      <div className={componentClass}>\n        <div className=\"silver-label-head legend-label-main\">Legend</div>\n        <div className=\"legend-input-header-wrapper\">\n          <input\n            type=\"text\"\n            id=\"legend-input-header\"\n            className=\"text-field legend-input-header\"\n            onBlur={this.handleHeaderBlur}\n            onChange={this.handleHeaderChange}\n            value={header}\n            placeholder=\"Add legend header…\"\n          />\n        </div>\n\n        <div className=\"legend-columns\">\n          <span className=\"silver-label legend-label-across\">Columns</span>\n          <select\n            className=\"dropdown legend-dropdown\"\n            value={columns}\n            onChange={this.handleColumnsChange}\n            required\n          >\n            {options}\n          </select>\n        </div>\n      </div>\n    );\n    // Note that header div has no default innerHTML string\n  }\n\n  // RENDER\n  render() {\n    return this.legendJsx();\n  }\n}\n\nLegend.propTypes = {\n  config: PropTypes.object,\n  onValuesToDesignBody: PropTypes.func,\n};\n\nexport default Legend;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ChartType from './bodyparts/chart-type';\nimport Blobs from './bodyparts/blobs';\nimport Legend from './bodyparts/legend';\n\nclass DesignFoldBody extends Component {\n  // *** REACT LIFECYCLE STUFF ***\n\n  // CONSTRUCTOR\n  // Sets up the various event listeners...\n  // ...and the global value-container\n  constructor(props) {\n    super(props);\n    // Component is stateless\n    this.state = {\n      // updateEditor: false,\n    };\n    // Events\n    this.handleChartTypeChange = this.handleChartTypeChange.bind(this);\n    this.handleBlobChange = this.handleBlobChange.bind(this);\n    this.handleLegendChange = this.handleLegendChange.bind(this);\n  }\n  // CONSTRUCTOR ends\n\n  // HANDLE CHART TYPE CHANGE\n  handleChartTypeChange(vals) {\n    this.props.onValuesToFoldsWrapper(vals);\n  }\n  // HANDLE CHART TYPE CHANGE ends\n\n  // HANDLE BLOB CHANGE\n  handleBlobChange(vals) {\n    this.props.onValuesToFoldsWrapper(vals);\n  }\n  // HANDLE BLOB CHANGE ends\n\n  // HANDLE LEGEND CHANGE\n  handleLegendChange(vals) {\n    this.props.onValuesToFoldsWrapper(vals);\n  }\n  // HANDLE LEGEND CHANGE ends\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // DESIGN BODY JSX\n  // Calls sub-functions to construct individual elements and clusters\n  designBodyJsx() {\n    let { chartType, legend, panels, blobs } = this.props.config;\n    return (\n      <div className=\"fold-body\">\n        <ChartType\n          config={chartType}\n          onValuesToDesignBody={this.handleChartTypeChange}\n        />\n        <Legend\n          config={legend}\n          onValuesToDesignBody={this.handleLegendChange}\n        />\n        <Blobs\n          config={blobs}\n          onValuesToDesignBody={this.handleBlobChange}\n        />\n      </div>\n    );\n  }\n  // DESIGN BODY JSX ends\n\n  // RENDER\n  render() {\n    return this.designBodyJsx();\n  }\n}\n\nDesignFoldBody.propTypes = {\n  config: PropTypes.object,\n  // Callback of returned values\n  onValuesToFoldsWrapper: PropTypes.func,\n};\n\nexport default DesignFoldBody;\n","// Child of scales-fold-body\n// Refactored Sep'19 to work with array of mmi properties\n// and (eventually!) to handle log scales\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport * as LogUtils from '../../utilities/log-utilities';\nimport * as OtherUtils from '../../utilities/other-utilities';\n\nclass ScaleSet extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mmi: this.props.config.mmi,\n    };\n    // Events\n    this.handleMmiChange = this.handleMmiChange.bind(this);\n  }\n\n  // NOTE: make this work... one day...\n  // static getDerivedStateFromProps(newProps, prevState) {\n  //   const mmi = newProps.config.mmi;\n  //   if (typeof mmi.actualMin !== 'undefined') {\n  //     return newProps.config.mmi;\n  //   }\n  //   return null;\n  // }\n\n  UNSAFE_componentWillReceiveProps(newProps) {\n    const mmi = newProps.config.mmi;\n    // To prevent problems at start-up\n    if (typeof mmi.actualMin !== 'undefined') {\n      this.setState({\n        mmi,\n      });\n    }\n  }\n\n  // PASS VALS UP\n  // Called from handleMmiChange, if mmi vals pan out, to fire\n  // callback via Scales Body to Editor\n  passValsUp(mmi) {\n    const vals = {\n      mmi,\n      side: mmi.side,\n      updateEditor: true,\n      updateChart: true,\n      index: this.props.config.index,\n    };\n    this.props.onValuesToScalesBody(vals);\n  }\n  // PASS VALS UP ends\n\n  // UNPICK Z MMI VALS\n  // For scatter-z, max just has to be > min\n  unpickZMmiVals(mmi) {\n    return {\n      min: mmi.min,\n      max: mmi.max,\n      valsWork: mmi.max > mmi.min,\n    };\n  }\n  // UNPICK Z MMI VALS ends\n\n  // UNPICK LOG MMI VALS\n  // For now, at least, accept values\n  // I just need to build the tick-sequence\n  unpickLogMmiVals(mmi) {\n    const min = Number(mmi.min);\n    const max = Number(mmi.max);\n    const increment = Number(mmi.increment);\n    // const logMmi = Object.assign({}, mmi);\n    // This partly duplicates LogUtils.appendLogTickVals\n    // I need to extend at bottom and top of scale\n    const logMin = LogUtils.getCycleStartOrEnd(min, true);\n    const logMax = LogUtils.getCycleStartOrEnd(max, false);\n    const logMmi = {\n      min: logMin,\n      max: logMax,\n      increment,\n    };\n    LogUtils.appendLogTickVals(logMmi);\n    // Now trim to actual min and max\n    const logArray = logMmi.tickValues;\n    if (logArray[0] < min) {\n      logArray[0] = min;\n    }\n    while (logArray[1] <= min) {\n      logArray.shift();\n    }\n    if (logArray[logArray.length - 1] > max) {\n      logArray[logArray.length - 1] = max;\n    }\n    while (logArray[logArray.length - 2] >= max) {\n      logArray.pop();\n    }\n    logMmi.tickDensity = logArray.length;\n    logMmi.valsWork = true;\n    return logMmi;\n  }\n  // UNPICK LOG MMI VALS ends\n\n  // UNPICK REGULAR MMI VALS\n  unpickRegularMmiVals(mmi) {\n    const result = {\n      valsWork: false,\n    };\n    let max = Number(mmi.max);\n    let min = Number(mmi.min);\n    let increment = Number(mmi.increment);\n    // Increment must be > 0\n    if (increment <= 0) {\n      return result;\n    }\n    // 'Seed' the array of tickValues with pre-factored minimum\n    const tickValues = [min];\n    // I need to:\n    //  - check that increment is exact divisor of min - max (valsWork)\n    //  - get a complete array of values to display (tickValues)\n    //  - get the number of values in that array (tickDensity)\n    // But I have to work round the Javascript floating point issue\n    // So everything has to get factored up until the increment is an integer\n    let factoredBy = 1;\n    while (!Number.isInteger(increment)) {\n      min *= 10;\n      max *= 10;\n      increment *= 10;\n      factoredBy *= 10;\n    }\n    // Fix any precision errors\n    min = OtherUtils.trimDecimals(min);\n    max = OtherUtils.trimDecimals(max);\n    increment = OtherUtils.trimDecimals(increment);\n    factoredBy = OtherUtils.trimDecimals(factoredBy);\n    // Now check if values are OK\n    if (this.mmiValsWork(min, max, increment)) {\n      // If so, fill the array with the de-factored values\n      while (min < max) {\n        min += increment;\n        tickValues.push(min / factoredBy);\n      }\n      result.tickValues = tickValues;\n      result.tickDensity = tickValues.length;\n      // Check that new tickDensity matches other side (if any)\n      // const densityOK = this.sideDensitiesMatch(result.tickDensity);\n      // if (densityOK) {\n      // Finally!\n      result.valsWork = true;\n      // }\n    }\n    return result;\n  }\n  // UNPICK REGULAR MMI VALS ends\n\n  // MMI VALS WORK\n  // Called from unpickMmiVals, to check that:\n  //    increment is exact divisor of min-max\n  //    that mixed-val sequence transits zero\n  mmiValsWork(min, max, incr) {\n    let valsWork = false;\n    // Count steps\n    const steps = (max - min) / incr;\n    // Max number of steps, which must be an integer\n    const maximumIncrements = this.props.config.maximumIncrements;\n    if (steps <= maximumIncrements && Number.isInteger(steps)) {\n      // If values are 'mixed',\n      // test that increment must hit zero on its way...\n      if (min < 0 && max > 0) {\n        for (let iii = 0; iii < steps; iii++) {\n          min += incr;\n          if (min === 0) {\n            valsWork = true;\n            break;\n          }\n        }\n      } else {\n        valsWork = true;\n      }\n    }\n    return valsWork;\n  }\n  // MMI VALS WORK ends\n\n  // SIDE DENSITIES MATCH\n  // Passed the number of ticks on left or right, checks\n  // it's the same as the other side. Scatters allow mismatch.\n  sideDensitiesMatch(myDensity) {\n    const otherDensity = this.props.config.mmi.otherTickDensity;\n    let result = false;\n    if (\n      this.props.config.isScatter ||\n      // Only one side, anyawy\n      typeof otherDensity === 'undefined' ||\n      // Tick counts match\n      myDensity === otherDensity\n    ) {\n      result = true;\n    }\n    return result;\n  }\n  // SIDE DENSITIES MATCH ends\n\n  // CHECK RAW VAL IS OK\n  // Arg is a string that must only contain numbers, dp or minus\n  // Lone dp or minus is allowed. Increment can't be negative\n  checkRawValIsOK(val, isIncrement, isLog, isZ) {\n    // NOTE: logic could be better here...\n    // Incr, log and scatter-z can't be negative\n    if (isIncrement || isLog || isZ) {\n      if (+val < 0) {\n        return false;\n      }\n    }\n    // Log increment must be 0, 1 or 2\n    if (isLog && isIncrement) {\n      if (+val > 2) {\n        return false;\n      }\n    } else if (isLog || isZ) {\n      // Non-increment-logs and scatter-z can't be zero\n      if (Number(val) === 0) {\n        return false;\n      }\n    }\n    // Otherwise:\n    let isOK = false;\n    if (val === '.') {\n      isOK = true;\n    } else if (val === '-') {\n      isOK = true;\n    } else if (!isNaN(val)) {\n      // Leading/trailing dps or minus pass\n      isOK = true;\n    }\n    return isOK;\n  }\n  // CHECK RAW VAL IS OK ends\n\n  // CHECK TRAILING DP\n  // Called from handleMmiChange. Trailing\n  // DP is allowed\n  checkTrailingDp(val) {\n    let dpTrails = false;\n    const dPt = '.';\n    if (val.charAt(val.length - 1) === dPt) {\n      dpTrails = true;\n    }\n    return dpTrails;\n  }\n  // CHECK TRAILING DP ends\n\n  // GET ID ROOT\n  // Called from handleMmiChange. If input id is, say 'max-2',\n  // returns 'max'\n  getIdRoot(id) {\n    let idResult = id;\n    if (id.includes('-')) {\n      const idArray = id.split('-');\n      idResult = idArray[0];\n    }\n    return idResult;\n  }\n  // GET ID ROOT ends\n\n  // HANDLE MMI CHANGE\n  // Event handler for any change to max, min or incr\n  handleMmiChange(event) {\n    const isLog = this.props.config.mmi.log;\n    const mmi = this.state.mmi;\n    const rawVal = event.target.value;\n    const id = this.getIdRoot(event.target.id);\n    const isZ = mmi.label.toLowerCase().includes('z');\n    // Allowed values are numbers, '.' and (non-log) '-'\n    const isIncrement = id === 'increment';\n    // NOTE: this could be done more elegantly\n    // but I need to press on, and it is at least clear...\n    // First check on the value\n    const rawValOK = this.checkRawValIsOK(rawVal, isIncrement, isLog, isZ);\n    if (!rawValOK) {\n      // Value is crap, but let it stand\n      mmi[id] = rawVal;\n      this.setState(mmi);\n      return;\n    }\n    // Trailing DP is allowed\n    const trailingDP = this.checkTrailingDp(rawVal);\n    if (trailingDP) {\n      mmi[id] = rawVal;\n      this.setState(mmi);\n      return;\n    }\n    // So we've passed first hurdles: whatever the value, it's\n    // an acceptable entry. But is it a viable number? If not,\n    // update state and bale out\n    if (isNaN(rawVal)) {\n      mmi[id] = rawVal;\n      this.setState(mmi);\n      return;\n    }\n    // Still here? We've got an honest-to-God number. Let's see if\n    // we can build a sequence with it...\n    mmi[id] = Number(rawVal);\n    // Generate an object with all the properties I need\n    // to go upstairs. If the tickValue sequence won't\n    // work, flag is false\n    let unpickedVals = {};\n    if (isLog) {\n      unpickedVals = this.unpickLogMmiVals(mmi);\n    } else if (isZ) {\n      unpickedVals = this.unpickZMmiVals(mmi);\n    } else {\n      unpickedVals = this.unpickRegularMmiVals(mmi);\n    }\n\n    if (unpickedVals.valsWork) {\n      if (isZ) {\n        // NOTE: I'm going round the houses here. Rethink!\n        // mmi.min = unpickedVals.min;\n        // Force min zero for scatter z-axis\n        mmi.min = 0;\n        mmi.max = unpickedVals.max;\n        // Kludge a couple of anomalies in the object\n        // FIXME: tidy up MMI object\n        mmi.increment = 1;\n        mmi.factor = 1;\n      } else {\n        // Non-z-scatter need additional props\n        mmi.tickDensity = unpickedVals.tickDensity;\n        mmi.tickValues = unpickedVals.tickValues;\n        // OK, so I have a workable MMI *this* side\n        // But there's one final check: if it's a double\n        // scale, do sides match? (Returns true if not\n        // double scale.)\n        const densityOK = this.sideDensitiesMatch(unpickedVals.tickDensity);\n        mmi.densityOK = densityOK;\n      }\n      // Always update Editor if values work\n      // since the other side needs to know how many ticks this side has\n      // Callback\n      this.passValsUp(mmi);\n    }\n    this.setState(mmi);\n  }\n  // HANDLE MMI CHANGE ends\n\n  makeTopRow(label) {\n    let valHead = 'Scale';\n    if (typeof label !== 'undefined' && label.toLowerCase().includes('z')) {\n      valHead = 'Dot-size';\n    }\n    return (\n      <div className=\"scales-row scales-row-labels\">\n        <span className=\"silver-label scales-label-axis\">{label}</span>\n        <span className=\"silver-label\">Data</span>\n        <span className=\"silver-label\">{valHead}</span>\n      </div>\n    );\n  }\n\n  makeHighRow(max, setMax) {\n    const id = `max-${this.props.config.index}`;\n    return (\n      <div className=\"scales-row scales-input-group\">\n        <div>Max</div>\n        <span title={max} className=\"silver-label scales-max-actual-span\">\n          {max}\n        </span>\n        <input\n          className=\"number-field scales-max-input\"\n          value={setMax}\n          id={id}\n          autoComplete=\"off\"\n          onChange={this.handleMmiChange}\n        />\n      </div>\n    );\n  }\n\n  makeLowRow(min, setMin, isZ) {\n    const id = `min-${this.props.config.index}`;\n    let userInputClassName = 'number-field scales-min-input';\n    // For scatter z-axis, disable the minimum user input. Class sets\n    // opacity to minimum; and react-disabled below\n    if (isZ) {\n      userInputClassName = `${userInputClassName} input-disabled`;\n    }\n    return (\n      <div className=\"scales-row scales-input-group\">\n        <div>Min</div>\n        <span title={min} className=\"silver-label scales-min-actual-span\">\n          {min}\n        </span>\n        <input\n          className={userInputClassName}\n          value={setMin}\n          id={id}\n          autoComplete=\"off\"\n          onChange={this.handleMmiChange}\n          disabled={isZ}\n        />\n      </div>\n    );\n  }\n\n  makeNonLogIncrRow(tickClass, ticks, setIncrement) {\n    return (\n      <div className=\"scales-row scales-input-group\">\n        <div>Increment</div>\n        <span className={tickClass}>{ticks}</span>\n        <input\n          className=\"number-field scales-increment-input\"\n          value={setIncrement}\n          id=\"increment\"\n          autoComplete=\"off\"\n          onChange={this.handleMmiChange}\n        />\n      </div>\n    );\n  }\n\n  buildLogIncrDropdown() {\n    // Hard-coding options for now, at least\n    const options = ['Single points', 'Half cycles', 'Full cycles'];\n    const dropDown = options.map((opt, index) => (\n      <option key={index} value={index}>\n        {opt}\n      </option>\n    ));\n    return dropDown;\n  }\n\n  makeLogIncrRow(setIncrement) {\n    const list = this.buildLogIncrDropdown();\n    return (\n      <div className=\"scales-row scales-input-group\">\n        <div>Increment</div>\n        <select\n          className=\"number-field scales-increment-input\"\n          value={setIncrement}\n          id=\"increment\"\n          onChange={this.handleMmiChange}\n        >\n          {list}\n        </select>\n      </div>\n    );\n  }\n\n  makeIncrRow(tickClass, ticks, setIncrement, isLog, label) {\n    let incrRow = '';\n    if (!label.toLowerCase().includes('z')) {\n      if (isLog) {\n        incrRow = this.makeLogIncrRow(setIncrement);\n      } else {\n        incrRow = this.makeNonLogIncrRow(tickClass, ticks, setIncrement);\n      }\n    }\n    return incrRow;\n  }\n\n  // SCALE VALS JSX\n  // Called from render to assemble JSX\n  scaleValsJsx() {\n    const configMmi = this.props.config.mmi;\n    const isLog = configMmi.log;\n    // The class that determined how this component displayed\n    // was set upstairs, in scales-fold-body\n    // But I also need to know what values, if any, to display\n    const hasVals = typeof this.state.mmi.min !== 'undefined';\n    // All default to empty, if no values:\n    let setMin = '';\n    let setMax = '';\n    let setIncrement = '';\n    let actualMin = '';\n    let actualMax = '';\n    let ticks = '';\n    let tickClass = 'silver-label scales-density-span ';\n    if (hasVals) {\n      setMin = this.state.mmi.min;\n      setMax = this.state.mmi.max;\n      setIncrement = this.state.mmi.increment;\n      actualMin = configMmi.actualMin;\n      actualMax = configMmi.actualMax;\n      // Check for unmatched densities alert\n      ticks = this.state.mmi.tickDensity;\n      // if (!this.sideDensitiesMatch(ticks)) {\n      // No: flag comes in with config\n      if (this.props.config.tickCountsMisMatch) {\n        tickClass = `${tickClass} silver-label-alert`;\n      }\n      ticks = `${ticks} ticks`;\n    }\n\n    // Format values\n    const formatDecimal = d3.format(',4f');\n    const max = isNaN(actualMax) ? null : formatDecimal(actualMax);\n    const min = isNaN(actualMin) ? null : formatDecimal(actualMin);\n    // Individual jsx elements\n    const label = configMmi.label;\n    let isZ = false;\n    if (typeof label !== 'undefined') {\n      isZ = label.toLowerCase().includes('z');\n    }\n    const topRow = this.makeTopRow(configMmi.label);\n    const highRow = this.makeHighRow(max, setMax);\n    const lowRow = this.makeLowRow(min, setMin, isZ);\n    const incrRow = this.makeIncrRow(\n      tickClass,\n      ticks,\n      setIncrement,\n      isLog,\n      configMmi.label,\n    );\n\n    return (\n      <div className={this.props.className}>\n        {topRow}\n        {highRow}\n        {lowRow}\n        {incrRow}\n      </div>\n    );\n  }\n  // SCALE VALS JSX ends\n\n  // RENDER\n  render() {\n    return this.scaleValsJsx();\n  }\n}\n\nScaleSet.propTypes = {\n  className: PropTypes.string,\n  config: PropTypes.object,\n  onValuesToScalesBody: PropTypes.func,\n};\n\nexport default ScaleSet;\n","// Child of scales-fold-body.\n// Handles left/right invert scale\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass InvertScale extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    // Events\n    this.handleInvertChangeLeft = this.handleInvertChangeLeft.bind(this);\n    this.handleInvertChangeRight = this.handleInvertChangeRight.bind(this);\n  }\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // SEND VALUES\n  // Called from checkbox event handlers. Assembles the\n  // object to pass back upstairs...\n  sendValues(side, invert) {\n    const { config } = this.props;\n    const invertObj = {\n      left: {\n        enabled: config.left.enabled,\n        invert: config.left.invert,\n      },\n      right: {\n        enabled: config.right.enabled,\n        invert: config.right.invert,\n      },\n    };\n    invertObj[side].invert = invert;\n    // But if chart is mixed, inactive side is aligned to active\n    if (config.isMixed) {\n      if (side === 'left') {\n        invertObj.right.invert = invert;\n      } else {\n        invertObj.left.invert = invert;\n      }\n    }\n    invertObj.updateChart = true;\n    this.props.onInvertToScalesBody(invertObj);\n  }\n  // SEND VALUES ends\n\n  // HANDLE INVERT CHANGE LEFT/RIGHT\n  // Event handlers for the checkboxes\n  handleInvertChangeLeft({ target: { checked } }) {\n    this.sendValues('left', checked);\n  }\n\n  handleInvertChangeRight({ target: { checked } }) {\n    this.sendValues('right', checked);\n  }\n\n  // INVERT JSX\n  // Called from render to assemble JSX\n  invertJsx() {\n    const { config } = this.props;\n    // config has left/right with props invert and enabled\n    let cNameLeft = 'silver-checkbox invert-left-checkbox';\n    let cNameRight = 'silver-checkbox invert-right-checkbox';\n    if (!config.left.enabled) {\n      cNameLeft = `${cNameLeft} checkbox-disabled`;\n    }\n    if (!config.right.enabled) {\n      cNameRight = `${cNameRight} checkbox-disabled`;\n    }\n    const invertLeft = config.left.invert;\n    const invertRight = config.right.invert;\n    return (\n      <div className=\"scales-invert-div\">\n        <div\n          className={`invert-label ${\n            !config.right.enabled && !config.left.enabled ? 'disabled' : ''\n          }`}\n        >\n          <label className=\"silver-label\" htmlFor=\"invert-checkbox\">\n            Invert\n          </label>\n        </div>\n\n        <div className=\"invert-group-list\">\n          <div\n            className={`invert-row ${!config.right.enabled ? 'disabled' : ''}`}\n          >\n            <div>Right axis</div>\n            <input\n              className={cNameRight}\n              type=\"checkbox\"\n              onChange={this.handleInvertChangeRight}\n              checked={invertRight}\n            />\n          </div>\n\n          <div\n            className={`invert-row ${!config.left.enabled ? 'disabled' : ''}`}\n          >\n            <div>Left axis</div>\n            <input\n              className={cNameLeft}\n              type=\"checkbox\"\n              onChange={this.handleInvertChangeLeft}\n              checked={invertLeft}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // RENDER\n  render() {\n    return this.invertJsx();\n  }\n}\n\nInvertScale.propTypes = {\n  config: PropTypes.object,\n  onInvertToScalesBody: PropTypes.func,\n};\n\nexport default InvertScale;\n","// Child of advanced-fold-body. Handles double and mixed scale prefs\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass DoubleScale extends Component {\n  // *** REACT LIFECYCLE ***\n\n  // Setting mixed/double-scale chart type options here\n  static get defaultProps() {\n    return {\n      chartTypes: ['line', 'stepline', 'pointline', 'column', 'stacked column'],\n      invertedChartTypes: ['line', 'stepline', 'pointline'],\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    // Events\n    this.handleSplitAfterChange = this.handleSplitAfterChange.bind(this);\n    this.handleLeftTypeChange = this.handleLeftTypeChange.bind(this);\n    this.handleRightTypeChange = this.handleRightTypeChange.bind(this);\n    this.handleDoubleOrMixed = this.handleDoubleOrMixed.bind(this);\n  }\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // UNPICK CHART TYPE\n  // Called from alignScaleProps. Passed a chart-type index, this looks up\n  // the type string in the array, then returns an editorConfig-friendly object with\n  // appropriate 'type' and 'stacked' options\n  // NOTE: watch this, if other chart types become 'doubleable'...\n  unpickChartType(typeIndex) {\n    const typeArray = this.props.chartTypes;\n    const typeStr = typeArray[typeIndex];\n    const typeObj = { type: '', stacked: false };\n    if (typeStr === 'line') {\n      typeObj.type = 'line';\n    } else if (typeStr === 'stepline') {\n      typeObj.type = 'stepline';\n    } else if (typeStr === 'pointline') {\n      typeObj.type = 'pointline';\n    } else {\n      typeObj.type = 'column';\n    }\n    if (typeStr.toLowerCase().includes('stack')) {\n      typeObj.stacked = true;\n    }\n    return typeObj;\n  }\n  // UNPICK CHART TYPE ends\n\n  // ALIGN SIDES\n  // Called from alignScaleProps. If I'm changing from single to\n  // mixed/double, sets the hitherto-disabled 'side' to the\n  // current chart-type\n  alignSides(dScale) {\n    if (\n      dScale.chartType.left.type === 'none' ||\n      dScale.chartType.left.type === 'table'\n    ) {\n      dScale.chartType.left.type = dScale.chartType.right.type;\n    } else if (\n      dScale.chartType.right.type === 'none' ||\n      dScale.chartType.right.type === 'table'\n    ) {\n      dScale.chartType.right.type = dScale.chartType.left.type;\n    }\n  }\n  // ALIGN SIDES ends\n\n  // ALIGN SCALE PROPS\n  // Called from the various event handlers to assemble and send the callback\n  alignScaleProps(source, val) {\n    const doubleScale = this.props.config;\n    const oldSplit = doubleScale.splitDataAtCol;\n    if (source === 'style') {\n      // Single/mixed/double\n      doubleScale.scale = val;\n      if (val === 'single') {\n        // Force single to zero\n        doubleScale.splitDataAtCol = 0;\n      } else {\n        // Mixed or double: min 1\n        doubleScale.splitDataAtCol = Math.max(oldSplit, 1);\n        // If we're changing from single to mixed/double, I need\n        // to align disabled 'side'\n        this.alignSides(doubleScale);\n      }\n    } else if (source === 'split') {\n      // Changed split column\n      doubleScale.splitDataAtCol = val;\n    } else if (source === 'leftType') {\n      doubleScale.chartType.left = this.unpickChartType(val);\n    } else if (source === 'rightType') {\n      doubleScale.chartType.right = this.unpickChartType(val);\n    }\n    doubleScale.component = 'doublescale';\n    doubleScale.updateChart = true;\n    this.props.onValuesToScalesBody(doubleScale);\n  }\n  // ALIGN SCALE PROPS ends\n\n  // EVENT HANDLERS\n  //\n  handleSplitAfterChange({ target: { value } }) {\n    // Add 1 to dropdown selection value to align\n    const uppedVal = Number(value) + 1;\n    this.alignScaleProps('split', uppedVal);\n  }\n\n  handleLeftTypeChange({ target: { value } }) {\n    this.alignScaleProps('leftType', Number(value));\n  }\n\n  handleRightTypeChange({ target: { value } }) {\n    this.alignScaleProps('rightType', Number(value));\n  }\n\n  handleDoubleOrMixed(e) {\n    this.alignScaleProps('style', e);\n  }\n\n  //\n  getSelectVal(str) {\n    return this.props.chartTypes.indexOf(str);\n  }\n\n  // DOUBLE JSX\n  // Called from render to assemble all JSX\n  doubleJsx() {\n    const scaleProps = this.props.config;\n    // Over all component class:\n    let componentClass = 'double-scale-div';\n    if (scaleProps.disableDouble) {\n      componentClass = `${componentClass} double-scale-disabled`;\n    }\n\n    // Single, mixed or double?\n    const { scale } = scaleProps;\n    // 'After series' dropdown\n    // Default (single) is empty:\n    let options = [];\n    if (scale !== 'single') {\n      const headArray = scaleProps.headers;\n      options = headArray.map((opt, index) => (\n        <option key={index} value={index}>\n          {opt}\n        </option>\n      ));\n    }\n    // Chart type options are set as local props. They can be different,\n    // left and right, depending upon whether scales are inverted!\n    let leftArray = this.props.chartTypes;\n    if (this.props.config.invert.left) {\n      leftArray = this.props.invertedChartTypes;\n    }\n    let rightArray = this.props.chartTypes;\n    if (this.props.config.invert.right) {\n      rightArray = this.props.invertedChartTypes;\n    }\n    const leftTypes = leftArray.map((opt, index) => (\n      <option key={index} value={index}>\n        {opt}\n      </option>\n    ));\n    const rightTypes = rightArray.map((opt, index) => (\n      <option key={index} value={index}>\n        {opt}\n      </option>\n    ));\n    // Default selection\n    // Value is indexed from zero in this component, for dropdown\n    // whereas other components index from 1\n    const splitAt = Math.max(scaleProps.splitDataAtCol - 1, 0);\n    // Classes:\n    let singleClass = 'silver-button single-button';\n    let doubleClass = 'silver-button double-button';\n    let mixedClass = 'silver-button mixed-button';\n    let afterSeriesClass = 'dropdown double-series';\n\n    let rowClass = 'double-scale-row';\n    let leftClass = 'dropdown double-left-type';\n    let rightClass = 'dropdown double-right-type';\n\n    // Refine class-setting\n    if (scale === 'double') {\n      doubleClass = `${doubleClass} button-selected`;\n    } else if (scale === 'mixed') {\n      mixedClass = `${mixedClass} button-selected`;\n    } else {\n      singleClass = `${singleClass} button-selected`;\n      leftClass = `${leftClass} dropdown-disabled`;\n      rightClass = `${rightClass} dropdown-disabled`;\n      afterSeriesClass = `${afterSeriesClass} dropdown-disabled`;\n      rowClass = `${rowClass} disabled`;\n    }\n\n    // If scale is mixed or double, work out select values\n    let leftVal = 0;\n    let rightVal = 0;\n    if (scale !== 'single') {\n      let leftStr = scaleProps.chartType.left.type;\n      if (scaleProps.chartType.left.stacked) {\n        leftStr = `stacked ${leftStr}`;\n      }\n      leftVal = this.props.chartTypes.indexOf(leftStr);\n      let rightStr = scaleProps.chartType.right.type;\n      if (scaleProps.chartType.right.stacked) {\n        rightStr = `stacked ${rightStr}`;\n      }\n      rightVal = this.props.chartTypes.indexOf(rightStr);\n    }\n\n    return (\n      <div className={componentClass}>\n        <span className=\"silver-label double-scale-label\">Double scale</span>\n        <div className=\"double-scale-list\">\n          <div className=\"double-scale-dropdowns\">\n            <div className={rowClass}>\n              <span className=\"silver-label after-col-label\">After series</span>\n              <select\n                className={afterSeriesClass}\n                value={splitAt}\n                onChange={this.handleSplitAfterChange}\n                required\n              >\n                {options}\n              </select>\n            </div>\n            <div className={rowClass}>\n              <span className=\"silver-label\">Left series</span>\n              <select\n                className={leftClass}\n                value={leftVal}\n                onChange={this.handleLeftTypeChange}\n                required\n              >\n                {leftTypes}\n              </select>\n            </div>\n            <div className={rowClass}>\n              <span className=\"silver-label\">Right series</span>\n              <select\n                className={rightClass}\n                value={rightVal}\n                onChange={this.handleRightTypeChange}\n                required\n              >\n                {rightTypes}\n              </select>\n            </div>\n          </div>\n\n          <div className=\"double-scale-buttons\">\n            <button\n              type=\"button\"\n              className={singleClass}\n              onClick={() => this.handleDoubleOrMixed('single')}\n            >\n              single\n            </button>\n            <button\n              type=\"button\"\n              className={mixedClass}\n              onClick={() => this.handleDoubleOrMixed('mixed')}\n            >\n              mixed\n            </button>\n            <button\n              type=\"button\"\n              className={doubleClass}\n              onClick={() => this.handleDoubleOrMixed('double')}\n            >\n              double\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  // DOUBLE JSX ends\n\n  // RENDER\n  render() {\n    return this.doubleJsx();\n  }\n}\n\nDoubleScale.propTypes = {\n  config: PropTypes.object,\n  chartTypes: PropTypes.array,\n  invertedChartTypes: PropTypes.array,\n  onValuesToScalesBody: PropTypes.func,\n};\n\nexport default DoubleScale;\n","// Handles indexed dot option\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Indexed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    // Events\n    this.handleIndexedChange = this.handleIndexedChange.bind(this);\n  }\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // HANDLE INDEXED CHANGE\n  // Event handler for the checkbox. Sends a boolean upwards...\n  handleIndexedChange({ target: { checked } }) {\n    const vals = {\n      component: 'indexed',\n      indexFlag: checked,\n      updateChart: true,\n    };\n    this.props.onValuesToScalesBody(vals);\n  }\n\n  // INDEXED JSX\n  // Called from render to assemble JSX\n  indexedJsx() {\n    const { config } = this.props;\n    const disable = config.indexPoint < 0;\n    const isIndexed = config.indexFlag;\n    let cName = 'silver-checkbox indexed-checkbox';\n    if (disable) {\n      cName = `${cName} checkbox-disabled`;\n    }\n    return (\n      <div className={`indexed-div ${disable ? 'disabled' : ''}`}>\n        <div className=\"indexed-label silver-label\">Index</div>\n        <div className=\"indexed-group\">\n          <div>Index series</div>\n\n          <input\n            className={cName}\n            type=\"checkbox\"\n            onChange={this.handleIndexedChange}\n            checked={isIndexed}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  // RENDER\n  render() {\n    return this.indexedJsx();\n  }\n}\n\nIndexed.propTypes = {\n  config: PropTypes.object,\n  onValuesToScalesBody: PropTypes.func,\n};\n\nexport default Indexed;\n","// Child of scales-fold-body.\n// Handles line:left/right or scatter:x/y log scale\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Log extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    // Events\n    this.handleLogChangeLeft = this.handleLogChangeLeft.bind(this);\n    this.handleLogChangeRight = this.handleLogChangeRight.bind(this);\n  }\n\n  // *** REACT LIFECYCLE STUFF ENDS ***\n\n  // SEND VALUES\n  // Called from checkbox event handlers. Assembles the\n  // object to pass back upstairs...\n  sendValues(side, log) {\n    const logObj = {\n      component: 'log',\n      log,\n      side,\n      updateChart: true,\n    };\n    // const { config } = this.props;\n    // const logObj = {\n    //   left: {\n    //     enabled: config.left.enabled,\n    //     log: config.left.log,\n    //   },\n    //   right: {\n    //     enabled: config.right.enabled,\n    //     log: config.right.log,\n    //   },\n    //   updateChart: true,\n    //   component: 'log',\n    // };\n    // logObj[side].log = log;\n    // // But if chart is mixed, inactive side is aligned to active\n    // // NOTE: is a log scale possible with mixed chart?\n    // // I suppose line and, say, stepline is possible...\n    // if (config.isMixed) {\n    //   if (side === 'left') {\n    //     logObj.right.log = log;\n    //   } else {\n    //     logObj.left.log = log;\n    //   }\n    // }\n    this.props.onValuesToScalesBody(logObj);\n  }\n  // SEND VALUES ends\n\n  // HANDLE LOG CHANGE LEFT/RIGHT\n  // Event handlers for the checkboxes\n  handleLogChangeLeft({ target: { checked } }) {\n    this.sendValues('left', checked);\n  }\n\n  handleLogChangeRight({ target: { checked } }) {\n    this.sendValues('right', checked);\n  }\n\n  // LOG JSX\n  // Called from render to assemble JSX\n  logJsx() {\n    const { config } = this.props;\n    // config has left/right with props log and enabled\n    let cNameLeft = 'silver-checkbox log-left-checkbox';\n    let cNameRight = 'silver-checkbox log-right-checkbox';\n    if (!config.left.enabled) {\n      cNameLeft = `${cNameLeft} checkbox-disabled`;\n    }\n    if (!config.right.enabled) {\n      cNameRight = `${cNameRight} checkbox-disabled`;\n    }\n    const logLeft = config.left.log;\n    const logRight = config.right.log;\n    // Axis label names\n    const labelLeft = config.left.label;\n    const labelRight = config.right.label;\n    return (\n      <div className=\"scales-log-div\">\n        <div\n          className={`log-label ${\n            !config.right.enabled && !config.left.enabled ? 'disabled' : ''\n          }`}\n        >\n          <span className=\"silver-label\" htmlFor=\"log-checkbox\">\n            Log scale\n          </span>\n        </div>\n\n        <div className=\"log-group-list\">\n          <div className={`log-row ${!config.right.enabled ? 'disabled' : ''}`}>\n            <div>{labelRight}</div>\n            <input\n              className={cNameRight}\n              type=\"checkbox\"\n              onChange={this.handleLogChangeRight}\n              checked={logRight}\n            />\n          </div>\n\n          <div className={`log-row ${!config.left.enabled ? 'disabled' : ''}`}>\n            <div>{labelLeft}</div>\n            <input\n              className={cNameLeft}\n              type=\"checkbox\"\n              onChange={this.handleLogChangeLeft}\n              checked={logLeft}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // RENDER\n  render() {\n    return this.logJsx();\n  }\n}\n\nLog.propTypes = {\n  config: PropTypes.object,\n  onValuesToScalesBody: PropTypes.func,\n};\n\nexport default Log;\n","// Button to share current panel's scale properties to other panels\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ShareScale extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    // Events\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  // HANDLE BUTTON CLICK\n  // Event handler for the button. Sends a nudge upstairs...\n  handleButtonClick() {\n    const vals = {\n      component: 'share-scale',\n      shareScale: true,\n      updateChart: true,\n    };\n    this.props.onValuesToScalesBody(vals);\n  }\n  // HANDLE BUTTON CLICK ends\n\n  // IS BUTTON DISABLED\n  isButtonDisabled() {\n    // NOTE: DURING INITIAL DEVEL THIS IS BACK TO FRONT\n    // const canShare = this.props.canShareScale;\n    // NEXT IS THE RIGHT ONE:\n    const canShare = !this.props.canShareScale;\n    return canShare;\n  }\n  // IS BUTTON DISABLED ENDS\n\n  // SHARE-SCALE JSX\n  // Called from render to assemble JSX\n  shareScaleJsx() {\n    // Disable button if:\n    //    only one panel\n    //    log scale\n    //    double scale\n    const disable = this.isButtonDisabled();\n    let cName = 'silver-button share-scale-button';\n    if (disable) {\n      cName = `${cName} button-disabled`;\n    }\n    return (\n      <div className={`share-scale-div ${disable ? 'disabled' : ''}`}>\n        <button\n          type=\"button\"\n          className={cName}\n          onClick={this.handleButtonClick}\n        >\n          Share scale\n        </button>\n      </div>\n    );\n  }\n\n  // RENDER\n  render() {\n    return this.shareScaleJsx();\n  }\n}\n\nShareScale.propTypes = {\n  canShareScale: PropTypes.bool,\n  onValuesToScalesBody: PropTypes.func,\n};\n\nexport default ShareScale;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ScaleSet from './bodyparts/scale';\n// As of Oct'20, Factor component excluded\n// import ScaleFactor from './bodyparts/factor';\nimport InvertScale from './bodyparts/invert';\nimport DoubleScale from './bodyparts/double-scale';\nimport Indexed from './bodyparts/indexed';\n// import Swap from './bodyparts/swap';\nimport Log from './bodyparts/log';\nimport ShareScale from './bodyparts/share-scale';\n\nclass ScalesFoldBody extends Component {\n  // *** REACT LIFECYCLE STUFF ***\n\n  static get defaultProps() {\n    return {\n      scalesLabelDefs: [\n        {\n          generalClass: 'silver-label',\n          specificClass: 'scales-label-blank',\n          display: 'Blank',\n        },\n        {\n          generalClass: 'silver-label',\n          specificClass: 'scales-label-high',\n          display: 'High',\n        },\n        {\n          generalClass: 'silver-label',\n          specificClass: 'scales-label-low',\n          display: 'Low',\n        },\n        {\n          generalClass: 'silver-label',\n          specificClass: 'scales-label-increment',\n          display: 'Increment',\n        },\n      ],\n    };\n  }\n\n  // CONSTRUCTOR\n  // Sets up the various event listeners...\n  // ...and the global value-container\n  constructor(props) {\n    super(props);\n    // Events\n    this.handleValuesFromScalesForm = this.handleValuesFromScalesForm.bind(\n      this,\n    );\n    // this.handleFactorValues = this.handleFactorValues.bind(this);\n    this.handleInvertValues = this.handleInvertValues.bind(this);\n    this.handleDoubleChange = this.handleDoubleChange.bind(this);\n    this.handleIndexedChange = this.handleIndexedChange.bind(this);\n    this.handleLogChange = this.handleLogChange.bind(this);\n    this.handleShareScale = this.handleShareScale.bind(this);\n  }\n  // CONSTRUCTOR ends\n\n  // TICK COUNTS MATCH\n  // Called from handleValuesFromScalesForm. Returns true\n  // if tickCount from adjusted side form is the same as\n  // the other side\n  tickCountsMatch(newSide, newT) {\n    let oldSide = 'left';\n    if (newSide === 'left') {\n      oldSide = 'right';\n    }\n    const oldT = this.props.config.mmi[oldSide].tickDensity;\n    return oldT === newT;\n  }\n  // TICK COUNTS MATCH ends\n\n  // HANDLE VALUES FROM SCALES FORM\n  handleValuesFromScalesForm(values) {\n    const scaleResult = values;\n    scaleResult.component = 'scales';\n    this.props.onValuesToFoldsWrapper(scaleResult);\n  }\n  // HANDLE VALUES FROM SCALES FORM ends\n\n  // HANDLE FACTOR VALUES\n  // Passes on values from Factor component\n  // handleFactorValues(values) {\n  //   const fResult = values;\n  //   // Just add the component flag\n  //   fResult.component = 'factor';\n  //   this.props.onValuesToFoldsWrapper(fResult);\n  // }\n  // HANDLE FACTOR VALUES ends\n\n  // HANDLE INVERT VALUES\n  // Passes on values from Invert component\n  handleInvertValues(values) {\n    const iResult = values;\n    iResult.component = 'invert';\n    this.props.onValuesToFoldsWrapper(iResult);\n  }\n  // HANDLE INVERT VALUES ends\n\n  // HANDLE DOUBLE CHANGE\n  handleDoubleChange(vals) {\n    const dResult = vals;\n    this.props.onValuesToFoldsWrapper(dResult);\n  }\n  // HANDLE DOUBLE CHANGE ends\n\n  // HANDLE INDEXED CHANGE\n  handleIndexedChange(val) {\n    const iResult = val;\n    this.props.onValuesToFoldsWrapper(iResult);\n  }\n  // HANDLE INDEXED CHANGE ends\n\n  // HANDLE LOG CHANGE\n  handleLogChange(val) {\n    const iResult = val;\n    this.props.onValuesToFoldsWrapper(iResult);\n  }\n  // HANDLE LOG CHANGE ends\n  // HANDLE INDEXED CHANGE ends\n\n  // HANDLE SHARE SCALE\n  handleShareScale(val) {\n    const iResult = val;\n    this.props.onValuesToFoldsWrapper(iResult);\n  }\n  // HANDLE SHARE SCALE ends\n\n  // GET ONE LABEL JSX\n  getOneLabelJsx(def, keyStr) {\n    const cName = `${def.generalClass} ${def.specificClass}`;\n    return (\n      <span key={keyStr} className={cName}>\n        {def.display}\n      </span>\n    );\n  }\n  // GET ONE LABEL JSX ends\n\n  // MAKE SCALES LABELS JSX\n  makeScalesLabelsJsx() {\n    const labelsArray = [];\n    const labelDefs = this.props.scalesLabelDefs;\n    for (let iii = 0; iii < labelDefs.length; iii++) {\n      // (Arg 3: all labels are un-disabled)\n      const thisLab = this.getOneLabelJsx(labelDefs[iii], iii);\n      labelsArray.push(thisLab);\n    }\n    return <div className=\"scales-values-labels\">{labelsArray}</div>;\n  }\n  // MAKE SCALES LABELS JSX ends\n\n  // MAKE SCALES JSX ARRAY\n  // Called from makesScalesJsx, to assemble an array\n  // of as many instances of the Scale component as\n  // are required\n  makeScaleComponentsJsxArray() {\n    const jsxArray = [];\n    const config = this.props.config.scales;\n    // Array of mmi definitions\n    const mmiArray = config.mmiArray;\n    // I need to compare tick counts\n    for (let scNo = 0; scNo < mmiArray.length; scNo++) {\n      const scaleConfig = {};\n      scaleConfig.mmi = Object.assign({}, mmiArray[scNo]);\n      scaleConfig.index = scNo;\n      // NOTE: I don't think I need to pass 'other' side's\n      // tickDensity. I just need to know whether they\n      // match or not...\n      scaleConfig.tickCountsMisMatch = config.tickCountsMisMatch;\n      scaleConfig.maximumIncrements = config.maximumIncrements;\n      const key = `scale-${scNo}`;\n      const cName = `scaleset-div scales-values-${scNo}`;\n      // Imported child component\n      const ScaleComponent = ScaleSet;\n\n      const scaleJsx = (\n        <ScaleComponent\n          key={key}\n          className={cName}\n          config={scaleConfig}\n          onValuesToScalesBody={this.handleValuesFromScalesForm}\n        />\n      );\n\n      jsxArray.push(scaleJsx);\n    }\n    return jsxArray;\n  }\n  // MAKE SCALES JSX ARRAY ends\n\n  // makeFactorJsx() {\n  //   const fConfig = this.props.config.factor;\n  //   const fJsx = (\n  //     <ScaleFactor\n  //       config={fConfig}\n  //       onFactorsToScalesBody={this.handleFactorValues}\n  //     />\n  //   );\n  //   return fJsx;\n  // }\n\n  makeInvertJsx() {\n    const fConfig = this.props.config.invert;\n    const fJsx = (\n      <InvertScale\n        config={fConfig}\n        onInvertToScalesBody={this.handleInvertValues}\n      />\n    );\n    return fJsx;\n  }\n\n  makeDoubleScaleJsx() {\n    const doubleConfig = this.props.config.doubleScale;\n    const dsJsx = (\n      <DoubleScale\n        config={doubleConfig}\n        onValuesToScalesBody={this.handleDoubleChange}\n      />\n    );\n    return dsJsx;\n  }\n\n  makeIndexedJsx() {\n    const indexedConfig = this.props.config.indexed;\n    const iJsx = (\n      <Indexed\n        config={indexedConfig}\n        onValuesToScalesBody={this.handleIndexedChange}\n      />\n    );\n    return iJsx;\n  }\n\n  makeLogJsx() {\n    const logConfig = this.props.config.log;\n    const logJsx = (\n      <Log config={logConfig} onValuesToScalesBody={this.handleLogChange} />\n    );\n    return logJsx;\n  }\n\n  makeShareScaleJsx() {\n    const canShareScale = this.props.config.scales.canShareScale;\n    const csJsx = (\n      <ShareScale\n        canShareScale={canShareScale}\n        onValuesToScalesBody={this.handleShareScale}\n      />\n    );\n    return csJsx;\n  }\n\n  // MAKE SCALES JSX\n  makeScalesJsx() {\n    const scaleJsxArray = this.makeScaleComponentsJsxArray();\n    const scales = <div className=\"scales-values-div\">{scaleJsxArray}</div>;\n    // const factorJsx = this.makeFactorJsx();\n    const indexedJsx = this.makeIndexedJsx();\n    const invertJsx = this.makeInvertJsx();\n    const logJsx = this.makeLogJsx();\n    const doubleScaleJsx = this.makeDoubleScaleJsx();\n    // Looking ahead: this would generate the 'Share Scale' sub-component\n    const shareScaleJsx = this.makeShareScaleJsx();\n    // {factorJsx}\n    return (\n      <div className=\"fold-body scales-body\">\n        {scales}\n        {indexedJsx}\n        {invertJsx}\n        {logJsx}\n        {doubleScaleJsx}\n        {shareScaleJsx}\n      </div>\n    );\n  }\n  // MAKE SCALES JSX ends\n\n  // RENDER\n  render() {\n    const scalesJsx = this.makeScalesJsx();\n    return scalesJsx;\n  }\n}\n\n// PROP TYPES\nScalesFoldBody.propTypes = {\n  config: PropTypes.object,\n  scalesLabelDefs: PropTypes.array,\n  // Callback of returned data\n  onValuesToFoldsWrapper: PropTypes.func,\n};\n\nexport default ScalesFoldBody;\n","// Handlers to check date validity\n// Also includes date conversion handlers, which\n// might move into a separate component...\n\n// GET MONTH LIST\n// Returns an array of short or long month names\nexport function getMonthList(long) {\n  let mArray = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  if (long) {\n    mArray = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n  }\n  return mArray;\n}\n\n// MONTH VALS ARE QUARTERS\n// Called form doInitialQuartersTest. Given three numbers,\n// it verifies that they're 'monthable', then checks for\n// a 3-month increment, allowing for a year-turn\nexport function monthValsAreQuarters(valA, valB, valC) {\n  const qVal = 3;\n  let result = false;\n  const maxDate = Math.max(valA, valB, valC);\n  // So months:\n  if (maxDate < 13) {\n    if (valB - valA === qVal || valB < valA) {\n      if (valC - valB === qVal || valC < valB) {\n        result = true;\n      }\n    }\n  }\n  return result;\n}\n// MONTH VALS ARE QUARTERS ends\n\n// DO INITIAL QUARTERS TEST\n// Called from doFirstUsUkTest. Checks for quarters in dmy/mdy format\n// Arg is array of arrayified dates\nexport function doInitialQuartersTest(dArray) {\n  let result = '';\n  // First, look for UK d/m/y\n  // Get 2nd element in each of the first 3 elements of the array\n  // If these are months-as-quarters we'll see an increment\n  // of 3 or a reversion to a lower (1st quarter) value...\n  let valA = +dArray[0][1];\n  let valB = +dArray[1][1];\n  let valC = +dArray[2][1];\n  if (monthValsAreQuarters(valA, valB, valC)) {\n    result = 'dmy-date';\n  }\n  // Ditto for US, looking at first element (m/d/y)\n  valA = +dArray[0][0];\n  valB = +dArray[1][0];\n  valC = +dArray[2][0];\n  if (monthValsAreQuarters(valA, valB, valC)) {\n    result = 'mdy-date';\n  }\n  return result;\n}\n// DO INITIAL QUARTERS TEST ends\n\n// DO INITIAL DMY-MYD TEST\n// Called from doFirstUsUkTest, to check whether\n// first cat is dmy or myd\nexport function doInitialDmyMdyTest(dArray) {\n  let result = '';\n  // First check for a date that breaks the max month value:\n  const maxM = 12;\n  for (let iii = 0; iii < dArray.length; iii++) {\n    if (dArray[iii][0] > maxM) {\n      // First element > 12, so can't be mdy\n      result = 'dmy-date';\n      break;\n    } else if (dArray[iii][1] > maxM) {\n      // 2nd element > 12, so can't be dmy\n      result = 'mdy-date';\n      break;\n    }\n  }\n  // If we got a result, return it\n  if (result.length > 0) {\n    return result;\n  }\n  // Still here? Another test!\n  // (I could combine them, but that way madness lies)\n  const sep = 9;\n  const apr = 4;\n  // If I can get a value > September, followed\n  // by a value < April, that's a giveaway\n  for (let iii = 0; iii < dArray.length - 1; iii++) {\n    if (dArray[iii][0] > sep && dArray[iii + 1][0] < apr) {\n      result = 'mdy-date';\n      break;\n    } else if (dArray[iii][1] > sep && dArray[iii + 1][1] < apr) {\n      result = 'dmy-date';\n      break;\n    }\n  }\n  // If it's not definitely dmy or mdy, let's default to dmy\n  return 'dmy-date';\n}\n// DO INITIAL DMY-MYD TEST\n\n// DO FIRST US-UK TEST\n// Called by RawDataUtils.getInitialDateFormat.\n// Arg is an array of arrayified dates, from which\n// we determine whether dates are in mdy or dmy format\n// Returns 'mdy-date' or 'dmy-date' (or 'invalid')\nexport function doFirstUsUkTest(dArray) {\n  // First, test for QUARTERS. Returns 'dmy-date',\n  // 'mdy-date', or empty string\n  // (Remember: this is just an initial test)\n  const qFormat = doInitialQuartersTest(dArray);\n  if (qFormat.length > 0) {\n    return qFormat;\n  }\n  // Still here? Check for non-quarterly dates\n  const dFormat = doInitialDmyMdyTest(dArray);\n  return dFormat;\n}\n// DO FIRST US-UK TEST ends\n\n// CAT IS YMD\n// Called from RawdataUtils.validateCategories(?)\n// Crude check for date in yyyy mm dd (hh mm) format\n// Arg is an array\nexport function dateIsYmd(dArray) {\n  let result = false;\n  // All numbers; at least 3 elements; element 1 has 4 chars\n  if (!isNaN(dArray.join('')) && dArray.length > 2 && dArray[0].length === 4) {\n    result = true;\n  }\n  return result;\n}\n// CAT IS YMD\n\n// ALL CATS ARE SPELLED DATES\n// Called from validateCategories to check that ALL categories\n// are dates with spelled month\n// Arg 1 is array of arrayified dates\n// Arg 2 flags 'dd Mmm(m) yyyy' or 'Mmm yy' format\nexport function allCatsAreSpelledDates(dArray, catType) {\n  let result = '';\n  for (let dNo = 0; dNo < dArray.length; dNo++) {\n    if (catType === 'spell-date-dmy') {\n      if (!isSpelledDMYFormat(dArray[dNo])) {\n        // On error, returns location\n        result = (dNo + 2).toString();\n        break;\n      }\n    } else if (!isSpelledMYFormat(dArray[dNo])) {\n      result = (dNo + 2).toString();\n      break;\n    }\n  }\n  return result;\n}\n// ALL CATS ARE SPELLED DATES ends\n\n// CAT IS FROM-TO\n// Called from getBasicCategoryType to check for\n// from-to categories\nexport function catIsFromTo(cat) {\n  // 2004-05?\n  const hyphenSplit = cat.split(/-/g);\n  if (hyphenSplit.length === 2 && !isNaN(hyphenSplit.join(''))) {\n    return true;\n  }\n  // 2004 to 2005\n  const spaceSplit = cat.split(' to ');\n  if (spaceSplit.length === 2 && !isNaN(spaceSplit.join(''))) {\n    return true;\n  }\n  return false;\n}\n// CAT IS FROM-TO ends\n\n// GET BASIC CATEGORY TYPE\n// Called from  RawdataUtils.validateCategories to check\n// whether first cat is string, number, or date\nexport function getBasicCategoryType(cat) {\n  const dateSeps = /[-/:\\s]/g;\n  // Quarters\n  if (catIsQuarter(cat.split(dateSeps))) {\n    return 'quarter';\n  }\n  // Numbers\n  if (!isNaN(cat)) {\n    // It's a number of some sort. Integer?\n    if (parseInt(cat, 10).toString() === cat) {\n      return 'integer';\n    }\n    // Treat non-integers as strings (for now, at least)\n    return 'string';\n  }\n  // '2006-08' and '2006 to 2008 are considered a string\n  if (catIsFromTo(cat)) {\n    return 'string';\n  }\n  const unseparatedCat = cat.replace(dateSeps, '');\n  if (!isNaN(unseparatedCat)) {\n    // Date in number format\n    return 'number-date';\n  }\n  if (!isNaN(Date.parse(cat))) {\n    // Spelled date? It looks like a date...\n    // ...but it's not quite that simple\n    // We may have dd Mmm yyyy or the obnoxious\n    // Mmm-yy!\n    const splitDate = cat.split(dateSeps);\n    if (splitDate.length === 3 && isSpelledDMYFormat(splitDate)) {\n      return 'spell-date-dmy';\n    }\n    if (splitDate.length === 2 && isSpelledMYFormat(splitDate)) {\n      return 'spell-date-my';\n    }\n  }\n  // If all else fails:\n  return 'string';\n}\n// GET BASIC CATEGORY TYPE ends\n\n// GET MONTH STRING\n// Args are a number and a flag. Returns short or long month string\nexport function getMonthString(mNo, isShort) {\n  let mArray = [];\n  if (isShort) {\n    mArray = getMonthList(false);\n  } else {\n    mArray = getMonthList(true);\n  }\n  return mArray[mNo];\n}\n// GET MONTH STRING ends\n\n// GET MONTH NUMBER\n// Convert month name to number\nexport function getMonthNumber(mStr) {\n  let mNo = -1;\n  const mArray = getMonthList(false);\n  const shortM = mStr.slice(0, 3);\n  mNo = mArray.indexOf(shortM);\n  // Not found returns -1, in which case I'll return zero\n  // Otherwise month number from Jan=1\n  return mNo + 1;\n}\n// GET MONTH NUMBER ends\n\n// IS SPELLED DMY FORMAT\n// Called from allCatsAreSpelledDates...\n// Arg is one date as array. Returns true for\n// 'dd Mmm(m) yyyy' format\n// NOTE: doesn't recognise Mmm dd yyyy\nexport function isSpelledDMYFormat(dArray) {\n  // Now we're looking for two numbers (day and year)...\n  if (isNaN(dArray[0]) || isNaN(dArray[2])) {\n    return false;\n  }\n  // ... a month\n  // List of long months as lower case string\n  const mString = getMonthList(true)\n    .join()\n    .toLowerCase();\n  // Is my putative month in that list?\n  // (will find both 'jan' and 'january')\n  if (mString.includes(dArray[1].toLowerCase())) {\n    return true;\n  }\n  // If we get here...\n  return false;\n}\n// IS SPELLED DMY FORMAT\n\n// IS SPELLED MY FORMAT\n// Called from allCatsAreSpelledDates...\n// Arg is one date as array. Returns true for\n// 'Mmm yy' format only\n// (Date is amended to dd Mmm yyyy later)\nexport function isSpelledMYFormat(dArray) {\n  // Year\n  if (isNaN(dArray[1])) {\n    return false;\n  }\n  // Month\n  // List of long months as lower case string\n  const mString = getMonthList(true)\n    .join()\n    .toLowerCase();\n  // Is my putative month in that list?\n  // (will find both 'jan' and 'january')\n  if (mString.includes(dArray[0].toLowerCase())) {\n    return true;\n  }\n  // If we get here...\n  return false;\n}\n// IS SPELLED MY FORMAT\n\n// QUARTER TO DATE\n// Called from convertQuarters to convert Qn to 'dd Mmmm'\nexport function quarterToDate(qqq) {\n  let result = '';\n  switch (qqq) {\n    case 'q1':\n      result = '15 February';\n      break;\n    case 'q2':\n      result = '15 May';\n      break;\n    case 'q3':\n      result = '15 August';\n      break;\n    default:\n      result = '15 November';\n  }\n  return result;\n}\n\n// CONVERT QUARTERS\n// Called from RawdataUtils.validateCategories\n// to convert \"Q\" format to dd mmmm yyyy\nexport function convertQuarters(catArray) {\n  // Check if we need to convert 'yy' to 'yyyy'\n  // Might as well hard-code...\n  const cPrefix = '20';\n  const addCentury = catArray[0][1].length === 2;\n  const dArray = [];\n  for (let iii = 0; iii < catArray.length; iii++) {\n    const myD = catArray[iii];\n    if (addCentury) {\n      myD[1] = `${cPrefix}${myD[1]}`;\n    }\n    // So now I have, say, ['Q1', '2017']; force lower case...\n    myD[0] = quarterToDate(myD[0].toLowerCase());\n    // Recombine as 'dd mmmm yyyy'\n    const dStr = `${myD[0]}, ${myD[1]}`;\n    dArray.push(dStr);\n  }\n  return dArray;\n}\n// CONVERT QUARTERS ends\n\n// CAT IS QUARTER\n// Called from RawDataUttils.getCategoryType to check for 'Qn yy(yy)' format\n// Arg is an array\nexport function catIsQuarter(qArray) {\n  let isQ = false;\n  if (qArray.length === 2) {\n    if (!isNaN(qArray[1])) {\n      // We've got a year as number, what about the first element?\n      // Look for Q (or q) and any digit\n      if (/^[qQ]\\d$/.test(qArray[0])) {\n        isQ = true;\n      }\n    }\n  }\n  return isQ;\n}\n// CAT IS QUARTER ends\n\n// ALL CATS ARE QUARTERS\n// Called from validateCategories to do 'Q' format consistency check\n// (Individual dates are already arrayified)\nexport function allCatsAreQuarters(catArray) {\n  let result = '';\n  for (let cNo = 0; cNo < catArray.length; cNo++) {\n    if (!catIsQuarter(catArray[cNo])) {\n      result = (cNo + 2).toString();\n      break;\n    }\n  }\n  return result;\n}\n// ALL CATS ARE QUARTERS ends\n\n// CONVERT TO UNAMBIGUOUS FORMAT\n// Called from convertDmy. Converts dates in any formet\n// to 'dd Mmmm yyyy' (hh:mm unaffected -- I hope).\n// Updates array by ref.\nexport function convertToUnambiguousFormat(dArray, dType) {\n  // Default 'dmy' (+ hh:mm?)\n  let dPos = 0;\n  let mPos = 1;\n  let yPos = 2;\n  if (dType === 'mdy-date') {\n    dPos = 1;\n    mPos = 0;\n  } else if (dType === 'ymd-date') {\n    dPos = 2;\n    mPos = 1;\n    yPos = 0;\n  }\n  // Convert dmy to dd Mmm yyyy\n  dArray.forEach((myD, dNo) => {\n    // Reserve any hh:mm...\n    const timeEls = myD.slice(3);\n    // Convert dmy part of date\n    let formattedStr = `${myD[dPos]} ${getMonthString(\n      Number(myD[mPos]) - 1,\n      true,\n    )} ${myD[yPos]}`;\n    // Append any time\n    if (timeEls.length > 0) {\n      formattedStr = `${formattedStr} ${timeEls.join(':')}`;\n    }\n    dArray[dNo] = formattedStr;\n  });\n}\n// CONVERT TO UNAMBIGUOUS FORMAT ends\n\n// MONTHS ARE PLAUSIBLE\n// Called from convertDmy. Checks that I'm not breaking\n// basic limits for months (or quarters)\nexport function monthsArePlausible(dArray, dType) {\n  let monthsOk = true;\n  // Check that all 'mm' are plausible\n  let mElement = 1;\n  if (dType === 'mdy-date') {\n    mElement = 0;\n  }\n  // Still here? OK, let's loop through and test months are OK\n  // Check months for a value > 12\n  const maxM = 12;\n  // If I can get a value > September, followed\n  // by a value < April, that's not good\n  const sep = 9;\n  const apr = 4;\n  // (remember: months are still strings, from 1-12), which\n  // should indicate that we're looking at m/d/y format...\n  const dLen = dArray.length;\n  for (let dNo = 0; dNo < dLen; dNo++) {\n    if (dArray[dNo][mElement] > maxM) {\n      monthsOk = false;\n      break;\n    } else if (dArray[dNo][mElement] > sep) {\n      // Avoid hitting end of array\n      if (dNo < dLen - 1) {\n        if (dArray[dNo + 1][mElement] < apr) {\n          monthsOk = false;\n          break;\n        }\n      }\n    }\n  }\n  return monthsOk;\n}\n// MONTHS ARE PLAUSIBLE ends\n\n// GET YY DATE POSITION\n// Called from convertDmy to check a date for 'yy'\n// (as against 'yyyy') format. If date *is* 'yy',\n// returns index of 'yy' (if 'yyyy' returns -1)\n// Args are one date, as array; and format\nexport function getYyDatePosition(myD, dType) {\n  let yEl = 2;\n  if (dType === 'ymd-date') {\n    yEl = 0;\n  }\n  // If the year part of the date is 'yyyy', set to -1\n  if (myD[yEl].length === 4) {\n    yEl = -1;\n  }\n  return yEl;\n}\n// GET YY DATE POSITION ends\n\n// ADD CENTURIES\n// Called from convertDmy to force 'yy' to 'yyyy'\nexport function addCenturies(dArray, dType) {\n  // Might as well hard-code: logic is that if dates bridge\n  // century they should be yyyy. If they're all, say,\n  // '19-' the idiot should have said so!\n  // (This might be done more efficiently with check against getFullYear)\n  const cPrefix = '20';\n  // Assume consistency\n  const yearPos = getYyDatePosition(dArray[0], dType);\n  // Start by splitting the strings into an array\n  if (yearPos >= 0) {\n    dArray.forEach((myD, iii) => {\n      // If we fixed Google-number-date, year is already yyyy, so\n      if (dArray[iii][yearPos].length === 2) {\n        dArray[iii][yearPos] = `${cPrefix}${myD[yearPos]}`;\n      }\n    });\n  }\n}\n// ADD CENTURIES ends\n\n// ARRAYIFY ALL DATES\n// Called from RawDataUtils.validateCategories\n// Converts all date strings into arrays\nexport function arrayifyAllDates(dArray) {\n  // Arrayify the strings:\n  const dSeps = /[-/:\\s]/g;\n  dArray.forEach((myD, iii) => {\n    dArray[iii] = myD.split(dSeps);\n  });\n}\n// ARRAYIFY ALL DATES ends\n\n// CONVERT D-M-Y\n// Called from RawDataUtils.ValidateCategories.\n// Args are entire array of arrayified dates, and type\n// (hm-date, dmy-date, mdy-date or ymd-date)\nexport function convertDmy(dArray, dType) {\n  // We may need to convert 'yy' to 'yyyy'\n  addCenturies(dArray, dType);\n  // Convert dates to 'dd Mmm yyyy (hh:mm)'\n  convertToUnambiguousFormat(dArray, dType);\n  return dArray;\n}\n// CONVERT D-M-Y ends\n\n// GOOGLE NUMBER TO DATE\n// Called from fixDateType\n// Converts a number in Google sheet categories to a date\n// as 'dd/mm/yyyy'\n// NOTE: not entirely foolproof. I'm rather hoping that\n// upstream checks have secured the ground, but watch out!!\nexport function googleNumberToDate(gNo) {\n  // Fcn converts '4' to '04'\n  const pad = val => {\n    let str = val.toString();\n    if (str.length < 2) {\n      str = `0${str}`;\n    }\n    return str;\n  };\n  // Google date zero\n  const theDate = new Date('30 December 1899');\n  // Add number of days, and convert to dd/mm/yyyy\n  theDate.setDate(theDate.getDate() + parseInt(gNo, 10));\n  const y = theDate.getFullYear().toString();\n  const m = pad(theDate.getMonth() + 1);\n  const d = pad(theDate.getDate());\n  // const dateAsArray = `${pad(d)}/${pad(m)}/${y}`;\n  return { d, m, y };\n}\n// GOOGLE NUMBER TO DATE ends\n\n// DATE IS DMY OR MDY\n// Called from doDmy/MydConsistencyCheck, to verify\n// that a date is valid dmy or myd\n// Arg 1: one date as an array\n// Arg 2: true=dmy; false=mdy\n// Also fixes Google-introduced 'Mmmm' anomaly, if found\nexport function dateIsDmyOrMdy(dArray, testDmy) {\n  // Arrayified, so can't check for colon\n  // if (dArray.length > 3 && !dStr.includes(':')) {\n  //   // More than 3 elements must include hh:mm\n  //   return false;\n  // }\n  // Google can unilaterally convert dates to a number. So...\n  if (dArray.length === 1 && !isNaN(dArray[0])) {\n    // I need consistency with overall 'yy/yyyy' style\n\n    // Convert number to d/m/y as array\n    // NOTE: this always returns *some* date, which isn't\n    // checked for plausibility. Revisit... one day.\n    const dObj = googleNumberToDate(dArray[0]);\n    // Update by ref\n    dArray[0] = dObj.d;\n    dArray.push(dObj.m);\n    dArray.push(dObj.y);\n    return true;\n  }\n  // Still here? Check number of elements\n  if (dArray.length < 3) {\n    return false;\n  }\n  // Check the month is legal\n  // Element to test for month as number:\n  let mPlace = 0;\n  if (testDmy) {\n    mPlace = 1;\n  }\n  let mVal = dArray[mPlace];\n  // First: if the month is a string, try to convert to number\n  if (isNaN(mVal)) {\n    mVal = getMonthNumber(mVal);\n    // If we failed to find a month name to convert, fail:\n    if (mVal === 0) {\n      return false;\n    }\n  }\n  // Still here? Month number in range?\n  if (mVal < 0 || mVal > 12) {\n    return false;\n  }\n  // If we got this far:\n  dArray[mPlace] = mVal;\n  return true;\n}\n// DATE IS DMY OR MDY\n\n// DO DMY CONSISTENCY CHECK\n// Called from RawdateUtils.validateCategories\n// to check that all dates are dmy. Returns\n// the number of the row where any error occurred\nexport function doDmyConsistencyCheck(dArray) {\n  let result = '';\n  for (let dNo = 0; dNo < dArray.length; dNo++) {\n    if (!dateIsDmyOrMdy(dArray[dNo], true)) {\n      result = (dNo + 2).toString();\n      break;\n    }\n  }\n  return result;\n}\n// DO DMY CONSISTENCY CHECK ends\n\n// DO MDY CONSISTENCY CHECK\n// Called from RawdateUtils.validateCategories\n// to check that all dates are mdy\nexport function doMdyConsistencyCheck(dArray) {\n  let result = '';\n  for (let dNo = 0; dNo < dArray.length; dNo++) {\n    if (!dateIsDmyOrMdy(dArray[dNo], false)) {\n      result = (dNo + 2).toString();\n      break;\n    }\n  }\n  return result;\n}\n// DO MDY CONSISTENCY CHECK ends\n\n// DO YMD CONSISTENCY CHECK\n// Called from RawdateUtils.validateCategories\n// to check that all dates are yyyy mm dd\nexport function doYmdConsistencyCheck(dArray) {\n  let result = '';\n  for (let dNo = 0; dNo < dArray.length; dNo++) {\n    if (!dateIsYmd(dArray[dNo])) {\n      result = (dNo + 2).toString();\n      break;\n    }\n  }\n  return result;\n}\n// DO YMD CONSISTENCY CHECK ends\n\n// ADJUST YEARS BY\n// Called from getYearsAdjustment. For numbers or dates < 1000\n// Date.parse is... unreliable. So for these numbers I get\n// a value, in thousands, that will be inferentially added\n// to them so that Javascipt will parse them, then\n// subsequently subtracted!\nexport function adjustYearsBy(val) {\n  let result = 0;\n  const compareTo = -1;\n  const thou = 1000;\n  if (val > compareTo) {\n    // Zero+ returns 1000\n    result = thou;\n  } else {\n    // BC dates will return enough millennia to get to +1000\n    result = Math.abs(Math.floor(val / thou) * thou) + thou;\n  }\n  return result;\n}\n// ADJUST YEARS BY ends\n\n// GET YEARS ADJUSTMENT\n// Major KLUDGE for dates/numbers < 1000. I'm going to add whatever\n// is necessary to numbers to get them > 999 and append that amount\n// to the mix, to subtract later...\nexport function getYearsAdjustment(catArray) {\n  let adjustment = 0;\n  const firstCat = parseInt(catArray[0], 10);\n  const lastCat = parseInt(catArray[catArray.length - 1], 10);\n  const thou = 1000;\n  if (firstCat < thou || lastCat < thou) {\n    adjustment = adjustYearsBy(Math.min(firstCat, lastCat));\n  }\n  return adjustment;\n}\n// GET YEARS ADJUSTMENT\n\n// FIX MMM-YY DATES\n// Called from RawdataUtils.validateCategories. Converts\n// dates in Mmm-yy format to 15 Mmm yyyy, by ref\n// (Format is a nasty Excel fuckabout, dear to EIU)\nexport function fixMmmYyDates(dArray) {\n  // const fixedDates = dArray.map(item => {\n  //   // item is a date as ['Mmm', 'yy']\n  //   // Check year is yyyy\n  //   const year = item[1].toString();\n  //   if (year.length === 2) {\n  //     item[1] = `20${year}`;\n  //   }\n  //   item.unshift('15');\n  //   return item;\n  // })\n  // return fixedDates;\n  for (const dNo in dArray) {\n    const thisD = dArray[dNo];\n    // Date as ['Mmm', 'yy']\n    // Check year is yyyy\n    const year = thisD[1].toString();\n    if (year.length === 2) {\n      // Assumes dates are 21st century\n      thisD[1] = `20${year}`;\n    }\n    // Prepend mid-month date\n    thisD.unshift('15');\n  }\n}\n// FIX MMM-YY DATES\n","// Function dupsInArray is called to check for duplicate\n// header and category strings\n\n// FIND DUP IN ARRAY\n// Called from dupsInArray. Returns an array of dups (string and index)\nexport function findDupIndex(dArray) {\n  const duplicate = dArray.reduce((acc, currentValue, index, array) => {\n    if (array.indexOf(currentValue) !== index && !acc.includes(currentValue)) {\n      acc.push({\n        string: currentValue,\n        index,\n      });\n    }\n    return acc;\n  }, []);\n  return duplicate;\n}\n// FIND DUP IN ARRAY ends\n\n// DUPS IN ARRAY\n// Called from RawDataUtils.validateDataArray to flag duplicate series headers\n// And from CategoryUtils.validateCategories to flag duplicate category strings\n// Returns array of duplicates (string and index)\nexport function dupsInArray(hArray) {\n  const originalLen = hArray.length;\n  const strippedLen = Array.from(new Set(hArray)).length;\n  let dups = [];\n  if (strippedLen < originalLen) {\n    dups = findDupIndex(hArray);\n  }\n  return dups;\n}\n// DUPS IN ARRAY ends\n","// Category-triage utilities\n// 'Dependent' of RawDataUtils\n\nimport * as DateCheckUtils from './datecheck-utilities';\nimport * as DupUtils from './duplicate-utilities';\n\n// NB duplicate from SilverChart\n// import FixYearInDate from '../../../chartwrapper/chartside-utilities/fix-year';\nconst FixYearInDate = function(date) {\n  // If date is just year, append 'Jan'\n  if (!isNaN(date)) {\n    date = date.toString();\n    if (date.length === 4) {\n      // Year as 'yyyy' -- force!\n      date = `January 1 ${date}`;\n    }\n  }\n  return new Date(date);\n};\n\n// ISOLATE CATEGORIES\n// Called from RawDataUtils.unpickData to extract array of categories\n// from 'block' of raw data\nexport function isolateCategories(dataArray) {\n  // dataArray is an array (by rows) of arrays (columns)\n  // I want just categories, without header\n  // And strip rogue commas ('14 April, 2020')\n  const categories = dataArray.map((row, rowNo) => {\n    let cat = row[0];\n    if (rowNo > 0) {\n      cat = cat.replace(',', '');\n    }\n    return cat;\n  });\n  categories.shift();\n  return categories;\n}\n// ISOLATE CATEGORIES ends\n\n// TRIAGE CATEGORIES\n// Called from RawDataUtils.unpickData\n// Possible categoryTypes are: 'invalid', 'strings', 'time'\n// Args are array of categories, timeFormats definitions, no. of ms in a day\nexport function triageCategories(catArray, timeFormats, dayInMs) {\n  // Returns an object with 2 props: category type,\n  // and an array of categories with dates in unambiguous format\n  const validatedCategoryObj = validateCategories(catArray);\n  const categoryType = validatedCategoryObj.catType;\n  // The default return object:\n  const triagedObj = {\n    categoryType,\n    catError: false,\n    validityMsg: validatedCategoryObj.validityMsg,\n  };\n  if (categoryType === 'invalid') {\n    // If the categories are invalid, set error prop and return\n    triagedObj.catError = true;\n    return triagedObj;\n  }\n  // String categories have no special treatment\n  const yearsAdjustedBy = validatedCategoryObj.yearsAdjustedBy;\n  catArray = validatedCategoryObj.catArray;\n  // Time series:\n  if (categoryType === 'time' || categoryType.includes('-date')) {\n    // Get time interval: years, months, days, hours...\n    triagedObj.timeFormats = getTimeObj(\n      catArray,\n      timeFormats,\n      dayInMs,\n      yearsAdjustedBy,\n    );\n  }\n  // Append the (possibly 1000-adjusted) array of categories\n  triagedObj.catArray = catArray;\n  triagedObj.yearsAdjustedBy = yearsAdjustedBy;\n  return triagedObj;\n}\n// TRIAGE CATEGORIES ends\n\n// VALIDATE CATEGORIES\n// Called from triageCategories. Passed an array of categories,\n// checks whether number, date, string or invalid...\n// NOTE: catArray does NOT include categories header\nexport function validateCategories(catArray) {\n  let catType = '';\n  const validityObj = {\n    catType,\n    catArray,\n    yearsAdjustedBy: 0,\n    validityMsg: '',\n  };\n  // First: don't hang around for duplicates\n  // (if dups found, updates validityObj by ref)\n  if (findDuplicateCats(catArray, validityObj)) {\n    return validityObj;\n  }\n  // Now, let's rule out strings\n  catType = areCatsStrings(catArray);\n  if (catType === 'string') {\n    validityObj.catType = 'string';\n    return validityObj;\n  }\n  // Next: what about integers? (potential yyyy)...\n  if (catType === 'integer') {\n    areCatsTimeOrString(catArray, validityObj);\n    return validityObj;\n  }\n  // ...or non-integer number\n  if (catType === 'number') {\n    // FIXME: treated as strings for now\n    // if (!allCatsAreYearDates(catArray)) {\n    // If we don't get consistent numbers, it's strings:\n    validityObj.catType = 'string';\n    return validityObj;\n  }\n  // Still here?\n  // Now we're down to dates, so ARRAYIFY\n  DateCheckUtils.arrayifyAllDates(catArray);\n\n  // HERE***********************************\n\n  // If first cat is *spelled* date, do consistency check\n  let errorLocation = '';\n  if (catType.includes('spell-date')) {\n    errorLocation = DateCheckUtils.allCatsAreSpelledDates(catArray, catType);\n    if (errorLocation.length > 0) {\n      // Inconsistency is fatal:\n      validityObj.catType = 'invalid';\n      validityObj.validityMsg = `inconsistent date format at column A, row ${errorLocation}. Data in col A will be processed as text.`;\n    } else {\n      validityObj.catType = 'time';\n    }\n    // Aug'20: special fix for 'Mmm yy' dates\n    if (catType === 'spell-date-my') {\n      DateCheckUtils.fixMmmYyDates(validityObj.catArray);\n    }\n    return validityObj;\n  }\n  // Ditto quarters in 'Q' format\n  if (catType === 'quarter') {\n    errorLocation = DateCheckUtils.allCatsAreQuarters(catArray);\n    if (errorLocation.length > 0) {\n      // Inconsistency is fatal:\n      validityObj.catType = 'invalid';\n      validityObj.validityMsg = `inconsistent date format at column A, row ${errorLocation}. Data in col A will be processed as text.`;\n    } else {\n      validityObj.catType = 'time';\n      // Convert to dd Mmm yyyy\n      validityObj.catArray = DateCheckUtils.convertQuarters(catArray);\n    }\n    return validityObj;\n  }\n\n  // Still here? Dates as numbers! Oh, good.\n  // Before we can do a complete consistency check, we\n  // have to pin down the date shape (dmy/mdy/ymd) as\n  // indicated at the top of the sequence.\n  catType = getInitialDateFormat(catArray);\n\n  // catType is one of 'ymd-date', 'dmy-date' or 'mdy-date'\n  // Consistency checks\n  errorLocation = '';\n  if (catType === 'ymd-date') {\n    errorLocation = DateCheckUtils.doYmdConsistencyCheck(catArray);\n  } else if (catType === 'dmy-date') {\n    errorLocation = DateCheckUtils.doDmyConsistencyCheck(catArray);\n  } else {\n    // mdy-date\n    errorLocation = DateCheckUtils.doMdyConsistencyCheck(catArray);\n  }\n  // Consistency checks return the location of failure as a string\n  // But note that these only verify *format* (not sequence)\n  if (errorLocation.length > 0) {\n    validityObj.catType = 'invalid';\n    validityObj.validityMsg = `inconsistent date format at column A, row ${errorLocation}. Data in col A will be processed as text.`;\n    return validityObj;\n  }\n  // Still here? Consistent all-number dates\n  if (catType.includes('date')) {\n    // date or datetime converts to an unambiguous month name\n    // (with possible hh:mm)\n    catArray = DateCheckUtils.convertDmy(catArray, catType);\n    catType = 'time';\n  } else if (catType === 'quarters') {\n    catArray = DateCheckUtils.convertQuarters(catArray);\n    catType = 'time';\n  }\n  // And finally\n  return { catType, catArray, yearsAdjustedBy: 0, validityMsg: '' };\n}\n// VALIDATE CATEGORIES ends\n\n// FIND DUPLICATE CATS\n// Called from validateCategories. Returns false if\n// there are duplicate categories\nexport function findDuplicateCats(catArray, vObj) {\n  let hasDups = false;\n  const arrayOfDups = DupUtils.dupsInArray(catArray);\n  if (arrayOfDups.length > 0) {\n    const dupString = arrayOfDups[0].string;\n    const dupIndex = `A${+arrayOfDups[0].index + 2}`;\n    vObj.catType = 'invalid';\n    vObj.validityMsg = `the category ${dupString} (cell ${dupIndex}) appears more than once. Categories must be unique.`;\n    hasDups = true;\n  }\n  return hasDups;\n}\n// FIND DUPLICATE CATS ends\n\n// CATS ARE STRINGS\n// Called from validateCategories. Basic check for\n// string categories\nexport function areCatsStrings(catArray) {\n  // Less than three points, treat as strings\n  let catType = '';\n  if (catArray.length < 3) {\n    catType = 'string';\n  } else {\n    // If first cat is string, assume all are\n    const firstCat = catArray[0];\n    catType = DateCheckUtils.getBasicCategoryType(firstCat);\n  }\n  return catType;\n}\n// CATS ARE STRINGS ends\n\n// ARE CATS TIME OR STRING\n// Called from validateCategories. First cat is an integer;\n// so are we talking yyyy...?\nexport function areCatsTimeOrString(catArray, vObj) {\n  if (allCatsAreIntegers(catArray) && catsAreSequential(catArray)) {\n    // Work-around for Javascripts difficulty with years < 1000\n    const yAdjust = DateCheckUtils.getYearsAdjustment(catArray);\n    vObj.yearsAdjustedBy = yAdjust;\n    vObj.catType = 'time';\n  } else {\n    vObj.catType = 'string';\n  }\n}\n// ARE CATS TIME OR STRING ends\n\n// ALL CATS ARE INTEGERS\n// Called from validateCategories to check whether ALL\n// categories are years\nexport function allCatsAreIntegers(catArray) {\n  let result = true;\n  for (let catNo = 0; catNo < catArray.length; catNo++) {\n    const cat = catArray[catNo];\n    if (isNaN(cat) || cat.includes('.')) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n// ALL CATS ARE INTEGERS ends\n\n// GET INITIAL DATE FORMAT\n// Called from validateCategories\nexport function getInitialDateFormat(dateArray) {\n  const val1 = dateArray[0];\n  // Quarters as 'Q1 yy/yy'? Just check one value\n  if (DateCheckUtils.catIsQuarter(val1)) {\n    return 'quarters';\n  }\n  // ymd: one val is enough\n  if (DateCheckUtils.dateIsYmd(val1)) {\n    return 'ymd-date';\n  }\n  // Now for dmy v. mdy (or invalid)\n  return DateCheckUtils.doFirstUsUkTest(dateArray);\n}\n// GET INITIAL DATE FORMAT ends\n\n// CATS ARE SEQUENTIAL\n// Called from validateCategories to check that an array\n// of integers are sequential\nexport function catsAreSequential(catArray) {\n  let result = true;\n  for (let catNo = 1; catNo < catArray.length; catNo++) {\n    const prevCat = +catArray[catNo - 1];\n    const thisCat = +catArray[catNo];\n    if (thisCat <= prevCat) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n// CATS ARE SEQUENTIALl ends\n\n//  GET TIME OBJ\n// Called from triageCategories. Passed an array of dates, as strings,\n// works out the time interval to use.\n// NOTE: this may eventually benefit from user confirmation (for example for\n// 5+ years, quarters, weeks, etc.)\n// Returns an object with interval and format properties\n// Args are array of dates, timeformats lookup from default prefs,\n// number of ms in 1 day, and the 1000-adjustment value\nexport function getTimeObj(dateArray, lookup, aDay, yearsAdjustedBy) {\n  // I need one less than number of points\n  // NOTE: this assumes regular intervals. This will\n  // revise in due course...\n  const len = dateArray.length - 1;\n  // Extract first and last values from dateArray, since\n  // I may have to tweak them for 1000-adj.\n  let dFirst = dateArray[0];\n  let dLast = dateArray[len];\n  // I need a first year, as yyyy, to identify first year label\n  // on the time axis, so I can force 'yyyy'\n  const firstYear = FixYearInDate(dFirst).getFullYear();\n  const lastYear = FixYearInDate(dLast).getFullYear();\n  // If I have to do an adjustment for years/numbers < 1000\n  // apply it now:\n  if (yearsAdjustedBy > 0) {\n    dFirst = parseInt(dFirst, 10) + yearsAdjustedBy;\n    dLast = parseInt(dLast, 10) + yearsAdjustedBy;\n  }\n  const firstDate = FixYearInDate(dFirst);\n  const lastDate = FixYearInDate(dLast);\n  const dayCount = (lastDate - firstDate) / aDay / len;\n  // Default to return is years\n  let tObj = {};\n  // Lookup is an array of intervals ('years', etc) in descending order\n  // NOTE: this probably needs elaboration, but for now we return an\n  // object with a timeInterval string ('years', etc) and matching\n  // D3 timeFormat ('%Y', etc.)\n  // Added secondRow flag and format, Aug 2016.\n  // NOTE: and presumably I could add granularity to this, allowing intervals\n  // of, say 5 or 10 years... plus weeks and quarters\n  //\n  // Over a long timeseries (say, 2000+ points), the usual Math errors kick in\n  // and absolute equality is unobtainable. So allow vals to be 'close enough'\n  const closeEnough = (myVal, toVal) => {\n    const lowVal = toVal * 0.989;\n    const highVal = toVal * 1.011;\n    return myVal > lowVal && myVal < highVal;\n  };\n  for (const tForm in lookup) {\n    const myForm = lookup[tForm];\n    // Next is basically '>=', allowing for Math unreliability\n    if (dayCount > myForm.dayCount || closeEnough(dayCount, myForm.dayCount)) {\n      // Just copy the entire node:\n      tObj = myForm;\n      break;\n    }\n  }\n  // Append firstyear, defined above:\n  tObj.firstYear = firstYear;\n  tObj.lastYear = lastYear;\n  return tObj;\n}\n//  GET TIME OBJ ends\n\n// OVERLAY CATEGORIES\n// Called from RawDataUtils.unpickData. Args are:\n//    the array of category strings, which may have been changed\n//        from, say, 'd/m/yyyy' to 'dd Mmm yyyy' format;\n//    the data array (which includes a first row of 'headers')\n// Function loops through, updating data array's categories\n// so they're consistent for further processes\n// Revised data is returned by ref\nexport function overlayCategories(source, target) {\n  for (let iii = 1; iii < target.length; iii++) {\n    // Allowing for missing first element in source array\n    let oneCat = source[iii - 1];\n    // If data expressed as array, stringify\n    if (typeof oneCat === 'object') {\n      oneCat = oneCat.join(' ');\n    }\n    // As of Aug'20, fix both source and target\n    source[iii - 1] = oneCat;\n    target[iii][0] = oneCat;\n  }\n}\n// OVERLAY CATEGORIES ends\n","/*  Functions to triage and refine raw data\n    Top level fcn unpickData is called from:\n      - MonteuxImport.unpickRawData\n      - DataTemp.processNewData\n*/\n\nimport * as CategoryUtils from './category-utilities';\nimport * as DateCheckUtils from './datecheck-utilities';\nimport * as DupUtils from './duplicate-utilities';\n\n// CONVERT TSV TO ARRAY\n// Called from unpickData to convert raw TSV data string to\n// array of arrays. Arg is the raw TSV data string\n// No validation: just TSV to array...\nexport function convertTsvToArray(tsv) {\n  // Convert tsv to an array of strings (element=row)\n  const dataArray = tsv.split(/\\r?\\n/);\n  // Turn each 'row' into an array:\n  for (let rNo = 0; rNo < dataArray.length; rNo++) {\n    // Original tsv/array convertor checked string length to trap empty rows:\n    // if (dataArray[rNo].trim().length < 1) {\n    //   dataObj.isValid = false;\n    //   dataObj.validityMsg = `Row ${ rNo + 1 } of data is blank...`;\n    //   return dataObj;\n    // }\n    dataArray[rNo] = dataArray[rNo].split(/\\t/);\n  }\n  return dataArray;\n}\n// CONVERT TSV TO ARRAY\n\n// CHECK ALL VALS ARE NUMBERS\n// Called from validateDataArray. If non-numeric val\n// is found, returns location -- unless it's a\n// comma-separated value, in which case: fix\nexport function checkAllValsAreNumbers(dArray) {\n  const result = {\n    badVal: false,\n    row: 0,\n    column: 0,\n  };\n  // Arg is complete data array\n  // Count headers for consistency check\n  const headCount = dArray[0].length;\n  // Ignore headers and categories\n  for (let rNo = 1; rNo < dArray.length; rNo++) {\n    const oneRow = dArray[rNo];\n    const rowLen = oneRow.length;\n    // Make good any missing values at end of row\n    // (Necessary for thermometers, which will 'zero' undefined data points)\n    if (rowLen < headCount) {\n      for (let iii = rowLen; iii < headCount; iii++) {\n        oneRow.push('');\n      }\n    }\n    for (let cNo = 1; cNo < rowLen; cNo++) {\n      // (Empty cells evaluate as numbers)\n      const rawVal = oneRow[cNo];\n      const noCommaVal = rawVal.replace(/,/g, '');\n      // If, without commas, it's NaN... don't hang about\n      if (isNaN(noCommaVal)) {\n        result.badVal = true;\n        result.row = rNo + 1;\n        result.column = cNo + 1;\n        break;\n      } else if (rawVal.includes(',')) {\n        // It IS a number, but comma-sep'd -- fix\n        oneRow[cNo] = noCommaVal;\n      }\n    }\n  }\n  return result;\n}\n// CHECK ALL VALS ARE NUMBERS ends\n\n// ENOUGH ROWS AND COLUMNS\n// Called from validateDataArray to verify that we've at least 2 rows of data, and\n// that top row has at least 2 cols. Update dataObj by ref.\nexport function enoughRowsAndColumns(dArray, dObj) {\n  // Number of rows; number of cols in row 1\n  const rLen = dArray.length;\n  const cLen = dArray[0].length;\n  // Minimum 2 rows:\n  if (rLen < 2) {\n    dObj.isValid = false;\n    dObj.validityMsg = 'data must consist of at least 2 rows.';\n  } else if (cLen < 2) {\n    dObj.isValid = false;\n    dObj.validityMsg = 'data must consist of at least 2 columns';\n  }\n}\n// ENOUGH ROWS AND COLUMNS ends\n\n// MAKE DEFAULT DATA OBJECT\n// Called from validateDataArray\n// As of Jan'21 there are 2 flags:\n//    isValid: if false, processing stops\n//    isProblematic: if true, data processing proceeds, but alert displays\nexport function makeDefaultDataObject() {\n  return {\n    dataArray: [],\n    isValid: true,\n    isProblematic: false,\n    validityMsg: '',\n    isTable: false,\n  };\n}\n// MAKE DEFAULT DATA OBJECT ends\n\n// TOP ROW OF DATA PROBLEMATIC CHECK\n// Called from validateDataArray. This is a non-fatal check that\n// cell A1 is empty; and that other cells in top data row aren't numbers\nexport function topRowOfDataProblematicCheck(hArray, dObj) {\n  // First element (cell A1) should be empty\n  // if (hArray[0].trim().length > 0) {\n  //   dObj.isProblematic = true;\n  //   dObj.validityMsg =\n  //     'cell A1 of data sheet should be empty, consistent with header row...';\n  //   return;\n  // }\n  // Subsequent headers shouldn't ALL be numbers\n  const checkHeads = (head, hNo) => {\n    let result = true;\n    if (hNo > 0 && !isNaN(head)) {\n      result = false;\n    }\n    return result;\n  };\n  const noNumberHeads = hArray.every(checkHeads);\n  if (!noNumberHeads) {\n    dObj.isProblematic = true;\n    dObj.validityMsg = 'your series header names include numbers. Is this OK?';\n  }\n}\n// TOP ROW OF DATA PROBLEMATIC CHECK ends\n\n// VALIDATE DATA ARRAY\n// Called from unpickData. Runs simple validity checks\n// on the array...\nexport function validateDataArray(dArray) {\n  // Object to return:\n  const dataObj = makeDefaultDataObject();\n  // First, very basic data validity check: have\n  // we enough rows and columns?\n  enoughRowsAndColumns(dArray, dataObj);\n  if (!dataObj.isValid) {\n    return dataObj;\n  }\n  // Check there are no duplicate headers in 1st row\n  const arrayOfDups = DupUtils.dupsInArray(dArray[0]);\n  if (arrayOfDups.length > 0) {\n    const dupString = arrayOfDups[0].string;\n    // const dupIndex = `A${+arrayOfDups[0].index + 2}`;\n    dataObj.isValid = false;\n    dataObj.validityMsg = `the header ${dupString} appears more than once. Header names must be unique.`;\n    return dataObj;\n  }\n  // Check that all *values* are numbers\n  const badValObj = checkAllValsAreNumbers(dArray);\n  // If vals aren't all numbers, the assumption is that it's a table.\n  // I'm setting the 'bad value' flag; but it may never be used...\n  if (badValObj.badVal) {\n    dataObj.validityMsg = `data in row ${badValObj.row},\n      column ${badValObj.column} is not valid for this chart type.`;\n    dataObj.isTable = true;\n  }\n  // Check for a non-fatal error where user has omitted headers,\n  // causing Sibyl to treat top row of datasheet as headers...\n  topRowOfDataProblematicCheck(dArray[0], dataObj);\n  // So we have enough data; headers are unique;\n  // and all values are numbers, or this is a table\n  dataObj.dataArray = dArray;\n  return dataObj;\n}\n// VALIDATE DATA ARRAY ends\n\n// ARRAYIFY DATA\n// Called from unpickData to force data to cloned array\nexport function arrayifyData(myData) {\n  // If data are TSV, I have to arrayify\n  let dataArray = [];\n  if (typeof myData === 'string') {\n    dataArray = convertTsvToArray(myData);\n  } else {\n    dataArray = JSON.parse(JSON.stringify(myData));\n  }\n  return dataArray;\n}\n// ARRAYIFY DATA ends\n\n// UNPICK DATA\n// Top-level handler.\n// Called from DataTemp.processNewData and MonteuxImport.unpickRawData\n// Args are:\n//    - the raw data for one panel (as either TSV or an array)\n//    - an object containing any prefs I need from DPs (currently timeformats and dayInMs)\nexport function unpickData(myData, dataPrefs) {\n  // Ensure data are a 2D array (rows / columns)\n  const dataArray = arrayifyData(myData);\n  // Check basic integrity... and whether data are compatible with\n  // a chart, rather than a table (in which case, flag 'isTable' = true).\n  const dataObj = validateDataArray(dataArray);\n  if (!dataObj.isValid) {\n    // Return irredeemably bad data now, with the error message:\n    return dataObj;\n  }\n  // Data are in array form and (in theory) structurally OK\n  // Isolate headers:\n  dataObj.headers = dataObj.dataArray[0];\n  // Isolate and unpick categories\n  const catArray = CategoryUtils.isolateCategories(dataObj.dataArray);\n  // Category time formatting:\n  if (dataObj.isTable) {\n    dataObj.categoryType = 'string';\n  } else {\n    const triagedCatObj = CategoryUtils.triageCategories(\n      catArray,\n      dataPrefs.timeFormats,\n      dataPrefs.dayInMilliSeconds,\n    );\n    // triagedCatObj has props:\n    //    catArray: array of categories, dates as dd Mmmm yyyy\n    //    categoryType, timeFormats, yearsAdjustedBy, catError\n    // Bale out if there was a category error:\n    // NOTE: I might report back a more specific category error message...\n    if (triagedCatObj.catError) {\n      return { isValid: false, validityMsg: triagedCatObj.validityMsg };\n    }\n    dataObj.categories = triagedCatObj.catArray;\n    dataObj.timeFormats = Object.assign({}, triagedCatObj.timeFormats);\n    dataObj.categoryType = triagedCatObj.categoryType;\n    dataObj.yearsAdjustedBy = triagedCatObj.yearsAdjustedBy;\n    // Overwrite cats in data array with reformatted cats\n    if (dataObj.categoryType.includes('time')) {\n      // Time-based categories: reset the categories in the data array\n      // to triaged version\n      CategoryUtils.overlayCategories(dataObj.categories, dataObj.dataArray);\n      // If data are weekly, interpolate days\n      // Comm'd out, May'20. Leave weeks alone!\n      // if (dataObj.timeFormats.interval === 'weeks') {\n      //   interpolateWeekdays(dataObj);\n      // }\n    }\n    // dataObj has props:\n    //    categories (array of cats only)\n    //    categoryType\n    //    dataArray (2D array of data)\n    //    headers\n    //    isValid & validityMsg\n    //    timeFormats (things D3 needs to know to draw axis)\n    //    yearsAdjustedBy (for dates pre-1000)\n  }\n  return dataObj;\n}\n// UNPICK DATA ends\n\n// INTERPOLATE WEEKDAYS\n// Called from unpickData to convert arrays of categories and data-values from\n// weekly to daily interval.\n// NOTE: no longer called, but retained for possible future utility\nexport function interpolateWeekdays(dataObj) {\n  const catArray = dataObj.categories;\n  const dataArray = dataObj.dataArray;\n  const dLen = catArray.length;\n  // First and last dates in ms\n  const firstDay = Date.parse(dataObj.categories[0]);\n  const lastDay = Date.parse(dataObj.categories[dLen - 1]);\n  const oneDay = 1000 * 60 * 60 * 24;\n  // Daily arrays:\n  const dailyCategories = [];\n  // Data array seeded with headers\n  const dailyDataArray = [dataArray[0]];\n  // How many values per 'row'? (I.e. series)\n  const valCount = dailyDataArray[0].length - 1;\n  // Loop by days\n  for (let dayVal = firstDay; dayVal <= lastDay; dayVal += oneDay) {\n    const dayDate = new Date(dayVal);\n    // Unambiguous dd Mmm yyyy\n    // NOTE: can I guarantee this, though...?\n    let dStr = dayDate.getDate();\n    dStr = `${dStr} ${DateCheckUtils.getMonthList(false)[dayDate.getMonth()]}`;\n    dStr = `${dStr} ${dayDate.getFullYear()}`;\n    // Build up array of categories (just dates)\n    // (There's duplication of category and data arrays)\n    dailyCategories.push(dStr);\n    // Does date exist in original dataArray? If so use it; otherwise create a 'blank'\n    const dPoint = dataArray.find(pt => Date.parse(pt[0]) === Date.parse(dStr));\n    if (typeof dPoint === 'undefined') {\n      const ptArray = [dStr];\n      // Blank values\n      for (let valNo = 0; valNo < valCount; valNo++) {\n        ptArray.push('');\n      }\n      dailyDataArray.push(ptArray);\n    } else {\n      dailyDataArray.push(dPoint);\n    }\n  }\n  // Update the data object\n  dataObj.categories = dailyCategories;\n  dataObj.dataArray = dailyDataArray;\n  // Update timeFormats\n  dataObj.timeFormats.dayCount = 1;\n  dataObj.timeFormats.increment = 1;\n  dataObj.timeFormats.interval = 'days';\n}\n// INTERPOLATE WEEKDAYS ends\n","// Display textfield, into which raw tab-separated data can be pasted\n// for processing. This component will be hidden eventually,\n// but kept for possible use...\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as RawDataUtils from '../../utilities/payload-utilities/rawdata-utilities';\n\nclass DataTemp extends Component {\n  static get defaultProps() {\n    return {\n      commaSubstitute: 'commasubstitute',\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    // Events on text area\n    this.handleTextAreaTabEvent = this.handleTextAreaTabEvent.bind(this);\n    this.handleTextAreaBlurEvent = this.handleTextAreaBlurEvent.bind(this);\n    this.handleTextAreaPasteEvent = this.handleTextAreaPasteEvent.bind(this);\n  }\n  // CONSTRUCTOR ends\n\n  // PROCESS NEW DATA\n  // Called from data-blur. Arg is a line/tab-separated string of raw data\n  processNewData(rawData) {\n    // No data? Nark off.\n    if (rawData.length === 0) {\n      return;\n    }\n    // I have to send in a few prefs\n    const dataPrefs = this.props.config.requiredDataPrefs;\n    // Returns an object with 'arrayified' raw data and other properties\n    const dataObject = RawDataUtils.unpickData(rawData, dataPrefs);\n    // Incorporate into a Monteux-consistent object and fire off...\n    const monteuxlikeObject = {\n      source: 'rawData',\n      global: {\n        values: {},\n      },\n      panelArray: [\n        {\n          metaData: {\n            values: {},\n          },\n          rawData: {\n            values: dataObject,\n          },\n        },\n      ],\n    };\n    this.props.onValuesToAdvancedBody(monteuxlikeObject);\n  }\n  // PROCESS NEW DATA ends\n\n  // UN-COMMA\n  // Called from lineCsvToTsv\n  // Arg is one line, separated by commas -- but maybe\n  // with commas as part of quote-enclosed sub-strings\n  unComma(str) {\n    // Find any substrings inside quotes\n    // and replace internal commas with substitute\n    // Next is regex for both single and double quotes\n    // const qRegX = /(\"(.*?)\")|('(.*?)')/g\n    // For now, at least, just double:\n    const qRegX = /\"(.*?)\"/g;\n    const matches = str.match(qRegX);\n    for (const match in matches) {\n      const thisMatch = matches[match];\n      const fixMatch = thisMatch.replace(/,/g, this.props.commaSubstitute);\n      str = str.replace(thisMatch, fixMatch);\n    }\n    return str;\n  }\n  // UN-COMMA ends\n\n  // LINE CSV TO TSV\n  // Called from csvToTsv. Arg is a single line of CSV to convert\n  lineCsvToTsv(str) {\n    // Replace 'internal' commas with substitute, so\n    // now we have items separated by commas\n    const myStr = this.unComma(str);\n    // Split on commas\n    const firstArray = myStr.split(/,/g);\n    const secondArray = [];\n    const subRegExp = new RegExp(this.props.commaSubstitute, 'g');\n    for (let iii = 0; iii < firstArray.length; iii++) {\n      let item = firstArray[iii];\n      if (item.length > 0) {\n        // Strip loose quotes and replace the internal substitute commas\n        // with the real thing\n        item = item.replace(/\"/g, '').replace(subRegExp, ',');\n        secondArray.push(item);\n      }\n    }\n    // Return as tab-sep'd string\n    return secondArray.join('\\t');\n  }\n  // LINE CSV TO TSV ends\n\n  // CSV TO TSV\n  // Called from handleTextAreaPasteEvent\n  csvToTsv(str) {\n    // Split into lines\n    const lArray = str.split(/\\n/g);\n    // const result = [];\n    // for (let lNo = 0; lNo < lArray.length; lNo++) {\n    //   result.push(this.lineCsvToTsv(lArray[lNo]));\n    // }\n    const result = lArray.map(oneLine => {\n      return this.lineCsvToTsv(oneLine);\n    });\n    return result.join('\\n');\n  }\n  // CSV TO TSV ends\n\n  // TEXT IS TSV\n  textIsTsv(content) {\n    // Number of tabs should >= number of lines\n    const tabRegExp = /\\t/g;\n    const lineRegExp = /\\n/g;\n    const tabCount = (content.match(tabRegExp) || []).length;\n    const lineCount = (content.match(lineRegExp) || []).length;\n    const isTsv = tabCount >= lineCount;\n    return isTsv;\n  }\n  // TEXT IS TSV ends\n\n  // TEXT IS CSV\n  textIsCsv(content) {\n    // Number of tabs should >= number of lines\n    const commaRegExp = /,/g;\n    const lineRegExp = /\\n/g;\n    const commaCount = (content.match(commaRegExp) || []).length;\n    const lineCount = (content.match(lineRegExp) || []).length;\n    const isCsv = commaCount >= lineCount;\n    return isCsv;\n  }\n  // TEXT IS CSV ends\n\n  // HANDLE TEXT AREA PASTE EVENT\n  // Event handler for paste. Converts pasted CSV text to TSV\n  handleTextAreaPasteEvent(event) {\n    const target = event.target;\n    let content = event.clipboardData.getData('Text');\n    // If this is already TSV, leave it alone\n    if (!this.textIsTsv(content)) {\n      // If CSV, convert\n      if (this.textIsCsv(content)) {\n        content = this.csvToTsv(content);\n      }\n    }\n    setTimeout(() => {\n      target.value = content;\n    }, 10);\n  }\n  // HANDLE TEXT AREA PASTE EVENT ends\n\n  // HANDLE TEXT AREA TAB EVENT\n  // Called from textarea > keydown to pre-empt default\n  // tab-switches-focus and put a tab in chartdata field\n  handleTextAreaTabEvent(event) {\n    const tabCode = 9;\n    if (event.keyCode === tabCode) {\n      // prevent the focus loss\n      event.preventDefault();\n      const target = event.target;\n      const start = target.selectionStart;\n      const end = target.selectionEnd;\n      const value = target.value;\n      const textBefore = value.substring(0, start);\n      const textAfter = value.substring(end);\n      // set textarea value to: text before cursor + tab + text after cursor\n      target.value = `${textBefore}\\t${textAfter}`;\n      // put cursor at right position again (add one for the tab)\n      target.selectionStart = start + 1;\n      target.selectionEnd = start + 1;\n    }\n  }\n  // HANDLE TEXT AREA TAB EVENT ends\n\n  // HANDLE TEXTAREA BLUR EVENT\n  // Listener for textarea blur\n  handleTextAreaBlurEvent(evt) {\n    const newData = evt.target.value;\n    this.processNewData(newData);\n  }\n  // HANDLE TEXTAREA BLUR EVENT ends\n\n  // *** EVENT LISTENERS END ***\n\n  // *** JSX ***\n\n  // MAKE RAW DATA TEXT AREA\n  // Text input for raw data\n  // Called from makeChartDataFormJsx\n  makeRawDataTextArea() {\n    // This is a 'simple' textarea with event(s).\n    //    intercept tabs: prevent default behaviour and insert a tab char inline\n    //    intercept blur: passes on textarea's contents...\n    //    intercept paste: to convert TSV to CSV\n    //    (NB: CSS word-wrap:off doesn't apparently work on textareas...)\n    const placeHolder =\n      'Paste tab-separated data here. Click away to process...';\n    let className = 'chartdata-textarea';\n    // See AdvancedFoldBody.doesDataFieldDisable:\n    if (this.props.config.disableDataField) {\n      className = `${className} chartdata-textarea-disabled`;\n    }\n    return (\n      <textarea\n        className={className}\n        wrap=\"off\"\n        placeholder={placeHolder}\n        onKeyDown={this.handleTextAreaTabEvent}\n        onChange={this.handleTextAreaChangeEvent}\n        onBlur={this.handleTextAreaBlurEvent}\n        onPaste={this.handleTextAreaPasteEvent}\n      />\n    );\n  }\n  // MAKE RAW DATA TEXT AREA ends\n\n  // FOLD BODY JSX\n  // Calls sub-functions to construct individual elements and clusters\n  foldBodyJsx() {\n    // Raw data textarea\n    const rawDataTextArea = this.makeRawDataTextArea();\n    return <form className=\"data-temp-div\">{rawDataTextArea}</form>;\n  }\n  // FOLD BODY JSX ends\n\n  // RENDER\n  render() {\n    return this.foldBodyJsx();\n  }\n}\n\nDataTemp.propTypes = {\n  config: PropTypes.object,\n  commaSubstitute: PropTypes.string,\n  // Callback with returned data\n  onValuesToAdvancedBody: PropTypes.func,\n};\n\nexport default DataTemp;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass AxisHeaders extends Component {\n  static get defaultProps() {\n    return {};\n  }\n\n  constructor(props) {\n    super(props);\n    this.handleAxisHeaderBlur = this.handleAxisHeaderBlur.bind(this);\n  }\n\n  componentDidMount() {\n    this.fillFields();\n  }\n\n  componentDidUpdate() {\n    this.fillFields();\n  }\n\n  // FILL FIELDS\n  // Called from componentDidMount and componentDidUpdate\n  // to stuff new props cheaply and cheerfully into fields\n  fillFields() {\n    this.xaxisheader.value = this.props.config.xaxis.content;\n    // Only xaxis\n    // this.yaxisheaderleft.value = this.props.config.yaxisleft.content;\n    // this.yaxisheaderright.value = this.props.config.yaxisright.content;\n    // this.zaxisheader.value = this.props.config.zaxis.content;\n  }\n\n  updateEditor() {\n    const vals = {\n      source: 'axisHeaders',\n      xaxis: this.xaxisheader.value,\n      // Only xaxis\n      // yaxisleft: this.yaxisheaderleft.value,\n      // yaxisright: this.yaxisheaderright.value,\n      // zaxis: this.zaxisheader.value,\n    };\n    this.props.onValuesToAdvancedBody(vals);\n  }\n\n  // HANDLE STRING BLUR\n  // Every time we tab or click out of a field,\n  // gather all the string values and kick them upstairs\n  handleAxisHeaderBlur() {\n    this.updateEditor();\n  }\n  // HANDLE STRING BLUR ends\n\n  // MAKE AXIS HEADER JSX\n  // Allows for x, y and z axis headers, although only xaxis header now used\n  makeAxisHeaderJsx(axis) {\n    const config = this.props.config;\n    let headerDivClass = 'axis-header-div';\n    let labelClass = 'silver-label';\n    let inputClass = 'text-field';\n    let refName = '';\n    let label = '';\n    if (axis === 'xaxis') {\n      if (!config.xaxis.enabled) {\n        headerDivClass = `${headerDivClass} axis-header-div-disabled`;\n      }\n      labelClass = `${labelClass} xaxis-header-label`;\n      inputClass = `${inputClass} xaxis-header-input`;\n      refName = 'xaxisheader';\n      label = 'X axis header';\n    } else if (axis === 'yaxis-left') {\n      if (!config.yaxisleft.enabled) {\n        headerDivClass = `${headerDivClass} axis-header-div-disabled`;\n      }\n      labelClass = `${labelClass} yaxisleft-header-label`;\n      inputClass = `${inputClass} yaxisleft-header-input`;\n      refName = 'yaxisheaderleft';\n      label = 'Y axis left header';\n    } else if (axis === 'yaxis-right') {\n      if (!config.yaxisright.enabled) {\n        headerDivClass = `${headerDivClass} axis-header-div-disabled`;\n      }\n      labelClass = `${labelClass} yaxisright-header-label`;\n      inputClass = `${inputClass} yaxisright-header-input`;\n      refName = 'yaxisheaderright';\n      label = 'Y axis right header';\n    } else {\n      if (!config.zaxis.enabled) {\n        headerDivClass = `${headerDivClass} axis-header-div-disabled`;\n      }\n      labelClass = `${labelClass} zaxis-header-label`;\n      inputClass = `${inputClass} zaxis-header-input`;\n      refName = 'zaxisheader';\n      label = 'Z axis header';\n    }\n    return (\n      <div className={headerDivClass}>\n        <span className={labelClass}>{label}</span>\n        <input\n          id={inputClass}\n          ref={c => {\n            this[refName] = c;\n          }}\n          className={inputClass}\n          onBlur={this.handleAxisHeaderBlur}\n        />\n      </div>\n    );\n  }\n  // MAKE AXIS HEADER JSX ends\n  // For refs, use:\n  // ref={(c) => { this.<refname> = c;}}\n\n  // MAKE AXIS HEADERS JSX\n  makeAxisHeadersJsx() {\n    // As of Sep'20, only xaxis input\n    const xAxisJsx = this.makeAxisHeaderJsx('xaxis');\n    // const yAxisLeftJsx = this.makeAxisHeaderJsx('yaxis-left');\n    // const yAxisRightJsx = this.makeAxisHeaderJsx('yaxis-right');\n    // const zAxisJsx = this.makeAxisHeaderJsx('zaxis');\n    return <div className=\"axis-headers-div\">{xAxisJsx}</div>;\n    // {yAxisLeftJsx}\n    // {yAxisRightJsx}\n    // {zAxisJsx}\n  }\n  // MAKE AXIS HEADERS JSX ends\n\n  // RENDER\n  render() {\n    return this.makeAxisHeadersJsx();\n  }\n}\n\nAxisHeaders.propTypes = {\n  config: PropTypes.object.isRequired,\n  onValuesToAdvancedBody: PropTypes.func.isRequired,\n};\n\nexport default AxisHeaders;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass NumberBoxEditor extends Component {\n  static get defaultProps() {\n    return {};\n  }\n\n  constructor(props) {\n    super(props);\n    this.handleNumberBoxBlur = this.handleNumberBoxBlur.bind(this);\n  }\n\n  componentDidMount() {\n    this.fillField();\n  }\n\n  componentDidUpdate() {\n    this.fillField();\n  }\n\n  fillField() {\n    this.numberboxinput.value = this.props.config.value;\n  }\n\n  handleNumberBoxBlur({ target }) {\n    const val = target.value;\n    // Must be a number or empty string\n    // (Checked again chartside)\n    if (isNaN(val) && val !== '?') {\n      target.value = '';\n    } else {\n      const vals = {\n        source: 'numberBox',\n        val,\n      };\n      this.props.onValuesToAdvancedBody(vals);\n    }\n  }\n\n  makeNumberBoxJsx() {\n    const refName = 'numberboxinput';\n    return (\n      <div className=\"numberbox-div\">\n        <span className=\"silver-label numberbox-label\">Chart number</span>\n        <input\n          id=\"text-field\"\n          ref={c => {\n            this[refName] = c;\n          }}\n          className=\"text-field numberbox-input\"\n          onBlur={this.handleNumberBoxBlur}\n        />\n      </div>\n    );\n  }\n\n  // RENDER\n  render() {\n    return this.makeNumberBoxJsx();\n  }\n}\n\nNumberBoxEditor.propTypes = {\n  config: PropTypes.object,\n  onValuesToAdvancedBody: PropTypes.func.isRequired,\n};\n\nexport default NumberBoxEditor;\n","// This component originally parented double scales and indexing\n// As of Apr'19, however, it remains as an emergency/dev resource\n// normally hidden from view.\n// To show or hide, see Editor.get defaultProps, where folds are defined\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DataTemp from './bodyparts/data-temp';\nimport AxisHeaders from './bodyparts/axis-headers';\nimport NumberBoxEditor from './bodyparts/numberbox-editor';\n\nclass AdvancedFoldBody extends Component {\n  constructor(props) {\n    super(props);\n    // Events\n    this.handleDataChange = this.handleDataChange.bind(this);\n  }\n\n  // HANDLE DATA CHANGE\n  handleDataChange(vals) {\n    this.props.onValuesToFoldsWrapper(vals);\n  }\n  // HANDLE DATA CHANGE ends\n\n  // DOES DATA FIELD DISABLE\n  // Called from advancedBodyJsx. This was originally written to determine\n  // whether the paste-in data field is visible, according to context.\n  // Previously disabled in Monteux versions on infographics server, but\n  // visible on localhost or in standalone version.\n  // As of Sep'20, the field is always visible. But I've left this function\n  // in place, with forced 'return false', in case we change our minds...\n  doesDataFieldDisable() {\n    // const context = window.location.href;\n    // let disableData = false;\n    // if (\n    //   context.includes('/silver-bullet/sibyl/') ||\n    //   context.includes('/z-silver-bullet-test/sibyl/')\n    // ) {\n    //   disableData = true;\n    // }\n    // return disableData;\n    return false;\n  }\n  // DOES DATA FIELD DISABLE\n\n  makeDataTempJsx() {\n    const requiredDataPrefs = this.props.config.textFieldConfig;\n    const disableDataField = this.doesDataFieldDisable();\n    const dataConfig = {\n      disableDataField,\n      requiredDataPrefs,\n    };\n    return (\n      <DataTemp\n        config={dataConfig}\n        onValuesToAdvancedBody={this.handleDataChange}\n      />\n    );\n  }\n\n  makeAxisHeadersJsx() {\n    // const { config } = this.props;\n    // const updateEditor = false;\n    const axisHeadersConfig = this.props.config.axisHeadersConfig;\n    return (\n      <AxisHeaders\n        config={axisHeadersConfig}\n        onValuesToAdvancedBody={this.handleDataChange}\n      />\n    );\n  }\n\n  makeNumberBoxJsx() {\n    const numberBoxConfig = this.props.config.numberBoxConfig;\n    return (\n      <NumberBoxEditor\n        config={numberBoxConfig}\n        onValuesToAdvancedBody={this.handleDataChange}\n      />\n    );\n  }\n\n  // ADVANCED BODY JSX\n  // Calls sub-functions to construct individual elements and clusters\n  advancedBodyJsx() {\n    const dataTempJsx = this.makeDataTempJsx();\n    const axisHeadersJsx = this.makeAxisHeadersJsx();\n    const numberBoxJsx = this.makeNumberBoxJsx();\n    return (\n      <div className=\"fold-body advanced-body\">\n        {dataTempJsx}\n        {axisHeadersJsx}\n        {numberBoxJsx}\n      </div>\n    );\n  }\n  // ADVANCED BODY JSX ends\n\n  // RENDER\n  render() {\n    return this.advancedBodyJsx();\n  }\n}\n\nAdvancedFoldBody.propTypes = {\n  config: PropTypes.object,\n  // Callback of returned data\n  onValuesToFoldsWrapper: PropTypes.func,\n};\n\nexport default AdvancedFoldBody;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DesignFoldBody from './design-fold-body';\nimport ScalesFoldBody from './scales-fold-body';\nimport AdvancedFoldBody from './advanced-fold-body';\n\nclass FoldWrapper extends Component {\n  // *** REACT LIFECYCLE STUFF ***\n\n  // CONSTRUCTOR\n  // Sets up the various event listeners...\n  // ...and the global value-container\n  constructor(props) {\n    super(props);\n    this.state = {\n      foldsList: props.config.foldsList,\n      updateEditor: false,\n    };\n    // Events\n    this.handleFoldHeaderClick = this.handleFoldHeaderClick.bind(this);\n    this.handleDesignFoldCallback = this.handleDesignFoldCallback.bind(this);\n    this.handleScalesFoldCallback = this.handleScalesFoldCallback.bind(this);\n    this.handleAdvancedFoldCallback = this.handleAdvancedFoldCallback.bind(\n      this,\n    );\n  }\n  // CONSTRUCTOR ends\n\n  // COMPONENT WILL RECEIVE PROPS\n  UNSAFE_componentWillReceiveProps() {\n    this.setState({\n      // updateEditor: newProps.config.updateEditor,\n      updateEditor: false,\n    });\n  }\n  // COMPONENT WILL RECEIVE PROPS ends\n\n  // COMPONENT DID UPDATE\n  // Any callback from an individual fold precipitates\n  //  a re-render, after which we update Editor...\n  componentDidUpdate() {\n    if (this.state.updateEditor) {\n      // const vals = {\n      // design: this.state.designVals,\n      // style: this.state.style,\n      // advanced: this.state.advanced,\n      // };\n      // this.props.onValuesToEditor(vals);\n      this.props.onValuesToEditor(this.state.foldVals);\n    }\n  }\n  // COMPONENT DID UPDATE ends\n\n  handleDesignFoldCallback(vals) {\n    const foldVals = {\n      fold: 'design',\n      vals,\n    };\n\n    this.setState({\n      foldVals,\n      updateEditor: true,\n    });\n  }\n\n  handleScalesFoldCallback(vals) {\n    const foldVals = {\n      fold: 'scales',\n      vals,\n    };\n\n    this.setState({\n      foldVals,\n      updateEditor: true,\n    });\n  }\n\n  handleAdvancedFoldCallback(vals) {\n    const foldVals = {\n      fold: 'advanced',\n      vals,\n    };\n    this.setState({\n      foldVals,\n      updateEditor: true,\n    });\n  }\n\n  // HANDLE FOLD HEADER CLICK\n  // Header click opens a fold\n  handleFoldHeaderClick(event) {\n    event.preventDefault();\n\n    // get id of new tab\n    const newTab = event.target.getAttribute('href').substr(1);\n\n    this.setState(previousState => {\n      const foldDefs = previousState.foldsList;\n\n      // set active tab to true\n      for (const key in foldDefs) {\n        foldDefs[key].open = key === newTab;\n      }\n      return {\n        foldsList: foldDefs,\n        updateEditor: false,\n      };\n    }, this.props.handleHeightChange);\n  }\n  // HANDLE FOLD HEADER CLICK ends\n\n  // MAKE FOLDS JSX\n  // Called from render to assemble JSX\n  makeFoldsJsx() {\n    const foldDefs = this.state.foldsList;\n    // JSX for individual body components\n    const designConfig = this.props.config.designConfig;\n    const scalesFoldConfig = this.props.config.scalesFoldConfig;\n    const advancedFoldConfig = this.props.config.advancedConfig;\n\n    // But scales fold may be disabled\n    foldDefs.design.disabled = designConfig.disabled;\n    foldDefs.scales.disabled = scalesFoldConfig.disabled;\n    foldDefs.advanced.disabled = advancedFoldConfig.disabled;\n    const bodies = {\n      design: (\n        <DesignFoldBody\n          config={designConfig}\n          onValuesToFoldsWrapper={this.handleDesignFoldCallback}\n        />\n      ),\n      scales: (\n        <ScalesFoldBody\n          config={scalesFoldConfig}\n          onValuesToFoldsWrapper={this.handleScalesFoldCallback}\n        />\n      ),\n      advanced: (\n        <AdvancedFoldBody\n          config={advancedFoldConfig}\n          onValuesToFoldsWrapper={this.handleAdvancedFoldCallback}\n        />\n      ),\n    };\n    return (\n      <div className=\"folds-wrapper\">\n        {process.env.REACT_APP_TEST && (\n          <div className=\"folds-badge-test\">TEST VERSION</div>\n        )}\n        <ul className=\"folds-tab\">\n          {Object.keys(foldDefs).map(fName => (\n            <li\n              key={fName}\n              className={[\n                `tab-${fName}`,\n                foldDefs[fName].open ? 'tab-active' : '',\n                foldDefs[fName].disabled ? 'tab-disabled' : '',\n                fName === 'scales' && scalesFoldConfig.scales.tickCountsMisMatch\n                  ? 'tab-alert'\n                  : '',\n              ].join(' ')}\n            >\n              <a href={`#${fName}`} onClick={this.handleFoldHeaderClick}>\n                {fName}\n              </a>\n            </li>\n          ))}\n        </ul>\n        <div className=\"folds-container\">\n          {Object.keys(foldDefs).map(fName => (\n            <div\n              key={fName}\n              className={[\n                'tab-content',\n                foldDefs[fName].open ? 'tab-content-active' : '',\n              ].join(' ')}\n            >\n              {bodies[fName]}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n  // MAKE FOLDS JSX ends\n\n  // RENDER\n  // Returns folds wrapper and individual folds\n  render() {\n    const foldsJsx = this.makeFoldsJsx();\n    return foldsJsx;\n  }\n}\n\nFoldWrapper.propTypes = {\n  config: PropTypes.object.isRequired,\n  onValuesToEditor: PropTypes.func.isRequired,\n  handleHeightChange: PropTypes.func.isRequired,\n};\n\nexport default FoldWrapper;\n","import React from 'react';\n\nconst BaselinePhotoIcon = ({ size }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={size || 24}\n    height={size || 24}\n    viewBox=\"0 0 24 24\"\n  >\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    <path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\" />\n  </svg>\n);\n\nexport default BaselinePhotoIcon;\n","import React from 'react';\n\nconst BaselineCameraIcon = ({ size }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={size || 24}\n    height={size || 24}\n    viewBox=\"0 0 24 24\"\n  >\n    <path d=\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\" />\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n  </svg>\n);\n\nexport default BaselineCameraIcon;\n","import React from 'react';\n\nconst InsertChartIcon = ({ size }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={size || 24}\n    height={size || 24}\n    viewBox=\"0 0 24 24\"\n  >\n    <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\" />\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n  </svg>\n);\n\nexport default InsertChartIcon;\n","// Assembly and download of PNG and SVG files\n// Default function at bottom calls internal functions.\n/* eslint-disable no-undef, no-unreachable */\n\nimport * as GIF from 'gif.js';\nimport * as d3 from 'd3';\n\n// DOWNSIZE SVG\n// Called from downloadPng/Gif\n// Returns SVG to original size after PNG/GIF bump-up\nfunction downsizeSvg() {\n  const chart = d3.select('.silver-chartwrapper > svg');\n  // Reset attributes\n  chart.attr('transform', null);\n  chart.attr('width', null);\n  chart.attr('height', null);\n}\n// DOWNSIZE SVG\n\n// DOWNLOAD SVG\n// Passed the complete svg text, downloads it to a datastamped .svg file...\nfunction downloadSvg(text, fileName) {\n  // Download element\n  const aElement = document.createElement('a');\n  aElement.setAttribute(\n    'href',\n    `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`,\n  );\n  // Append '.svg' suffix\n  aElement.setAttribute('download', `${fileName}.svg`);\n  document.body.appendChild(aElement);\n  // Send click event\n  // if (document.createEvent) {\n  //   const event = document.createEvent('MouseEvents');\n  //   event.initEvent('click', true, true);\n  //   aElement.dispatchEvent(event);\n  // } else {\n  aElement.click();\n  // }\n  document.body.removeChild(aElement);\n}\n// DOWNLOAD SVG ends\n\n// COMPLETE SVG\n// Called from processExport. Args are the 'raw' svg\n// from the chart; chart dimensions; the SVG config object;\n// and the colourSpace value\n// Prefixes and appends svg header, viewbox, etc to the raw svg\nfunction completeSvg(svgString, dimensions, svgConfig, colourSpace) {\n  // Drop the enclosing svg tags from the svgString\n  // First tag\n  let mySvgStr = svgString.replace(/^<.*?>/, '');\n  // Final tag\n  mySvgStr = mySvgStr.replace(/<\\/svg>/, '');\n  // Assemble an SVG file from boilerplate\n  let svg = '';\n  // Illustrator header (from imported SVG config file)\n  for (const tag in svgConfig.svg.openTag) {\n    if (svgConfig.svg.openTag.hasOwnProperty(tag)) {\n      let myTag = svgConfig.svg.openTag[tag];\n      // Catch the artboard settings and insert chart h/w...\n      if (myTag.includes('viewBox')) {\n        myTag = myTag.replace('width', dimensions.width);\n        myTag = myTag.replace('height', dimensions.height);\n      }\n      svg += myTag;\n    }\n  }\n  // Embed content in group with transform down the page\n  if (colourSpace === 'rgb') {\n    svg += svgConfig.svg.transformRgb;\n  } else {\n    svg += svgConfig.svg.transformCmyk;\n  }\n  // Actual SVG content\n  svg += mySvgStr;\n  // ...and footer\n  svg += svgConfig.svg.footer;\n  return svg;\n}\n// COMPLETE SVG ends\n\n// DOWNLOAD PNG\n// Passed the SVG string and its dimensions, throws it at a canvas\n// and downloads as PNG\nfunction downloadPng(svgString, dimensions, fileName) {\n  const doctype =\n    '<?xml version=\"1.0\" standalone=\"no\"?>' +\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n\n  // create a file blob of our SVG.\n  const blob = new Blob([doctype + svgString], {\n    type: 'image/svg+xml',\n  });\n  const url = window.URL.createObjectURL(blob);\n\n  // Put the svg into an image tag so that the Canvas element can read it in.\n  const img = document.createElement('img');\n  img.setAttribute('width', dimensions.width);\n  img.setAttribute('height', dimensions.height);\n  img.setAttribute('style', 'display:none');\n  document.body.appendChild(img);\n\n  // onload fires when image has loaded...\n  img.onload = () => {\n    // Now that the image has loaded, put the image into a canvas element\n    const canv = document.createElement('canvas');\n    canv.id = 'pngCanvas';\n    canv.width = dimensions.width;\n    canv.height = dimensions.height;\n    canv.setAttribute('style', 'display:none');\n    document.body.appendChild(canv);\n    const ctx = canv.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n    const canvasUrl = canv.toDataURL('image/png');\n    const imgTwo = document.createElement('img');\n    imgTwo.setAttribute('width', dimensions.width);\n    imgTwo.setAttribute('height', dimensions.height);\n    imgTwo.setAttribute('style', 'display:none');\n    document.body.appendChild(imgTwo);\n\n    // This is now the base64 encoded version of the PNG\n    imgTwo.src = canvasUrl;\n\n    // Download the data...\n    const aElement = document.createElement('a');\n    aElement.download = `${fileName}.png`;\n    aElement.href = canvasUrl;\n    document.body.appendChild(aElement);\n    aElement.click();\n    // ...and get rid of the bodies\n    img.parentNode.removeChild(img);\n    imgTwo.parentNode.removeChild(imgTwo);\n    canv.parentNode.removeChild(canv);\n    document.body.removeChild(aElement);\n    window.URL.revokeObjectURL(url);\n    // Revert to original size\n    downsizeSvg();\n  };\n  // Start loading the image (triggering the fcn above)\n  img.src = url;\n}\n// DOWNLOAD PNG ends\n\n// MAKE GIF\n// Called from downloadGif to lever gif.js\nfunction makeGif(\n  imgTwo,\n  ctx,\n  pasteCanvas,\n  dimensions,\n  url,\n  fileName,\n  img,\n  canv,\n) {\n  const gif = new GIF({\n    workers: 3,\n    workerScript: url,\n    quality: 1,\n    repeat: 0,\n    // debug: true,\n    width: dimensions.width,\n    height: dimensions.height,\n  });\n\n  // I have a series of options, according to\n  // what gets passed in...\n  if (typeof canvas === 'undefined') {\n    // Add an image element\n    gif.addFrame(img);\n  } else if (pasteCanvas) {\n    // Or copy the pixels from a canvas context\n    gif.addFrame(ctx, { copy: true, delay: 1000 });\n  } else {\n    // Or add a canvas element\n    gif.addFrame(ctx, { delay: 200 });\n  }\n\n  gif.on('finished', function(blob) {\n    // Download the data...\n    const aElement = document.createElement('a');\n    aElement.download = `${fileName}.gif`;\n    aElement.href = URL.createObjectURL(blob);\n    document.body.appendChild(aElement);\n    aElement.click();\n    // ...and get rid of the bodies\n    img.parentNode.removeChild(img);\n    imgTwo.parentNode.removeChild(imgTwo);\n    canv.parentNode.removeChild(canv);\n    document.body.removeChild(aElement);\n    window.URL.revokeObjectURL(url);\n  });\n\n  gif.render();\n}\n\n// DOWNLOAD GIF\n// Passed the SVG string and its dimensions, throws it at a canvas\n// and downloads as GIF\n// NOTE: this duplicates downloadPng like hell. Refactor when working\nfunction downloadGif(svgString, dimensions, fileName) {\n  const doctype =\n    '<?xml version=\"1.0\" standalone=\"no\"?>' +\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n\n  // create a file blob of our SVG.\n  const blobA = new Blob([doctype + svgString], {\n    type: 'image/svg+xml',\n  });\n  const url = window.URL.createObjectURL(blobA);\n\n  // Put the svg into an image tag so that the Canvas element can read it in.\n  const img = document.createElement('img');\n  img.setAttribute('width', dimensions.width);\n  img.setAttribute('height', dimensions.height);\n  img.setAttribute('style', 'display:none');\n  document.body.appendChild(img);\n  // onload fires when image has loaded...\n  img.onload = () => {\n    // Now that the image has loaded, put the image into a canvas element\n    const canv = document.createElement('canvas');\n    canv.id = 'pngCanvas';\n    canv.width = dimensions.width;\n    canv.height = dimensions.height;\n    canv.setAttribute('style', 'display:none');\n    document.body.appendChild(canv);\n    const ctx = canv.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n    // So at this point there's a canvas displaying the chart\n\n    // There's three ways of going at this:\n    // To derive the Gif from the entire canvas\n    // makeGif(undefined, ctx, false, dimensions);\n    // By pasting pixels from the canvas\n    // makeGif(undefined, ctx, true, dimensions);\n    // Or, from the image\n    // makeGif(img, undefined, false, dimensions);\n    const canvasUrl = canv.toDataURL('image/gif');\n    const imgTwo = document.createElement('img');\n    imgTwo.setAttribute('width', dimensions.width);\n    imgTwo.setAttribute('height', dimensions.height);\n    imgTwo.setAttribute('style', 'display:none');\n    document.body.appendChild(imgTwo);\n\n    // This is now the base64 encoded version of the PNG\n    imgTwo.src = canvasUrl;\n\n    // load the GIF web worker\n    // we have to add the js file in our static folder and then fetch\n    // https://observablehq.com/@mbostock/canvas-to-gif\n    fetch('gif.worker.js')\n      .then(response => response.blob())\n      .then(blob =>\n        URL.createObjectURL(blob, {\n          type: 'text/javascript',\n        }),\n      )\n      .then(workerUrl =>\n        makeGif(\n          imgTwo,\n          undefined,\n          false,\n          dimensions,\n          workerUrl,\n          fileName,\n          img,\n          canv,\n        ),\n      );\n    // Revert to original size\n    downsizeSvg();\n  };\n  // Start loading the image (triggering the fcn above)\n  img.src = url;\n}\n// DOWNLOAD GIF ends\n\n// GET LONGEST SVG STRING\n// Called from default. Generates 5 svg strings and returns the longest\nfunction getLongestSvgString(svgAsXml) {\n  const svgArray = [];\n  for (let sNo = 0; sNo < 5; sNo++) {\n    const svgStr = new XMLSerializer().serializeToString(svgAsXml);\n    const svgLen = svgStr.length;\n    svgArray.push({ svgStr, svgLen });\n  }\n  // Sort in descending order and return first\n  svgArray.sort((a, b) => {\n    return b.svgLen - a.svgLen;\n  });\n  return svgArray[0].svgStr;\n}\n// GET LONGEST SVG STRING\n\n// PROCESS EXPORT\n// Called from default. Args are:\n// true for SVG, false for PNG\n// dimensions of chart\n// File name\n// the SVG config object\n// NOTE: really, this should be in props here\nexport function processExport(\n  colourSpace,\n  dimensions,\n  fileName,\n  isPng,\n  isSvg,\n  svgConfig,\n) {\n  // Pull in the svg and convert to string form:\n  // NOTE: this could do with sorting out properly...\n  const svgAsXml = document.querySelector('.silver-chartwrapper > svg');\n  // const svgString = new XMLSerializer().serializeToString(svgAsXml);\n  const svgString = getLongestSvgString(svgAsXml);\n  if (isSvg) {\n    const svgExport = completeSvg(\n      svgString,\n      dimensions,\n      svgConfig,\n      colourSpace,\n    );\n    // And call function to download\n    downloadSvg(svgExport, fileName, svgConfig);\n  } else if (isPng) {\n    // PNG or GIF\n    downloadPng(svgString, dimensions, fileName);\n  } else {\n    downloadGif(svgString, dimensions, fileName);\n  }\n}\n// PROCESS EXPORT ends\n\n// DEFAULT\n// Callback from footer.js > handleSvg/Png/GifExportClick\n// Simply unpicks args before calling processExport\nexport default function(argObj) {\n  processExport(\n    argObj.colourSpace,\n    argObj.dimensions,\n    argObj.fileName,\n    argObj.isPng,\n    argObj.isSvg,\n    argObj.svgConfig,\n  );\n}\n// This earlier version used a timeout\n// export default function(isSvg, dimensions, fileName, svgConfig, isPng) {\n//   setTimeout(() => {\n//     processExport(isSvg, dimensions, fileName, svgConfig, isPng);\n//   }, 100);\n// }\n","// Editor\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// Utilities\nimport * as EditorUtils from './utilities/editor-utilities';\nimport * as OtherUtils from './utilities/other-utilities';\nimport * as EditorConfigDefaultUtils from './utilities/editor-config-default-utilities';\nimport * as Filename from './utilities/filename';\nimport * as EditorConfigUtils from './utilities/editor-config-utilities';\nimport * as ScaleConfigUtils from './utilities/scale-config-utilities';\nimport * as ScaleCallbackUtils from './utilities/scale-callback-utilities';\nimport * as AdvancedFoldUtils from './utilities/advanced-fold-utilities';\nimport * as MonteuxExport from './monteux/monteux-export';\n// Sub-components\nimport SizeAndPreset from './size-and-preset/size-and-preset';\nimport Panels from './panels/panels';\nimport Alerts from './panels/alerts';\nimport Strings from './strings/strings';\nimport FoldsWrapper from './folds/folds-wrapper';\nimport FooterWrapper from './footer/footer';\nimport MonteuxImport from './monteux/monteux-import';\n// Assets\nimport globalAssets from './assets/globalAssets';\nimport { updateOnlineSubPreset } from './utilities/payload-utilities/presets-utilities';\n\nlet DefaultChartConfig,\n  DefaultPreferences,\n  PresetPreferences,\n  ColourLookup;\n\n\nclass SilverEditor extends Component {\n  static get defaultProps() {\n    return {\n      // 'iden' must match specific fold selector in css\n      // 'Design' fold is open by default\n      folds: {\n        design: {\n          iden: 'design',\n          display: 'Design',\n          open: true,\n          disabled: false,\n          errorMsg: '',\n        },\n        scales: {\n          iden: 'scales',\n          display: 'Scales',\n          open: false,\n          disabled: false,\n          errorMsg: '',\n        },\n        advanced: {\n          iden: 'advanced',\n          display: 'Advanced',\n          open: false,\n          disabled: false,\n          errorMsg: '',\n        },\n      },\n      // Styles compatible with double scales\n      doubleableStyles: ['line', 'stepline', 'pointline', 'column', 'none'],\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    // ***callSibyl*** is a flag that determines whether componentDidUpdate\n    // can wake Sibyl up. It's set false by default and when new props\n    // arrive from index.js. But any user-event sets true.\n    // Ditto ***updateMonteux***, which determines whether EditorConfig data\n    // are exported to the data sheets.\n    // ***editorConfig*** is this component's internal configuration object\n    // ***chartConfig*** is the configuration object that gets passed ChartSide\n    // ***headersChanged*** is tripped if the column headers have changed in\n    // incoming rawData, indicating possible restructure\n    // ***newPayload*** determines whether the calculated min/max/incr should overwrite\n    // the user-fields in Scales. False by default; but gets set true on new data acquisition...\n    this.state = {\n      loadingAssets: true,\n      callSibyl: false,\n      updateMonteux: false,\n      chartConfig: {},\n      editorConfig: {},\n      headersChanged: false,\n      newPayload: false,\n    };\n    // Subcomponent handlers\n    this.handleValuesFromSizeAndPreset = this.handleValuesFromSizeAndPreset.bind(\n      this,\n    );\n    this.handleValuesFromPanels = this.handleValuesFromPanels.bind(this);\n    this.handleValuesFromStrings = this.handleValuesFromStrings.bind(this);\n    this.handleValuesFromFooter = this.handleValuesFromFooter.bind(this);\n    this.handleValuesFromFoldsWrapper = this.handleValuesFromFoldsWrapper.bind(this);\n    this.handleMonteuxImportValues = this.handleMonteuxImportValues.bind(this);\n  }\n\n  // NOTE: lifecycle stuff all needs fixing big-time. I can't be initialising\n  // the editor and chart config objects like this. It was all based on the way I set\n  // up the initial paste-in field. But now that we're talking to Monteux, that\n  // all needs completely refactoring\n\n  // COMPONENT WILL MOUNT\n  // Calls makeNewChartConfig to assemble a new default chart CO\n  // ...and initiateNewEdConfig to assemble default editor CO\n  UNSAFE_componentWillMount() {\n\n    // load external assets: a collection of JSON files containing all the available settings\n    let assetsFolder = 'assets',\n      assetFiles = [\n        'default_chart_config.json',\n        'default_preferences.json',\n        'preset_preferences.json',\n        'colours.json'\n      ].map(assetFile => [assetsFolder,assetFile].join('/'));\n\n    // fetch all the files\n    Promise\n      .all(assetFiles.map(assetFile => fetch(assetFile)))\n      .then(responses => {\n        // fetching files means getting a Response stream object, not the file itself,\n        // so call the json() method of the Response interface to read the file\n        Promise\n          // json method return a promise which resolves with the result of parsing the body text as JSON\n          .all(responses.map(response => response.json()))\n          .then(JSONs => {\n            \n            // JSONs available, populate all the config and preferences objects            \n            DefaultChartConfig  = JSONs[0]; // The default internal config object, to be 'beefed up' with specifics\n            DefaultPreferences  = JSONs[1]; // Default preferences\n            PresetPreferences   = JSONs[2]; // Preset preferences\n            ColourLookup        = JSONs[3]; // Colour definitions\n\n            // make all the asset objects available for other modules\n            globalAssets.DefaultChartConfig = DefaultChartConfig;\n            globalAssets.DefaultPreferences = DefaultPreferences;\n            globalAssets.PresetPreferences  = PresetPreferences;\n            globalAssets.ColourLookup       = ColourLookup;\n\n            const presetsConfig = this.getPresetsObjectByUser(false);\n            const chartConfig = this.makeNewChartConfig(presetsConfig);\n            // Arg 2 is string for consistency with payload import\n            const editorConfig = EditorConfigUtils.initiateNewEdConfig(\n              presetsConfig,\n              'false',\n              1,\n              '000',\n            );\n            chartConfig.metadata.editorMount = false;\n            // Setting state here makes it available on first render...\n            this.setState({\n              loadingAssets: false,\n              chartConfig,\n              editorConfig,\n              headersChanged: false,\n              isDataError: false,\n              dataErrorString: '',\n            });\n          })\n          .catch(console.error)\n      });    \n  }\n  // COMPONENT WILL MOUNT ends\n\n  UNSAFE_componentWillReceiveProps() {\n    // Set flag to prevent reflex bounce-back to Sibyl\n    const callSibyl = false;\n    const updateMonteux = false;\n    // This isn't new raw data, so:\n    const newPayload = false;\n    this.setState({ callSibyl, updateMonteux, newPayload });\n  }\n\n  // COMPONENT DID UPDATE\n  // After state-reset and render, calls fcn to\n  // update CO from editorConfig (chained to callback)\n  componentDidUpdate() {\n    if (this.state.callSibyl) {\n      this.reconcileEditorToChartConfig();\n    }\n    if (this.state.updateMonteux) {\n      const { editorConfig } = this.state;\n      MonteuxExport.updateGoogleSheet(editorConfig);\n    }\n  }\n  // COMPONENT DID UPDATE ends\n\n\n  // GET PRESETS OBJECT BY USER\n  // Called variously\n  // Creates an object with preset properties, depending on\n  // user (economist or eiu), for passing down various chains\n  // Params are a flag to indicate whether to look for presets\n  // in edConfigGlobal, and (possibly) an existing presets object\n  // extracted from the Monteux payload\n  getPresetsObjectByUser(useGlobal, ppObj) {\n    // User is baked into the build\n    const { user } = this.props;\n    const dpMetaDef = DefaultPreferences.metadata.defaults;\n    const edConfigGlobal = this.state.editorConfig.global;\n    // User-specific presets object\n    const userPresets = Object.assign({}, PresetPreferences[user]);\n    // Names of preset and subpreset to pinpoint in the userPresets\n    // Absolute defaults:\n    let presetName = dpMetaDef.preset[user];\n    let subpresetName = dpMetaDef.subPreset[user];\n    // If edConfigGlobal is flagged and exists:\n    if (useGlobal && typeof edConfigGlobal !== 'undefined') {\n      presetName = edConfigGlobal.presets.preset;\n      subpresetName = edConfigGlobal.presets.subPreset;\n    } else if (typeof ppObj !== 'undefined') {\n      // Or use props from Monteux payload, if any\n      presetName = ppObj.preset;\n      subpresetName = ppObj.subPreset;\n    }\n    const pObj = {\n      user,\n      userPresets,\n      presetName,\n      subpresetName,\n    };\n    return pObj;\n  }\n  // GET PRESETS OBJECT BY USER\n\n  // GET DEFAULT CHART CONFIG PROPERTIES\n  // Called from makeNewChartConfig to set properties to default\n  // values in default preferences file. These default properties are:\n  // - metadata: newchart, panels, preset, section, subPreset, type\n  // - background.outerbox: dimensions, etc.\n  // Calls setBackgroundProperties to update actual background...\n  getDefaultChartConfigProperties(defaultConfig, presetsConfig) {\n    // Metadata; default preset and section\n    const dps = Object.assign({}, DefaultPreferences);\n    const metadata = Object.assign({}, dps.metadata.defaults);\n    // Append colour lookup to metadata\n    metadata.colours = ColourLookup.colours;\n    // const { preset } = metadata;\n    // const { subPreset } = metadata;\n    // const userPresets = this.getUserPresets();\n    // const presets = { preset, subPreset, userPresets };\n    // Default chart object\n    defaultConfig.panelArray[\n      metadata.chartIndex\n    ] = EditorUtils.getNewChartObject(this.state.newPayload, presetsConfig);\n    // I need to impose all default background properties\n    EditorConfigUtils.setBackgroundProperties(\n      defaultConfig,\n      presetsConfig,\n      true,\n    );\n    // And don't forget the metadata itself\n    defaultConfig.metadata = metadata;\n    return defaultConfig;\n  }\n  // GET DEFAULT CHART CONFIG PROPERTIES ends\n\n  // MAKE NEW CHART CONFIG\n  // Called from componentWillMount and when new panel is added\n  // Clones the default CO and calls fcn to populate it. Then sets it\n  // as activeCO and appends to CO array...\n  makeNewChartConfig(presetsConfig) {\n    // Clone empty config structure\n    const emptyConfig = Object.assign({}, DefaultChartConfig);\n    // Insert default properties and set as global:\n    const chartConfig = this.getDefaultChartConfigProperties(\n      emptyConfig,\n      presetsConfig,\n    );\n    // Return, so that caller, componentWillMount, can set it on state\n    // before first render...\n    return chartConfig;\n  }\n  // MAKE NEW CHART CONFIG ends\n\n  // ===========================================================================\n  // === NEW CHART UTILITIES END\n  // ===========================================================================\n\n  // SET PRESET SOURCE STRING\n  // Called from handleValuesFromSizeAndPreset. This is uncomfortably\n  // inferential, but I suspect we just have to be brazen about it:\n  // LD charts omit source. Params are subPreset string and\n  // global editorConfig\n  // NOTE: is this even necessary, since it's the 'display' flag\n  // that will determine whether a source shows...\n  setPresetSourceString(presetNode, edConfigGlobal) {\n    // Dig down in the node, for source string...\n    const defaultSource = (\n      (((presetNode || {}).background || {}).strings || {}).source || {}\n    ).content;\n    let mySource = edConfigGlobal.strings.source;\n    if (typeof defaultSource !== 'undefined') {\n      // If there's a defined default for this subPreset, use it\n      mySource = defaultSource;\n    } else if (mySource.length === 0) {\n      // No set default. But if source was prev'y empty, we revert\n      // to a default (i.e. switching from LD to another subPreset)\n      const dps = Object.assign({}, DefaultPreferences);\n      mySource = dps.other.defaultSource;\n    }\n    edConfigGlobal.strings.source = mySource;\n  }\n  // SET PRESET SOURCE STRING ends\n\n  // RECONCILE EDITOR TO CHART CONFIG\n  // I pass editorConfig data to chartConfig, do any consequent\n  // actions, then send the chartConfig up to Sibyl...\n  reconcileEditorToChartConfig() {\n    // Get bearings:\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    // User-specific presets\n    const presetsConfig = this.getPresetsObjectByUser(true);\n    // GLOBAL PROPERTIES\n    const chartConfig = this.state.chartConfig;\n    EditorConfigUtils.reconcileEditorToChartGlobalConfig(\n      edConfigGlobal,\n      chartConfig,\n      presetsConfig,\n    );\n    // PANELS\n    // Loop through ALL panels:\n    const configPanelArray = [];\n    const pCount = editorConfig.panels.length;\n    for (let pNo = 0; pNo < pCount; pNo++) {\n      const onePanel = editorConfig.panels[pNo];\n      const onePanelConfig = EditorConfigUtils.reconcileEditorToChartPanelConfig(\n        onePanel,\n        presetsConfig,\n      );\n      configPanelArray.push(onePanelConfig);\n    }\n    chartConfig.panelArray = configPanelArray;    \n\n    // The last thing to do, before we go whizzing off chartside,\n    // is add definitions for any additional colours.\n    // NOTE: do I even need to do next, if limited number of series?\n    EditorConfigUtils.defineAdditionalColours(chartConfig);\n    // Callback to index.js, heading for chartside...\n    this.props.onPassUpdatedConfig(JSON.parse(JSON.stringify(chartConfig)));\n  }\n  // RECONCILE EDITOR TO CHART CONFIG ends\n\n  // NO DATA\n  // Called from handleValuesFromFoldsWrapper. Don't respond to\n  // any user gesture if there aren't any data to process\n  noData() {\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    const { chartIndex } = edConfigGlobal;\n    const onePanel = editorConfig.panels[chartIndex];\n    return onePanel.chartData.dataArray.length === 0;\n  }\n  // NO DATA ends\n\n  // GET SECTIONID FOR NEW PRESET\n  // Called from handleValuesFromSizeAndPreset. When user changes\n  // subpreset, this verifies that the section or country code in\n  // the existing filename is found in the list of codes for the\n  // new subpreset. If not, resets to default code for the new subpreset\n  // Params are object including filename; preset node and its child subpreset node\n  getSectionIdForNewPreset(pObj, pNode, spNode) {\n    // I need a list of codes\n    // Look in subpreset first; if not found look in parent preset\n    let sections = spNode.sections;\n    if (typeof sections === 'undefined') {\n      sections = pNode.sections;\n    }\n    // Isolate filename\n    // NOTE: I had a query here about whether we need the eco/eiu user flag...\n    // ...but it seems that we don't... for now, at least...\n    let id = Filename.getFilenameSectionId(pObj.name);\n    // Search list for an item with existing code. If not\n    // found, revert to default\n    if (!sections.list.some(item => item.code === id)) {\n      id = sections.default;\n    }\n    return id;\n  }\n  // GET SECTIONID FOR NEW PRESET ends\n\n  // ===========================================================================\n  // === EVENT HANDLERS\n  // ===========================================================================\n\n  // HANDLE VALUES FROM SIZE AND PRESET\n  // Event from size or preset\n  handleValuesFromSizeAndPreset(values) {\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    const myPresets = edConfigGlobal.presets;\n    const mySize = edConfigGlobal.size;\n    // Existing sub/preset\n    const existingPreset = myPresets.preset;\n    const existingSubPreset = myPresets.subPreset;\n    // New (or not) preset\n    const { preset } = values.preset;\n    const { subPreset } = values.preset;\n    let newPreset = false;\n    if (existingPreset !== preset || existingSubPreset !== subPreset) {\n      newPreset = true;\n    }\n    // Isolate user PPs (economist/eiu)\n    const { user } = edConfigGlobal;\n    const userPPs = PresetPreferences[user];\n    const presetNode = userPPs[preset];\n    const subpresetNode = userPPs[preset][subPreset];\n\n    if (newPreset) {\n      myPresets.preset = preset;\n      myPresets.subPreset = subPreset;\n      // Update size to preset default\n      // Get the user-specific presets, but overwrite with\n      // new sub/preset\n      const presetsConfig = this.getPresetsObjectByUser(false);\n      presetsConfig.presetName = preset;\n      presetsConfig.subpresetName = subPreset;\n      // Get preset size:\n      const chainA = ['background', 'outerbox', 'dimensions'];\n      const presetSize = EditorConfigUtils.findPreferencesNode(\n        presetsConfig,\n        chainA,\n      );\n      // Is size of new preset forced?\n      // mySize.forceWidth = presetSize.forceWidth;\n      // mySize.forceHeight = presetSize.forceHeight;\n      if (presetSize.forceHeight) {\n        mySize.height = presetSize.height;\n      }\n      if (presetSize.forceWidth) {\n        mySize.width = presetSize.width;\n      }\n      mySize.pngWidth = presetSize.pngWidth;\n      // Set Illustrator colour space\n      EditorConfigUtils.setIllustratorColourSpace(\n        edConfigGlobal,\n        presetsConfig,\n      );\n      // Chartwrapper has to scale for responsive DCs\n      OtherUtils.setChartWrapperScaleClass(presetsConfig);\n    } else {\n      // No change to Preset\n      if(values.size) {\n        // so set size to what's just arrived\n        mySize.width = values.size.width;\n        mySize.height = values.size.height;\n      }            \n    }\n\n    // Section. If preset has changed, section *may* change\n    // In PPs, sections has props default (a string) and list\n    // I want to bring those across to edConfigGlobal.fileName.sections\n    // which has props default, dateIndex and list\n    const presetObj = {\n      preset,\n      subPreset,\n      name: edConfigGlobal.fileName.name,\n    };\n    // Section id is extracted from filename -- unless\n    // id isn't found in new preset, in which case\n    // substitute preset's default id\n    const sectionID = this.getSectionIdForNewPreset(\n      presetObj,\n      presetNode,\n      subpresetNode,\n    );\n    //\n    const mySections = edConfigGlobal.fileName.sections;\n    let sections = subpresetNode.sections;\n    if (typeof sections === 'undefined') {\n      sections = presetNode.sections;\n    }\n    mySections.list = sections.list;\n    mySections.default = sections.default;\n    // Index , by code\n    // NOTE: this lookup is dup'd in EditorConfigUtils. Do better?\n    mySections.index = sections.list.findIndex(\n      // item => item.code === sections.default,\n      item => item.code === sectionID,\n    );\n    // Update file name, retaining existing file number\n    edConfigGlobal.fileName.name = Filename.updateFileName(\n      edConfigGlobal.fileName,\n      sectionID,\n      edConfigGlobal.user,\n    );\n    // LD charts omit source...\n    this.setPresetSourceString(presetNode, edConfigGlobal);\n    this.setState({\n      callSibyl: true,\n      updateMonteux: true,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      newPayload: false,\n      editorConfig,\n    });\n  }\n  // HANDLE VALUES FROM SIZE AND PRESET ends\n\n  // GET DEFAULT SIDE\n  // Called from handleValuesFromChartTypeComponent to\n  // determine default side for new chart type\n  // NOTE: questionable bit of hard-coding...\n  // NOTE: and at some point I need to add top/bottom\n  // to the way scales are 'sided'\n  // H-thermos added Jul'20\n  getDefaultSide(chartType) {\n    let side = 'right';\n    if (chartType === 'bar' || chartType === 'thermohorizontal') {\n      side = 'left';\n    }\n    return side;\n  }\n  // GET DEFAULT SIDE ends\n\n  // HANDLE NEW SCATTER FROM CHART TYPE COMPONENT\n  // Called from handleValuesFromChartTypeComponent, if type\n  // is (sized-)scatter. This allows for different data structure\n  handleNewScatterFromChartTypeComponent(values, editorConfig) {\n    const onePanel = EditorUtils.getActivePanel(editorConfig);\n    // NOTE: on scatters, left = x-axis and right = y-axis\n    // Flag 2/3-d scatter\n    const isSimple = !values.type.includes('sized');\n    // Set scatter props now, so that when\n    // EditorUtils.splitScatterDataArray is called, down\n    // the line, it knows whether it's a simple or sized scatter\n    onePanel.scales.scatter.isScatter = true;\n    onePanel.scales.scatter.isSimple = isSimple;\n    // Update scale MMI etc values\n    EditorConfigDefaultUtils.revertPanelDefaultVals(\n      editorConfig,\n      'chartType',\n      values.type,\n      this.state.newPayload,\n    );\n    //\n    //\n    onePanel.enableScale.left = true;\n    onePanel.enableScale.right = true;\n    onePanel.chartType.left.type = values.type;\n    onePanel.chartType.left.stacked = false;\n    onePanel.chartType.left.log = false;\n    onePanel.chartType.left.thermoDots = false;\n    onePanel.chartType.left.scatterLabels = values.scatterLabels;\n    onePanel.chartType.left.scatterTrendline = values.scatterTrendline;\n    onePanel.chartType.right.type = values.type;\n    onePanel.chartType.right.stacked = false;\n    onePanel.chartType.right.log = false;\n    onePanel.chartType.right.thermoDots = false;\n    onePanel.chartType.right.scatterLabels = values.scatterLabels;\n    onePanel.chartType.right.scatterTrendline = values.scatterTrendline;\n    // ...and updates by ref\n  }\n  // HANDLE NEW SCATTER FROM CHART TYPE COMPONENT ends\n\n  handleOldScatterFromChartTypeComponent(\n    values,\n    editorConfig,\n    enableSide,\n    newType,\n  ) {\n    const onePanel = EditorUtils.getActivePanel(editorConfig);\n    // Get side for new type\n    let disableSide = 'left';\n    if (enableSide === 'left') {\n      disableSide = 'right';\n    }\n    onePanel.enableScale[enableSide] = true;\n    onePanel.enableScale[disableSide] = false;\n    onePanel.chartType[enableSide].type = newType;\n    onePanel.chartType[disableSide].type = 'none';\n    onePanel.chartType[enableSide].stacked = false;\n    onePanel.chartType[disableSide].stacked = false;\n    onePanel.chartType[enableSide].thermoDots = false;\n    onePanel.chartType[disableSide].thermoDots = false;\n    onePanel.chartType[enableSide].scatterLabels = false;\n    onePanel.chartType[disableSide].scatterLabels = false;\n    onePanel.chartType[enableSide].scatterTrendline = false;\n    onePanel.chartType[disableSide].scatterTrendline = false;\n    EditorConfigDefaultUtils.revertPanelDefaultVals(\n      editorConfig,\n      'chartType',\n      values.type,\n      this.state.newPayload,\n    );\n\n    onePanel.scales[disableSide] = Object.assign(\n      {},\n      EditorConfigDefaultUtils.getDefaultScaleSideProps(),\n    );\n    onePanel.scales.scatter.isScatter = false;\n    onePanel.scales.scatter.isSimple = true;\n  }\n\n  // HANDLE VALUES FROM CHART TYPE COMPONENT\n  // Called from handleValuesFromFoldsWrapper to process\n  // chart-type, stacking and other minor options\n  // NOTE: by definition, if we're handling changes from Chart Type\n  // component, only one side is 'active'\n  handleValuesFromChartTypeComponent(values) {\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    const { chartIndex } = edConfigGlobal;\n    const onePanel = editorConfig.panels[chartIndex];\n    const oldSide = EditorUtils.getSide(onePanel);\n    const oldType = onePanel.chartType[oldSide].type;\n    // I have to adjust type for stacking\n    let newType = values.type;\n    // Tables are a total fuckup. To work round the problem,\n    // I set a flag here; pretend that we want a line chart,\n    // so that all the required defaults get set, then\n    // fix table-specifics at the bottom of this function\n    const isTable = newType === 'table';\n    if (isTable) {\n      newType = 'line';\n    }\n    // if (newType === 'table') {\n    //   // FIXME: 'get it working' kludge\n    //   this.handleTableType(editorConfig, chartIndex);\n    //   return;\n    // }\n    // This isn't fully followed up; but I put an\n    // overall chart type at top level\n    onePanel.overallChartType = newType;\n    const newSide = this.getDefaultSide(newType);\n    const isScatter = newType.includes('scatter');\n    const wasScatter = onePanel.chartType.left.type.includes('scatter');\n    // FIXME: can we try to regard this as a kludge, until\n    // I can get scatters working...?\n    // FIXME: further kludging, Aug'19. In the short term,\n    // I want to pre-empt any scale or other radical changes\n    // after scatter-labels or thermo-dots changed\n    const whatChanged = values.whatChanged;\n    let majorChange = true;\n    if (whatChanged === 'scatter-labels') {\n      onePanel.chartType.left.scatterLabels = values.scatterLabels;\n      onePanel.chartType.right.scatterLabels = values.scatterLabels;\n      majorChange = false;\n    } else if (whatChanged === 'scatter-trendline') {\n      onePanel.chartType.left.scatterTrendline = values.scatterTrendline;\n      onePanel.chartType.right.scatterTrendline = values.scatterTrendline;\n      majorChange = false;\n    } else if (whatChanged === 'thermo-dots') {\n      onePanel.chartType.left.thermoDots = values.thermoDots;\n      onePanel.chartType.right.thermoDots = values.thermoDots;\n      majorChange = false;\n    }\n    // Still in FIXME: mode: this condition is shit!\n    // Actually, it's *all* shit.\n    if (majorChange) {\n      if (isScatter) {\n        // NOTE: needs more work. Compare new and old type, for a start...\n        // ...because if it hasn't changed, we do nothing, anyway\n        this.handleNewScatterFromChartTypeComponent(values, editorConfig);\n      } else if (wasScatter) {\n        this.handleOldScatterFromChartTypeComponent(\n          values,\n          editorConfig,\n          newSide,\n          newType,\n        );\n      } else {\n        // NOTE: this fork should be separate fcn\n        // Still here? Non-scatter, where one 'side' is active\n        onePanel.scales.scatter.isScatter = false;\n        // Chart type determines left/right enabling\n        // And if this came from chart type, and not a scatter, scale must be single\n        // So (ignoring any stacking) which side...?\n        // NOTE: bar charts map top:left and bottom:right\n        if (newSide !== oldSide) {\n          // Swap over axis Prefs\n          onePanel.scales[newSide] = Object.assign(\n            {},\n            onePanel.scales[oldSide],\n          );\n          // And set other (old) side to default values:\n          onePanel.scales[oldSide] = Object.assign(\n            {},\n            EditorConfigDefaultUtils.getDefaultScaleSideProps(),\n          );\n          onePanel.enableScale[newSide] = true;\n          onePanel.enableScale[oldSide] = false;\n          onePanel.chartType[oldSide].type = 'none';\n          onePanel.chartType[oldSide].stacked = false;\n          onePanel.chartType[oldSide].thermoDots = false;\n          onePanel.chartType[oldSide].scatterLabels = false;\n          onePanel.chartType[oldSide].scatterTrendline = false;\n        }\n        // Is chart currently stacked?\n        const oldStacked = onePanel.chartType[oldSide].stacked;\n        let newStacked = values.stacked;\n        // But (Dec'18) there's a loose cannon: if we're changing from a stacked\n        // bar or column chart to a line chart, I need to check that the values\n        // are legal for a layer cake (can't mix +/- values in any one series).\n        // NOTE: next few lines can outsource...\n        // If chart type has changed, to 'step/line'...\n        if (\n          newType !== oldType &&\n          (newType === 'line' || newType === 'stepline')\n        ) {\n          // ...and if the data are 'currently' stacked...\n          if (oldStacked) {\n            // ...check if they are legal as a layer cake:\n            newStacked = EditorConfigUtils.willDataLayerCake(\n              onePanel.chartData,\n            );\n          }\n        }\n        // Set new side:\n        onePanel.chartType[newSide].type = newType;\n        onePanel.chartType[newSide].stacked = newStacked;\n        onePanel.chartType[newSide].thermoDots = values.thermoDots;\n        onePanel.chartType[newSide].scatterLabels = values.scatterLabels;\n        onePanel.chartType[newSide].scatterTrendline = values.scatterTrendline;\n        // Call revertPanelDefaultVals if stacking or orientation has changed\n        // NOTE: log scales...?\n        let newRdv = false;\n        if (oldStacked !== newStacked) {\n          newRdv = true;\n        } else if (!values.sameOrientation) {\n          newRdv = true;\n        }\n        if (newRdv) {\n          EditorConfigDefaultUtils.revertPanelDefaultVals(\n            editorConfig,\n            'chartType',\n            values.type,\n            this.state.newPayload,\n          );\n        }\n      }\n      // Axis headers\n      AdvancedFoldUtils.updateDefaultAxisHeadersInEdConfig(onePanel, false);\n    }\n    if (isTable) {\n      // Pick up the table 'side-step'. Having pretended that\n      // we wanted a line chart, to get the required defaults\n      // in place, now kick myself in the shins and tell me\n      // to be a table!\n      // FIXME: this is a desperate emergency kludge that\n      // only a major refactor of data structure can fix\n      onePanel.chartType.left.type = 'table';\n      onePanel.chartType.right.type = 'table';\n      // Set legend columns, to force no space for legends\n      // (Not the best way to do this)\n      onePanel.legend.columns = 0;\n    }\n    this.setState({\n      callSibyl: true,\n      updateMonteux: true,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      newPayload: false,\n      editorConfig,\n    });\n  }\n  // HANDLE VALUES FROM CHART TYPE COMPONENT ends\n\n  // HANDLE VALUES FROM BLOB COMPONENT\n  handleValuesFromBlobComponent(values) {\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    const { chartIndex } = edConfigGlobal;\n    const onePanel = editorConfig.panels[chartIndex];\n    const myBlobs = onePanel.blobs;\n    myBlobs.column = values.column;\n    myBlobs.hasBlobs = values.column > 0;\n    myBlobs.header = values.header;\n    // If only the bubble/block flag has changed, I don't need to change anything\n    // except that in EditorConfig\n    if (values.isRect !== myBlobs.isRect) {\n      myBlobs.isRect = values.isRect;\n    } else {\n      // Otherwise, I've switched blobs on or off, or changed the blob column,\n      // in which case I need to reset scale vals to raw defaults\n      EditorConfigDefaultUtils.revertPanelDefaultVals(\n        editorConfig,\n        'blobs',\n        '',\n        this.state.newPayload,\n      );\n    }\n    this.setState({\n      callSibyl: true,\n      updateMonteux: true,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      newPayload: false,\n      editorConfig,\n    });\n  }\n  // HANDLE VALUES FROM BLOB COMPONENT ends\n\n  // HANDLE VALUES FROM LEGEND COMPONENT\n  handleValuesFromLegendComponent(values) {\n    const { editorConfig } = this.state;\n    const { chartIndex } = editorConfig.global;\n    const onePanel = editorConfig.panels[chartIndex];\n    const myLegend = onePanel.legend;\n    myLegend.header = EditorUtils.smartenQuotes(values.header);\n    myLegend.columns = values.columns;\n    myLegend.max = values.max;\n    this.setState({\n      callSibyl: true,\n      updateMonteux: true,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      newPayload: false,\n      editorConfig,\n    });\n  }\n  // HANDLE VALUES FROM LEGEND COMPONENT ends\n\n  // HANDLE VALUES FROM FOLDS WRAPPER\n  // Callback from the Folds wrapper\n  // But which sub-component called out?\n  handleValuesFromFoldsWrapper(values) {\n    // We can't do anything unless there's some data to do it to:\n    if (values.vals.source !== 'rawData' && this.noData()) {\n      return;\n    }\n    if (values.fold === 'design') {\n      // Design fold\n      const { source } = values.vals;\n      if (source === 'chartType') {\n        this.handleValuesFromChartTypeComponent(values.vals);\n      } else if (source === 'blobs') {\n        this.handleValuesFromBlobComponent(values.vals);\n      } else {\n        this.handleValuesFromLegendComponent(values.vals);\n      }\n    } else if (values.fold === 'advanced') {\n      const { source } = values.vals;\n      if (source === 'rawData') {\n        // Data from the Advanced fold's textfield,\n        // now handled by Monteux chain (false for not payload)\n        this.handleMonteuxImportValues(values.vals, false);\n      } else if (source === 'axisHeaders') {\n        this.handleValuesFromAxisHeadersComponent(values.vals);\n      } else if (source === 'numberBox') {\n        this.handleValuesFromNumberBoxComponent(values.vals);\n      }\n    } else if (values.fold === 'scales') {\n      // Function here acts as intermediary, calling\n      // handler in ScaleCallbackUtils, then resetting state\n      this.fieldValuesFromScalesFold(values);\n    }\n  }\n  // HANDLE VALUES FROM FOLDS WRAPPER ends\n\n  // HANDLE VALUES FROM AXIS HEADERS COMPONENT\n  // Called from handleValuesFromFoldsWrapper. Extracts\n  // axis headers\n  handleValuesFromAxisHeadersComponent(vals) {\n    const { editorConfig } = this.state;\n    const onePanel = EditorUtils.getActivePanel(editorConfig);\n    const myHeaders = onePanel.axisHeaders;\n    myHeaders.xaxis = EditorUtils.smartenQuotes(vals.xaxis);\n    // Ignore all headers, except xaxis\n    // myHeaders.yaxisleft = EditorUtils.smartenQuotes(vals.yaxisleft);\n    // myHeaders.yaxisright = EditorUtils.smartenQuotes(vals.yaxisright);\n    // myHeaders.zaxis = EditorUtils.smartenQuotes(vals.zaxis);\n    this.setState({\n      callSibyl: true,\n      updateMonteux: true,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      newPayload: false,\n      editorConfig,\n    });\n  }\n  // HANDLE VALUES FROM AXIS HEADERS COMPONENT ends\n\n  handleValuesFromNumberBoxComponent(vals) {\n    const { editorConfig } = this.state;\n    editorConfig.global.strings.numberBox = vals.val;\n    this.setState({\n      callSibyl: true,\n      updateMonteux: true,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      newPayload: false,\n      editorConfig,\n    });\n  }\n\n  // HANDLE MONTEUX IMPORT VALUES\n  // Sep'20: 2nd param deleted when axis headers recoupled\n  // fromMonteux is true for Monteux payload; false for paste-in\n  handleMonteuxImportValues(values) {\n    \n    // first check to be done ASAP is to update a possible deprecatede\n    // online subpreset (see presets-utilities.js for a rationale on that)\n    let { subPreset, hasBeenUpdated } =  updateOnlineSubPreset(\n      values.global.values.preset,\n      values.global.values.subPreset\n    );\n    if(hasBeenUpdated) {\n      // if the subpreset was a deprecated one, update it and \n      // override the old width\n      values.global.values.subPreset = subPreset;\n      values.global.values.width = globalAssets\n        .PresetPreferences\n        .economist\n        .online[subPreset]\n        .background\n        .outerbox.dimensions.width;\n    }\n\n    // Check validity flags in each 'panel' data.\n    const dataReport = EditorUtils.monteuxDataAreValid(values);\n    if (dataReport.goodData) {\n      // Now, reverse-engineer the object as exported...\n      // Call function in EditorConfigUtils to create a new\n      // editorConfig and populate it with the incoming values\n      //\n      // We need payload sub/preset, if they exist\n      const ppObj = EditorUtils.getPayloadPresetAndSubPresetIfAny(values);\n      // If ppObj is undefined, fcn will use default sub/Preset vals\n      const presetsConfig = this.getPresetsObjectByUser(false, ppObj);\n      // Before we create a new editorConfig object, extract\n      // existing headers (all panels) for comparison with incoming\n      // Comm'd out Sep'20 when axis headers recoupled\n      // const existingHeaders = EditorConfigUtils.extractSeriesHeaders(\n      //   this.state.editorConfig.panels,\n      // );\n      // Ditto filename:\n      // Comm'd out Sep'20 when axis headers recoupled\n      // const existingFileName = this.state.editorConfig.global.fileName.name;\n      // Now update potential editorConfig with payload data\n      const edConfigObj = EditorConfigUtils.updateEdConfigWithNewPayload(\n        values,\n        presetsConfig,\n      );\n      // Before we reset state.editorConfig...\n      // ... do we need to flag up a possible data restructure\n      // Set hard, Sep'20. See just below\n      const headersChanged = false;\n      // Incoming filename\n      // const payloadFileName = edConfigObj.global.fileName.name;\n      // Only check headers if data came from Sheet (i.e. not paste-in)\n      // and it's the SAME chart!\n      // Headers check comm'd out Sep'20, since axis headers are no longer decoupled from series headers\n      /*\n      if (fromMonteux && payloadFileName === existingFileName) {\n        // Have headers changed?\n        const payloadHeaders = EditorConfigUtils.extractSeriesHeaders(\n          edConfigObj.panels,\n        );\n        headersChanged = EditorConfigUtils.haveHeadersChanged(\n          existingHeaders,\n          payloadHeaders,\n        );\n      }\n      */\n      // Flag existingChart (set in EdConfigUtils.updateEdConfigWithNewPayload)\n      // is true for a re-sync; false if payload is a completely new\n      // dataset (with no existing global or metadata properties).\n      // If the dataset is completely new, Sibyl has to update\n      // Monteux with the default value that it has added to the\n      // data. If it's a resync, the callback is redundant\n      const updateMonteux = !edConfigObj.global.existingChart;\n      // If we successfully generated a new editorConfig...\n      if (edConfigObj.goodPayload) {\n        // Now check: are the data problematic?\n        // (I.e., they can process, but user needs to be nudged)\n        const isDataError = dataReport.problematicData;\n        const dataErrorString = dataReport.dataMsg;\n        this.setState({\n          callSibyl: true,\n          updateMonteux,\n          headersChanged,\n          isDataError,\n          dataErrorString,\n          newPayload: edConfigObj.global.newPayload,\n          editorConfig: edConfigObj,\n        });\n      }\n    } else {\n      // We need to fire an error alert at something...\n      this.setState({\n        callSibyl: false,\n        updateMonteux: false,\n        headersChanged: false,\n        isDataError: true,\n        dataErrorString: dataReport.dataMsg,\n      });\n    }\n  }\n  // HANDLE MONTEUX IMPORT VALUES ends\n\n  // HANDLE VALUES FROM STRINGS FOLD\n  // Values is an obj with props title, etc.\n  handleValuesFromStrings(values) {\n    // No data values? Bale out.\n    if (this.noData()) {\n      return;\n    }\n    // Fetch props from editorConfig\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    const { chartIndex } = edConfigGlobal;\n    const activePanel = editorConfig.panels[chartIndex];\n    const myStrings = edConfigGlobal.strings;\n    const vStrings = values.strings;\n    // The straightforward stuff...\n    myStrings.title = EditorUtils.smartenQuotes(vStrings.title);\n    myStrings.subtitle = EditorUtils.smartenQuotes(vStrings.subtitle);\n    myStrings.subsubtitle = EditorUtils.smartenQuotes(vStrings.subsubtitle);\n    myStrings.source = EditorUtils.smartenQuotes(vStrings.source);\n    myStrings.footnote = EditorUtils.smartenQuotes(vStrings.footnote);\n    // And number of footnotes\n    myStrings.footnoteCount = values.footnoteCount;\n    // Panel header\n    activePanel.panelHeader = EditorUtils.smartenQuotes(vStrings.panelHeader);\n    this.setState({\n      callSibyl: true,\n      updateMonteux: true,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      newPayload: false,\n      editorConfig,\n    });\n  }\n  // HANDLE VALUES FROM STRINGS FOLD ends\n\n  // FIELD VALUES FROM SCALES FOLD\n  // Called from handleValuesFromFoldsWrapper. Calls\n  // handler in ScaleCallbackUtils to update editorConfig, then\n  // sets state to force update and trigger chartside\n  fieldValuesFromScalesFold(values) {\n    // Get bearings:\n    const { editorConfig } = this.state;\n    const callSibyl = ScaleCallbackUtils.handleValuesFromScalesFold(\n      editorConfig,\n      values,\n    );\n    const updateMonteux = callSibyl;\n    this.setState(\n      {\n        callSibyl,\n        updateMonteux,\n        headersChanged: false,\n        isDataError: false,\n        dataErrorString: '',\n        editorConfig,\n        newPayload: false,\n      },\n      this.handleHeightChange,\n    );\n  }\n  // FIELD VALUES FROM SCALES FOLD ends\n\n  // MANUALLY SEND NEW HEIGHT TO MONTEUX\n  handleHeightChange() {\n    const { height } = document\n      .querySelector('.silver-bullet')\n      .getBoundingClientRect();\n\n    window.parent.postMessage(\n      {\n        type: 'RESIZE',\n        payload: {\n          height: height + 5,\n          origin: document.location.href,\n        },\n      },\n      '*',\n    );\n  }\n\n  handleValuesFromFooter(values) {\n    // I have date, dateIndex, section and sectionIndex\n    const { editorConfig } = this.state;\n    const fnObj = editorConfig.global.fileName;\n    const user = editorConfig.global.user;\n    fnObj.dates.dateIndex = values.dateIndex;\n    fnObj.sections.index = values.sectionIndex;\n    // Change filename (retaining file number)\n    // False flag: don't change section id\n    fnObj.name = Filename.updateFileName(fnObj, values.section, user);\n    this.setState({\n      callSibyl: false,\n      updateMonteux: true,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      editorConfig,\n    });\n  }\n\n  // *** EVENT HANDLERS END ***\n\n  // SIZE AND PRESET\n\n  // MAKE PRESET CONFIG ARRAY\n  // Called from makeHeaderJsx to assemble preset definitions. Object\n  // is passed, via Size, to Preset, where menu structure is assembled\n  makePresetConfigArray() {\n    // economist/eiu?\n    const user = this.state.editorConfig.global.user;\n    // Current preset\n    const { preset } = this.state.editorConfig.global.presets;\n    const pps = PresetPreferences[user];\n    // Result will be an array of preset definitions\n    const presetArray = [];\n    // Loop by preset definitions (print, espresso, etc.)\n    Object.keys(pps).forEach(key => {\n      // Exclude my comments (this needs to be deleted... or something... eventually)\n      if (key.search('__') < 0) {\n        const obj = pps[key];\n        // Init obj to return with preset name\n        // (All lower case; tab bar does uppercasing)\n        const tempObj = { parent: key };\n        tempObj.display = obj.display;\n        // Subpresets list:\n        const children = [];\n        Object.keys(obj).forEach(childKey => {\n          // Exclude metadata nodes\n          if (\n            !childKey.includes('__') &&\n            !childKey.includes('display') &&\n            !childKey.includes('sections')\n          ) {\n            const dims = obj[childKey].background.outerbox.dimensions;\n            const childO = { id: childKey, display: dims.display };\n            children.push(childO);\n          }\n        });\n        // So we have an array of child names.\n        // ( Presets with no subPreset: children = ['default'] )\n        tempObj.children = children;\n        // Flag for default hightlight on tab bar\n        tempObj.default = key === preset;\n        presetArray.push(tempObj);\n      }\n    });\n    return presetArray;\n  }\n  // MAKE PRESET CONFIG ARRAY ends\n\n  // HANDLE VALUES FROM PANELS\n  // So far, Sibyl can change only panel focus, and number of rows\n  handleValuesFromPanels(values) {\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    // Set flag to update chart if panel orientation (number of rows) changed:\n    const callSibyl = values.panels.rows !== edConfigGlobal.panelVals.rows;\n    const updateMonteux = callSibyl;\n    edConfigGlobal.panelVals = values.panels;\n    // chartIndex (from zero)\n    const chartIndex = values.panels.active;\n    edConfigGlobal.chartIndex = chartIndex;\n    this.setState({\n      callSibyl,\n      updateMonteux,\n      headersChanged: false,\n      isDataError: false,\n      dataErrorString: '',\n      newPayload: false,\n      editorConfig,\n    });\n  }\n  // HANDLE VALUES FROM PANELS ends\n\n  // CONFIG OBJECTS FOR CHILDREN\n\n  // MAKE SIZE AND PRESET CONFIG\n  // Called from makeSizeAndPresetJsx\n  makeSizeAndPresetConfig() {\n    // Fetch props\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    // const { chartIndex, user } = edConfigGlobal;\n    // const { user } = edConfigGlobal;\n    // const onePanel = editorConfig.panels[chartIndex];\n    const presetsConfig = this.getPresetsObjectByUser(true);\n    const preset = presetsConfig.presetName;\n    const subPreset = presetsConfig.subpresetName;\n    const presetDef = {\n      preset,\n      subPreset,\n      presetArray: this.makePresetConfigArray(),\n    };\n    // Size\n    const sizeDefs = edConfigGlobal.size;\n    // Recommended height removed, Sep'20\n    // const pps = PresetPreferences[user];\n    // Is there a size-specific error? Status message determines whether\n    // height or width\n    // As of Feb'21, errorStatus (from Chartside via App.js) never changes from default 'off'\n    // so none of this has any effect on size or preset components\n    const eStatus = this.props.errorStatus;\n    let widthError = false;\n    let heightError = false;\n    if (eStatus.isError && eStatus.fold === 'size') {\n      widthError = eStatus.status.includes('width');\n      heightError = eStatus.status.includes('height');\n    }\n\n    const spConfigObj = {\n      size: {\n        widthError,\n        heightError,\n        // defaultRecommendedHeight: sizeDefs.defaultRecommendedHeight,\n        height: sizeDefs.height,\n        maximumChartWidth: DefaultPreferences.other.maximumChartWidth,\n        // lockHeight: dims.lockHeight,\n        // lockWidth: dims.lockWidth,\n        // recommendedHeight,\n        width: sizeDefs.width,\n      },\n      preset: presetDef,\n      updateEditor: false,\n    };\n\n    return spConfigObj;\n  }\n  // MAKE SIZE AND PRESET CONFIG ends\n\n  makePanelsConfig() {\n    const pConfigObj = {};\n    // Fetch props from state\n    const { editorConfig } = this.state;\n    pConfigObj.values = editorConfig.global.panelVals;\n    return pConfigObj;\n  }\n\n  // MAKE ALERTS CONFIG\n  // Called from makeAlertsJsx\n  makeAlertsConfig() {\n    // Until Feb'21, errors could arrive from Chartside, via App. This\n    // is no longer the case. The only errors will concern data\n    // The flag is state.isDataError...\n    const errorStatus = {\n      showAlert: false,\n      alertString: '',\n    };\n    if (this.state.isDataError) {\n      // Data error bubbled up from Data\n      errorStatus.showAlert = true;\n      errorStatus.alertString = this.state.dataErrorString;\n    } else if (this.state.headersChanged) {\n      // Chart status from props\n      errorStatus.showAlert = true;\n      errorStatus.alertString =\n        'Data structure has changed. Are your axis headers still correct?';\n    }\n    //  else {\n    //   // Chart status from props\n    //   errorStatus.showAlert = this.props.errorStatus.isError;\n    //   errorStatus.alertString = this.props.errorStatus.status;\n    // }\n    return errorStatus;\n  }\n  // MAKE ALERTS CONFIG ends\n\n  // MAKE DESIGN FOLD CONFIG\n  // Called from makeFoldsJsx to create Design fold config object\n  makeDesignFoldConfig() {\n    const designConfig = {};\n    const { editorConfig } = this.state;\n    const cIndex = editorConfig.global.chartIndex;\n    const onePanel = editorConfig.panels[cIndex];\n    // CHART TYPE component needs a general en/disabled flag, as well\n    // as type and stacked. If scale is double or mixed, the entire\n    // chart type component is disabled\n    // NOTE: this is... awkward, anyway. I originally used type strings\n    // like 'stackedbar' and, for now at least, I'm stuck with them.\n    // But I need to strip out the prefix before sending the props\n    // down to the chartType component. Ideally, I'd use the simple\n    // type and the stacked boolean all the way down the tree...\n    let type = '';\n    let stacked = false;\n    let thermoDots = false;\n    let scatterLabels = false;\n    let scatterTrendline = false;\n    let typeDisabled = false;\n    // Does this do anything?\n    const onlyTableEnabled = false;\n    const { isDouble } = onePanel.scales.double;\n    const { isMixed } = onePanel.scales.mixed;\n    const isTableData = onePanel.chartData.isTable;\n    if (isDouble || isMixed || isTableData) {\n      typeDisabled = true;\n    } else {\n      const side = EditorUtils.getSide(onePanel);\n      stacked = onePanel.chartType[side].stacked;\n      type = onePanel.chartType[side].type;\n      thermoDots = onePanel.chartType[side].thermoDots;\n      scatterLabels = onePanel.chartType[side].scatterLabels;\n      scatterTrendline = onePanel.chartType[side].scatterTrendline;\n      if (stacked) {\n        type = type.replace('stacked', '');\n      }\n    }\n    // But there's an override for scatter labels. If there are too many\n    // datapoints, the scatter labels option is unavailable\n    let scattersCanLabel = true;\n    const maxScatterLabels =\n      DefaultPreferences.metadata.defaults.maxScatterLabels;\n    if (onePanel.chartData.dataArray.length > maxScatterLabels) {\n      scatterLabels = false;\n      scattersCanLabel = false;\n    }\n    // Log scale?\n    const isLog = onePanel.scales.left.log || onePanel.scales.right.log;\n    // Layer cake-ability flag\n    const { canLayerCake } = onePanel.chartData;\n    // Pies: no vals < 0\n    const minVal = Math.min(\n      onePanel.scales.left.actualMin,\n      onePanel.scales.right.actualMin,\n    );\n    const noPie = minVal < 0;\n    // For scatters, we need to know the number of series: number\n    // of headers, excluding categories column. However, that won't\n    // exist at startup, so...\n    let seriesCount = 0;\n    if (typeof onePanel.chartData.headers !== 'undefined') {\n      seriesCount = onePanel.chartData.headers.length - 1;\n    }\n    designConfig.chartType = {\n      canLayerCake,\n      noPie,\n      seriesCount,\n      stacked,\n      scattersCanLabel,\n      scatterLabels,\n      scatterTrendline,\n      thermoDots,\n      type,\n      typeDisabled,\n      onlyTableEnabled,\n      isLog,\n      // Pass in user to (temporarily, we hope) disable tables for EIU\n      user: editorConfig.global.user,\n    };\n    // BLOBS\n    // Blobs component needs chart type; a column index; and an\n    // array of series headers\n    // But disable if double/mixed scale... or if only one series\n    const three = 3;\n    let oneSeries = false;\n    const dArray = onePanel.chartData.dataArray;\n    if (dArray.length > 0) {\n      oneSeries = dArray[0].length < three;\n    } else {\n      oneSeries = true;\n    }\n    let blobsDisabled = isDouble || isMixed || oneSeries;\n    // Kludge for pie/table\n    // FIXME: when I refactor Editor\n    if (!blobsDisabled) {\n      blobsDisabled = this.setDisabledStatusByChartType();\n    }\n    const { dataArray } = onePanel.chartData;\n    let headers = ['None'];\n    if (dataArray.length > 0) {\n      headers = JSON.parse(JSON.stringify(dataArray[0]));\n      // Set Cat header to 'None', for blobs dropdown\n      headers[0] = 'None';\n    }\n    designConfig.blobs = {\n      column: onePanel.blobs.column,\n      disabled: blobsDisabled,\n      headers,\n      isRect: onePanel.blobs.isRect,\n    };\n    // LEGEND\n    // Legend component needs a header string, current val, max value\n    // Max is the number of series (count headers; drop cat-head)...\n    // ...except for PIES, which count the number of POINTS\n    // (i.e. 'rows' of data, excluding headers)\n    let max = headers.length - 1;\n    if (type.includes('pie')) {\n      max = dataArray.length - 1;\n    }\n    const legendDisabled = type === 'tabletable';\n    // const legendDisabled = this.setDisabledStatusByChartType();\n    designConfig.legend = {\n      columns: onePanel.legend.columns,\n      disabled: legendDisabled,\n      header: onePanel.legend.header,\n      max,\n    };\n    // Fold is always visible\n    designConfig.disabled = false;\n    // add info of the active panel, cols and total panels {active, rows, total}\n    designConfig.panels = editorConfig.global.panelVals;\n\n    return designConfig;\n  }\n  // MAKE DESIGN FOLD CONFIG ends\n\n  // MAKE FOOTER CONFIG\n  makeFooterConfig() {\n    const edConfigGlobal = this.state.editorConfig.global;\n    const fileNameObj = edConfigGlobal.fileName;\n    const dimensions = edConfigGlobal.size;\n    const { pngFactor, gifFactor } = DefaultPreferences.other;\n    // Colour space for Illustrator\n    const colourSpace = edConfigGlobal.colourSpace;\n    const config = {\n      colourSpace,\n      dimensions,\n      fileNameObj,\n      pngFactor,\n      gifFactor,\n    };\n    return config;\n  }\n  // MAKE FOOTER CONFIG ends\n\n  // CONFIG OBJECTS FOR CHILDREN END\n\n  // JSX CONSTRUCTORS\n\n  // MAKE SIZE AND PRESET JSX\n  makeSizeAndPresetJsx() {\n    const sizeAndPresetConfig = this.makeSizeAndPresetConfig();\n    return (\n      <SizeAndPreset\n        config={sizeAndPresetConfig}\n        onValuesToEditor={this.handleValuesFromSizeAndPreset}\n      />\n    );\n  }\n  // MAKE SIZE AND PRESET JSX ends\n\n  // MAKE PANELS JSX\n  makePanelsJsx() {\n    const panelsConfig = this.makePanelsConfig();\n    return (\n      <Panels\n        config={panelsConfig}\n        onValuesToEditor={this.handleValuesFromPanels}\n      />\n    );\n  }\n\n  // MAKE ALERTS JSX\n  makeAlertsJsx() {\n    const alertsConfig = this.makeAlertsConfig();\n    return <Alerts config={alertsConfig} />;\n  }\n\n  makeStringsConfig() {\n    const { editorConfig } = this.state;\n    const edConfigGlobal = editorConfig.global;\n    const cIndex = edConfigGlobal.chartIndex;\n    const onePanel = editorConfig.panels[cIndex];\n    return {\n      values: {\n        title: edConfigGlobal.strings.title,\n        subtitle: edConfigGlobal.strings.subtitle,\n        subsubtitle: edConfigGlobal.strings.subsubtitle,\n        source: edConfigGlobal.strings.source,\n        footnote: edConfigGlobal.strings.footnote,\n        panelHeader: onePanel.panelHeader,\n        panelTotal: edConfigGlobal.panelVals.total,\n        user: edConfigGlobal.user,\n      },\n    };\n  }\n\n  // MAKE STRINGS JSX\n  makeStringsJsx() {\n    const stringsConfig = this.makeStringsConfig();\n    return (\n      <Strings\n        config={stringsConfig}\n        onValuesToEditor={this.handleValuesFromStrings}\n      />\n    );\n  }\n  // MAKE STRINGS JSX ends\n\n  // SET DISABLED STATUS BY CHART TYPE\n  // Called from makeFoldsJsx, to determine whether\n  // Scales fold should be disabled.\n  // From makeDesignFoldConfig for Blobs and Legend\n  setDisabledStatusByChartType() {\n    const { editorConfig } = this.state;\n    const chartIndex = editorConfig.global.chartIndex;\n    const chartType = editorConfig.panels[chartIndex].chartType;\n    const typeString = `${chartType.left.type}${chartType.right.type}`;\n    let disabled = false;\n    // NOTE: another kludge working round the overallChartType issue\n    if (typeString.includes('pie') || typeString === 'tabletable') {\n      disabled = true;\n    }\n    return disabled;\n  }\n  // SET DISABLED STATUS ends BY CHART TYPE\n\n  // MAKE FOLDS JSX\n  makeFoldsJsx() {\n    const { editorConfig } = this.state;\n    // Design fold\n    const designConfig = this.makeDesignFoldConfig();    \n    // Scales fold\n    const disableFold = this.setDisabledStatusByChartType();\n    // Factors disabled, Oct'20. But still pass DP's factoring prefs\n    const scalesFoldConfig = ScaleConfigUtils.makeScalesFoldConfig(\n      editorConfig,\n      DefaultPreferences.other.factors,\n      this.props.doubleableStyles,\n      disableFold,\n      DefaultPreferences.other.maximumIncrements,\n    );\n    // Advanced fold\n    const advancedConfig = AdvancedFoldUtils.makeAdvancedFoldConfig(\n      editorConfig,\n      DefaultPreferences,\n    );\n    const foldsConfig = {\n      foldsList: this.props.folds,\n      designConfig,\n      scalesFoldConfig,\n      advancedConfig,\n      updateEditor: false,\n    };\n    return (\n      <FoldsWrapper\n        config={foldsConfig}\n        handleHeightChange={this.handleHeightChange}\n        onValuesToEditor={this.handleValuesFromFoldsWrapper}\n      />\n    );\n  }\n  // MAKE FOLDS JSX ends\n\n  makeFooterJsx() {\n    const footerConfig = this.makeFooterConfig();\n    return (\n      <FooterWrapper\n        config={footerConfig}\n        onValuesToEditor={this.handleValuesFromFooter}\n      />\n    );\n  }\n\n  makeMonteuxImportConfig() {\n    const dps = Object.assign({}, DefaultPreferences);\n    const requiredDataPrefs = {\n      timeFormats: dps.metadata.timeformats,\n      dayInMilliSeconds: dps.other.dayInMilliSeconds,\n      defaultChartType: dps.metadata.defaults.type,\n      forceTurn: dps.other.forceTurn,\n    };\n    return {\n      requiredDataPrefs,\n    };\n  }\n\n  makeMonteuxImportJsx() {\n    const monteuxConfig = this.makeMonteuxImportConfig();\n    return (\n      <MonteuxImport\n        config={monteuxConfig}\n        onValuesToEditor={this.handleMonteuxImportValues}\n      />\n    );\n  }\n\n  // JSX CONSTRUCTORS END\n\n  // ===========================================================================\n  // RENDER\n  render() {\n    return this.state.loadingAssets? <div style={{padding:'1rem'}}>Loading setup, please wait...</div> : \n      <div className=\"editor-wrapper\">\n        {this.makeFoldsJsx()}\n        {this.makeSizeAndPresetJsx()}\n        <div className=\"panels-outer-wrapper\">\n          {this.makePanelsJsx()}\n          {this.makeAlertsJsx()}\n        </div>\n        {this.makeStringsJsx()}\n        {this.makeFooterJsx()}\n        {this.makeMonteuxImportJsx()}\n      </div>\n  }\n}\n\nSilverEditor.propTypes = {\n  // comes from App.js buildEditor\n  user: PropTypes.string,\n  // Callback to index.js\n  onPassUpdatedConfig: PropTypes.func.isRequired,\n  // Fold definitions\n  folds: PropTypes.object,\n  // Double-able styles\n  doubleableStyles: PropTypes.array,\n  // Message from the Chart Side\n  // (not actually used)\n  errorStatus: PropTypes.object,\n};\n\nexport default SilverEditor;\n","// Footer component includes file-naming and SVG/PNG export\n// Child of Editor\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\n\nimport BaseLinePhotoIcon from '../icons/baseline-photo-icon';\nimport BaseLineCameraIcon from '../icons/baseline-camera-icon';\nimport InsertChartIcon from '../icons/insert-chart-icon';\n\n// SVG external functions\nimport Export from '../../export/export';\nimport SvgConfig from '../../export/svgconfig.json';\nimport * as Filename from '../utilities/filename';\n\nclass FooterWrapper extends Component {\n  // *** REACT LIFECYCLE STUFF ***\n\n  static get defaultProps() {\n    // Timeout is a suck-it-and-see delay\n    // before resizing for PNG/GIFexport\n    return {\n      timeout: 200,\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    // Events\n    this.handleSvgExportClick = this.handleSvgExportClick.bind(this);\n    this.handlePngExportClick = this.handlePngExportClick.bind(this);\n    this.handleGifExportClick = this.handleGifExportClick.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.handleSectionChange = this.handleSectionChange.bind(this);\n  }\n\n  // *** EVENT HANDLERS ***\n\n  // HANDLE SVG-EXPORT CLICK\n  // Calls external function in export.js\n  handleSvgExportClick() {\n    const colourSpace = this.props.config.colourSpace;\n    const fileName = this.props.config.fileNameObj.name;\n    const { dimensions } = this.props.config;\n    const exProps = {\n      colourSpace,\n      dimensions,\n      fileName,\n      isPng: false,\n      isSvg: true,\n      svgConfig: SvgConfig,\n    };\n    setTimeout(() => {\n      Export(exProps);\n    }, this.props.timeout);\n  }\n\n  // UPSIZE SVG\n  // Called from handlePngExportClick. Bumps up\n  // the size of the SVG so that exported PNG/GIF\n  // is larger than life.\n  // (Export.downsizeSvg returns to original size)\n  upsizeSvg(scaleBy, imgDims, exportCallback, ecArgs) {\n    const chart = d3.select('.silver-chartwrapper > svg');\n    // The img element scales from the centre, so when I scale the SVG\n    // gets shunted out of sight and I have to translate it back\n    // Half width and height of the img element\n    const halfWidth = imgDims.width / 2;\n    const halfHeight = imgDims.height / 2;\n    // It's initially at '0,0' which means, by some logic that I can only\n    // make sense of by drawing it, that I have to move it by\n    // (scaleBy - 1) times the halfWidth/Height\n    const moveFactor = scaleBy - 1;\n    const translateX = moveFactor * halfWidth;\n    const translateY = moveFactor * halfHeight;\n\n    // FIXME: PNG export doesn't work well on Safari (no scaling)\n    // https://stackoverflow.com/questions/48248512/svg-transform-rotate180-does-not-work-in-safari-11\n    chart.attr(\n      'transform',\n      `translate(${translateX}, ${translateY}) scale(${scaleBy}, ${scaleBy})`,\n    );\n    chart.attr('width', imgDims.width);\n    chart.attr('height', imgDims.height);\n    exportCallback(ecArgs);\n  }\n  // UPSIZE SVG ends\n\n  // HANDLE PNG-EXPORT CLICK\n  handlePngExportClick() {\n    const fileName = this.props.config.fileNameObj.name;\n    // Get the width to which we resize the PNG\n    const { dimensions } = this.props.config;\n    // const {pngWidth} = dimensions;\n    const scaleBy = this.props.config.pngFactor;\n    const pngDims = {\n      width: dimensions.width * scaleBy,\n      height: dimensions.height * scaleBy,\n    };\n    // We bump up the SVG, then send a callback to\n    // complete the process\n    const ecArguments = {\n      isSvg: false,\n      dimensions: pngDims,\n      fileName,\n      svgConfig: SvgConfig,\n      isPng: true,\n    };\n    // Bump up the SVG, after a moment\n    setTimeout(() => {\n      this.upsizeSvg(scaleBy, pngDims, Export, ecArguments);\n    }, this.props.timeout);\n    // Call Export's default function to create and download image\n    // (that sets a second, longer timeout)\n    // Export(false, pngDims, fileName, SvgConfig, true);\n  }\n  // HANDLE PNG-EXPORT CLICK ends\n\n  // HANDLE GIF-EXPORT CLICK\n  handleGifExportClick() {\n    const fileName = this.props.config.fileNameObj.name;\n    // Get the width to which we resize the PNG\n    const { dimensions } = this.props.config;\n    // const {pngWidth} = dimensions;\n\n    // Per EIU request GIF files are only scaled by 2x\n    const scaleBy = this.props.config.gifFactor;\n    const pngDims = {\n      width: dimensions.width * scaleBy,\n      height: dimensions.height * scaleBy,\n    };\n    // Bump up the SVG, after a moment\n    const ecArguments = {\n      isSvg: false,\n      dimensions: pngDims,\n      fileName,\n      svgConfig: SvgConfig,\n      isPng: false,\n    };\n    setTimeout(() => {\n      this.upsizeSvg(scaleBy, pngDims, Export, ecArguments);\n    }, this.props.timeout);\n    // Call Export's default function to create and download image\n    // (that sets a second, longer timeout)\n    // Export(false, pngDims, fileName, SvgConfig, false);\n  }\n  // HANDLE GIF-EXPORT CLICK ends\n\n  // HANDLE DATE CHANGE\n  handleDateChange({ target: { value } }) {\n    // Value is index of item selected\n    const fnObj = this.props.config.fileNameObj;\n    // We want yyyymmdd\n    const date = fnObj.dates.datesYmd[value];\n    // Get section\n    const section = fnObj.sections.list[fnObj.sections.index].code;\n    const vals = {\n      date,\n      dateIndex: value,\n      section,\n      sectionIndex: fnObj.sections.index,\n    };\n    this.props.onValuesToEditor(vals);\n  }\n  // HANDLE DATE CHANGE ends\n\n  // HANDLE SECTION CHANGE\n  handleSectionChange({ target: { value } }) {\n    // Value is index of item selected\n    const fnObj = this.props.config.fileNameObj;\n    // Selected element: we want code only\n    const section = this.props.config.fileNameObj.sections.list[value].code;\n    // Get date\n    const date = fnObj.dates.datesYmd[fnObj.dates.dateIndex];\n    const vals = {\n      date,\n      dateIndex: fnObj.dates.dateIndex,\n      section,\n      sectionIndex: value,\n    };\n    this.props.onValuesToEditor(vals);\n  }\n  // HANDLE SECTION CHANGE ends\n\n  getMdDateFromYyyyMmDd(ymd) {\n    // Month and day\n    const mNo = ymd.substr(4, 2);\n    const dNo = ymd.substr(6, 2);\n    const mNames = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n    let mmmDd = mNames[mNo - 1];\n    mmmDd = `${mmmDd} ${dNo}`;\n    return mmmDd;\n  }\n\n  // SET EXPORT BUTTONS DISABILITY\n  // Called from makeFooterJsx to determine whether export\n  // buttons are disabled because section is still set to default\n  // (but only if there are alternatives to the default)\n  // As of Aug'20, no longer called\n  setExportButtonsDisability(fnObj) {\n    let disabled = false;\n    const sectionLen = fnObj.sections.list.length;\n    const defaultSection = fnObj.sections.default;\n    const currentSection = Filename.getFilenameSectionId(fnObj.name);\n    if (sectionLen > 1) {\n      disabled = currentSection === defaultSection;\n    }\n    return disabled;\n  }\n  // SET EXPORT BUTTONS DISABILITY ends\n\n  // MAKE FOOTER JSX\n  // Assembles all JSX\n  makeFooterJsx() {\n    const config = this.props.config;\n    // fnObj has properties: dates, sections and fileName\n    const fnObj = Object.assign({}, config.fileNameObj);\n    // Get date element (yyyymmdd) from filename. Get its index\n    // in the array of yyymmdd dates\n    const fileDate = fnObj.name.split('_')[0];\n    const datesYmd = fnObj.dates.datesYmd;\n    const datesMd = fnObj.dates.datesMd;\n    // If the date isn't found, prefix it to the yyyymmdd and MMMdd arrays\n    if (!datesYmd.includes(fileDate)) {\n      datesYmd.unshift(fileDate);\n      const newMdDate = this.getMdDateFromYyyyMmDd(fileDate);\n      datesMd.unshift(newMdDate);\n    }\n    // Selection index in dropdown\n    const dateVal = datesYmd.indexOf(fileDate);\n    // Next is a hang-over. NOTE: kill dateIndex in Editor\n    // const dateVal = fnObj.dates.dateIndex;\n    //\n    // Populate dropdown\n    const dateArray = fnObj.dates.datesMd;\n    const dateOptions = dateArray.map((opt, index) => (\n      <option key={index} value={index}>\n        {opt}\n      </option>\n    ));\n    const sectionArray = fnObj.sections.list;\n    const sectionOptions = sectionArray.map((opt, index) => (\n      <option key={index} value={index}>\n        {opt.name}\n      </option>\n    ));\n    const sectionVal = fnObj.sections.index;\n    const fileName = fnObj.name;\n    const exportWrapperClass = 'export-wrapper';\n    // Comm'd out Aug'20: don't disable export buttons\n    // if section is still default\n    // let exportWrapperClass = 'export-wrapper';\n    // const disabled = this.setExportButtonsDisability(fnObj);\n    // if (disabled) {\n    //   exportWrapperClass = `${exportWrapperClass} export-wrapper-disabled`;\n    // }\n    const pngClass = 'silver-button export-png-div';\n    const gifClass = 'silver-button export-gif-div';\n    return (\n      <div className=\"footer-wrapper\">\n        <div className=\"filename-wrapper\">\n          <span className=\"filename-label-1\">Export</span>\n          <select\n            className=\"dropdown filename-date-select\"\n            value={dateVal}\n            onChange={this.handleDateChange}\n            required\n          >\n            {dateOptions}\n          </select>\n          <select\n            className=\"dropdown filename-section-select\"\n            value={sectionVal}\n            onChange={this.handleSectionChange}\n            required\n          >\n            {sectionOptions}\n          </select>\n          <span className=\"filename-label-3\">{fileName}</span>\n        </div>\n        <div className={exportWrapperClass}>\n          <button\n            type=\"button\"\n            className=\"silver-button export-svg-div\"\n            onClick={this.handleSvgExportClick}\n          >\n            <InsertChartIcon size={16} /> SVG\n          </button>\n          <button\n            type=\"button\"\n            className={pngClass}\n            onClick={this.handlePngExportClick}\n          >\n            <BaseLinePhotoIcon size={16} /> PNG\n          </button>\n          <button\n            type=\"button\"\n            className={gifClass}\n            onClick={this.handleGifExportClick}\n          >\n            <BaseLineCameraIcon size={16} /> GIF\n          </button>\n        </div>\n      </div>\n    );\n  }\n  // MAKE FOOTER JSX ends\n\n  // RENDER\n  render() {\n    return this.makeFooterJsx();\n  }\n}\n\nFooterWrapper.propTypes = {\n  config: PropTypes.object.isRequired,\n  onValuesToEditor: PropTypes.func,\n  timeout: PropTypes.number,\n};\n\nexport default FooterWrapper;\n","/*    Catcher for payload from Monteux\n      At mount, sets up listener for Monteux events: payloadHandler\n      This controls handlers to do initial triage of the payload.\n      Each panel's rawData will be passed to handlers in RawDataUtils\n      to be unpicked and polished\n      Triaged payload is finally sent to Editor\n*/\n\n// import React, { Component } from 'react';\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n// Monteux:\nimport Monteux from './monteux';\n\n// Utilities to filter raw data\nimport * as RawDataUtils from '../utilities/payload-utilities/rawdata-utilities';\n\nclass MonteuxImport extends Component {\n  constructor(props) {\n    super(props);\n    this.payloadHandler = this.payloadHandler.bind(this);\n  }\n\n  // COMPONENT DID MOUNT adds window event listener\n  componentDidMount() {\n    Monteux.listenForMessages(this.payloadHandler, 'monteux');\n  }\n\n  // UNPICK RAW DATA\n  // Called from unpickOnePanel. Passed the raw-data array,\n  // calls a top-level handler in RawDataUtils, where these\n  // actual values will be filtered and triaged, and date-series,\n  // in particular, will be made consistent\n  // Returns an object with the necessary data properties appended\n  unpickRawData(dataArray) {\n    // A few prefs that Editor dug out...\n    const dataPrefs = this.props.config.requiredDataPrefs;\n    // Restructure raw data; returns object with properties:\n    // dataArray, isValid, validityMsg, categories, timeFormats...\n    const dataObject = RawDataUtils.unpickData(dataArray, dataPrefs);\n    return dataObject;\n  }\n  // UNPICK RAW DATA ends\n\n  // UNPICK ONE PANEL\n  // Called from triagePayload to convert one panel's metadata and raw data values\n  unpickOnePanel(rawPanelObj) {\n    // Set up panel-specific object with transferred properties\n    const unpickedPanel = {\n      metaData: {\n        id: rawPanelObj.metaData.id,\n      },\n      // Linter won't allow 'data'\n      rawData: {\n        id: rawPanelObj.rawData.id,\n      },\n    };\n    // Convert undefineds into empty strings, etc\n    unpickedPanel.metaData.values = this.filterMonteuxValues(\n      rawPanelObj.metaData.values,\n    );\n    // The array of raw data gets some serious unpicking to yield other\n    // necessary properties...\n    unpickedPanel.rawData.values = this.unpickRawData(\n      rawPanelObj.rawData.values,\n    );\n    return unpickedPanel;\n  }\n  // UNPICK ONE PANEL ends\n\n  // FILTER MONTEUX VALUES\n  // Iterates through a set of metadata or global values, setting\n  // any element that is undefined to an empty string; converting\n  // 'TRUE' or 'FALSE' to boolean, and stringed numbers to numbers\n  filterMonteuxValues(values) {\n    for (const key in values) {\n      if (values.hasOwnProperty(key)) {\n        const thisVal = values[key];\n        if (typeof thisVal === 'undefined') {\n          values[key] = '';\n        } else if (typeof thisVal === 'string') {\n          if (isNaN(thisVal)) {\n            if (thisVal.toLowerCase() === 'true') {\n              values[key] = true;\n            } else if (thisVal.toLowerCase() === 'false') {\n              values[key] = false;\n            } else if (!isNaN(thisVal.replace(/,/g, ''))) {\n              values[key] = Number(thisVal.replace(/,/g, ''));\n            }\n            // Nastily, Number('') returns zero, so...\n          } else if (thisVal.length > 0) {\n            values[key] = Number(thisVal);\n          }\n        }\n      }\n    }\n    return values;\n  }\n  // FILTER MONTEUX VALUES ends\n\n  // TRIAGE PAYLOAD\n  // Called from payloadHandler. Passed the 'raw' payload object, it\n  // restructures and triages into a new, Editor-ready object...\n  triagePayload(rawLoad) {\n    // Set up the basic object structure, with\n    // properties that are easily transferred...\n    const triagedLoad = {\n      sheetId: rawLoad.id,\n      global: {\n        globalId: rawLoad.global.id,\n        // Global values: change undefined to empty string:\n        values: this.filterMonteuxValues(rawLoad.global.values),\n      },\n      // Panels (individual charts) need more love and attention...\n      panelArray: [],\n    };\n    const rawPanelArray = rawLoad.panelArray;\n    // Unpick individual panels, ignoring any that have no raw data\n    // A new data file will, of course, have none\n    triagedLoad.panelArray = rawPanelArray\n      .filter(onePanel => typeof onePanel.rawData.values !== 'undefined')\n      .map(onePanel => this.unpickOnePanel(onePanel));\n    return triagedLoad;\n  }\n  // TRIAGE PAYLOAD ends\n\n  // PAYLOAD HANDLER\n  // Handler for Monteux import event, tripped by Monteux event\n  // Argument is the payload enclosed in the event\n  payloadHandler(payload) {\n    // Put the payload through a series of filters...\n    const triagedPayload = this.triagePayload(payload);\n    // Check that we have some raw data to process\n    // (I.e. do nothing at startup or new, blank datasheet)\n    if (triagedPayload.panelArray.length > 0) {\n      // Dispatch to Editor, with 'payload' flag\n      this.props.onValuesToEditor(triagedPayload, true);\n    }\n  }\n  // PAYLOAD HANDLER ends\n\n  // RENDER\n  // Nothing rendered\n  render() {\n    return null;\n  }\n}\n\nMonteuxImport.propTypes = {\n  config: PropTypes.object,\n  // Callback of returned data\n  onValuesToEditor: PropTypes.func,\n};\n\nexport default MonteuxImport;\n","import { has } from 'lodash';\n\n\n/*\n    In Sept 2022 Online sub presets and its sizes are updated. Here the table of old ones and the\n    equivalences with the new ones (table contains displayed values, not the IDs):\n    \n    Old                 New\n    ----------------------------------------\n    Narrow              Slim\n    Full width          Full width\n    Espresso            Espresso\n    Instagram Story     Slime\n    DC Desktop          Full width\n    DC Mobile           Slim\n    Films               Films\n    ----------------------------------------\n\n    For those subPresets that persist (Espresso, Full width), they change its width as well.\n    so although they are named the same, old subPresets should update its width to the new one.\n    Internally, we need diferent IDs to diferentate old ones from new ones, since what follows\n    is the policy related to how the width will be overriden/maintained:\n    - old ones will get its width overriden to the new size.\n    - new ones will keep its width maintained.\n    Some charts have custom widths different from the default. For the charts with deprecated subPresets\n    this width will be overriden to the new default width, while charts created with the new subPresets\n    will keep any width value they could have.\n\n    @param  preset\n    @param  subpreset\n\n    @returns {subPreset, hasBeenUpdated} \n  */\nexport function updateOnlineSubPreset(preset, _subPreset) {\n    // table with old sub preset names and its equivalences\n    const conversionTable = {\n    'narrow': 'online-slim',\n    'wide': 'online-full-width',\n    'espresso': 'online-espresso',\n    'instagram-story': 'online-slim',\n    'daily-chart-desktop': 'online-full-width',\n    'daily-chart-mobile': 'online-slim',\n    'films': 'online-films'\n  };\n\n  let subPreset = (preset === 'online' && has(conversionTable, _subPreset)) ? \n    conversionTable[_subPreset] : \n    _subPreset;\n  \n  return {\n    subPreset, \n    hasBeenUpdated: _subPreset !== subPreset\n  };\n}","import React, { Component } from 'react';\nimport './App.css';\n\n// 2 dependents: Chartwrapper and Editor\nimport { iframeResizer } from './editor/utilities/iframe-resizer';\n// import SilverChartWrapper from '@economist/silver-chart';\n// Prev doesn't work, so I'm working with a copy of chartwrapper inside silver-bullet (as before)\nimport SilverChart from './chartwrapper';\nimport SilverEditor from './editor/editor';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Flag prevents first chart render, so that only Editor renders at mount...\n      canDoFirstChartRender: false,\n      // Flag to control whether chart-type component can render\n      chartTypeComponentCanRender: true,\n      // This is never tripped; but left in place in case\n      // error callbacks from Chartside are ever restored...\n      errorStatus: {\n        isError: false,\n        fold: '',\n        status: '',\n      },\n    };\n    // Bindings\n    this.handleConfigFromEditor = this.handleConfigFromEditor.bind(this);\n    this.handleErrorReport = this.handleErrorReport.bind(this);\n  }\n\n  // *** EVENT HANDLERS ***\n\n  componentDidMount() {\n    iframeResizer({ className: '.silver-bullet' });\n  }\n\n  // HANDLE CONFIG FROM EDITOR\n  // Callback from Editor, with updated config object\n  handleConfigFromEditor(config) {\n    // Set error status off (this does nothing now)\n    const errorStatus = {\n      isError: false,\n      fold: '',\n      status: '',\n    };\n    this.setState({\n      config,\n      // Since we have data from Editor, chart can be rendered\n      canDoFirstChartRender: true,\n      chartTypeComponentCanRender: true,\n      errorStatus,\n    });\n  }\n  // HANDLE CONFIG FROM EDITOR ends\n\n  // HANDLE ERROR REPORT\n  // Handler for chart-side errors\n  // No longer called (Feb'21)\n  handleErrorReport(errorObj) {\n    // Arg is an object with 'fold' and 'status' properties\n    // 'fold' is the inferential name of the component/fold that should look surprised\n    // 'status' is a message that may (or may not!) get displayed\n    const errorStatus = this.state.errorStatus;\n    errorStatus.fold = errorObj.fold;\n    errorStatus.status = errorObj.status;\n    errorStatus.isError = false;\n    if (errorStatus.status.length > 0) {\n      errorStatus.isError = true;\n      this.setState({\n        errorStatus,\n        chartTypeComponentCanRender: false,\n      });\n    }\n  }\n  // HANDLE ERROR REPORT ends\n\n  // *** EVENT HANDLERS END ***\n\n  // *** JSX ASSEMBLY: EDITOR AND CHARTWRAPPER ***\n\n  // BUILD EDITOR\n  buildEditor() {\n    const { user } = this.props;\n    // Although errorStatus is passed to Editor, it no longer does anything\n    return (\n      <SilverEditor\n        user={user}\n        onPassUpdatedConfig={this.handleConfigFromEditor}\n        errorStatus={this.state.errorStatus}\n      />\n    );\n  }\n  // BUILD EDITOR ends\n\n  // BUILD CHART WRAPPER\n  // Called from render to assemble JSX for ChartWrapper\n  // Passed prop is the config object\n  buildChartWrapper(config) {\n    // By default, on mount, return empty div (no chart)\n    let cJsx = <div className=\"chart-wrapper\"> </div>;\n    if (this.state.canDoFirstChartRender) {\n      // Props passed are:\n      //    config object;\n      //    callback to return status of inner box after other elements drawn\n      //      (this callback comes from Chartwrapper, prompted by type component);\n      //    flag to control whether that callback can be dispatched...\n      cJsx = (\n        <div className=\"chart-wrapper\">\n          <SilverChart\n            // Config object\n            config={config}\n            // Callback for any chart error removed, Feb'21\n            // onPassChartError={this.handleErrorReport}\n            chartTypeComponentCanRender={this.state.chartTypeComponentCanRender}\n          />\n        </div>\n      );\n    }\n    return cJsx;\n  }\n  // BUILD CHART WRAPPER ends\n\n  // RENDER\n  // A NOTE on structure. There's an outermost-wrapper to\n  // wrap *everything*. Then a family of siblings corresponding to\n  // components\n\n  render() {\n    const config = Object.assign({}, this.state.config);\n    const editor = this.buildEditor();\n    const chartWrapper = this.buildChartWrapper(config);\n\n    return (\n      <div className=\"silver-bullet\">\n        {editor}\n        {chartWrapper}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App user={process.env.REACT_APP_SIBYL_ORG} />,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}